require.config({"config": {
        "jsbuild":{"mage/adminhtml/wysiwyg/tiny_mce/plugins/magentovariable/editor_plugin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global tinymce, MagentovariablePlugin, varienGlobalEvents, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'Magento_Variable/js/config-directive-generator',\r\n    'Magento_Variable/js/custom-directive-generator',\r\n    'wysiwygAdapter',\r\n    'jquery',\r\n    'mage/adminhtml/tools'\r\n], function (configDirectiveGenerator, customDirectiveGenerator, wysiwyg, jQuery) {\r\n    return function (config) {\r\n        tinymce.create('tinymce.plugins.magentovariable', {\r\n\r\n            /**\r\n             * Initialize editor plugin.\r\n             *\r\n             * @param {tinymce.editor} editor - Editor instance that the plugin is initialized in.\r\n             */\r\n            init: function (editor) {\r\n                var self = this;\r\n\r\n                /**\r\n                 * Add new command to open variables selector slideout.\r\n                 */\r\n                editor.addCommand('openVariablesSlideout', function (commandConfig) {\r\n                    var selectedElement;\r\n\r\n                    if (commandConfig) {\r\n                        selectedElement = commandConfig.selectedElement;\r\n                    } else {\r\n                        selectedElement = tinymce.activeEditor.selection.getNode();\r\n                    }\r\n                    MagentovariablePlugin.setEditor(editor);\r\n                    MagentovariablePlugin.loadChooser(\r\n                        config.url,\r\n                        wysiwyg.getId(),\r\n                        selectedElement\r\n                    );\r\n                });\r\n\r\n                /**\r\n                 * Add button to the editor toolbar.\r\n                 */\r\n                editor.ui.registry.addIcon(\r\n                    'magentovariable',\r\n                    '<svg width=\"24\" height=\"24\" viewBox=\"0 0 32.000000 32.000000\" ' +\r\n                    'preserveAspectRatio=\"xMidYMid meet\"><g transform=\"translate(0.000000,32.000000) ' +\r\n                    'scale(0.100000,-0.100000)\" fill=\"#000000\" stroke=\"none\"><path d=\"M68 250 c-56 -44 -75 -136 -37 ' +\r\n                    '-184 27 -34 42 -33 23 2 -26 50 -9 129 38 179 26 28 10 30 -24 3z\"/><path d=\"M266 253 c5 -10 9 ' +\r\n                    '-41 9 -70 0 -42 -6 -60 -32 -97 -36 -51 -35 -56 7 -26 54 39 78 139 44 188 -18 26 -40 30 -28 5z\"/>' +\r\n                    '<path d=\"M128 223 c-15 -4 -15 -6 0 -33 16 -28 16 -30 -11 -58 -30 -31 -34 -42 -13 -42 8 0 17 11 ' +\r\n                    '20 25 4 14 11 25 16 25 5 0 12 -11 16 -25 6 -25 37 -35 49 -15 3 5 2 10 -3 10 -23 0 -20 44 5 76 ' +\r\n                    '25 34 25 34 4 34 -12 0 -20 -4 -17  -8 2 -4 0 -14 -5 -22 -7 -10 -12 -11 -15 -4 -10 25 -30 40 ' +\r\n                    '-46 37z\"/></g>' +\r\n                    '</svg>'\r\n                );\r\n                editor.ui.registry.addToggleButton('magentovariable', {\r\n                    icon: 'magentovariable',\r\n                    tooltip: jQuery.mage.__('Insert Variable'),\r\n\r\n                    /**\r\n                     * execute openVariablesSlideout for onAction callback\r\n                     */\r\n                    onAction: function () {\r\n                        editor.execCommand('openVariablesSlideout');\r\n                    },\r\n\r\n                    /**\r\n                     * Highlight or dismiss Insert Variable button when variable is selected or deselected.\r\n                     */\r\n                    onSetup: function (api) {\r\n                        /**\r\n                         * Toggle active state of Insert Variable button.\r\n                         *\r\n                         * @param {Object} e\r\n                         */\r\n                        var toggleVariableButton = function (e) {\r\n                            api.setActive(false);\r\n\r\n                            if (jQuery(e.target).hasClass('magento-variable')) {\r\n                                api.setActive(true);\r\n                            }\r\n                        };\r\n\r\n                        editor.on('click', toggleVariableButton);\r\n                        editor.on('change', toggleVariableButton);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Double click handler on the editor to handle dbl click on variable placeholder.\r\n                 */\r\n                editor.on('dblclick', function (evt) {\r\n                    if (jQuery(evt.target).hasClass('magento-variable')) {\r\n                        editor.selection.collapse(false);\r\n                        editor.execCommand('openVariablesSlideout', {\r\n                            ui: true,\r\n                            selectedElement: evt.target\r\n                        });\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to encode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygEncodeContent', function (content) {\r\n                    content = self.encodeVariables(content);\r\n\r\n                    return content;\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to decode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygDecodeContent', function (content) {\r\n                    content = self.decodeVariables(content);\r\n\r\n                    return content;\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Encode variables in content\r\n             *\r\n             * @param {String} content\r\n             * @returns {*}\r\n             */\r\n            encodeVariables: function (content) {\r\n                content = content.gsub(/\\{\\{config path=\\\"([^\\\"]+)\\\"\\}\\}/i, function (match) {\r\n                    var path = match[1],\r\n                        magentoVariables,\r\n                        imageHtml;\r\n\r\n                    magentoVariables = JSON.parse(config.placeholders);\r\n\r\n                    if (magentoVariables[match[1]] && magentoVariables[match[1]]['variable_type'] === 'default') {\r\n                        imageHtml = '<span id=\"%id\" class=\"magento-variable magento-placeholder mceNonEditable\">' +\r\n                            '%s</span>';\r\n                        imageHtml = imageHtml.replace('%s', magentoVariables[match[1]]['variable_name']);\r\n                    } else {\r\n                        imageHtml = '<span id=\"%id\" class=\"' +\r\n                            'magento-variable magento-placeholder magento-placeholder-error ' +\r\n                            'mceNonEditable' +\r\n                            '\">' +\r\n                            'Not found' +\r\n                            '</span>';\r\n                    }\r\n\r\n                    return imageHtml.replace('%id', Base64.idEncode(path));\r\n                });\r\n\r\n                content = content.gsub(/\\{\\{customVar code=([^\\}\\\"]+)\\}\\}/i, function (match) {\r\n                    var path = match[1],\r\n                        magentoVariables,\r\n                        imageHtml;\r\n\r\n                    magentoVariables = JSON.parse(config.placeholders);\r\n\r\n                    if (magentoVariables[match[1]] && magentoVariables[match[1]]['variable_type'] === 'custom') {\r\n                        imageHtml = '<span id=\"%id\" class=\"magento-variable magento-custom-var magento-placeholder ' +\r\n                            'mceNonEditable\">%s</span>';\r\n                        imageHtml = imageHtml.replace('%s', magentoVariables[match[1]]['variable_name']);\r\n                    } else {\r\n                        imageHtml = '<span id=\"%id\" class=\"' +\r\n                            'magento-variable magento-custom-var magento-placeholder ' +\r\n                            'magento-placeholder-error mceNonEditable' +\r\n                            '\">' +\r\n                            match[1] +\r\n                            '</span>';\r\n                    }\r\n\r\n                    return imageHtml.replace('%id', Base64.idEncode(path));\r\n                });\r\n\r\n                return content;\r\n            },\r\n\r\n            /**\r\n             * Decode variables in content.\r\n             *\r\n             * @param {String} content\r\n             * @returns {String}\r\n             */\r\n            decodeVariables: function (content) {\r\n                var doc = new DOMParser().parseFromString(content.replace(/&quot;/g, '&amp;quot;'), 'text/html'),\r\n                    returnval = '';\r\n\r\n                [].forEach.call(doc.querySelectorAll('span.magento-variable'), function (el) {\r\n                    var $el = jQuery(el);\r\n\r\n                    if ($el.hasClass('magento-custom-var')) {\r\n                        $el.replaceWith(\r\n                            customDirectiveGenerator.processConfig(\r\n                                Base64.idDecode(\r\n                                    $el.attr('id')\r\n                                )\r\n                            )\r\n                        );\r\n                    } else {\r\n                        $el.replaceWith(\r\n                            configDirectiveGenerator.processConfig(\r\n                                Base64.idDecode(\r\n                                    $el.attr('id')\r\n                                )\r\n                            )\r\n                        );\r\n                    }\r\n                });\r\n\r\n                returnval += doc.head ? doc.head.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n                returnval += doc.body ? doc.body.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n\r\n                return returnval ? returnval : content;\r\n            },\r\n\r\n            /**\r\n             * @return {Object}\r\n             */\r\n            getInfo: function () {\r\n                return {\r\n                    longname: 'Magento Variable Manager Plugin',\r\n                    author: 'Magento Core Team',\r\n                    authorurl: 'http://magentocommerce.com',\r\n                    infourl: 'http://magentocommerce.com',\r\n                    version: '1.0'\r\n                };\r\n            }\r\n        });\r\n\r\n        /**\r\n         * Register plugin\r\n         */\r\n        tinymce.PluginManager.add('magentovariable', tinymce.plugins.magentovariable);\r\n    };\r\n});\r\n","mage/adminhtml/wysiwyg/tiny_mce/plugins/magentowidget/editor_plugin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global tinymce, widgetTools, Base64 */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'wysiwygAdapter',\r\n    'mage/adminhtml/events',\r\n    'mage/adminhtml/wysiwyg/widget'\r\n], function (wysiwyg, varienGlobalEvents) {\r\n    return function (config) {\r\n        tinymce.create('tinymce.plugins.magentowidget', {\r\n\r\n            /**\r\n             * @param {tinymce.Editor} editor - Editor instance that the plugin is initialized in.\r\n             */\r\n            init: function (editor) {\r\n                var self = this;\r\n\r\n                this.activePlaceholder = null;\r\n\r\n                editor.addCommand('mceMagentowidget', function (img) {\r\n                    if (self.activePlaceholder) {\r\n                        img = self.activePlaceholder;\r\n                    }\r\n\r\n                    widgetTools.setActiveSelectedNode(img);\r\n                    widgetTools.openDialog(\r\n                        config['window_url'] + 'widget_target_id/' + editor.getElement().id + '/'\r\n                    );\r\n                });\r\n\r\n                // Register Widget plugin button\r\n                editor.ui.registry.addIcon(\r\n                    'magentowidget',\r\n                    '<svg width=\"24\" height=\"24\" viewBox=\"0 0 32.000000 32.000000\" ' +\r\n                    'preserveAspectRatio=\"xMidYMid meet\"> <g transform=\"translate(0.000000,32.000000) ' +\r\n                    'scale(0.100000,-0.100000)\" fill=\"#000000\" stroke=\"none\"> <path d=\"M130 290 c0 -5 13 -10 30 ' +\r\n                    '-10 22 0 28 -4 24 -15 -5 -11 2 -15 26 -15 21 0 30 -4 28 -12 -7 -20 -40 -22 -50 -4 -5 9 -14 16 ' +\r\n                    '-20 16 -6 0 -19 7 -28 15 -9 8 -25 12 -38 8 -33 -8 -27 -26 8 -21 34 5 40 -6 12 -21 -14 -7 -25 -6 ' +\r\n                    '-40 5 -12 8 -23 10 -27 5 -5 -8 88 -71 105 -71 3 0 29 14 58 31 l53 30 -23 18 c-13 10 -31 20 -40 ' +\r\n                    '24 -10 3 -18 11 -18 17 0 5 -13 10 -30 10 -16 0 -30 -4 -30 -10z m58 -82 c-3 -7 -15 -13 -28 -13 ' +\r\n                    '-13 0 -25 6 -27 13 -3 8 6 12 27 12 21 0 30 -4 28 -12z\"/> <path d=\"M30 151 l0 -60 61 -36 c33 ' +\r\n                    '-19 64 -35 69 -35 5 0 36 16 69 35 l61 36 0 60 0 61 -65 -37 -65 -36 -65 36 -65 37 0 -61z\"/> </g>' +\r\n                    '</svg>'\r\n                );\r\n                editor.ui.registry.addToggleButton('magentowidget', {\r\n                    icon: 'magentowidget',\r\n                    tooltip: jQuery.mage.__('Insert Widget'),\r\n\r\n                    /**\r\n                     * execute openVariablesSlideout for onAction callback\r\n                     */\r\n                    onAction: function () {\r\n                        editor.execCommand('mceMagentowidget');\r\n                    },\r\n\r\n                    /**\r\n                     * Add a node change handler, selects the button in the UI when a image is selected\r\n                     * @param {ToolbarToggleButtonInstanceApi} api\r\n                     */\r\n                    onSetup: function (api) {\r\n                        /**\r\n                         * NodeChange handler\r\n                         */\r\n                        editor.on('NodeChange', function (e) {\r\n                            var placeholder = e.element;\r\n\r\n                            if (self.isWidgetPlaceholderSelected(placeholder)) {\r\n                                widgetTools.setEditMode(true);\r\n                                api.setActive(true);\r\n                            } else {\r\n                                widgetTools.setEditMode(false);\r\n                                api.setActive(false);\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // Add a widget placeholder image double click callback\r\n                editor.on('dblClick', function (e) {\r\n                    var placeholder = e.target;\r\n\r\n                    if (self.isWidgetPlaceholderSelected(placeholder)) {\r\n                        widgetTools.setEditMode(true);\r\n                        this.execCommand('mceMagentowidget', null);\r\n                    }\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to encode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygEncodeContent', function (content) {\r\n                    content = self.encodeWidgets(self.decodeWidgets(content));\r\n                    content = self.removeDuplicateAncestorWidgetSpanElement(content);\r\n\r\n                    return content;\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when wysiwyg editor is about to decode its content\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygDecodeContent', function (content) {\r\n                    content = self.decodeWidgets(content);\r\n\r\n                    return content;\r\n                });\r\n\r\n                /**\r\n                 * Attach event handler for when popups associated with wysiwyg are about to be closed\r\n                 */\r\n                varienGlobalEvents.attachEventHandler('wysiwygClosePopups', function () {\r\n                    wysiwyg.closeEditorPopup('widget_window' + wysiwyg.getId());\r\n                });\r\n            },\r\n\r\n            /**\r\n             * @param {Object} placeholder - Contains the selected node\r\n             * @returns {Boolean}\r\n             */\r\n            isWidgetPlaceholderSelected: function (placeholder) {\r\n                var isSelected = false;\r\n\r\n                if (placeholder.nodeName &&\r\n                    (placeholder.nodeName === 'SPAN' || placeholder.nodeName === 'IMG') &&\r\n                    placeholder.className && placeholder.className.indexOf('magento-widget') !== -1\r\n                ) {\r\n                    this.activePlaceholder = placeholder;\r\n                    isSelected = true;\r\n                } else {\r\n                    this.activePlaceholder = null;\r\n                }\r\n\r\n                return isSelected;\r\n            },\r\n\r\n            /**\r\n             * Convert {{widget}} style syntax to image placeholder HTML\r\n             * @param {String} content\r\n             * @return {*}\r\n             */\r\n            encodeWidgets: function (content) {\r\n                return content.gsub(/\\{\\{widget([\\S\\s]*?)\\}\\}/i, function (match) {\r\n                    var attributes = wysiwyg.parseAttributesString(match[1]),\r\n                        imageSrc,\r\n                        imageHtml = '';\r\n\r\n                    if (attributes.type) {\r\n                        attributes.type = attributes.type.replace(/\\\\\\\\/g, '\\\\');\r\n                        imageSrc = config.placeholders[attributes.type];\r\n\r\n                        if (imageSrc) {\r\n                            imageHtml += '<span class=\"magento-placeholder magento-widget mceNonEditable\" ' +\r\n                                'contenteditable=\"false\">';\r\n                        } else {\r\n                            imageSrc = config['error_image_url'];\r\n                            imageHtml += '<span ' +\r\n                                'class=\"magento-placeholder magento-placeholder-error magento-widget mceNonEditable\" ' +\r\n                                'contenteditable=\"false\">';\r\n                        }\r\n\r\n                        imageHtml += '<img';\r\n                        imageHtml += ' id=\"' + Base64.idEncode(match[0]) + '\"';\r\n                        imageHtml += ' src=\"' + imageSrc + '\"';\r\n                        imageHtml += ' />';\r\n\r\n                        if (config.types[attributes.type]) {\r\n                            imageHtml += config.types[attributes.type];\r\n                        }\r\n\r\n                        imageHtml += '</span>';\r\n\r\n                        return imageHtml;\r\n                    }\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Convert image placeholder HTML to {{widget}} style syntax\r\n             * @param {String} content\r\n             * @return {*}\r\n             */\r\n            decodeWidgets: function (content) {\r\n                return content.gsub(\r\n                    /(<span class=\"[^\"]*magento-widget[^\"]*\"[^>]*>)?<img([^>]+id=\"[^>]+)>(([^>]*)<\\/span>)?/i,\r\n                    function (match) {\r\n                        var attributes = wysiwyg.parseAttributesString(match[2]),\r\n                            widgetCode,\r\n                            result = match[0];\r\n\r\n                        if (attributes.id) {\r\n                            try {\r\n                                widgetCode = Base64.idDecode(attributes.id);\r\n                            } catch (e) {\r\n                                // Ignore and continue.\r\n                            }\r\n\r\n                            if (widgetCode && widgetCode.indexOf('{{widget') !== -1) {\r\n                                result = widgetCode;\r\n                            }\r\n                        }\r\n\r\n                        return result;\r\n                    }\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Tinymce has strange behavior with html and this removes one of its side-effects\r\n             * @param {String} content\r\n             * @return {String}\r\n             */\r\n            removeDuplicateAncestorWidgetSpanElement: function (content) {\r\n                var parser, doc, returnval = '';\r\n\r\n                if (!window.DOMParser) {\r\n                    return content;\r\n                }\r\n\r\n                parser = new DOMParser();\r\n                doc = parser.parseFromString(content.replace(/&quot;/g, '&amp;quot;'), 'text/html');\r\n\r\n                [].forEach.call(doc.querySelectorAll('.magento-widget'), function (widgetEl) {\r\n                    var widgetChildEl = widgetEl.querySelector('.magento-widget');\r\n\r\n                    if (!widgetChildEl) {\r\n                        return;\r\n                    }\r\n\r\n                    [].forEach.call(widgetEl.childNodes, function (el) {\r\n                        widgetEl.parentNode.insertBefore(el, widgetEl);\r\n                    });\r\n\r\n                    widgetEl.parentNode.removeChild(widgetEl);\r\n                });\r\n\r\n                returnval += doc.head ? doc.head.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n                returnval += doc.body ? doc.body.innerHTML.replace(/&amp;quot;/g, '&quot;') : '';\r\n\r\n                return returnval ? returnval : content;\r\n            },\r\n\r\n            /**\r\n             * @return {Object}\r\n             */\r\n            getInfo: function () {\r\n                return {\r\n                    longname: 'Magento Widget Manager Plugin',\r\n                    author: 'Magento Core Team',\r\n                    authorurl: 'http://magentocommerce.com',\r\n                    infourl: 'http://magentocommerce.com',\r\n                    version: '1.0'\r\n                };\r\n            }\r\n        });\r\n\r\n        // Register plugin\r\n        tinymce.PluginManager.add('magentowidget', tinymce.plugins.magentowidget);\r\n    };\r\n});\r\n","mage/apply/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    './scripts'\r\n], function (_, $, processScripts) {\r\n    'use strict';\r\n\r\n    var dataAttr = 'data-mage-init',\r\n        nodeSelector = '[' + dataAttr + ']';\r\n\r\n    /**\r\n     * Initializes components assigned to a specified element via data-* attribute.\r\n     *\r\n     * @param {HTMLElement} el - Element to initialize components with.\r\n     * @param {Object|String} config - Initial components' config.\r\n     * @param {String} component - Components' path.\r\n     */\r\n    function init(el, config, component) {\r\n        require([component], function (fn) {\r\n            var $el;\r\n\r\n            if (typeof fn === 'object') {\r\n                fn = fn[component].bind(fn);\r\n            }\r\n\r\n            if (_.isFunction(fn)) {\r\n                fn = fn.bind(null, config, el);\r\n            } else {\r\n                $el = $(el);\r\n\r\n                if ($el[component]) {\r\n                    // eslint-disable-next-line jquery-no-bind-unbind\r\n                    fn = $el[component].bind($el, config);\r\n                }\r\n            }\r\n            // Init module in separate task to prevent blocking main thread.\r\n            setTimeout(fn);\r\n        }, function (error) {\r\n            if ('console' in window && typeof window.console.error === 'function') {\r\n                console.error(error);\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses elements 'data-mage-init' attribute as a valid JSON data.\r\n     * Note: data-mage-init attribute will be removed.\r\n     *\r\n     * @param {HTMLElement} el - Element whose attribute should be parsed.\r\n     * @returns {Object}\r\n     */\r\n    function getData(el) {\r\n        var data = el.getAttribute(dataAttr);\r\n\r\n        el.removeAttribute(dataAttr);\r\n\r\n        return {\r\n            el: el,\r\n            data: JSON.parse(data)\r\n        };\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initializes components assigned to HTML elements via [data-mage-init].\r\n         *\r\n         * @example Sample 'data-mage-init' declaration.\r\n         *      data-mage-init='{\"path/to/component\": {\"foo\": \"bar\"}}'\r\n         */\r\n        apply: function (context) {\r\n            var virtuals = processScripts(!context ? document : context),\r\n                nodes = document.querySelectorAll(nodeSelector);\r\n\r\n            _.toArray(nodes)\r\n                .map(getData)\r\n                .concat(virtuals)\r\n                .forEach(function (itemContainer) {\r\n                    var element = itemContainer.el;\r\n\r\n                    _.each(itemContainer.data, function (obj, key) {\r\n                            if (obj.mixins) {\r\n                                require(obj.mixins, function () { //eslint-disable-line max-nested-callbacks\r\n                                    var i, len;\r\n\r\n                                    for (i = 0, len = arguments.length; i < len; i++) {\r\n                                        $.extend(\r\n                                            true,\r\n                                            itemContainer.data[key],\r\n                                            arguments[i](itemContainer.data[key], element)\r\n                                        );\r\n                                    }\r\n\r\n                                    delete obj.mixins;\r\n                                    init.call(null, element, obj, key);\r\n                                });\r\n                            } else {\r\n                                init.call(null, element, obj, key);\r\n                            }\r\n\r\n                        }\r\n                    );\r\n\r\n                });\r\n        },\r\n        applyFor: init\r\n    };\r\n});\r\n","mage/apply/scripts.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var scriptSelector = 'script[type=\"text/x-magento-init\"]',\r\n        dataAttr = 'data-mage-init',\r\n        virtuals = [];\r\n\r\n    /**\r\n     * Adds components to the virtual list.\r\n     *\r\n     * @param {Object} components\r\n     */\r\n    function addVirtual(components) {\r\n        virtuals.push({\r\n            el: false,\r\n            data: components\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges provided data with a current data\r\n     * of a elements' \"data-mage-init\" attribute.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {HTMLElement} elem - Element whose data should be modified.\r\n     */\r\n    function setData(components, elem) {\r\n        var data = elem.getAttribute(dataAttr);\r\n\r\n        data = data ? JSON.parse(data) : {};\r\n        _.each(components, function (obj, key) {\r\n            if (_.has(obj, 'mixins')) {\r\n                data[key] = data[key] || {};\r\n                data[key].mixins = data[key].mixins || [];\r\n                data[key].mixins = data[key].mixins.concat(obj.mixins);\r\n                delete obj.mixins;\r\n            }\r\n        });\r\n\r\n        data = $.extend(true, data, components);\r\n        data = JSON.stringify(data);\r\n        elem.setAttribute(dataAttr, data);\r\n    }\r\n\r\n    /**\r\n     * Search for the elements by privded selector and extends theirs data.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {String} selector - Selector for the elements.\r\n     */\r\n    function processElems(components, selector) {\r\n        var elems,\r\n            iterator;\r\n\r\n        if (selector === '*') {\r\n            addVirtual(components);\r\n\r\n            return;\r\n        }\r\n\r\n        elems = document.querySelectorAll(selector);\r\n        iterator = setData.bind(null, components);\r\n\r\n        _.toArray(elems).forEach(iterator);\r\n    }\r\n\r\n    /**\r\n     * Parses content of a provided script node.\r\n     * Note: node will be removed from DOM.\r\n     *\r\n     * @param {HTMLScriptElement} node - Node to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function getNodeData(node) {\r\n        var data = node.textContent;\r\n\r\n        node.parentNode.removeChild(node);\r\n\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Parses 'script' tags with a custom type attribute and moves it's data\r\n     * to a 'data-mage-init' attribute of an element found by provided selector.\r\n     * Note: All found script nodes will be removed from DOM.\r\n     *\r\n     * @returns {Array} An array of components not assigned to the specific element.\r\n     *\r\n     * @example Sample declaration.\r\n     *      <script type=\"text/x-magento-init\">\r\n     *          {\r\n     *              \"body\": {\r\n     *                  \"path/to/component\": {\"foo\": \"bar\"}\r\n     *              }\r\n     *          }\r\n     *      </script>\r\n     *\r\n     * @example Providing data without selector.\r\n     *      {\r\n     *          \"*\": {\r\n     *              \"path/to/component\": {\"bar\": \"baz\"}\r\n     *          }\r\n     *      }\r\n     */\r\n    return function () {\r\n        var nodes = document.querySelectorAll(scriptSelector);\r\n\r\n        _.toArray(nodes)\r\n            .map(getNodeData)\r\n            .forEach(function (item) {\r\n                _.each(item, processElems);\r\n            });\r\n\r\n        return virtuals.splice(0, virtuals.length);\r\n    };\r\n});\r\n","mage/backend/action-link.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.actionLink', {\r\n        /**\r\n         * Button creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind handler on button click\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            var keyCode = $.ui.keyCode;\r\n\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                mousedown: function (e) {\r\n                    this._stopPropogation(e);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                mouseup: function (e) {\r\n                    this._stopPropogation(e);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                click: function (e) {\r\n                    this._stopPropogation(e);\r\n                    this._triggerEvent();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                keydown: function (e) {\r\n                    switch (e.keyCode) {\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._stopPropogation(e);\r\n                            this._triggerEvent();\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                keyup: function (e) {\r\n                    switch (e.keyCode) {\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._stopPropogation(e);\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @private\r\n         */\r\n        _stopPropogation: function (e) {\r\n            e.stopImmediatePropagation();\r\n            e.preventDefault();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _triggerEvent: function () {\r\n            $(this.options.related || this.element)\r\n                .trigger(this.options.event, this.options.eventData ? [this.options.eventData] : [{}]);\r\n        }\r\n    });\r\n\r\n    return $.mage.actionLink;\r\n});\r\n","mage/backend/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY */\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main',\r\n    'mage/backend/notification',\r\n    'Magento_Ui/js/lib/knockout/bootstrap',\r\n    'mage/mage',\r\n    'mage/translate'\r\n], function ($, mage, notification) {\r\n    'use strict';\r\n\r\n    var bootstrap;\r\n\r\n    $.ajaxSetup({\r\n        /*\r\n         * @type {string}\r\n         */\r\n        type: 'POST',\r\n\r\n        /**\r\n         * Ajax before send callback.\r\n         *\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         * @param {Object} settings\r\n         */\r\n        beforeSend: function (jqXHR, settings) {\r\n            var formKey = typeof FORM_KEY !== 'undefined' ? FORM_KEY : null;\r\n\r\n            if (!settings.url.match(new RegExp('[?&]isAjax=true',''))) {\r\n                settings.url = settings.url.match(\r\n                    new RegExp('\\\\?', 'g')) ?\r\n                    settings.url + '&isAjax=true' :\r\n                    settings.url + '?isAjax=true';\r\n            }\r\n\r\n            if (!settings.data) {\r\n                settings.data = {\r\n                    'form_key': formKey\r\n                };\r\n            } else if (typeof settings.data === 'string' &&\r\n                settings.data.indexOf('form_key=') === -1) {\r\n                settings.data += '&' + $.param({\r\n                    'form_key': formKey\r\n                });\r\n            } else if ($.isPlainObject(settings.data) && !settings.data['form_key']) {\r\n                settings.data['form_key'] = formKey;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Ajax complete callback.\r\n         *\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         */\r\n        complete: function (jqXHR) {\r\n            var jsonObject;\r\n\r\n            if (jqXHR.readyState === 4) {\r\n                try {\r\n                    jsonObject = JSON.parse(jqXHR.responseText);\r\n\r\n                    if (jsonObject.ajaxExpired && jsonObject.ajaxRedirect) { //eslint-disable-line max-depth\r\n                        window.location.replace(jsonObject.ajaxRedirect);\r\n                    }\r\n                } catch (e) {}\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Error callback.\r\n         */\r\n        error: function () {\r\n            $('body').notification('clear')\r\n                .notification('add', {\r\n                    error: true,\r\n                    message: $.mage.__(\r\n                        'A technical problem with the server created an error. ' +\r\n                        'Try again to continue what you were doing. If the problem persists, try again later.'\r\n                    ),\r\n\r\n                    /**\r\n                     * @param {String} message\r\n                     */\r\n                    insertMethod: function (message) {\r\n                        var $wrapper = $('<div></div>').html(message);\r\n\r\n                        $('.page-main-actions').after($wrapper);\r\n                    }\r\n                });\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Bootstrap application.\r\n     */\r\n    bootstrap = function () {\r\n        /**\r\n         * Init all components defined via data-mage-init attribute\r\n         * and subscribe init action on contentUpdated event\r\n         */\r\n        mage.apply();\r\n\r\n        /*\r\n         * Initialization of notification widget\r\n         */\r\n        notification({}, $('body'));\r\n    };\r\n\r\n    $(bootstrap);\r\n});\r\n","mage/backend/button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('ui.button', $.ui.button, {\r\n        options: {\r\n            eventData: {},\r\n            waitTillResolved: true\r\n        },\r\n\r\n        /**\r\n         * Button creation.\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            if (this.options.event) {\r\n                this.options.target = this.options.target || this.element;\r\n                this._bind();\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Bind handler on button click.\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.element\r\n                .off('click.button')\r\n                .on('click.button', $.proxy(this._click, this));\r\n        },\r\n\r\n        /**\r\n         * Button click handler.\r\n         * @protected\r\n         */\r\n        _click: function () {\r\n            var options = this.options;\r\n\r\n            $(options.target).trigger(options.event, [options.eventData]);\r\n        }\r\n    });\r\n\r\n    return $.ui.button;\r\n});\r\n","mage/backend/editablemultiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/* global EditableMultiselect */\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery/editableMultiselect/js/jquery.editable',\r\n    'jquery/editableMultiselect/js/jquery.multiselect'\r\n], function ($, alert, confirm) {\r\n    /**\r\n     * Editable multiselect wrapper for multiselects\r\n     * This class is defined in global scope ('var' is not needed).\r\n     *\r\n     *  @param {Object} settings - settings object.\r\n     *  @param {String} settings.add_button_caption - caption of the 'Add New Value' button\r\n     *  @param {String} settings.new_url - URL to which new request has to be submitted\r\n     *  @param {String} settings.save_url - URL to which save request has to be submitted\r\n     *  @param {String} settings.delete_url - URL to which delete request has to be submitted\r\n     *  @param {String} settings.delete_confirm_message - confirmation message that is shown to user during\r\n     *      delete operation\r\n     *  @param {String} settings.target_select_id - HTML ID of target select element\r\n     *  @param {Hash} settings.submit_data - extra parameters to send with new/edit/delete requests\r\n     *  @param {String} settings.entity_value_name - name of the request parameter that represents select option text\r\n     *  @param {String} settings.entity_id_name - name of the request parameter that represents select option value\r\n     *  @param {Boolean} settings.is_entry_editable - flag that shows if user can add/edit/remove data\r\n     *\r\n     * @constructor\r\n     */\r\n    window.EditableMultiselect = function (settings) {\r\n\r\n        this.settings = settings || {};\r\n        this.addButtonCaption = this.settings['add_button_caption'] || 'Add new value';\r\n        this.newUrl = this.settings['new_url'];\r\n        this.saveUrl = this.settings['save_url'];\r\n        this.deleteUrl = this.settings['delete_url'];\r\n        this.deleteConfirmMessage = this.settings['delete_confirm_message'];\r\n        this.targetSelectId = this.settings['target_select_id'];\r\n        this.submitData = this.settings['submit_data'] || {};\r\n        this.entityIdName = this.settings['entity_id_name'] || 'entity_id';\r\n        this.entityValueName = this.settings['entity_value_name'] || 'entity_value';\r\n        this.isEntityEditable = this.settings['is_entity_editable'] || false;\r\n\r\n        /**\r\n         * Initialize editable multiselect (make it visible in UI)\r\n         */\r\n        EditableMultiselect.prototype.init = function () {\r\n            var self = this,\r\n                mselectOptions = {\r\n                    addText: this.addButtonCaption,\r\n\r\n                    /**\r\n                     * @param {*} value\r\n                     * @param {*} options\r\n                     */\r\n                    mselectInputSubmitCallback: function (value, options) {\r\n                        self.createEntity(value, options);\r\n                    }\r\n                },\r\n                mselectList;\r\n\r\n            if (!this.isEntityEditable) {\r\n                // Override default layout of editable multiselect\r\n                mselectOptions.layout = '<section class=\"block %mselectListClass%\">' +\r\n                    '<div class=\"block-content\"><div class=\"%mselectItemsWrapperClass%\">' +\r\n                    '%items%' +\r\n                    '</div></div>' +\r\n                    '<div class=\"%mselectInputContainerClass%\">' +\r\n                    '<input type=\"text\" class=\"%mselectInputClass%\" title=\"%inputTitle%\"/>' +\r\n                    '<span class=\"%mselectButtonCancelClass%\" title=\"%cancelText%\"></span>' +\r\n                    '<span class=\"%mselectButtonSaveClass%\" title=\"Add\"></span>' +\r\n                    '</div>' +\r\n                    '</section>';\r\n            }\r\n\r\n            $('#' + this.targetSelectId).multiselect(mselectOptions);\r\n\r\n            // Make multiselect editable if needed\r\n            if (this.isEntityEditable) {\r\n                this.makeMultiselectEditable();\r\n\r\n                // Root element of HTML markup that represents select element in UI\r\n                mselectList = $('#' + this.targetSelectId).next();\r\n                this.attachEventsToControls(mselectList);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Attach required event handlers to control elements of editable multiselect\r\n         *\r\n         * @param {Object} mselectList\r\n         */\r\n        EditableMultiselect.prototype.attachEventsToControls = function (mselectList) {\r\n            mselectList.on('click.mselect-delete', '.mselect-delete', {\r\n                container: this\r\n            }, function (event) {\r\n                // Pass the clicked button to container\r\n                event.data.container.deleteEntity({\r\n                    'delete_button': this\r\n                });\r\n            });\r\n\r\n            mselectList.on('click.mselect-checked', '.mselect-list-item input', {\r\n                container: this\r\n            }, function (event) {\r\n                var el = $(this),\r\n                    checkedClassName = 'mselect-checked';\r\n\r\n                el[el.is(':checked') ? 'addClass' : 'removeClass'](checkedClassName);\r\n                event.data.container.makeMultiselectEditable();\r\n            });\r\n\r\n            mselectList.on('click.mselect-edit', '.mselect-edit', {\r\n                container: this\r\n            }, function (event) {\r\n                event.data.container.makeMultiselectEditable();\r\n                $(this).parent().find('label span').trigger('dblclick');\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Make multiselect editable\r\n         */\r\n        EditableMultiselect.prototype.makeMultiselectEditable = function () {\r\n            var entityIdName = this.entityIdName,\r\n                entityValueName = this.entityValueName,\r\n                selectList = $('#' + this.targetSelectId).next();\r\n\r\n            selectList.find('.mselect-list-item:not(.mselect-list-item-not-editable) label span').editable(this.saveUrl,\r\n            {\r\n                type: 'text',\r\n                submit: '<button class=\"mselect-save\" title=\"Save\" type=\"submit\"></button>',\r\n                cancel: '<span class=\"mselect-cancel\" title=\"Cancel\"></span>',\r\n                event: 'dblclick',\r\n                placeholder: '',\r\n\r\n                /**\r\n                 * Is checked.\r\n                 */\r\n                isChecked: function () {\r\n                    var that = $(this),\r\n                        checked;\r\n\r\n                    if (!that.closest('.mselect-list-item').hasClass('mselect-disabled')) {\r\n                        checked = that.parent().find('[type=checkbox]').prop('disabled');\r\n                        that.parent().find('[type=checkbox]').prop({\r\n                            disabled: !checked\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {*} value\r\n                 * @param {Object} sett\r\n                 * @return {*}\r\n                 */\r\n                data: function (value, sett) {\r\n                    var retval;\r\n\r\n                    sett.isChecked.apply(this, [sett]);\r\n\r\n                    if (typeof value === 'string') {\r\n                        retval = value.unescapeHTML();\r\n\r\n                        return retval;\r\n                    }\r\n\r\n                    return value;\r\n                },\r\n                submitdata: this.submitData,\r\n                onblur: 'cancel',\r\n                name: entityValueName,\r\n                ajaxoptions: {\r\n                    dataType: 'json'\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} sett\r\n                 * @param {*} original\r\n                 */\r\n                onsubmit: function (sett, original) {\r\n                    var select = $(original).closest('.mselect-list').prev(),\r\n                        current = $(original).closest('.mselect-list-item').index(),\r\n                        entityId = select.find('option').eq(current).val(),\r\n                        entityInfo = {};\r\n\r\n                    entityInfo[entityIdName] = entityId;\r\n                    sett.submitdata = $.extend(sett.submitdata || {}, entityInfo);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} result\r\n                 * @param {Object} sett\r\n                 */\r\n                callback: function (result, sett) {\r\n                    var select, current;\r\n\r\n                    sett.isChecked.apply(this, [sett]);\r\n                    select = $(this).closest('.mselect-list').prev();\r\n                    current = $(this).closest('.mselect-list-item').index();\r\n\r\n                    if (result.success) {\r\n                        if (typeof result[entityValueName] === 'string') {\r\n                            select.find('option').eq(current).val(result[entityIdName]).text(result[entityValueName]);\r\n                            $(this).html(result[entityValueName].escapeHTML());\r\n                        }\r\n                    } else {\r\n                        alert({\r\n                            content: result['error_message']\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Callback function that is called when admin adds new value to select\r\n         *\r\n         * @param {*} value\r\n         * @param {Object} options - list of settings of multiselect\r\n         */\r\n        EditableMultiselect.prototype.createEntity = function (value, options) {\r\n            var select, entityIdName, entityValueName, entityInfo, postData, ajaxOptions;\r\n\r\n            if (!value) {\r\n                return;\r\n            }\r\n\r\n            select = $('#' + this.targetSelectId),\r\n            entityIdName = this.entityIdName,\r\n            entityValueName = this.entityValueName,\r\n            entityInfo = {};\r\n            entityInfo[entityIdName] = null;\r\n            entityInfo[entityValueName] = value;\r\n\r\n            postData = $.extend(entityInfo, this.submitData);\r\n\r\n            ajaxOptions = {\r\n                type: 'POST',\r\n                data: postData,\r\n                dataType: 'json',\r\n                url: this.newUrl,\r\n\r\n                /**\r\n                 * @param {Object} result\r\n                 */\r\n                success: function (result) {\r\n                    var resultEntityValueName, mselectItemHtml, sectionBlock, itemsWrapper, inputSelector;\r\n\r\n                    if (result.success) {\r\n                        resultEntityValueName = '';\r\n\r\n                        if (typeof result[entityValueName] === 'string') {\r\n                            resultEntityValueName = result[entityValueName].escapeHTML();\r\n                        } else {\r\n                            resultEntityValueName = result[entityValueName];\r\n                        }\r\n                        // Add item to initial select element\r\n                        select.append('<option value=\"' + result[entityIdName] + '\" selected=\"selected\">' +\r\n                        resultEntityValueName + '</option>');\r\n                        // Add editable multiselect item\r\n                        mselectItemHtml = $(options.item.replace(/%value%|%label%/gi, resultEntityValueName)\r\n                            .replace(/%mselectDisabledClass%|%iseditable%|%isremovable%/gi, '')\r\n                            .replace(/%mselectListItemClass%/gi, options.mselectListItemClass))\r\n                            .find('[type=checkbox]')\r\n                            .addClass(options.mselectCheckedClass)\r\n                            .prop('checked', true)\r\n                            .end();\r\n                        sectionBlock = select.nextAll('section.block:first');\r\n                        itemsWrapper = sectionBlock.find('.' + options.mselectItemsWrapperClass + '');\r\n\r\n                        if (itemsWrapper.children('.' + options.mselectListItemClass + '').length) {\r\n                            itemsWrapper.children('.' + options.mselectListItemClass + ':last').after(mselectItemHtml);\r\n                        } else {\r\n                            itemsWrapper.prepend(mselectItemHtml);\r\n                        }\r\n                        // Trigger blur event on input field, that is used to add new value, to hide it\r\n                        inputSelector = '.' + options.mselectInputContainerClass + ' [type=text].' +\r\n                            options.mselectInputClass + '';\r\n                        sectionBlock.find(inputSelector).trigger('blur');\r\n                    } else {\r\n                        alert({\r\n                            content: result['error_message']\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            $.ajax(ajaxOptions);\r\n        };\r\n\r\n        /**\r\n         * Callback function that is called when user tries to delete value from select\r\n         *\r\n         * @param {Object} options\r\n         */\r\n        EditableMultiselect.prototype.deleteEntity = function (options) {\r\n            var self = this;\r\n\r\n            if (options['delete_button']) {\r\n                confirm({\r\n                    content: this.deleteConfirmMessage,\r\n                    actions: {\r\n                        /**\r\n                         * Confirm.\r\n                         */\r\n                        confirm: function () {\r\n                            // Button that has been clicked\r\n                            var deleteButton = $(options['delete_button']),\r\n                                index = deleteButton.parent().index(),\r\n                                select = deleteButton.closest('.mselect-list').prev(),\r\n                                entityId = select.find('option').eq(index).val(),\r\n                                entityInfo = {},\r\n                                postData, ajaxOptions;\r\n\r\n                            entityInfo[self.entityIdName] = entityId;\r\n                            postData = $.extend(entityInfo, self.submitData);\r\n\r\n                            ajaxOptions = {\r\n                                type: 'POST',\r\n                                data: postData,\r\n                                dataType: 'json',\r\n                                url: self.deleteUrl,\r\n\r\n                                /**\r\n                                 * @param {Object} result\r\n                                 */\r\n                                success: function (result) {\r\n                                    if (result.success) {\r\n                                        deleteButton.parent().remove();\r\n                                        select.find('option').eq(index).remove();\r\n                                    } else {\r\n                                        alert({\r\n                                            content: result['error_message']\r\n                                        });\r\n                                    }\r\n                                }\r\n                            };\r\n                            $.ajax(ajaxOptions);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    };\r\n});\r\n","mage/backend/floating-header.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.floatingHeader', {\r\n        options: {\r\n            placeholderAttrs: {\r\n                'class': 'page-actions-placeholder'\r\n            },\r\n            fixedClass: '_fixed',\r\n            hiddenClass: '_hidden',\r\n            title: '.page-title-wrapper .page-title',\r\n            pageMainActions: '.page-main-actions',\r\n            contains: '[data-role=modal]'\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var title = $(this.options.title).text(),\r\n                wrapped = this.element.find('.page-actions-buttons').children();\r\n\r\n            if (this.element.parents(this.options.contains).length) {\r\n                return this;\r\n            }\r\n\r\n            this._setVars();\r\n            this._bind();\r\n            this.element.find('script').remove();\r\n\r\n            if (wrapped.length) {\r\n                wrapped\r\n                    .unwrap()   // .page-actions-buttons\r\n                    .unwrap();  // .page-actions-inner\r\n            }\r\n            this.element.wrapInner($('<div></div>', {\r\n                'class': 'page-actions-buttons'\r\n            }));\r\n            this.element.wrapInner($('<div></div>', {\r\n                'class': 'page-actions-inner', 'data-title': title\r\n            }));\r\n            this.element.removeClass('floating-header');\r\n        },\r\n\r\n        /**\r\n         * Set privat variables on load, for performance purposes\r\n         * @private\r\n         */\r\n        _setVars: function () {\r\n            this._placeholder = this.element.before($('<div/>', this.options.placeholderAttrs)).prev();\r\n            this._offsetTop = this._placeholder.offset().top;\r\n            this._height = this.element\r\n                .parents(this.options.pageMainActions)\r\n                .outerHeight();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor scroll and resize events (resize events left for backward compat)\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on(window, {\r\n                scroll: this._handlePageScroll,\r\n                resize: this._handlePageScroll\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Event handler for setting fixed positioning\r\n         * @private\r\n         */\r\n        _handlePageScroll: function () {\r\n            var isActive = $(window).scrollTop() > this._offsetTop;\r\n\r\n            if (isActive) {\r\n                this.element\r\n                    .addClass(this.options.fixedClass)\r\n                    .parents(this.options.pageMainActions)\r\n                    .addClass(this.options.hiddenClass);\r\n            } else {\r\n                this.element\r\n                    .removeClass(this.options.fixedClass)\r\n                    .parents(this.options.pageMainActions)\r\n                    .removeClass(this.options.hiddenClass);\r\n            }\r\n\r\n            this._placeholder.height(isActive ? this._height : '');\r\n        },\r\n\r\n        /**\r\n         * Widget destroy functionality\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            if (this._placeholder) {\r\n                this._placeholder.remove();\r\n            }\r\n            this._off($(window));\r\n        }\r\n    });\r\n\r\n    return $.mage.floatingHeader;\r\n});\r\n","mage/backend/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.form', {\r\n        options: {\r\n            handlersData: {\r\n                save: {},\r\n                saveAndContinueEdit: {\r\n                    action: {\r\n                        args: {\r\n                            back: 'edit'\r\n                        }\r\n                    }\r\n                },\r\n                preview: {\r\n                    target: '_blank'\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Form creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Set form attributes to initial state\r\n         * @protected\r\n         */\r\n        _rollback: function () {\r\n            if (this.oldAttributes) {\r\n                this.element.prop(this.oldAttributes);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if field value is changed\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         */\r\n        _changesObserver: function (e) {\r\n            var target = $(e.target),\r\n                changed;\r\n\r\n            if (e.type === 'focus' || e.type === 'focusin') {\r\n                this.currentField = {\r\n                    statuses: {\r\n                        checked: target.is(':checked'),\r\n                        selected: target.is(':selected')\r\n                    },\r\n                    val: target.val()\r\n                };\r\n\r\n            } else {\r\n                if (this.currentField) { //eslint-disable-line no-lonely-if\r\n                    changed = target.val() !== this.currentField.val ||\r\n                        target.is(':checked') !== this.currentField.statuses.checked ||\r\n                        target.is(':selected') !== this.currentField.statuses.selected;\r\n\r\n                    if (changed) { //eslint-disable-line max-depth\r\n                        target.trigger('changed');\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get array with handler names\r\n         * @protected\r\n         * @return {Array} Array of handler names\r\n         */\r\n        _getHandlers: function () {\r\n            var handlers = [];\r\n\r\n            $.each(this.options.handlersData, function (key) {\r\n                handlers.push(key);\r\n            });\r\n\r\n            return handlers;\r\n        },\r\n\r\n        /**\r\n         * Store initial value of form attribute\r\n         * @param {String} attrName - name of attribute\r\n         * @protected\r\n         */\r\n        _storeAttribute: function (attrName) {\r\n            var prop;\r\n\r\n            this.oldAttributes = this.oldAttributes || {};\r\n\r\n            if (!this.oldAttributes[attrName]) {\r\n                prop = this.element.attr(attrName);\r\n                this.oldAttributes[attrName] = prop ? prop : '';\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.element\r\n                .on(this._getHandlers().join(' '), $.proxy(this._submit, this))\r\n                .on('focus blur focusin focusout', $.proxy(this._changesObserver, this));\r\n        },\r\n\r\n        /**\r\n         * Get action url for form\r\n         * @param {Object|String} data - object with parameters for action url or url string\r\n         * @return {String} action url\r\n         */\r\n        _getActionUrl: function (data) {\r\n            if (typeof data === 'object') {\r\n                return this._buildURL(this.oldAttributes.action, data.args);\r\n            }\r\n\r\n            return typeof data === 'string' ? data : this.oldAttributes.action;\r\n        },\r\n\r\n        /**\r\n         * Add additional parameters into URL\r\n         * @param {String} url - original url\r\n         * @param {Object} params - object with parameters for action url\r\n         * @return {String} action url\r\n         * @private\r\n         */\r\n        _buildURL: function (url, params) {\r\n            var concat = /\\?/.test(url) ? ['&', '='] : ['/', '/'];\r\n\r\n            url = url.replace(/[\\/&]+$/, '');\r\n            $.each(params, function (key, value) {\r\n                url += concat[0] + key + concat[1] + window.encodeURIComponent(value);\r\n            });\r\n\r\n            return url + (concat[0] === '/' ? '/' : '');\r\n        },\r\n\r\n        /**\r\n         * Prepare data for form attributes\r\n         * @protected\r\n         * @param {Object} data\r\n         * @return {Object}\r\n         */\r\n        _processData: function (data) {\r\n            $.each(data, $.proxy(function (attrName, attrValue) {\r\n                this._storeAttribute(attrName);\r\n\r\n                if (attrName === 'action') {\r\n                    data[attrName] = this._getActionUrl(attrValue);\r\n                }\r\n            }, this));\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Get additional data before form submit\r\n         * @protected\r\n         * @param {String} handlerName\r\n         * @param {Object} data\r\n         */\r\n        _beforeSubmit: function (handlerName, data) {\r\n            var submitData = {},\r\n                event = new $.Event('beforeSubmit');\r\n\r\n            this.element.trigger(event, [submitData, handlerName]);\r\n            data = $.extend(\r\n                true, {},\r\n                this.options.handlersData[handlerName] || {},\r\n                submitData,\r\n                data\r\n            );\r\n            this.element.prop(this._processData(data));\r\n\r\n            return !event.isDefaultPrevented();\r\n        },\r\n\r\n        /**\r\n         * Submit the form\r\n         * @param {Object} e - event object\r\n         * @param {Object} data - event data object\r\n         */\r\n        _submit: function (e, data) {\r\n            this._rollback();\r\n\r\n            if (this._beforeSubmit(e.type, data) !== false) {\r\n                this.element.trigger('submit', e);\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.form;\r\n});\r\n","mage/backend/menu.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.menu', {\r\n        widgetEventPrefix: 'menu',\r\n        version: '1.10.1',\r\n        defaultElement: '<ul>',\r\n        delay: 300,\r\n        options: {\r\n            icons: {\r\n                submenu: 'ui-icon-carat-1-e'\r\n            },\r\n            menus: 'ul',\r\n            position: {\r\n                my: 'left top',\r\n                at: 'right top'\r\n            },\r\n            role: 'menu',\r\n\r\n            // callbacks\r\n            blur: null,\r\n            focus: null,\r\n            select: null\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.activeMenu = this.element;\r\n            // flag used to prevent firing of the click handler\r\n            // as the event bubbles up through nested menus\r\n            this.mouseHandled = false;\r\n            this.element\r\n                .uniqueId()\r\n                .addClass('ui-menu ui-widget ui-widget-content ui-corner-all')\r\n                .toggleClass('ui-menu-icons', !!this.element.find('.ui-icon').length)\r\n                .attr({\r\n                    role: this.options.role,\r\n                    tabIndex: 0\r\n                })\r\n                // need to catch all clicks on disabled menu\r\n                // not possible through _on\r\n                .on('click' + this.eventNamespace, $.proxy(function (event) {\r\n                    if (this.options.disabled) {\r\n                        event.preventDefault();\r\n                    }\r\n                }, this));\r\n\r\n            if (this.options.disabled) {\r\n                this.element\r\n                    .addClass('ui-state-disabled')\r\n                    .attr('aria-disabled', 'true');\r\n            }\r\n\r\n            this._on({\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'mousedown .ui-menu-item > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'click .ui-state-disabled > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(a)': function (event) {\r\n                    var target = $(event.target).closest('.ui-menu-item');\r\n\r\n                    if (!this.mouseHandled && target.not('.ui-state-disabled').length) {\r\n                        this.mouseHandled = true;\r\n\r\n                        this.select(event);\r\n                        // Open submenu on click\r\n                        if (target.has('.ui-menu').length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(':focus')) {\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger('focus', [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents('.ui-menu').length === 1) { //eslint-disable-line\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseenter .ui-menu-item': function (event) {\r\n                    var target = $(event.currentTarget);\r\n\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children('.ui-state-active').removeClass('ui-state-active');\r\n                    this.focus(event, target);\r\n                },\r\n                mouseleave: 'collapseAll',\r\n                'mouseleave .ui-menu': 'collapseAll',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {*} keepActiveItem\r\n                 */\r\n                focus: function (event, keepActiveItem) {\r\n                    // If there's already an active item, keep it active\r\n                    // If not, activate the first item\r\n                    var item = this.active || this.element.children('.ui-menu-item').eq(0);\r\n\r\n                    if (!keepActiveItem) {\r\n                        this.focus(event, item);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                blur: function (event) {\r\n                    this._delay(function () {\r\n                        if (!$.contains(this.element[0], this.document[0].activeElement)) {\r\n                            this.collapseAll(event);\r\n                        }\r\n                    });\r\n                },\r\n                keydown: '_keydown'\r\n            });\r\n\r\n            this.refresh();\r\n\r\n            // Clicks outside of a menu collapse any open menus\r\n            this._on(this.document, {\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                click: function (event) {\r\n                    if (!$(event.target).closest('.ui-menu').length) {\r\n                        this.collapseAll(event);\r\n                    }\r\n\r\n                    // Reset the mouseHandled flag\r\n                    this.mouseHandled = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            // Destroy (sub)menus\r\n            this.element\r\n                .removeAttr('aria-activedescendant')\r\n                .find('.ui-menu').addBack()\r\n                .removeClass('ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons')\r\n                .removeAttr('role')\r\n                .removeAttr('tabIndex')\r\n                .removeAttr('aria-labelledby')\r\n                .removeAttr('aria-expanded')\r\n                .removeAttr('aria-hidden')\r\n                .removeAttr('aria-disabled')\r\n                .removeUniqueId()\r\n                .show();\r\n\r\n            // Destroy menu items\r\n            this.element.find('.ui-menu-item')\r\n                .removeClass('ui-menu-item')\r\n                .removeAttr('role')\r\n                .removeAttr('aria-disabled')\r\n                .children('a')\r\n                .removeUniqueId()\r\n                .removeClass('ui-corner-all ui-state-hover')\r\n                .removeAttr('tabIndex')\r\n                .removeAttr('role')\r\n                .removeAttr('aria-haspopup')\r\n                .children().each(function () {\r\n                    var elem = $(this);\r\n\r\n                    if (elem.data('ui-menu-submenu-carat')) {\r\n                        elem.remove();\r\n                    }\r\n                });\r\n\r\n            // Destroy menu dividers\r\n            this.element.find('.ui-menu-divider').removeClass('ui-menu-divider ui-widget-content');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            /**\r\n             * @param {String} value\r\n             */\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n            }\r\n\r\n            switch (event.keyCode) {\r\n                case $.ui.keyCode.PAGE_UP:\r\n                    this.previousPage(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.PAGE_DOWN:\r\n                    this.nextPage(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.HOME:\r\n                    this._move('first', 'first', event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.END:\r\n                    this._move('last', 'last', event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.UP:\r\n                    this.previous(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.DOWN:\r\n                    this.next(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.LEFT:\r\n                    this.collapse(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.RIGHT:\r\n                    if (this.active && !this.active.is('.ui-state-disabled')) {\r\n                        this.expand(event);\r\n                    }\r\n                    break;\r\n\r\n                case $.ui.keyCode.ENTER:\r\n                case $.ui.keyCode.SPACE:\r\n                    this._activate(event);\r\n                    break;\r\n\r\n                case $.ui.keyCode.ESCAPE:\r\n                    this.collapse(event);\r\n                    break;\r\n\r\n                default:\r\n                    preventDefault = false;\r\n                    prev = this.previousFilter || '';\r\n                    character = String.fromCharCode(event.keyCode);\r\n                    skip = false;\r\n\r\n                    clearTimeout(this.filterTimer);\r\n\r\n                    if (character === prev) {\r\n                        skip = true;\r\n                    } else {\r\n                        character = prev + character;\r\n                    }\r\n\r\n                    regex = new RegExp('^' + escape(character), 'i');\r\n                    match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                        return regex.test($(this).children('a').text());\r\n                    });\r\n                    match = skip && match.index(this.active.next()) !== -1 ?\r\n                        this.active.nextAll('.ui-menu-item') :\r\n                        match;\r\n\r\n                    // If no matches on the current filter, reset to the last character pressed\r\n                    // to move down the menu to the first item that starts with that character\r\n                    if (!match.length) {\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        regex = new RegExp('^' + escape(character), 'i');\r\n                        match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                            return regex.test($(this).children('a').text());\r\n                        });\r\n                    }\r\n\r\n                    if (match.length) {\r\n                        this.focus(event, match);\r\n\r\n                        if (match.length > 1) { //eslint-disable-line max-depth\r\n                            this.previousFilter = character;\r\n                            this.filterTimer = this._delay(function () {\r\n                                delete this.previousFilter;\r\n                            }, 1000);\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                    } else {\r\n                        delete this.previousFilter;\r\n                    }\r\n            }\r\n\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _activate: function (event) {\r\n            if (!this.active.is('.ui-state-disabled')) {\r\n                if (this.active.children('a[aria-haspopup=\"true\"]').length) {\r\n                    this.expand(event);\r\n                } else {\r\n                    this.select(event);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Refresh.\r\n         */\r\n        refresh: function () {\r\n            var menus,\r\n                icon = this.options.icons.submenu,\r\n                submenus = this.element.find(this.options.menus);\r\n\r\n            // Initialize nested menus\r\n            submenus.filter(':not(.ui-menu)')\r\n                .addClass('ui-menu ui-widget ui-widget-content ui-corner-all')\r\n                .hide()\r\n                .attr({\r\n                    role: this.options.role,\r\n                    'aria-hidden': 'true',\r\n                    'aria-expanded': 'false'\r\n                })\r\n                .each(function () {\r\n                    var menu = $(this),\r\n                        item = menu.prev('a'),\r\n                        submenuCarat = $('<span>')\r\n                            .addClass('ui-menu-icon ui-icon ' + icon)\r\n                            .data('ui-menu-submenu-carat', true);\r\n\r\n                    item\r\n                        .attr('aria-haspopup', 'true')\r\n                        .prepend(submenuCarat);\r\n                    menu.attr('aria-labelledby', item.attr('id'));\r\n                });\r\n\r\n            menus = submenus.add(this.element);\r\n\r\n            // Don't refresh list items that are already adapted\r\n            menus.children(':not(.ui-menu-item):has(a)')\r\n                .addClass('ui-menu-item')\r\n                .attr('role', 'presentation')\r\n                .children('a')\r\n                .uniqueId()\r\n                .addClass('ui-corner-all')\r\n                .attr({\r\n                    tabIndex: -1,\r\n                    role: this._itemRole()\r\n                });\r\n\r\n            // Initialize unlinked menu-items containing spaces and/or dashes only as dividers\r\n            menus.children(':not(.ui-menu-item)').each(function () {\r\n                var item = $(this);\r\n\r\n                // hyphen, em dash, en dash\r\n                if (!/[^\\-\\u2014\\u2013\\s]/.test(item.text())) {\r\n                    item.addClass('ui-widget-content ui-menu-divider');\r\n                }\r\n            });\r\n\r\n            // Add aria-disabled attribute to any disabled menu item\r\n            menus.children('.ui-state-disabled').attr('aria-disabled', 'true');\r\n\r\n            // If the active item has been removed, blur the menu\r\n            if (this.active && !$.contains(this.element[0], this.active[0])) {\r\n                this.blur();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _itemRole: function () {\r\n            return {\r\n                menu: 'menuitem',\r\n                listbox: 'option'\r\n            }[this.options.role];\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @param {*} value\r\n         * @private\r\n         */\r\n        _setOption: function (key, value) {\r\n            if (key === 'icons') {\r\n                this.element.find('.ui-menu-icon')\r\n                    .removeClass(this.options.icons.submenu)\r\n                    .addClass(value.submenu);\r\n            }\r\n            this._super(key, value);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} item\r\n         */\r\n        focus: function (event, item) {\r\n            var nested, focused;\r\n\r\n            this.blur(event, event && event.type === 'focus');\r\n\r\n            this._scrollIntoView(item);\r\n\r\n            this.active = item.first();\r\n            focused = this.active.children('a').addClass('ui-state-focus');\r\n            // Only update aria-activedescendant if there's a role\r\n            // otherwise we assume focus is managed elsewhere\r\n            if (this.options.role) {\r\n                this.element.attr('aria-activedescendant', focused.attr('id'));\r\n            }\r\n\r\n            // Highlight active parent menu item, if any\r\n            this.active\r\n                .parent()\r\n                .closest('.ui-menu-item')\r\n                .children('a:first')\r\n                .addClass('ui-state-active');\r\n\r\n            if (event && event.type === 'keydown') {\r\n                this._close();\r\n            } else {\r\n                this.timer = this._delay(function () {\r\n                    this._close();\r\n                }, this.delay);\r\n            }\r\n\r\n            nested = item.children('.ui-menu');\r\n\r\n            if (nested.length && /^mouse/.test(event.type)) {\r\n                this._startOpening(nested);\r\n            }\r\n            this.activeMenu = item.parent();\r\n\r\n            this._trigger('focus', event, {\r\n                item: item\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        _scrollIntoView: function (item) {\r\n            var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;\r\n\r\n            if (this._hasScroll()) {\r\n                borderTop = parseFloat($.css(this.activeMenu[0], 'borderTopWidth')) || 0;\r\n                paddingTop = parseFloat($.css(this.activeMenu[0], 'paddingTop')) || 0;\r\n                offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;\r\n                scroll = this.activeMenu.scrollTop();\r\n                elementHeight = this.activeMenu.height();\r\n                itemHeight = item.height();\r\n\r\n                if (offset < 0) {\r\n                    this.activeMenu.scrollTop(scroll + offset);\r\n                } else if (offset + itemHeight > elementHeight) {\r\n                    this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {*} fromFocus\r\n         */\r\n        blur: function (event, fromFocus) {\r\n            if (!fromFocus) {\r\n                clearTimeout(this.timer);\r\n            }\r\n\r\n            if (!this.active) {\r\n                return;\r\n            }\r\n\r\n            this.active.children('a').removeClass('ui-state-focus');\r\n            this.active = null;\r\n\r\n            this._trigger('blur', event, {\r\n                item: this.active\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {*} submenu\r\n         * @private\r\n         */\r\n        _startOpening: function (submenu) {\r\n            clearTimeout(this.timer);\r\n\r\n            // Don't open if already open fixes a Firefox bug that caused a .5 pixel\r\n            // shift in the submenu position when mousing over the carat icon\r\n            if (submenu.attr('aria-hidden') !== 'true') {\r\n                return;\r\n            }\r\n\r\n            this.timer = this._delay(function () {\r\n                this._close();\r\n                this._open(submenu);\r\n            }, this.delay);\r\n        },\r\n\r\n        /**\r\n         * @param {*} submenu\r\n         * @private\r\n         */\r\n        _open: function (submenu) {\r\n            var position = $.extend({\r\n                of: this.active\r\n            }, this.options.position);\r\n\r\n            clearTimeout(this.timer);\r\n            this.element.find('.ui-menu').not(submenu.parents('.ui-menu'))\r\n                .hide()\r\n                .attr('aria-hidden', 'true');\r\n\r\n            submenu\r\n                .show()\r\n                .removeAttr('aria-hidden')\r\n                .attr('aria-expanded', 'true')\r\n                .position(position);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {*} all\r\n         */\r\n        collapseAll: function (event, all) {\r\n            clearTimeout(this.timer);\r\n            this.timer = this._delay(function () {\r\n                // If we were passed an event, look for the submenu that contains the event\r\n                var currentMenu = all ? this.element :\r\n                    $(event && event.target).closest(this.element.find('.ui-menu'));\r\n\r\n                // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway\r\n                if (!currentMenu.length) {\r\n                    currentMenu = this.element;\r\n                }\r\n\r\n                this._close(currentMenu);\r\n\r\n                this.blur(event);\r\n                this.activeMenu = currentMenu;\r\n            }, this.delay);\r\n        },\r\n\r\n        // With no arguments, closes the currently active menu - if nothing is active\r\n        // it closes all menus.  If passed an argument, it will search for menus BELOW\r\n        /**\r\n         * With no arguments, closes the currently active menu - if nothing is active\r\n         * it closes all menus.  If passed an argument, it will search for menus BELOW.\r\n         *\r\n         * @param {*} startMenu\r\n         * @private\r\n         */\r\n        _close: function (startMenu) {\r\n            if (!startMenu) {\r\n                startMenu = this.active ? this.active.parent() : this.element;\r\n            }\r\n\r\n            startMenu\r\n                .find('.ui-menu')\r\n                .hide()\r\n                .attr('aria-hidden', 'true')\r\n                .attr('aria-expanded', 'false')\r\n                .end()\r\n                .find('a.ui-state-active')\r\n                .removeClass('ui-state-active');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        collapse: function (event) {\r\n            var newItem = this.active &&\r\n                this.active.parent().closest('.ui-menu-item', this.element);\r\n\r\n            if (newItem && newItem.length) {\r\n                this._close();\r\n                this.focus(event, newItem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        expand: function (event) {\r\n            var newItem = this.active &&\r\n                this.active\r\n                    .children('.ui-menu ')\r\n                    .children('.ui-menu-item')\r\n                    .first();\r\n\r\n            if (newItem && newItem.length) {\r\n                this._open(newItem.parent());\r\n\r\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\r\n                this._delay(function () {\r\n                    this.focus(event, newItem);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        next: function (event) {\r\n            this._move('next', 'first', event);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        previous: function (event) {\r\n            this._move('prev', 'last', event);\r\n        },\r\n\r\n        /**\r\n         * @return {null|Boolean}\r\n         */\r\n        isFirstItem: function () {\r\n            return this.active && !this.active.prevAll('.ui-menu-item').length;\r\n        },\r\n\r\n        /**\r\n         * @return {null|Boolean}\r\n         */\r\n        isLastItem: function () {\r\n            return this.active && !this.active.nextAll('.ui-menu-item').length;\r\n        },\r\n\r\n        /**\r\n         * @param {*} direction\r\n         * @param {*} filter\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _move: function (direction, filter, event) {\r\n            var next;\r\n\r\n            if (this.active) {\r\n                if (direction === 'first' || direction === 'last') {\r\n                    next = this.active\r\n                        [direction === 'first' ? 'prevAll' : 'nextAll']('.ui-menu-item')\r\n                        .eq(-1);\r\n                } else {\r\n                    next = this.active\r\n                        [direction + 'All']('.ui-menu-item')\r\n                        .eq(0);\r\n                }\r\n            }\r\n\r\n            if (!next || !next.length || !this.active) {\r\n                next = this.activeMenu.children('.ui-menu-item')[filter]();\r\n            }\r\n\r\n            this.focus(event, next);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        nextPage: function (event) {\r\n            var item, base, height;\r\n\r\n            if (!this.active) {\r\n                this.next(event);\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.isLastItem()) {\r\n                return;\r\n            }\r\n\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.nextAll('.ui-menu-item').each(function () {\r\n                    item = $(this);\r\n\r\n                    return item.offset().top - base - height < 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children('.ui-menu-item')\r\n                    [!this.active ? 'first' : 'last']());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        previousPage: function (event) {\r\n            var item, base, height;\r\n\r\n            if (!this.active) {\r\n                this.next(event);\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.isFirstItem()) {\r\n                return;\r\n            }\r\n\r\n            if (this._hasScroll()) {\r\n                base = this.active.offset().top;\r\n                height = this.element.height();\r\n                this.active.prevAll('.ui-menu-item').each(function () {\r\n                    item = $(this);\r\n\r\n                    return item.offset().top - base + height > 0;\r\n                });\r\n\r\n                this.focus(event, item);\r\n            } else {\r\n                this.focus(event, this.activeMenu.children('.ui-menu-item').first());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _hasScroll: function () {\r\n            return this.element.outerHeight() < this.element.prop('scrollHeight');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        select: function (event) {\r\n            // TODO: It should never be possible to not have an active item at this\r\n            // point, but the tests don't trigger mouseenter before click.\r\n            var ui;\r\n\r\n            this.active = this.active || $(event.target).closest('.ui-menu-item');\r\n            ui = {\r\n                item: this.active\r\n            };\r\n\r\n            if (!this.active.has('.ui-menu').length) {\r\n                this.collapseAll(event, true);\r\n            }\r\n            this._trigger('select', event, ui);\r\n        }\r\n    });\r\n\r\n    return $.mage.menu;\r\n});\r\n","mage/backend/notification.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.notification', {\r\n        options: {\r\n            templates: {\r\n                global: '<div data-role=\"messages\" id=\"messages\">' +\r\n                    '<div class=\"message <% if (data.error) { %>error<% } %>\"><div><%- data.message %></div></div>' +\r\n                '</div>',\r\n                error: '<div data-role=\"messages\" id=\"messages\">' +\r\n                    '<div class=\"messages\"><div class=\"message message-error error\">' +\r\n                        '<div data-ui-id=\"messages-message-error\"><%- data.message %></div></div>' +\r\n                    '</div></div>'\r\n            }\r\n        },\r\n        placeholder: '[data-role=messages]',\r\n\r\n        /**\r\n         * Notification creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            $(document).on('ajaxComplete ajaxError', $.proxy(this._add, this));\r\n        },\r\n\r\n        /**\r\n         * Add new message\r\n         * @protected\r\n         * @param {Object} event - object\r\n         * @param {Object} jqXHR - The jQuery XMLHttpRequest object returned by $.ajax()\r\n         */\r\n        _add: function (event, jqXHR) {\r\n            var response;\r\n\r\n            try {\r\n                response = JSON.parse(jqXHR.responseText);\r\n\r\n                if (response && response.error && response['html_message']) {\r\n                    $(this.placeholder).html(response['html_message']);\r\n                }\r\n            } catch (e) {}\r\n        },\r\n\r\n        /**\r\n         * Adds new message.\r\n         *\r\n         * @param {Object} data - Data with a message to be displayed.\r\n         */\r\n        add: function (data) {\r\n            var template = data.error ? this.options.templates.error : this.options.templates.global,\r\n                message = mageTemplate(template, {\r\n                    data: data\r\n                }),\r\n                messageContainer;\r\n\r\n            if (typeof data.insertMethod === 'function') {\r\n                data.insertMethod(message);\r\n            } else {\r\n                messageContainer = data.messageContainer || this.placeholder;\r\n                $(messageContainer).prepend(message);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Removes error messages.\r\n         */\r\n        clear: function () {\r\n            $(this.placeholder).html('');\r\n        }\r\n    });\r\n\r\n    return $.mage.notification;\r\n});\r\n","mage/backend/suggest.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'mage/mage',\r\n    'jquery/ui',\r\n    'mage/backend/menu',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Implement base functionality\r\n     */\r\n    $.widget('mage.suggest', {\r\n        widgetEventPrefix: 'suggest',\r\n        options: {\r\n            template: '<% if (data.items.length) { %>' +\r\n                '<% if (!data.term && !data.allShown() && data.recentShown()) { %>' +\r\n                '<h5 class=\"title\"><%- data.recentTitle %></h5>' +\r\n                '<% } %>' +\r\n                '<ul data-mage-init=\\'{\"menu\":[]}\\'>' +\r\n                '<% _.each(data.items, function(value){ %>' +\r\n                '<% if (!data.itemSelected(value)) { %><li <%= data.optionData(value) %>>' +\r\n                '<a href=\"#\"><%- value.label %></a></li><% } %>' +\r\n                '<% }); %>' +\r\n                '<% if (!data.term && !data.allShown() && data.recentShown()) { %>' +\r\n                '<li data-mage-init=\\'{\"actionLink\":{\"event\":\"showAll\"}}\\' class=\"show-all\">' +\r\n                '<a href=\"#\"><%- data.showAllTitle %></a></li>' +\r\n                '<% } %>' +\r\n                '</ul><% } else { %><span class=\"mage-suggest-no-records\"><%- data.noRecordsText %></span><% } %>',\r\n            minLength: 1,\r\n\r\n            /**\r\n             * @type {(String|Array)}\r\n             */\r\n            source: null,\r\n            delay: 500,\r\n            loadingClass: 'mage-suggest-state-loading',\r\n            events: {},\r\n            appendMethod: 'after',\r\n            controls: {\r\n                selector: ':ui-menu, :mage-menu',\r\n                eventsMap: {\r\n                    focus: ['menufocus'],\r\n                    blur: ['menublur'],\r\n                    select: ['menuselect']\r\n                }\r\n            },\r\n            termAjaxArgument: 'label_part',\r\n            filterProperty: 'label',\r\n            className: null,\r\n            inputWrapper: '<div class=\"mage-suggest\"><div class=\"mage-suggest-inner\"></div></div>',\r\n            dropdownWrapper: '<div class=\"mage-suggest-dropdown\"></div>',\r\n            preventClickPropagation: true,\r\n            currentlySelected: null,\r\n            submitInputOnEnter: true\r\n        },\r\n\r\n        /**\r\n         * Component's constructor\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._term = null;\r\n            this._nonSelectedItem = {\r\n                id: '',\r\n                label: ''\r\n            };\r\n            this.templates = {};\r\n            this._renderedContext = null;\r\n            this._selectedItem = this._nonSelectedItem;\r\n            this._control = this.options.controls || {};\r\n            this._setTemplate();\r\n            this._prepareValueField();\r\n            this._render();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Render base elements for suggest component\r\n         * @private\r\n         */\r\n        _render: function () {\r\n            var wrapper;\r\n\r\n            this.dropdown = $(this.options.dropdownWrapper).hide();\r\n            wrapper = this.options.className ?\r\n                $(this.options.inputWrapper).addClass(this.options.className) :\r\n                $(this.options.inputWrapper);\r\n            this.element\r\n                .wrap(wrapper)[this.options.appendMethod](this.dropdown)\r\n                .attr('autocomplete', 'off');\r\n        },\r\n\r\n        /**\r\n         * Define a field for storing item id (find in DOM or create a new one)\r\n         * @private\r\n         */\r\n        _prepareValueField: function () {\r\n            if (this.options.valueField) {\r\n                this.valueField = $(this.options.valueField);\r\n            } else {\r\n                this.valueField = this._createValueField()\r\n                    .insertBefore(this.element)\r\n                    .attr('name', this.element.attr('name'));\r\n                this.element.removeAttr('name');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Create value field which keeps a id for selected option\r\n         * can be overridden in descendants\r\n         * @return {jQuery}\r\n         * @private\r\n         */\r\n        _createValueField: function () {\r\n            return $('<input/>', {\r\n                type: 'hidden'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Component's destructor\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            this.element\r\n                .unwrap()\r\n                .removeAttr('autocomplete');\r\n\r\n            if (!this.options.valueField) {\r\n                this.element.attr('name', this.valueField.attr('name'));\r\n                this.valueField.remove();\r\n            }\r\n\r\n            this.dropdown.remove();\r\n            this._off(this.element, 'keydown keyup blur');\r\n        },\r\n\r\n        /**\r\n         * Return actual value of an \"input\"-element\r\n         * @return {String}\r\n         * @private\r\n         */\r\n        _value: function () {\r\n            return this.element[this.element.is(':input') ? 'val' : 'text']().trim();\r\n        },\r\n\r\n        /**\r\n         * Pass original event to a control component for handling it as it's own event\r\n         * @param {Object} event - event object\r\n         * @private\r\n         */\r\n        _proxyEvents: function (event) {\r\n            var fakeEvent = $.extend({}, $.Event(event.type), {\r\n                    ctrlKey: event.ctrlKey,\r\n                    keyCode: event.keyCode,\r\n                    which: event.keyCode\r\n                }),\r\n                target = this._control.selector ? this.dropdown.find(this._control.selector) : this.dropdown;\r\n\r\n            target.trigger(fakeEvent);\r\n        },\r\n\r\n        /**\r\n         * Bind handlers on specific events\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on($.extend({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                keydown: function (event) {\r\n                    var keyCode = $.ui.keyCode,\r\n                        suggestList,\r\n                        hasSuggestedItems,\r\n                        hasSelectedItems,\r\n                        selectedItem;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.PAGE_UP:\r\n                        case keyCode.UP:\r\n                            if (!event.shiftKey) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n\r\n                            suggestList = event.currentTarget.parentNode.getElementsByTagName('ul')[0];\r\n                            hasSuggestedItems = event.currentTarget\r\n                                    .parentNode.getElementsByTagName('ul')[0].children.length >= 0;\r\n\r\n                            if (hasSuggestedItems) {\r\n                                selectedItem =  $(suggestList.getElementsByClassName('_active')[0])\r\n                                    .removeClass('_active').prev().addClass('_active');\r\n                                event.currentTarget.value = selectedItem.find('a').text();\r\n                            }\r\n\r\n                            break;\r\n\r\n                        case keyCode.PAGE_DOWN:\r\n                        case keyCode.DOWN:\r\n                            if (!event.shiftKey) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n\r\n                            suggestList = event.currentTarget.parentNode.getElementsByTagName('ul')[0];\r\n                            hasSuggestedItems = event.currentTarget\r\n                                .parentNode.getElementsByTagName('ul')[0].children.length >= 0;\r\n\r\n                            if (hasSuggestedItems) {\r\n                                hasSelectedItems = suggestList.getElementsByClassName('_active').length === 0;\r\n\r\n                                if (hasSelectedItems) { //eslint-disable-line max-depth\r\n                                    selectedItem = $(suggestList.children[0]).addClass('_active');\r\n                                    event.currentTarget.value = selectedItem.find('a').text();\r\n                                } else {\r\n                                    selectedItem = $(suggestList.getElementsByClassName('_active')[0])\r\n                                        .removeClass('_active').next().addClass('_active');\r\n                                    event.currentTarget.value = selectedItem.find('a').text();\r\n                                }\r\n                            }\r\n                            break;\r\n\r\n                        case keyCode.TAB:\r\n                            if (this.isDropdownShown()) {\r\n                                this._onSelectItem(event, null);\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            this._toggleEnter(event);\r\n\r\n                            if (this.isDropdownShown() && this._focused) {\r\n                                this._proxyEvents(event);\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n\r\n                        case keyCode.ESCAPE:\r\n                            if (this.isDropdownShown()) {\r\n                                event.stopPropagation();\r\n                            }\r\n                            this.close(event);\r\n                            this._blurItem();\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                keyup: function (event) {\r\n                    var keyCode = $.ui.keyCode;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.HOME:\r\n                        case keyCode.END:\r\n                        case keyCode.PAGE_UP:\r\n                        case keyCode.PAGE_DOWN:\r\n                        case keyCode.ESCAPE:\r\n                        case keyCode.UP:\r\n                        case keyCode.DOWN:\r\n                        case keyCode.LEFT:\r\n                        case keyCode.RIGHT:\r\n                        case keyCode.TAB:\r\n                            break;\r\n\r\n                        case keyCode.ENTER:\r\n                        case keyCode.NUMPAD_ENTER:\r\n                            if (this.isDropdownShown()) {\r\n                                event.preventDefault();\r\n                            }\r\n                            break;\r\n                        default:\r\n                            this.search(event);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                blur: function (event) {\r\n                    if (!this.preventBlur) {\r\n                        this._abortSearch();\r\n                        this.close(event);\r\n                        this._change(event);\r\n                    } else {\r\n                        this.element.trigger('focus');\r\n                    }\r\n                },\r\n                cut: this.search,\r\n                paste: this.search,\r\n                input: this.search,\r\n                selectItem: this._onSelectItem,\r\n                click: this.search\r\n            }, this.options.events));\r\n\r\n            this._bindSubmit();\r\n            this._bindDropdown();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} event\r\n         * @private\r\n         */\r\n        _toggleEnter: function (event) {\r\n            var suggestList,\r\n                activeItems,\r\n                selectedItem;\r\n\r\n            if (!this.options.submitInputOnEnter) {\r\n                event.preventDefault();\r\n            }\r\n\r\n            suggestList = $(event.currentTarget.parentNode).find('ul').first();\r\n            activeItems = suggestList.find('._active');\r\n\r\n            if (activeItems.length >= 0) {\r\n                selectedItem = activeItems.first();\r\n\r\n                if (selectedItem.find('a') && selectedItem.find('a').attr('href') !== undefined) {\r\n                    window.location = selectedItem.find('a').attr('href');\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers for submit on enter\r\n         * @private\r\n         */\r\n        _bindSubmit: function () {\r\n            this.element.parents('form').on('submit', function (event) {\r\n                if (!this.submitInputOnEnter) {\r\n                    event.preventDefault();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @private\r\n         */\r\n        _change: function (e) {\r\n            if (this._term !== this._value()) {\r\n                this._trigger('change', e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind handlers for dropdown element on specific events\r\n         * @private\r\n         */\r\n        _bindDropdown: function () {\r\n            var events = {\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                click: function (e) {\r\n                    // prevent default browser's behavior of changing location by anchor href\r\n                    e.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                mousedown: function (e) {\r\n                    e.preventDefault();\r\n                }\r\n            };\r\n\r\n            $.each(this._control.eventsMap, $.proxy(function (suggestEvent, controlEvents) {\r\n                $.each(controlEvents, $.proxy(function (i, handlerName) {\r\n                    switch (suggestEvent) {\r\n                        case 'select':\r\n                            events[handlerName] = this._onSelectItem;\r\n                            break;\r\n\r\n                        case 'focus':\r\n                            events[handlerName] = this._focusItem;\r\n                            break;\r\n\r\n                        case 'blur':\r\n                            events[handlerName] = this._blurItem;\r\n                            break;\r\n                    }\r\n                }, this));\r\n            }, this));\r\n\r\n            if (this.options.preventClickPropagation) {\r\n                this._on(this.dropdown, events);\r\n            }\r\n            // Fix for IE 8\r\n            this._on(this.dropdown, {\r\n                /**\r\n                 * Mousedown.\r\n                 */\r\n                mousedown: function () {\r\n                    this.preventBlur = true;\r\n                },\r\n\r\n                /**\r\n                 * Mouseup.\r\n                 */\r\n                mouseup: function () {\r\n                    this.preventBlur = false;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _trigger: function (type, event) {\r\n            var result = this._superApply(arguments);\r\n\r\n            if (result === false && event) {\r\n                event.stopImmediatePropagation();\r\n                event.preventDefault();\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Handle focus event of options item\r\n         * @param {Object} e - event object\r\n         * @param {Object} ui - object that can contain information about focused item\r\n         * @private\r\n         */\r\n        _focusItem: function (e, ui) {\r\n            if (ui && ui.item) {\r\n                this._focused = $(ui.item).prop('tagName') ?\r\n                    this._readItemData(ui.item) :\r\n                    ui.item;\r\n\r\n                this.element.val(this._focused.label);\r\n                this._trigger('focus', e, {\r\n                    item: this._focused\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle blur event of options item\r\n         * @private\r\n         */\r\n        _blurItem: function () {\r\n            this._focused = null;\r\n            this.element.val(this._term);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e - event object\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        _onSelectItem: function (e, item) {\r\n            if (item && typeof item === 'object' && $(e.target).is(this.element)) {\r\n                this._focusItem(e, {\r\n                    item: item\r\n                });\r\n            }\r\n\r\n            if (this._trigger('beforeselect', e || null, {\r\n                    item: this._focused\r\n                }) === false) {\r\n                return;\r\n            }\r\n            this._selectItem(e);\r\n            this._blurItem();\r\n            this._trigger('select', e || null, {\r\n                item: this._selectedItem\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Save selected item and hide dropdown\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _selectItem: function (e) {\r\n            if (this._focused) {\r\n                this._selectedItem = this._focused;\r\n\r\n                if (this._selectedItem !== this._nonSelectedItem) {\r\n                    this._term = this._selectedItem.label;\r\n                    this.valueField.val(this._selectedItem.id);\r\n                    this.close(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Read option data from item element\r\n         * @param {Element} element\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _readItemData: function (element) {\r\n            return element.data('suggestOption') || this._nonSelectedItem;\r\n        },\r\n\r\n        /**\r\n         * Check if dropdown is shown\r\n         * @return {Boolean}\r\n         */\r\n        isDropdownShown: function () {\r\n            return this.dropdown.is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Open dropdown\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        open: function (e) {\r\n            if (!this.isDropdownShown()) {\r\n                this.element.addClass('_suggest-dropdown-open');\r\n                this.dropdown.show();\r\n                this._trigger('open', e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close and clear dropdown content\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        close: function (e) {\r\n            this._renderedContext = null;\r\n\r\n            if (this.dropdown.length) {\r\n                this.element.removeClass('_suggest-dropdown-open');\r\n                this.dropdown.hide().empty();\r\n            }\r\n\r\n            this._trigger('close', e);\r\n        },\r\n\r\n        /**\r\n         * Acquire content template\r\n         * @private\r\n         */\r\n        _setTemplate: function () {\r\n            this.templateName = 'suggest' + Math.random().toString(36).substr(2);\r\n\r\n            this.templates[this.templateName] = mageTemplate(this.options.template);\r\n        },\r\n\r\n        /**\r\n         * Execute search process\r\n         * @public\r\n         * @param {Object} e - event object\r\n         */\r\n        search: function (e) {\r\n            var term = this._value();\r\n\r\n            if ((this._term !== term || term.length === 0) && !this.preventBlur) {\r\n                this._term = term;\r\n\r\n                if (typeof term === 'string' && term.length >= this.options.minLength) {\r\n                    if (this._trigger('search', e) === false) { //eslint-disable-line max-depth\r\n                        return;\r\n                    }\r\n                    this._search(e, term, {});\r\n                } else {\r\n                    this._selectedItem = this._nonSelectedItem;\r\n                    this._resetSuggestValue();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear suggest hidden input\r\n         * @private\r\n         */\r\n        _resetSuggestValue: function () {\r\n            this.valueField.val(this._nonSelectedItem.id);\r\n        },\r\n\r\n        /**\r\n         * Actual search method, can be overridden in descendants\r\n         * @param {Object} e - event object\r\n         * @param {String} term - search phrase\r\n         * @param {Object} context - search context\r\n         * @private\r\n         */\r\n        _search: function (e, term, context) {\r\n            var response = $.proxy(function (items) {\r\n                return this._processResponse(e, items, context || {});\r\n            }, this);\r\n\r\n            this.element.addClass(this.options.loadingClass);\r\n\r\n            if (this.options.delay) {\r\n                if (typeof this.options.data !== 'undefined') {\r\n                    response(this.filter(this.options.data, term));\r\n                }\r\n                clearTimeout(this._searchTimeout);\r\n                this._searchTimeout = this._delay(function () {\r\n                    this._source(term, response);\r\n                }, this.options.delay);\r\n            } else {\r\n                this._source(term, response);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extend basic context with additional data (search results, search term)\r\n         * @param {Object} context\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _prepareDropdownContext: function (context) {\r\n            return $.extend(context, {\r\n                items: this._items,\r\n                term: this._term,\r\n\r\n                /**\r\n                 * @param {Object} item\r\n                 * @return {String}\r\n                 */\r\n                optionData: function (item) {\r\n                    return 'data-suggest-option=\"' +\r\n                        $('<div>').text(JSON.stringify(item)).html().replace(/\"/g, '&quot;') + '\"';\r\n                },\r\n                itemSelected: $.proxy(this._isItemSelected, this),\r\n                noRecordsText: $.mage.__('No records found.')\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} item\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isItemSelected: function (item) {\r\n            return item.id == (this._selectedItem && this._selectedItem.id ? //eslint-disable-line eqeqeq\r\n                this._selectedItem.id :\r\n                this.options.currentlySelected);\r\n        },\r\n\r\n        /**\r\n         * Render content of suggest's dropdown\r\n         * @param {Object} e - event object\r\n         * @param {Array} items - list of label+id objects\r\n         * @param {Object} context - template's context\r\n         * @private\r\n         */\r\n        _renderDropdown: function (e, items, context) {\r\n            var tmpl = this.templates[this.templateName];\r\n\r\n            this._items = items;\r\n\r\n            tmpl = tmpl({\r\n                data: this._prepareDropdownContext(context)\r\n            });\r\n\r\n            $(tmpl).appendTo(this.dropdown.empty());\r\n\r\n            this.dropdown.trigger('contentUpdated')\r\n                .find(this._control.selector).on('focus', function (event) {\r\n                    event.preventDefault();\r\n                });\r\n\r\n            this._renderedContext = context;\r\n            this.element.removeClass(this.options.loadingClass);\r\n            this.open(e);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} e\r\n         * @param {Object} items\r\n         * @param {Object} context\r\n         * @private\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            var renderer = $.proxy(function (i) {\r\n                return this._renderDropdown(e, i, context || {});\r\n            }, this);\r\n\r\n            if (this._trigger('response', e, [items, renderer]) === false) {\r\n                return;\r\n            }\r\n            this._renderDropdown(e, items, context);\r\n        },\r\n\r\n        /**\r\n         * Implement search process via spesific source\r\n         * @param {String} term - search phrase\r\n         * @param {Function} response - search results handler, process search result\r\n         * @private\r\n         */\r\n        _source: function (term, response) {\r\n            var o = this.options,\r\n                ajaxData;\r\n\r\n            if (Array.isArray(o.source)) {\r\n                response(this.filter(o.source, term));\r\n            } else if (typeof o.source === 'string') {\r\n                ajaxData = {};\r\n                ajaxData[this.options.termAjaxArgument] = term;\r\n\r\n                this._xhr = $.ajax($.extend(true, {\r\n                    url: o.source,\r\n                    type: 'POST',\r\n                    dataType: 'json',\r\n                    data: ajaxData,\r\n                    success: $.proxy(function (items) {\r\n                        this.options.data = items;\r\n                        response.apply(response, arguments);\r\n                    }, this)\r\n                }, o.ajaxOptions || {}));\r\n            } else if (typeof o.source === 'function') {\r\n                o.source.apply(o.source, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Abort search process\r\n         * @private\r\n         */\r\n        _abortSearch: function () {\r\n            this.element.removeClass(this.options.loadingClass);\r\n            clearTimeout(this._searchTimeout);\r\n        },\r\n\r\n        /**\r\n         * Perform filtering in advance loaded items and returns search result\r\n         * @param {Array} items - all available items\r\n         * @param {String} term - search phrase\r\n         * @return {Object}\r\n         */\r\n        filter: function (items, term) {\r\n            var matcher = new RegExp(term.replace(/[\\-\\/\\\\\\^$*+?.()|\\[\\]{}]/g, '\\\\$&'), 'i'),\r\n                itemsArray = Array.isArray(items) ? items : $.map(items, function (element) {\r\n                    return element;\r\n                }),\r\n                property = this.options.filterProperty;\r\n\r\n            return $.grep(\r\n                itemsArray,\r\n                function (value) {\r\n                    return matcher.test(value[property] || value.id || value);\r\n                }\r\n            );\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Implement show all functionality and storing and display recent searches\r\n     */\r\n    $.widget('mage.suggest', $.mage.suggest, {\r\n        options: {\r\n            showRecent: false,\r\n            showAll: false,\r\n            storageKey: 'suggest',\r\n            storageLimit: 10\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            var recentItems;\r\n\r\n            if (this.options.showRecent && window.localStorage) {\r\n                recentItems = JSON.parse(localStorage.getItem(this.options.storageKey));\r\n\r\n                /**\r\n                 * @type {Array} - list of recently searched items\r\n                 * @private\r\n                 */\r\n                this._recentItems = Array.isArray(recentItems) ? recentItems : [];\r\n            }\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._on(this.dropdown, {\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 */\r\n                showAll: function (e) {\r\n                    e.stopImmediatePropagation();\r\n                    e.preventDefault();\r\n                    this.element.trigger('showAll');\r\n                }\r\n            });\r\n\r\n            if (this.options.showRecent || this.options.showAll) {\r\n                this._on({\r\n                    /**\r\n                     * @param {jQuery.Event} e\r\n                     */\r\n                    focus: function (e) {\r\n                        if (!this.isDropdownShown()) {\r\n                            this.search(e);\r\n                        }\r\n                    },\r\n                    showAll: this._showAll\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _showAll: function (e) {\r\n            this._abortSearch();\r\n            this._search(e, '', {\r\n                _allShown: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        search: function (e) {\r\n            if (!this._value()) {\r\n\r\n                if (this.options.showRecent) {\r\n\r\n                    if (this._recentItems.length) { //eslint-disable-line max-depth\r\n                        this._processResponse(e, this._recentItems, {});\r\n                    } else {\r\n                        this._showAll(e);\r\n                    }\r\n                } else if (this.options.showAll) {\r\n                    this._showAll(e);\r\n                }\r\n            }\r\n            this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _selectItem: function () {\r\n            this._superApply(arguments);\r\n\r\n            if (this._selectedItem && this._selectedItem.id && this.options.showRecent) {\r\n                this._addRecent(this._selectedItem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareDropdownContext: function () {\r\n            var context = this._superApply(arguments);\r\n\r\n            return $.extend(context, {\r\n                recentShown: $.proxy(function () {\r\n                    return this.options.showRecent;\r\n                }, this),\r\n                recentTitle: $.mage.__('Recent items'),\r\n                showAllTitle: $.mage.__('Show all...'),\r\n\r\n                /**\r\n                 * @return {Boolean}\r\n                 */\r\n                allShown: function () {\r\n                    return !!context._allShown;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Add selected item of search result into storage of recents\r\n         * @param {Object} item - label+id object\r\n         * @private\r\n         */\r\n        _addRecent: function (item) {\r\n            this._recentItems = $.grep(this._recentItems, function (obj) {\r\n                return obj.id !== item.id;\r\n            });\r\n            this._recentItems.unshift(item);\r\n            this._recentItems = this._recentItems.slice(0, this.options.storageLimit);\r\n            localStorage.setItem(this.options.storageKey, JSON.stringify(this._recentItems));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Implement multi suggest functionality\r\n     */\r\n    $.widget('mage.suggest', $.mage.suggest, {\r\n        options: {\r\n            multiSuggestWrapper: '<ul class=\"mage-suggest-choices\">' +\r\n                '<li class=\"mage-suggest-search-field\" data-role=\"parent-choice-element\"><' +\r\n                'label class=\"mage-suggest-search-label\"></label></li></ul>',\r\n            choiceTemplate: '<li class=\"mage-suggest-choice button\"><div><%- text %></div>' +\r\n            '<span class=\"mage-suggest-choice-close\" tabindex=\"-1\" ' +\r\n            'data-mage-init=\\'{\"actionLink\":{\"event\":\"removeOption\"}}\\'></span></li>',\r\n            selectedClass: 'mage-suggest-selected'\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            this.choiceTmpl = mageTemplate(this.options.choiceTemplate);\r\n\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this.valueField.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _render: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this._renderMultiselect();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Render selected options\r\n         * @private\r\n         */\r\n        _renderMultiselect: function () {\r\n            var that = this;\r\n\r\n            this.element.wrap(this.options.multiSuggestWrapper);\r\n            this.elementWrapper = this.element.closest('[data-role=\"parent-choice-element\"]');\r\n            $(function () {\r\n                that._getOptions()\r\n                    .each(function (i, option) {\r\n                        option = $(option);\r\n                        that._createOption({\r\n                            id: option.val(),\r\n                            label: option.text()\r\n                        });\r\n                    });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Array} array of DOM-elements\r\n         * @private\r\n         */\r\n        _getOptions: function () {\r\n            return this.valueField.find('option');\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect) {\r\n                this._on({\r\n                    /**\r\n                     * @param {jQuery.Event} event\r\n                     */\r\n                    keydown: function (event) {\r\n                        if (event.keyCode === $.ui.keyCode.BACKSPACE) {\r\n                            if (!this._value()) {\r\n                                this._removeLastAdded(event);\r\n                            }\r\n                        }\r\n                    },\r\n                    removeOption: this.removeOption\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} items\r\n         * @return {Array}\r\n         * @private\r\n         */\r\n        _filterSelected: function (items) {\r\n            var options = this._getOptions();\r\n\r\n            return $.grep(items, function (value) {\r\n                var itemSelected = false;\r\n\r\n                $.each(options, function () {\r\n                    if (value.id == $(this).val()) { //eslint-disable-line eqeqeq\r\n                        itemSelected = true;\r\n                    }\r\n                });\r\n\r\n                return !itemSelected;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            if (this.options.multiselect) {\r\n                items = this._filterSelected(items, context);\r\n            }\r\n            this._superApply([e, items, context]);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareValueField: function () {\r\n            this._super();\r\n\r\n            if (this.options.multiselect && !this.options.valueField && this.options.selectedItems) {\r\n                $.each(this.options.selectedItems, $.proxy(function (i, item) {\r\n                    this._addOption(item);\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If \"multiselect\" option is set, then do not need to clear value for hidden select, to avoid losing of\r\n         *      previously selected items\r\n         * @override\r\n         */\r\n        _resetSuggestValue: function () {\r\n            if (!this.options.multiselect) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _createValueField: function () {\r\n            if (this.options.multiselect) {\r\n                return $('<select></select>', {\r\n                    type: 'hidden',\r\n                    multiple: 'multiple'\r\n                });\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _selectItem: function (e) {\r\n            if (this.options.multiselect) {\r\n                if (this._focused) {\r\n                    this._selectedItem = this._focused;\r\n\r\n                    /* eslint-disable max-depth */\r\n                    if (this._selectedItem !== this._nonSelectedItem) {\r\n                        this._term = '';\r\n                        this.element.val(this._term);\r\n\r\n                        if (this._isItemSelected(this._selectedItem)) {\r\n                            $(e.target).removeClass(this.options.selectedClass);\r\n                            this.removeOption(e, this._selectedItem);\r\n                            this._selectedItem = this._nonSelectedItem;\r\n                        } else {\r\n                            $(e.target).addClass(this.options.selectedClass);\r\n                            this._addOption(e, this._selectedItem);\r\n                        }\r\n                    }\r\n\r\n                    /* eslint-enable max-depth */\r\n                }\r\n                this.close(e);\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _isItemSelected: function (item) {\r\n            if (this.options.multiselect) {\r\n                return this.valueField.find('option[value=' + item.id + ']').length > 0;\r\n            }\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} item\r\n         * @return {Element}\r\n         * @private\r\n         */\r\n        _createOption: function (item) {\r\n            var option = this._getOption(item);\r\n\r\n            if (!option.length) {\r\n                option = $('<option>', {\r\n                    value: item.id,\r\n                    selected: true\r\n                }).text(item.label);\r\n            }\r\n\r\n            return option.data('renderedOption', this._renderOption(item));\r\n        },\r\n\r\n        /**\r\n         * Add selected item in to select options\r\n         * @param {Object} e - event object\r\n         * @param {*} item\r\n         * @private\r\n         */\r\n        _addOption: function (e, item) {\r\n            this.valueField.append(this._createOption(item).data('selectTarget', $(e.target)));\r\n        },\r\n\r\n        /**\r\n         * @param {Object|Element} item\r\n         * @return {Element}\r\n         * @private\r\n         */\r\n        _getOption: function (item) {\r\n            return $(item).prop('tagName') ?\r\n                $(item) :\r\n                this.valueField.find('option[value=' + item.id + ']');\r\n        },\r\n\r\n        /**\r\n         * Remove last added option\r\n         * @private\r\n         * @param {Object} e - event object\r\n         */\r\n        _removeLastAdded: function (e) {\r\n            var lastAdded = this._getOptions().last();\r\n\r\n            if (lastAdded.length) {\r\n                this.removeOption(e, lastAdded);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove item from select options\r\n         * @param {Object} e - event object\r\n         * @param {Object} item\r\n         * @private\r\n         */\r\n        removeOption: function (e, item) {\r\n            var option = this._getOption(item),\r\n                selectTarget = option.data('selectTarget');\r\n\r\n            if (selectTarget && selectTarget.length) {\r\n                selectTarget.removeClass(this.options.selectedClass);\r\n            }\r\n\r\n            option.data('renderedOption').remove();\r\n            option.remove();\r\n        },\r\n\r\n        /**\r\n         * Render visual element of selected item\r\n         * @param {Object} item - selected item\r\n         * @private\r\n         */\r\n        _renderOption: function (item) {\r\n            var tmpl = this.choiceTmpl({\r\n                text: item.label\r\n            });\r\n\r\n            return $(tmpl)\r\n                .insertBefore(this.elementWrapper)\r\n                .trigger('contentUpdated')\r\n                .on('removeOption', $.proxy(function (e) {\r\n                    this.removeOption(e, item);\r\n                }, this));\r\n        }\r\n    });\r\n\r\n    return $.mage.suggest;\r\n});\r\n","mage/backend/tabs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'jquery/ui-modules/widgets/tabs'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var rhash, isLocal;\r\n\r\n    // mage.tabs base functionality\r\n    $.widget('mage.tabs', $.ui.tabs, {\r\n        options: {\r\n            spinner: false,\r\n            groups: null,\r\n            tabPanelClass: '',\r\n            excludedPanel: ''\r\n        },\r\n\r\n        /**\r\n         * Tabs creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            var activeIndex = this._getTabIndex(this.options.active);\r\n\r\n            this.options.active = activeIndex >= 0 ? activeIndex : 0;\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         * @private\r\n         * @return {Array} Array of DOM-elements\r\n         */\r\n        _getList: function () {\r\n            if (this.options.groups) {\r\n                return this.element.find(this.options.groups);\r\n            }\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Get active anchor\r\n         * @return {Element}\r\n         */\r\n        activeAnchor: function () {\r\n            return this.anchors.eq(this.option('active'));\r\n        },\r\n\r\n        /**\r\n         * Get tab index by tab id\r\n         * @protected\r\n         * @param {String} id - id of tab\r\n         * @return {Number}\r\n         */\r\n        _getTabIndex: function (id) {\r\n            var anchors = this.anchors ?\r\n                this.anchors :\r\n                this._getList().find('> li > a[href]');\r\n\r\n            return anchors.index($('#' + id));\r\n        },\r\n\r\n        /**\r\n         * Switch between tabs\r\n         * @protected\r\n         * @param {Object} event - event object\r\n         * @param {undefined|Object} eventData\r\n         */\r\n        _toggle: function (event, eventData) {\r\n            var anchor = $(eventData.newTab).find('a');\r\n\r\n            if ($(eventData.newTab).find('a').data().tabType === 'link') {\r\n                location.href = anchor.prop('href');\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        }\r\n    });\r\n\r\n    rhash = /#.*$/;\r\n\r\n    /**\r\n     * @param {*} anchor\r\n     * @return {Boolean}\r\n     */\r\n    isLocal = function (anchor) {\r\n        return anchor.hash.length > 1 &&\r\n            anchor.href.replace(rhash, '') ===\r\n                location.href.replace(rhash, '')\r\n                    // support: Safari 5.1\r\n                    // Safari 5.1 doesn't encode spaces in window.location\r\n                    // but it does encode spaces from anchors (#8777)\r\n                    .replace(/\\s/g, '%20');\r\n    };\r\n\r\n    // Extension for mage.tabs - Move panels in destination element\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        /**\r\n         * Move panels in destination element on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            this._super();\r\n            this._movePanelsInDestination(this.panels);\r\n        },\r\n\r\n        /**\r\n         * Get panel for tab. If panel no exist in tabs container, then find panel in destination element\r\n         * @protected\r\n         * @override\r\n         * @param {Element} tab - tab \"li\" DOM-element\r\n         * @return {Element}\r\n         */\r\n        _getPanelForTab: function (tab) {\r\n            var panel = this._superApply(arguments),\r\n                id;\r\n\r\n            if (!panel.length) {\r\n                id = $(tab).attr('aria-controls');\r\n                panel = $(this.options.destination).find(this._sanitizeSelector('#' + id));\r\n            }\r\n\r\n            return panel;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _processTabs: function () {\r\n            var that = this;\r\n\r\n            this.tablist = this._getList()\r\n                .addClass('ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all')\r\n                .attr('role', 'tablist');\r\n\r\n            this.tabs = this.tablist.find('> li:has(a[href])')\r\n                .addClass('ui-state-default ui-corner-top')\r\n                .attr({\r\n                    role: 'tab',\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.anchors = this.tabs.map(function () {\r\n                return $('a', this)[ 0 ];\r\n            })\r\n                .addClass('ui-tabs-anchor')\r\n                .attr({\r\n                    role: 'presentation',\r\n                    tabIndex: -1\r\n                });\r\n\r\n            this.panels = $();\r\n\r\n            this.anchors.each(function (i, anchor) {\r\n                var selector, panel, panelId,\r\n                    anchorId = $(anchor).uniqueId().attr('id'),\r\n                    tab = $(anchor).closest('li'),\r\n                    originalAriaControls = tab.attr('aria-controls');\r\n\r\n                // inline tab\r\n                if (isLocal(anchor)) {\r\n                    selector = anchor.hash;\r\n                    panel = that.document.find(that._sanitizeSelector(selector));\r\n                    // remote tab\r\n                } else {\r\n                    panelId = tab.attr('aria-controls') || $({}).uniqueId()[ 0 ].id;\r\n                    selector = '#' + panelId;\r\n                    panel = that.element.find(selector);\r\n\r\n                    if (!panel.length) {\r\n                        panel = that._createPanel(panelId);\r\n                        panel.insertAfter(that.panels[ i - 1 ] || that.tablist);\r\n                    }\r\n                    panel.attr('aria-live', 'polite');\r\n                }\r\n\r\n                if (panel.length) {\r\n                    that.panels = that.panels.add(panel);\r\n                }\r\n\r\n                if (originalAriaControls) {\r\n                    tab.data('ui-tabs-aria-controls', originalAriaControls);\r\n                }\r\n                tab.attr({\r\n                    'aria-controls': selector.substring(1),\r\n                    'aria-labelledby': anchorId\r\n                });\r\n                panel.attr('aria-labelledby', anchorId);\r\n\r\n                if (that.options.excludedPanel.indexOf(anchorId + '_content') < 0) {\r\n                    panel.addClass(that.options.tabPanelClass);\r\n                }\r\n            });\r\n\r\n            this.panels\r\n                .addClass('ui-tabs-panel ui-widget-content ui-corner-bottom')\r\n                .attr('role', 'tabpanel');\r\n        },\r\n\r\n        /**\r\n         * Move panels in destination element\r\n         * @protected\r\n         * @override\r\n         */\r\n        _movePanelsInDestination: function (panels) {\r\n            if (this.options.destination && !panels.parents(this.options.destination).length) {\r\n                this.element.trigger('beforePanelsMove', panels);\r\n\r\n                panels.find('script:not([type]), script[type=\"text/javascript\"]').remove();\r\n\r\n                panels.appendTo(this.options.destination)\r\n                    .each($.proxy(function (i, panel) {\r\n                        $(panel).trigger('move.tabs', this.anchors.eq(i));\r\n                    }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Move panels in destination element on tabs switching\r\n         * @protected\r\n         * @override\r\n         * @param {Object} event - event object\r\n         * @param {Object} eventData\r\n         */\r\n        _toggle: function (event, eventData) {\r\n            this._movePanelsInDestination(eventData.newPanel);\r\n            this._superApply(arguments);\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Ajax functionality for tabs\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        options: {\r\n            /**\r\n             * Add form key to ajax call\r\n             * @param {Object} event - event object\r\n             * @param {Object} ui\r\n             */\r\n            beforeLoad: function (event, ui) {\r\n                ui.ajaxSettings.type = 'POST';\r\n                ui.ajaxSettings.hasContent = true;\r\n                ui.jqXHR.setRequestHeader('Content-Type', ui.ajaxSettings.contentType);\r\n                ui.ajaxSettings.data = jQuery.param(\r\n                    {\r\n                        isAjax: true,\r\n                        'form_key': typeof FORM_KEY !== 'undefined' ? FORM_KEY : null\r\n                    },\r\n                    ui.ajaxSettings.traditional\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Replacing href attribute with loaded panel id\r\n             * @param {Object} event - event object\r\n             * @param {Object} ui\r\n             */\r\n            load: function (event, ui) {\r\n                var panel = $(ui.panel);\r\n\r\n                $(ui.tab).prop('href', '#' + panel.prop('id'));\r\n                panel.trigger('contentUpdated');\r\n            }\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Attach event handlers to tabs\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        options: {\r\n            tabIdArgument: 'tab',\r\n            tabsBlockPrefix: null\r\n        },\r\n\r\n        /**\r\n         * Attach event handlers to tabs, on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _refresh: function () {\r\n            this._super();\r\n            $.each(this.tabs, $.proxy(function (i, tab) {\r\n                $(this._getPanelForTab(tab))\r\n                    .off('changed' + this.eventNamespace)\r\n                    .off('highlight.validate' + this.eventNamespace)\r\n                    .off('focusin' + this.eventNamespace)\r\n\r\n                    .on('changed' + this.eventNamespace, {\r\n                        index: i\r\n                    }, $.proxy(this._onContentChange, this))\r\n                    .on('highlight.validate' + this.eventNamespace, {\r\n                        index: i\r\n                    }, $.proxy(this._onInvalid, this))\r\n                    .on('focusin' + this.eventNamespace, {\r\n                        index: i\r\n                    }, $.proxy(this._onFocus, this));\r\n            }, this));\r\n\r\n            ($(this.options.destination).is('form') ?\r\n                $(this.options.destination) :\r\n                $(this.options.destination).closest('form'))\r\n                    .off('beforeSubmit' + this.eventNamespace)\r\n                    .on('beforeSubmit' + this.eventNamespace, $.proxy(this._onBeforeSubmit, this));\r\n        },\r\n\r\n        /**\r\n         * Mark tab as changed if some field inside tab panel is changed\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         */\r\n        _onContentChange: function (e) {\r\n            var cssChanged = '_changed';\r\n\r\n            this.anchors.eq(e.data.index).addClass(cssChanged);\r\n            this._updateNavTitleMessages(e, cssChanged);\r\n        },\r\n\r\n        /**\r\n         * Clone messages (tooltips) from anchor to parent element\r\n         * @protected\r\n         * @param {Object} e - event object\r\n         * @param {String} messageType - changed or error\r\n         */\r\n        _updateNavTitleMessages: function (e, messageType) {\r\n            var curAnchor = this.anchors.eq(e.data.index),\r\n                curItem = curAnchor.parents('[data-role=\"container\"]').find('[data-role=\"title\"]'),\r\n                curItemMessages = curItem.find('[data-role=\"title-messages\"]'),\r\n                activeClass = '_active';\r\n\r\n            if (curItemMessages.is(':empty')) {\r\n                curAnchor\r\n                    .find('[data-role=\"item-messages\"]')\r\n                    .clone()\r\n                    .appendTo(curItemMessages);\r\n            }\r\n\r\n            curItemMessages.find('.' + messageType).addClass(activeClass);\r\n        },\r\n\r\n        /**\r\n         * Mark tab as error if some field inside tab panel is not passed validation\r\n         * @param {Object} e - event object\r\n         * @protected\r\n         */\r\n        _onInvalid: function (e) {\r\n            var cssError = '_error',\r\n                fakeEvent = e;\r\n\r\n            fakeEvent.currentTarget = $(this.anchors).eq(e.data.index);\r\n            this._eventHandler(fakeEvent);\r\n            this.anchors.eq(e.data.index).addClass(cssError).find('.' + cssError).show();\r\n            this._updateNavTitleMessages(e, cssError);\r\n        },\r\n\r\n        /**\r\n         * Show tab panel if focus event triggered of some field inside tab panel\r\n         * @param {Object} e - event object\r\n         * @protected\r\n         */\r\n        _onFocus: function (e) {\r\n            this.option('_active', e.data.index);\r\n        },\r\n\r\n        /**\r\n         * Add active tab id in data object when \"beforeSubmit\" event is triggered\r\n         * @param {Object} e - event object\r\n         * @param {Object} data - event data object\r\n         * @protected\r\n         */\r\n        _onBeforeSubmit: function (e, data) { //eslint-disable-line no-unused-vars\r\n            var activeAnchor = this.activeAnchor(),\r\n                activeTabId = activeAnchor.prop('id'),\r\n                options;\r\n\r\n            if (this.options.tabsBlockPrefix) {\r\n                if (activeAnchor.is('[id*=\"' + this.options.tabsBlockPrefix + '\"]')) {\r\n                    activeTabId = activeAnchor.prop('id').substr(this.options.tabsBlockPrefix.length);\r\n                }\r\n            }\r\n            $(this.anchors).removeClass('error');\r\n            options = {\r\n                action: {\r\n                    args: {}\r\n                }\r\n            };\r\n            options.action.args[this.options.tabIdArgument] = activeTabId;\r\n        }\r\n    });\r\n\r\n    // Extension for mage.tabs - Shadow tabs functionality\r\n    $.widget('mage.tabs', $.mage.tabs, {\r\n        /**\r\n         * Add shadow tabs functionality on creation\r\n         * @protected\r\n         * @override\r\n         */\r\n        _refresh: function () {\r\n            var anchors, shadowTabs, tabs;\r\n\r\n            this._super();\r\n            anchors = this.anchors;\r\n            shadowTabs = this.options.shadowTabs;\r\n            tabs = this.tabs;\r\n\r\n            if (shadowTabs) {\r\n                anchors.each($.proxy(function (i, anchor) {\r\n                    var anchorId = $(anchor).prop('id');\r\n\r\n                    if (shadowTabs[anchorId]) {\r\n                        $(anchor).parents('li').on('click', $.proxy(function () {\r\n                            $.each(shadowTabs[anchorId], $.proxy(function (key, id) {\r\n                                this.load($(tabs).index($('#' + id).parents('li')), {});\r\n                            }, this));\r\n                        }, this));\r\n                    }\r\n                }, this));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n});\r\n","mage/backend/tree-suggest.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree',\r\n    'mage/backend/suggest'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /* jscs:disable requireCamelCaseOrUpperCaseIdentifiers */\r\n    var hover_node, dehover_node, select_node, init;\r\n\r\n    $.extend(true, $, {\r\n        // @TODO: Move method 'treeToList' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * @param {Array} list\r\n             * @param {Object} nodes\r\n             * @param {*} level\r\n             * @param {*} path\r\n             * @return {*}\r\n             */\r\n            treeToList: function (list, nodes, level, path) {\r\n                $.each(nodes, function () {\r\n                    if (typeof this === 'object') {\r\n                        list.push({\r\n                            label: this.label,\r\n                            id: this.id,\r\n                            level: level,\r\n                            item: this,\r\n                            path: path + this.label\r\n                        });\r\n\r\n                        if (this.children) {\r\n                            $.mage.treeToList(list, this.children, level + 1, path + this.label + ' / ');\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return list;\r\n            }\r\n        }\r\n    });\r\n\r\n    hover_node = $.jstree.core.prototype.hover_node;\r\n    dehover_node = $.jstree.core.prototype.dehover_node;\r\n    select_node = $.jstree.core.prototype.select_node;\r\n    init = $.jstree.core.prototype.init;\r\n\r\n    $.extend(true, $.jstree.core.prototype, {\r\n        /**\r\n         * @override\r\n         */\r\n        init: function () {\r\n            this.get_container()\r\n                .show()\r\n                .on('keydown', $.proxy(function (e) {\r\n                    var o;\r\n\r\n                    if (e.keyCode === $.ui.keyCode.ENTER) {\r\n                        o = this.data.ui.hovered || this.data.ui.last_selected || -1;\r\n                        this.select_node(o, true);\r\n                    }\r\n                }, this));\r\n            init.call(this);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        hover_node: function (obj) {\r\n            hover_node.apply(this, arguments);\r\n            obj = this._get_node(obj);\r\n\r\n            if (!obj.length) {\r\n                return false;\r\n            }\r\n            this.get_container().trigger('hover_node', [{\r\n                item: obj.find('a:first')\r\n            }]);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        dehover_node: function () {\r\n            dehover_node.call(this);\r\n            this.get_container().trigger('dehover_node');\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        select_node: function (o) {\r\n            var node;\r\n\r\n            select_node.apply(this, arguments);\r\n            node = this._get_node(o);\r\n\r\n            (node ? $(node) : this.data.ui.last_selected)\r\n                .trigger('select_tree_node');\r\n        }\r\n    });\r\n\r\n    $.widget('mage.treeSuggest', $.mage.suggest, {\r\n        widgetEventPrefix: 'suggest',\r\n        options: {\r\n            template:\r\n                '<% if (data.items.length) { %>' +\r\n                    '<% if (data.allShown()) { %>' +\r\n                        '<% if (typeof data.nested === \"undefined\") { %>' +\r\n                            '<div style=\"display:none;\" data-mage-init=\"{&quot;jstree&quot;:{&quot;plugins&quot;:[&quot;themes&quot;,&quot;html_data&quot;,&quot;ui&quot;,&quot;hotkeys&quot;],&quot;themes&quot;:{&quot;theme&quot;:&quot;default&quot;,&quot;dots&quot;:false,&quot;icons&quot;:false}}}\">' + //eslint-disable-line max-len\r\n                        '<% } %>' +\r\n                        '<ul>' +\r\n                            '<% _.each(data.items, function(value) { %>' +\r\n                                '<li class=\"<% if (data.itemSelected(value)) { %>mage-suggest-selected<% } %>' +\r\n                '                   <% if (value.is_active == 0) { %> mage-suggest-not-active<% } %>\">' +\r\n                                    '<a href=\"#\" <%= data.optionData(value) %>><%- value.label %></a>' +\r\n                                    '<% if (value.children && value.children.length) { %>' +\r\n                                        '<%= data.renderTreeLevel(value.children) %>' +\r\n                                    '<% } %>' +\r\n                                '</li>' +\r\n                            '<% }); %>' +\r\n                        '</ul>' +\r\n                        '<% if (typeof data.nested === \"undefined\") { %>' +\r\n                            '</div>' +\r\n                        '<% } %>' +\r\n                    '<% } else { %>' +\r\n                        '<ul data-mage-init=\"{&quot;menu&quot;:[]}\">' +\r\n                            '<% _.each(data.items, function(value) { %>' +\r\n                                '<% if (!data.itemSelected(value)) {%>' +\r\n                                    '<li <%= data.optionData(value) %>>' +\r\n                                        '<a href=\"#\">' +\r\n                                            '<span class=\"category-label\"><%- value.label %></span>' +\r\n                                            '<span class=\"category-path\"><%- value.path %></span>' +\r\n                                        '</a>' +\r\n                                    '</li>' +\r\n                                '<% } %>' +\r\n                            '<% }); %>' +\r\n                        '</ul>' +\r\n                    '<% } %>' +\r\n                '<% } else { %>' +\r\n                    '<span class=\"mage-suggest-no-records\"><%- data.noRecordsText %></span>' +\r\n                '<% } %>',\r\n            controls: {\r\n                selector: ':ui-menu, :mage-menu, .jstree',\r\n                eventsMap: {\r\n                    focus: ['menufocus', 'hover_node'],\r\n                    blur: ['menublur', 'dehover_node'],\r\n                    select: ['menuselect', 'select_tree_node']\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _bind: function () {\r\n            this._super();\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                keydown: function (event) {\r\n                    var keyCode = $.ui.keyCode;\r\n\r\n                    switch (event.keyCode) {\r\n                        case keyCode.LEFT:\r\n                        case keyCode.RIGHT:\r\n\r\n                            if (this.isDropdownShown()) {\r\n                                event.preventDefault();\r\n                                this._proxyEvents(event);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        close: function (e) {\r\n            var eType = e ? e.type : null;\r\n\r\n            if (eType === 'select_tree_node') {\r\n                this.element.focus();\r\n            } else {\r\n                this._superApply(arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _filterSelected: function (items, context) {\r\n            if (context._allShown) {\r\n                return items;\r\n            }\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _prepareDropdownContext: function () {\r\n            var context = this._superApply(arguments),\r\n                optionData = context.optionData,\r\n                templates = this.templates,\r\n                tmplName = this.templateName;\r\n\r\n            /**\r\n             * @param {Object} item\r\n             * @return {*|String}\r\n             */\r\n            context.optionData = function (item) {\r\n                item = $.extend({}, item);\r\n                delete item.children;\r\n\r\n                return optionData(item);\r\n            };\r\n\r\n            return $.extend(context, {\r\n                /**\r\n                 * @param {*} children\r\n                 * @return {*|jQuery}\r\n                 */\r\n                renderTreeLevel: function (children) {\r\n                    var _context = $.extend({}, this, {\r\n                        items: children,\r\n                        nested: true\r\n                    }),\r\n                    tmpl = templates[tmplName];\r\n\r\n                    tmpl = tmpl({\r\n                        data: _context\r\n                    });\r\n\r\n                    return $('<div>').append($(tmpl)).html();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        _processResponse: function (e, items, context) {\r\n            var control;\r\n\r\n            if (context && !context._allShown) {\r\n                items = this.filter($.mage.treeToList([], items, 0, ''), this._term);\r\n            }\r\n            control = this.dropdown.find(this._control.selector);\r\n\r\n            if (control.length && control.hasClass('jstree')) {\r\n                control.jstree('destroy');\r\n            }\r\n            this._superApply([e, items, context]);\r\n        }\r\n    });\r\n\r\n    return $.mage.treeSuggest;\r\n});\r\n","mage/backend/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global BASE_URL, alertAlreadyDisplayed */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'jquery/validate',\r\n    'mage/translate',\r\n    'mage/validation'\r\n], function ($, _, alert) {\r\n    'use strict';\r\n\r\n    $.extend(true, $.validator.prototype, {\r\n        /**\r\n         * Focus invalid fields\r\n         */\r\n        focusInvalid: function () {\r\n            if (this.settings.focusInvalid) {\r\n                try {\r\n                    $(this.errorList.length && this.errorList[0].element || [])\r\n                        .trigger('focus')\r\n                        .trigger('focusin');\r\n                } catch (e) {\r\n                    // ignore IE throwing errors when focusing hidden elements\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Elements.\r\n         */\r\n        elements: function () {\r\n            var validator = this,\r\n                rulesCache = {};\r\n\r\n            // select all valid inputs inside the form (no submit or reset buttons)\r\n            return $(this.currentForm)\r\n                .find('input, select, textarea')\r\n                .not(this.settings.forceIgnore)\r\n                .not(':submit, :reset, :image, [disabled]')\r\n                .not(this.settings.ignore)\r\n                .filter(function () {\r\n                    if (!this.name && validator.settings.debug && window.console) {\r\n                        console.error('%o has no name assigned', this);\r\n                    }\r\n\r\n                    // select only the first element for each name, and only those with rules specified\r\n                    if (this.name in rulesCache || !validator.objectLength($(this).rules())) {\r\n                        return false;\r\n                    }\r\n\r\n                    rulesCache[this.name] = true;\r\n\r\n                    return true;\r\n                });\r\n        }\r\n    });\r\n\r\n    $.extend($.fn, {\r\n        /**\r\n         * ValidationDelegate overridden for those cases where the form is located in another form,\r\n         *     to avoid not correct working of validate plug-in\r\n         * @override\r\n         * @param {String} delegate - selector, if event target matched against this selector,\r\n         *     then event will be delegated\r\n         * @param {String} type - event type\r\n         * @param {Function} handler - event handler\r\n         * @return {Element}\r\n         */\r\n        validateDelegate: function (delegate, type, handler) {\r\n            return this.on(type, $.proxy(function (event) {\r\n                var target = $(event.target),\r\n                    form = target[0].form;\r\n\r\n                if (form && $(form).is(this) && $.data(form, 'validator') && target.is(delegate)) {\r\n                    return handler.apply(target, arguments);\r\n                }\r\n            }, this));\r\n        }\r\n    });\r\n\r\n    $.widget('mage.validation', $.mage.validation, {\r\n        options: {\r\n            messagesId: 'messages',\r\n            forceIgnore: '',\r\n            ignore: ':disabled, .ignore-validate, .no-display.template, ' +\r\n                ':disabled input, .ignore-validate input, .no-display.template input, ' +\r\n                ':disabled select, .ignore-validate select, .no-display.template select, ' +\r\n                ':disabled textarea, .ignore-validate textarea, .no-display.template textarea',\r\n            errorElement: 'label',\r\n            errorUrl: typeof BASE_URL !== 'undefined' ? BASE_URL : null,\r\n\r\n            /**\r\n             * @param {HTMLElement} element\r\n             */\r\n            highlight: function (element) {\r\n                if ($.validator.defaults.highlight && typeof $.validator.defaults.highlight === 'function') {\r\n                    $.validator.defaults.highlight.apply(this, arguments);\r\n                }\r\n                $(element).trigger('highlight.validate');\r\n            },\r\n\r\n            /**\r\n             * @param {HTMLElement} element\r\n             */\r\n            unhighlight: function (element) {\r\n                if ($.validator.defaults.unhighlight && typeof $.validator.defaults.unhighlight === 'function') {\r\n                    $.validator.defaults.unhighlight.apply(this, arguments);\r\n                }\r\n                $(element).trigger('unhighlight.validate');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            if (!this.options.submitHandler && typeof this.options.submitHandler !== 'function') {\r\n                if (!this.options.frontendOnly && this.options.validationUrl) {\r\n                    this.options.submitHandler = $.proxy(this._ajaxValidate, this);\r\n                } else {\r\n                    this.options.submitHandler = $.proxy(this._submit, this);\r\n                }\r\n            }\r\n            this.element.on('resetElement', function (e) {\r\n                $(e.target).rules('remove');\r\n            });\r\n            this._super('_create');\r\n        },\r\n\r\n        /**\r\n         * ajax validation\r\n         * @protected\r\n         */\r\n        _ajaxValidate: function () {\r\n            $.ajax({\r\n                url: this.options.validationUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: this.element.serialize(),\r\n                context: $('body'),\r\n                success: $.proxy(this._onSuccess, this),\r\n                error: $.proxy(this._onError, this),\r\n                showLoader: true,\r\n                dontHide: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Process ajax success.\r\n         *\r\n         * @protected\r\n         * @param {Object} response\r\n         */\r\n        _onSuccess: function (response) {\r\n            if (!response.error) {\r\n                this._submit();\r\n            } else {\r\n                this._showErrors(response);\r\n                $(this.element[0]).trigger('afterValidate.error');\r\n                $('body').trigger('processStop');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Submitting a form.\r\n         * @private\r\n         */\r\n        _submit: function () {\r\n            $(this.element[0]).trigger('afterValidate.beforeSubmit');\r\n            this.element[0].submit();\r\n        },\r\n\r\n        /**\r\n         * Displays errors after backend validation.\r\n         *\r\n         * @param {Object} data - Data that came from backend.\r\n         */\r\n        _showErrors: function (data) {\r\n            $('body').notification('clear')\r\n                .notification('add', {\r\n                    error: data.error,\r\n                    message: data.message,\r\n\r\n                    /**\r\n                     * @param {*} message\r\n                     */\r\n                    insertMethod: function (message) {\r\n                        $('.messages:first').html(message);\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Tries to retrieve element either by id or by inputs' name property.\r\n         * @param {String} code - String to search by.\r\n         * @returns {jQuery} jQuery element.\r\n         */\r\n        _getByCode: function (code) {\r\n            var parent = this.element[0],\r\n                element;\r\n\r\n            element = parent.querySelector('#' + code) || parent.querySelector('input[name=' + code + ']');\r\n\r\n            return $(element);\r\n        },\r\n\r\n        /**\r\n         * Process ajax error\r\n         * @protected\r\n         */\r\n        _onError: function () {\r\n            $(this.element[0]).trigger('afterValidate.error');\r\n            $('body').trigger('processStop');\r\n\r\n            if (this.options.errorUrl) {\r\n                location.href = this.options.errorUrl;\r\n            }\r\n        }\r\n    });\r\n\r\n    _.each({\r\n        'validate-greater-zero-based-on-option': [\r\n            function (v, el) {\r\n                var optionType = $(el)\r\n                    .closest('.form-list')\r\n                    .prev('.fieldset-alt')\r\n                    .find('select.select-product-option-type'),\r\n                    optionTypeVal = optionType.val();\r\n\r\n                v = Number(v) || 0;\r\n\r\n                if (optionType && (optionTypeVal == 'checkbox' || optionTypeVal == 'multi') && v <= 0) { //eslint-disable-line\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a number greater 0 in this field.')\r\n        ],\r\n        'validate-rating': [\r\n            function () {\r\n                var ratings = $('#detailed_rating').find('.field-rating'),\r\n                    noError = true;\r\n\r\n                ratings.each(function (index, rating) {\r\n                    noError = noError && $(rating).find('input:checked').length > 0;\r\n                });\r\n\r\n                return noError;\r\n            },\r\n            $.mage.__('Please select one of each ratings above.')\r\n        ],\r\n        'validate-downloadable-file': [\r\n            function (v, element) {\r\n                var elmParent = $(element).parent(),\r\n                    linkType = elmParent.find('input[value=\"file\"]'),\r\n                    newFileContainer;\r\n\r\n                if (linkType.is(':checked') && (v === '' || v === '[]')) {\r\n                    newFileContainer = elmParent.find('.new-file');\r\n\r\n                    if (!alertAlreadyDisplayed && (newFileContainer.empty() || newFileContainer.is(':visible'))) {\r\n                        window.alertAlreadyDisplayed = true;\r\n                        alert({\r\n                            content: $.mage.__('There are files that were selected but not uploaded yet. ' +\r\n                            'Please upload or remove them first')\r\n                        });\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            'Please upload a file.'\r\n        ],\r\n        'validate-downloadable-url': [\r\n            function (v, element) {\r\n                var linkType = $(element).parent().find('input[value=\"url\"]');\r\n\r\n                if (linkType.is(':checked') && v === '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please specify Url.')\r\n        ]\r\n    }, function (rule, i) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n\r\n    return $.mage.validation;\r\n});\r\n","mage/msie/file-reader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Init \"readAsBinaryString\" function for FileReader class.\r\n     * It need for IE11\r\n     * @param {Blob} fileData\r\n     */\r\n    var readAsBinaryStringIEFunc = function (fileData) {\r\n        var binary = '',\r\n            self = this,\r\n            reader = new FileReader();\r\n\r\n        /**\r\n         * Read file as binary string\r\n         */\r\n        reader.onload = function () {\r\n            var bytes, length, index;\r\n\r\n            /* eslint-disable no-undef */\r\n            bytes = new Uint8Array(reader.result);\r\n            /* eslint-enable */\r\n            length = bytes.length;\r\n\r\n            for (index = 0; index < length; index++) {\r\n                binary += String.fromCharCode(bytes[index]);\r\n            }\r\n            //self.result  - readonly so assign binary\r\n            self.content = binary;\r\n            $(self).trigger('onload');\r\n        };\r\n        reader.readAsArrayBuffer(fileData);\r\n    };\r\n\r\n    if (typeof FileReader.prototype.readAsBinaryString === 'undefined') {\r\n        FileReader.prototype.readAsBinaryString = readAsBinaryStringIEFunc;\r\n    }\r\n});\r\n","mage/requirejs/baseUrlResolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Sample configuration:\r\n *\r\n require.config({\r\n        \"config\": {\r\n            \"baseUrlInterceptor\": {\r\n                \"Magento_Ui/js/lib/knockout/bindings/collapsible.js\": \"../../../../frontend/Magento/luma/en_US/\"\r\n            }\r\n        }\r\n    });\r\n */\r\n\r\n/* global jsSuffixRegExp */\r\n/* eslint-disable max-depth */\r\ndefine('baseUrlInterceptor', [\r\n    'module'\r\n], function (module) {\r\n    'use strict';\r\n\r\n    /**\r\n     * RequireJS Context object\r\n     */\r\n    var ctx = require.s.contexts._,\r\n\r\n        /**\r\n         * Original function\r\n         *\r\n         * @type {Function}\r\n         */\r\n        origNameToUrl = ctx.nameToUrl,\r\n\r\n        /**\r\n         * Original function\r\n         *\r\n         * @type {Function}\r\n         */\r\n        newContextConstr = require.s.newContext;\r\n\r\n    /**\r\n     * Remove dots from URL\r\n     *\r\n     * @param {Array} ary\r\n     */\r\n    function trimDots(ary) {\r\n        var i, part, length = ary.length;\r\n\r\n        for (i = 0; i < length; i++) {\r\n            part = ary[i];\r\n\r\n            if (part === '.') {\r\n                ary.splice(i, 1);\r\n                i -= 1;\r\n            } else if (part === '..') {\r\n                if (i === 1 && (ary[2] === '..' || ary[0] === '..')) {\r\n                    //End of the line. Keep at least one non-dot\r\n                    //path segment at the front so it can be mapped\r\n                    //correctly to disk. Otherwise, there is likely\r\n                    //no path mapping for a path starting with '..'.\r\n                    //This can still fail, but catches the most reasonable\r\n                    //uses of ..\r\n                    break;\r\n                } else if (i > 0) {\r\n                    ary.splice(i - 1, 2);\r\n                    i -= 2;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalize URL string (remove '/../')\r\n     *\r\n     * @param {String} name\r\n     * @param {String} baseName\r\n     * @param {Object} applyMap\r\n     * @param {Object} localContext\r\n     * @returns {*}\r\n     */\r\n    function normalize(name, baseName, applyMap, localContext) {\r\n        var lastIndex,\r\n            baseParts = baseName && baseName.split('/'),\r\n            normalizedBaseParts = baseParts;\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === '.') {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                //Convert baseName to array, and lop off the last part,\r\n                //so that . matches that 'directory' and not name of the baseName's\r\n                //module. For instance, baseName of 'one/two/three', maps to\r\n                //'one/two/three.js', but we want the directory, 'one/two' for\r\n                //this normalization.\r\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\r\n                name = name.split('/');\r\n                lastIndex = name.length - 1;\r\n\r\n                // If wanting node ID compatibility, strip .js from end\r\n                // of IDs. Have to do this here, and not in nameToUrl\r\n                // because node allows either .js or non .js to map\r\n                // to same file.\r\n                if (localContext.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\r\n                }\r\n\r\n                name = normalizedBaseParts.concat(name);\r\n                trimDots(name);\r\n                name = name.join('/');\r\n            } else if (name.indexOf('./') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Get full url.\r\n     *\r\n     * @param {Object} context\r\n     * @param {String} url\r\n     * @return {String}\r\n     */\r\n    function getUrl(context, url) {\r\n        var baseUrl = context.config.baseUrl,\r\n            newConfig = context.config,\r\n            modulePath = url.replace(baseUrl, ''),\r\n            newBaseUrl,\r\n            rewrite = module.config()[modulePath];\r\n\r\n        if (!rewrite) {\r\n            return url;\r\n        }\r\n\r\n        newBaseUrl = normalize(rewrite, baseUrl, undefined, newConfig);\r\n\r\n        return newBaseUrl + modulePath;\r\n    }\r\n\r\n    /**\r\n     * Replace original function.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    ctx.nameToUrl = function () {\r\n        return getUrl(ctx, origNameToUrl.apply(ctx, arguments));\r\n    };\r\n\r\n    /**\r\n     * Replace original function.\r\n     *\r\n     * @return {*}\r\n     */\r\n    require.s.newContext = function () {\r\n        var newCtx = newContextConstr.apply(require.s, arguments),\r\n            newOrigNameToUrl = newCtx.nameToUrl;\r\n\r\n        /**\r\n         * New implementation of native function.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        newCtx.nameToUrl = function () {\r\n            return getUrl(newCtx, newOrigNameToUrl.apply(newCtx, arguments));\r\n        };\r\n\r\n        return newCtx;\r\n    };\r\n});\r\n\r\nrequire(['baseUrlInterceptor'], function () {\r\n    'use strict';\r\n\r\n});\r\n","mage/requirejs/resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'domReady!'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var context = require.s.contexts._,\r\n        execCb = context.execCb,\r\n        registry = context.registry,\r\n        callbacks = [],\r\n        retries = 10,\r\n        updateDelay = 1,\r\n        ready,\r\n        update;\r\n\r\n    /**\r\n     * Checks if provided callback already exists in the callbacks list.\r\n     *\r\n     * @param {Object} callback - Callback object to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSubscribed(callback) {\r\n        return !!_.findWhere(callbacks, callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module is rejected during load.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @return {Boolean}\r\n     */\r\n    function isRejected(module) {\r\n        return registry[module.id] && (registry[module.id].inited || registry[module.id].error);\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module had path fallback triggered.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @return {Boolean}\r\n     */\r\n    function isPathFallback(module) {\r\n        return registry[module.id] && registry[module.id].events.error;\r\n    }\r\n\r\n    /**\r\n     * Checks if provided module has unresolved dependencies.\r\n     *\r\n     * @param {Object} module - Module to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isPending(module) {\r\n        if (!module.depCount) {\r\n            return false;\r\n        }\r\n\r\n        return module.depCount >\r\n            _.filter(module.depMaps, isRejected).length + _.filter(module.depMaps, isPathFallback).length;\r\n    }\r\n\r\n    /**\r\n     * Checks if requirejs's registry object contains pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function hasPending() {\r\n        return _.some(registry, isPending);\r\n    }\r\n\r\n    /**\r\n     * Checks if 'resolver' module is in ready\r\n     * state and that there are no pending modules.\r\n     *\r\n     * @returns {Boolean}\r\n     */\r\n    function isReady() {\r\n        return ready && !hasPending();\r\n    }\r\n\r\n    /**\r\n     * Invokes provided callback handler.\r\n     *\r\n     * @param {Object} callback\r\n     */\r\n    function invoke(callback) {\r\n        callback.handler.call(callback.ctx);\r\n    }\r\n\r\n    /**\r\n     * Sets 'resolver' module to a ready state\r\n     * and invokes pending callbacks.\r\n     */\r\n    function resolve() {\r\n        ready = true;\r\n\r\n        callbacks.splice(0).forEach(invoke);\r\n    }\r\n\r\n    /**\r\n     * Drops 'ready' flag and runs the update process.\r\n     */\r\n    function tick() {\r\n        ready = false;\r\n\r\n        update(retries);\r\n    }\r\n\r\n    /**\r\n     * Adds callback which will be invoked\r\n     * when all of the pending modules are initiated.\r\n     *\r\n     * @param {Function} handler - 'Ready' event handler function.\r\n     * @param {Object} [ctx] - Optional context with which handler\r\n     *      will be invoked.\r\n     */\r\n    function subscribe(handler, ctx) {\r\n        var callback = {\r\n            handler: handler,\r\n            ctx: ctx\r\n        };\r\n\r\n        if (!isSubscribed(callback)) {\r\n            callbacks.push(callback);\r\n\r\n            if (isReady()) {\r\n                _.defer(tick);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks for all modules to be initiated\r\n     * and invokes pending callbacks if it's so.\r\n     *\r\n     * @param {Number} [retry] - Number of retries\r\n     *      that will be used to repeat the 'update' function\r\n     *      invokation in case if there are no pending requests.\r\n     */\r\n    update = _.debounce(function (retry) {\r\n        if (!hasPending()) {\r\n            retry ? update(--retry) : resolve();\r\n        }\r\n    }, updateDelay);\r\n\r\n    /**\r\n     * Overrides requirejs's original 'execCb' method\r\n     * in order to track pending modules.\r\n     *\r\n     * @returns {*} Result of original method call.\r\n     */\r\n    context.execCb = function () {\r\n        var exported = execCb.apply(context, arguments);\r\n\r\n        tick();\r\n\r\n        return exported;\r\n    };\r\n\r\n    return subscribe;\r\n});\r\n","mage/requirejs/text.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/* inspired by http://github.com/requirejs/text */\r\n/*global XDomainRequest */\r\n\r\ndefine(['module'], function (module) {\r\n    'use strict';\r\n\r\n    var xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\r\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\r\n        stripReg = /!strip$/i,\r\n        defaultConfig = module.config && module.config() || {};\r\n\r\n    /**\r\n     * Strips <?xml ...?> declarations so that external SVG and XML documents can be\r\n     * added to a document without worry.\r\n     * Also, if the string is an HTML document, only the part inside the body tag is returned.\r\n     *\r\n     * @param {String} external\r\n     * @returns {String}\r\n     */\r\n    function stripContent(external) {\r\n        var matches;\r\n\r\n        if (!external) {\r\n            return '';\r\n        }\r\n\r\n        matches = external.match(bodyRegExp);\r\n        external = matches ?\r\n            matches[1] :\r\n            external.replace(xmlRegExp, '');\r\n\r\n        return external;\r\n    }\r\n\r\n    /**\r\n     * Checks that url match current location\r\n     *\r\n     * @param {String} url\r\n     * @returns {Boolean}\r\n     */\r\n    function sameDomain(url) {\r\n        var uProtocol, uHostName, uPort,\r\n            xdRegExp = /^([\\w:]+)?\\/\\/([^\\/\\\\]+)/i,\r\n            location = window.location,\r\n            match = xdRegExp.exec(url);\r\n\r\n        if (!match) {\r\n            return true;\r\n        }\r\n        uProtocol = match[1];\r\n        uHostName = match[2];\r\n\r\n        uHostName = uHostName.split(':');\r\n        uPort = uHostName[1] || '';\r\n        uHostName = uHostName[0];\r\n\r\n        return (!uProtocol || uProtocol === location.protocol) &&\r\n            (!uHostName || uHostName.toLowerCase() === location.hostname.toLowerCase()) &&\r\n            (!uPort && !uHostName || uPort === location.port);\r\n    }\r\n\r\n    /**\r\n     * @returns {XMLHttpRequest|XDomainRequest|null}\r\n     */\r\n    function createRequest(url) {\r\n        var xhr = new XMLHttpRequest();\r\n\r\n        if (!sameDomain(url) && typeof XDomainRequest !== 'undefined') {\r\n            xhr = new XDomainRequest();\r\n        }\r\n\r\n        return xhr;\r\n    }\r\n\r\n    /**\r\n     * XHR requester. Returns value to callback.\r\n     *\r\n     * @param {String} url\r\n     * @param {Function} callback\r\n     * @param {Function} fail\r\n     * @param {Object} headers\r\n     */\r\n    function getContent(url, callback, fail, headers) {\r\n        var xhr = createRequest(url),\r\n            header;\r\n\r\n        xhr.open('GET', url);\r\n\r\n        /*eslint-disable max-depth */\r\n        if ('setRequestHeader' in xhr && headers) {\r\n            for (header in headers) {\r\n                if (headers.hasOwnProperty(header)) {\r\n                    xhr.setRequestHeader(header.toLowerCase(), headers[header]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        xhr.onreadystatechange = function () {\r\n            var status, err;\r\n\r\n            //Do not explicitly handle errors, those should be\r\n            //visible via console output in the browser.\r\n            if (xhr.readyState === 4) {\r\n                status = xhr.status || 0;\r\n\r\n                if (status > 399 && status < 600) {\r\n                    //An http 4xx or 5xx error. Signal an error.\r\n                    err = new Error(url + ' HTTP status: ' + status);\r\n                    err.xhr = xhr;\r\n\r\n                    if (fail) {\r\n                        fail(err);\r\n                    }\r\n                } else {\r\n                    callback(xhr.responseText);\r\n\r\n                    if (defaultConfig.onXhrComplete) {\r\n                        defaultConfig.onXhrComplete(xhr, url);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /*eslint-enable max-depth */\r\n\r\n        if (defaultConfig.onXhr) {\r\n            defaultConfig.onXhr(xhr, url);\r\n        }\r\n\r\n        xhr.send();\r\n    }\r\n\r\n    /**\r\n     * Main method used by RequireJs.\r\n     *\r\n     * @param {String} name - has format: some.module.filext!strip\r\n     * @param {Function} req\r\n     * @param {Function|undefined} onLoad\r\n     */\r\n    function loadContent(name, req, onLoad) {\r\n\r\n        var toStrip = stripReg.test(name),\r\n            url = req.toUrl(name.replace(stripReg, '')),\r\n            headers = defaultConfig.headers;\r\n\r\n        getContent(url, function (content) {\r\n                content = toStrip ? stripContent(content) : content;\r\n                onLoad(content);\r\n            }, onLoad.error, headers);\r\n    }\r\n\r\n    return {\r\n        load: loadContent,\r\n        get: getContent\r\n    };\r\n});\r\n","mage/utils/arrays.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    './strings'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines index of an item in a specified container.\r\n     *\r\n     * @param {*} item - Item whose index should be defined.\r\n     * @param {Array} container - Container upon which to perform search.\r\n     * @returns {Number}\r\n     */\r\n    function getIndex(item, container) {\r\n        var index = container.indexOf(item);\r\n\r\n        if (~index) {\r\n            return index;\r\n        }\r\n\r\n        return _.findIndex(container, function (value) {\r\n            return value && value.name === item;\r\n        });\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Facade method to remove/add value from/to array\r\n         * without creating a new instance.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to add/remove.\r\n         * @param {Boolean} add - Flag that specfies operation.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        toggle: function (arr, value, add) {\r\n            return add ?\r\n                this.add(arr, value) :\r\n                this.remove(arr, value);\r\n        },\r\n\r\n        /**\r\n         * Removes the incoming value from array in case\r\n         * without creating a new instance of it.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to be removed.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        remove: function (arr, value) {\r\n            var index = arr.indexOf(value);\r\n\r\n            if (~index) {\r\n                arr.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds the incoming value to array if\r\n         * it's not alredy present in there.\r\n         *\r\n         * @param {Array} arr - Array to be modifed.\r\n         * @param {...*} arguments - Values to be added.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        add: function (arr) {\r\n            var values = _.toArray(arguments).slice(1);\r\n\r\n            values.forEach(function (value) {\r\n                if (!~arr.indexOf(value)) {\r\n                    arr.push(value);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inserts specified item into container at a specified position.\r\n         *\r\n         * @param {*} item - Item to be inserted into container.\r\n         * @param {Array} container - Container of items.\r\n         * @param {*} [position=-1] - Position at which item should be inserted.\r\n         *      Position can represent:\r\n         *          - specific index in container\r\n         *          - item which might already be present in container\r\n         *          - structure with one of these properties: after, before\r\n         * @returns {Boolean|*}\r\n         *      - true if element has changed its' position\r\n         *      - false if nothing has changed\r\n         *      - inserted value if it wasn't present in container\r\n         */\r\n        insert: function (item, container, position) {\r\n            var currentIndex = getIndex(item, container),\r\n                newIndex,\r\n                target;\r\n\r\n            if (typeof position === 'undefined') {\r\n                position = -1;\r\n            } else if (typeof position === 'string') {\r\n                position = isNaN(+position) ? position : +position;\r\n            }\r\n\r\n            newIndex = position;\r\n\r\n            if (~currentIndex) {\r\n                target = container.splice(currentIndex, 1)[0];\r\n\r\n                if (typeof item === 'string') {\r\n                    item = target;\r\n                }\r\n            }\r\n\r\n            if (typeof position !== 'number') {\r\n                target = position.after || position.before || position;\r\n\r\n                newIndex = getIndex(target, container);\r\n\r\n                if (~newIndex && (position.after || newIndex >= currentIndex)) {\r\n                    newIndex++;\r\n                }\r\n            }\r\n\r\n            if (newIndex < 0) {\r\n                newIndex += container.length + 1;\r\n            }\r\n\r\n            container[newIndex] ?\r\n                container.splice(newIndex, 0, item) :\r\n                container[newIndex] = item;\r\n\r\n            return !~currentIndex ? item : currentIndex !== newIndex;\r\n        },\r\n\r\n        /**\r\n         * @param {Array} elems\r\n         * @param {Number} offset\r\n         * @return {Number|*}\r\n         */\r\n        formatOffset: function (elems, offset) {\r\n            if (utils.isEmpty(offset)) {\r\n                offset = -1;\r\n            }\r\n\r\n            offset = +offset;\r\n\r\n            if (offset < 0) {\r\n                offset += elems.length + 1;\r\n            }\r\n\r\n            return offset;\r\n        }\r\n    };\r\n});\r\n","mage/utils/compare.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/utils/objects'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var result = [];\r\n\r\n    /**\r\n     * Checks if all of the provided arrays contains equal values.\r\n     *\r\n     * @param {(Boolean|Array)} [keepOrder=false]\r\n     * @param {Array} target\r\n     * @returns {Boolean}\r\n     */\r\n    function equalArrays(keepOrder, target) {\r\n        var args = _.toArray(arguments),\r\n            arrays;\r\n\r\n        if (!Array.isArray(keepOrder)) {\r\n            arrays      = args.slice(2);\r\n        } else {\r\n            target      = keepOrder;\r\n            keepOrder   = false;\r\n            arrays      = args.slice(1);\r\n        }\r\n\r\n        if (!arrays.length) {\r\n            return true;\r\n        }\r\n\r\n        return arrays.every(function (array) {\r\n            if (array === target) {\r\n                return true;\r\n            } else if (array.length !== target.length) {\r\n                return false;\r\n            } else if (!keepOrder) {\r\n                return !_.difference(target, array).length;\r\n            }\r\n\r\n            return array.every(function (value, index) {\r\n                return target[index] === value;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if two values are different.\r\n     *\r\n     * @param {*} a - First value.\r\n     * @param {*} b - Second value.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDifferent(a, b) {\r\n        var oldIsPrimitive = utils.isPrimitive(a);\r\n\r\n        if (Array.isArray(a) && Array.isArray(b)) {\r\n            return !equalArrays(true, a, b);\r\n        }\r\n\r\n        return oldIsPrimitive ? a !== b : true;\r\n    }\r\n\r\n    /**\r\n     * @param {String} prefix\r\n     * @param {String} part\r\n     */\r\n    function getPath(prefix, part) {\r\n        return prefix ? prefix + '.' + part : part;\r\n    }\r\n\r\n    /**\r\n     * Checks if object has own specified property.\r\n     *\r\n     * @param {*} obj - Value to be checked.\r\n     * @param {String} key - Key of the property.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasOwn(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\r\n    /**\r\n     * @param {Array} changes\r\n     */\r\n    function getContainers(changes) {\r\n        var containers  = {},\r\n            indexed     = _.indexBy(changes, 'path');\r\n\r\n        _.each(indexed, function (change, name) {\r\n            var path;\r\n\r\n            name.split('.').forEach(function (part) {\r\n                path = getPath(path, part);\r\n\r\n                if (path in indexed) {\r\n                    return;\r\n                }\r\n\r\n                (containers[path] = containers[path] || []).push(change);\r\n            });\r\n        });\r\n\r\n        return containers;\r\n    }\r\n\r\n    /**\r\n     * @param {String} path\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} newValue\r\n     * @param {String} oldValue\r\n     */\r\n    function addChange(path, name, type, newValue, oldValue) {\r\n        var data;\r\n\r\n        data = {\r\n            path: path,\r\n            name: name,\r\n            type: type\r\n        };\r\n\r\n        if (type !== 'remove') {\r\n            data.value = newValue;\r\n            data.oldValue = oldValue;\r\n        } else {\r\n            data.oldValue = newValue;\r\n        }\r\n\r\n        result.push(data);\r\n    }\r\n\r\n    /**\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} iterator\r\n     * @param {String} placeholder\r\n     */\r\n    function setAll(ns, name, type, iterator, placeholder) {\r\n        var key;\r\n\r\n        if (arguments.length > 4) {\r\n            type === 'add' ?\r\n                addChange(ns, name, 'update', iterator, placeholder) :\r\n                addChange(ns, name, 'update', placeholder, iterator);\r\n        } else {\r\n            addChange(ns, name, type, iterator);\r\n        }\r\n\r\n        if (!utils.isObject(iterator)) {\r\n            return;\r\n        }\r\n\r\n        for (key in iterator) {\r\n            if (hasOwn(iterator, key)) {\r\n                setAll(getPath(ns, key), key, type, iterator[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*eslint-disable max-depth*/\r\n    /**\r\n     * @param {Object} old\r\n     * @param {Object} current\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     */\r\n    function compare(old, current, ns, name) {\r\n        var key,\r\n            oldIsObj = utils.isObject(old),\r\n            newIsObj = utils.isObject(current);\r\n\r\n        if (oldIsObj && newIsObj) {\r\n            for (key in old) {\r\n                if (hasOwn(old, key) && !hasOwn(current, key)) {\r\n                    setAll(getPath(ns, key), key, 'remove', old[key]);\r\n                }\r\n            }\r\n\r\n            for (key in current) {\r\n                if (hasOwn(current, key)) {\r\n                    hasOwn(old, key) ?\r\n                        compare(old[key], current[key], getPath(ns, key), key) :\r\n                        setAll(getPath(ns, key), key, 'add', current[key]);\r\n                }\r\n            }\r\n        } else if (oldIsObj) {\r\n            setAll(ns, name, 'remove', old, current);\r\n        } else if (newIsObj) {\r\n            setAll(ns, name, 'add', current, old);\r\n        } else if (isDifferent(old, current)) {\r\n            addChange(ns, name, 'update', current, old);\r\n        }\r\n    }\r\n\r\n    /*eslint-enable max-depth*/\r\n\r\n    return {\r\n\r\n        /**\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        compare: function () {\r\n            var changes;\r\n\r\n            compare.apply(null, arguments);\r\n\r\n            changes = result.splice(0);\r\n\r\n            return {\r\n                containers: getContainers(changes),\r\n                changes: changes,\r\n                equal: !changes.length\r\n            };\r\n        },\r\n\r\n        equalArrays: equalArrays\r\n    };\r\n});\r\n","mage/utils/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var utils = {},\r\n        _ = require('underscore'),\r\n        root = typeof self == 'object' && self.self === self && self ||\r\n            typeof global == 'object' && global.global === global && global ||\r\n            Function('return this')() || {};\r\n\r\n    root._ = _;\r\n\r\n    return _.extend(\r\n        utils,\r\n        require('./arrays'),\r\n        require('./compare'),\r\n        require('./misc'),\r\n        require('./objects'),\r\n        require('./strings'),\r\n        require('./template')\r\n    );\r\n});\r\n","mage/utils/misc.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mage/utils/objects'\r\n], function (_, $, utils) {\r\n    'use strict';\r\n\r\n    var defaultAttributes,\r\n        ajaxSettings,\r\n        map;\r\n\r\n    defaultAttributes = {\r\n        method: 'post',\r\n        enctype: 'multipart/form-data'\r\n    };\r\n\r\n    ajaxSettings = {\r\n        default: {\r\n            method: 'POST',\r\n            cache: false,\r\n            processData: false,\r\n            contentType: false\r\n        },\r\n        simple: {\r\n            method: 'POST',\r\n            dataType: 'json'\r\n        }\r\n    };\r\n\r\n    map = {\r\n        'D': 'DDD',\r\n        'dd': 'DD',\r\n        'd': 'D',\r\n        'EEEE': 'dddd',\r\n        'EEE': 'ddd',\r\n        'e': 'd',\r\n        'yyyy': 'YYYY',\r\n        'yy': 'YY',\r\n        'y': 'YYYY',\r\n        'a': 'A'\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         * Generates a unique identifier.\r\n         *\r\n         * @param {Number} [size=7] - Length of a resulting identifier.\r\n         * @returns {String}\r\n         */\r\n        uniqueid: function (size) {\r\n            var code = Math.random() * 25 + 65 | 0,\r\n                idstr = String.fromCharCode(code);\r\n\r\n            size = size || 7;\r\n\r\n            while (idstr.length < size) {\r\n                code = Math.floor(Math.random() * 42 + 48);\r\n\r\n                if (code < 58 || code > 64) {\r\n                    idstr += String.fromCharCode(code);\r\n                }\r\n            }\r\n\r\n            return idstr;\r\n        },\r\n\r\n        /**\r\n         * Limits function call.\r\n         *\r\n         * @param {Object} owner\r\n         * @param {String} target\r\n         * @param {Number} limit\r\n         */\r\n        limit: function (owner, target, limit) {\r\n            var fn = owner[target];\r\n\r\n            owner[target] = _.debounce(fn.bind(owner), limit);\r\n        },\r\n\r\n        /**\r\n         * Converts mage date format to a moment.js format.\r\n         *\r\n         * @param {String} mageFormat\r\n         * @returns {String}\r\n         */\r\n        normalizeDate: function (mageFormat) {\r\n            var result = mageFormat;\r\n\r\n            _.each(map, function (moment, mage) {\r\n                result = result.replace(\r\n                    new RegExp(mage + '(?=([^\\u0027]*\\u0027[^\\u0027]*\\u0027)*[^\\u0027]*$)'),\r\n                    moment\r\n                );\r\n            });\r\n            result = result.replace(/'(.*?)'/g, '[$1]');\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Puts provided value in range of min and max parameters.\r\n         *\r\n         * @param {Number} value - Value to be located.\r\n         * @param {Number} min - Min value.\r\n         * @param {Number} max - Max value.\r\n         * @returns {Number}\r\n         */\r\n        inRange: function (value, min, max) {\r\n            return Math.min(Math.max(min, value), max);\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} attrs - Attributes that will be added to virtual form.\r\n         */\r\n        submit: function (options, attrs) {\r\n            var form        = document.createElement('form'),\r\n                data        = utils.serialize(options.data),\r\n                attributes  = _.extend({}, defaultAttributes, attrs || {});\r\n\r\n            if (!attributes.action) {\r\n                attributes.action = options.url;\r\n            }\r\n\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            _.each(attributes, function (value, name) {\r\n                form.setAttribute(name, value);\r\n            });\r\n\r\n            data = _.map(\r\n                data,\r\n                function (value, name) {\r\n                    return '<input type=\"hidden\" ' +\r\n                        'name=\"' + _.escape(name) + '\" ' +\r\n                        'value=\"' + _.escape(value) + '\"' +\r\n                        ' />';\r\n                }\r\n            ).join('');\r\n\r\n            form.insertAdjacentHTML('afterbegin', data);\r\n            document.body.appendChild(form);\r\n\r\n            form.submit();\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via AJAX POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} config\r\n         */\r\n        ajaxSubmit: function (options, config) {\r\n            var t = new Date().getTime(),\r\n                settings;\r\n\r\n            options.data['form_key'] = window.FORM_KEY;\r\n            options.data = this.prepareFormData(options.data, config.ajaxSaveType);\r\n            settings = _.extend({}, ajaxSettings[config.ajaxSaveType], options || {});\r\n\r\n            if (!config.ignoreProcessEvents) {\r\n                $('body').trigger('processStart');\r\n            }\r\n\r\n            return $.ajax(settings)\r\n                .done(function (data) {\r\n                    if (config.response) {\r\n                        data.t = t;\r\n                        config.response.data(data);\r\n                        config.response.status(undefined);\r\n                        config.response.status(!data.error);\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    if (config.response) {\r\n                        config.response.status(undefined);\r\n                        config.response.status(false);\r\n                        config.response.data({\r\n                            error: true,\r\n                            messages: 'Something went wrong.',\r\n                            t: t\r\n                        });\r\n                    }\r\n                })\r\n                .always(function () {\r\n                    if (!config.ignoreProcessEvents) {\r\n                        $('body').trigger('processStop');\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Creates FormData object and append this data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} type\r\n         * @returns {FormData}\r\n         */\r\n        prepareFormData: function (data, type) {\r\n            var formData;\r\n\r\n            if (type === 'default') {\r\n                formData = new FormData();\r\n                _.each(utils.serialize(data), function (val, name) {\r\n                    formData.append(name, val);\r\n                });\r\n            } else if (type === 'simple') {\r\n                formData = utils.serialize(data);\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Filters data object. Finds properties with suffix\r\n         * and sets their values to properties with the same name without suffix.\r\n         *\r\n         * @param {Object} data - The data object that should be filtered\r\n         * @param {String} suffix - The string by which data object should be filtered\r\n         * @param {String} separator - The string that is separator between property and suffix\r\n         *\r\n         * @returns {Object} Filtered data object\r\n         */\r\n        filterFormData: function (data, suffix, separator) {\r\n            data = data || {};\r\n            suffix = suffix || 'prepared-for-send';\r\n            separator = separator || '-';\r\n\r\n            _.each(data, function (value, key) {\r\n                if (_.isObject(value) && !Array.isArray(value)) {\r\n                    this.filterFormData(value, suffix, separator);\r\n                } else if (_.isString(key) && ~key.indexOf(suffix)) {\r\n                    data[key.split(separator)[0]] = value;\r\n                    delete data[key];\r\n                }\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Replaces special characters with their corresponding HTML entities.\r\n         *\r\n         * @param {String} string - Text to escape.\r\n         * @returns {String} Escaped text.\r\n         */\r\n        escape: function (string) {\r\n            return string ? $('<p></p>').text(string).html().replace(/\"/g, '&quot;') : string;\r\n        },\r\n\r\n        /**\r\n         * Replaces symbol codes with their unescaped counterparts.\r\n         *\r\n         * @param {String} data\r\n         *\r\n         * @returns {String}\r\n         */\r\n        unescape: function (data) {\r\n            var unescaped = _.unescape(data),\r\n                mapCharacters = {\r\n                    '&#039;': '\\''\r\n                };\r\n\r\n            _.each(mapCharacters, function (value, key) {\r\n                unescaped = unescaped.replace(key, value);\r\n            });\r\n\r\n            return unescaped;\r\n        },\r\n\r\n        /**\r\n         * Converts PHP IntlFormatter format to moment format.\r\n         *\r\n         * @param {String} format - PHP format\r\n         * @returns {String} - moment compatible formatting\r\n         */\r\n        convertToMomentFormat: function (format) {\r\n            var newFormat;\r\n\r\n            newFormat = format.replace(/yyyy|yy|y/, 'YYYY'); // replace the year\r\n            newFormat = newFormat.replace(/dd|d/g, 'DD'); // replace the date\r\n\r\n            return newFormat;\r\n        },\r\n\r\n        /**\r\n         * Get Url Parameters.\r\n         *\r\n         * @param {String} url - Url string\r\n         * @returns {Object}\r\n         */\r\n        getUrlParameters: function (url) {\r\n            var params = {},\r\n                queries = url.split('?'),\r\n                temp,\r\n                i,\r\n                l;\r\n\r\n            if (!queries[1]) {\r\n                return params;\r\n            }\r\n\r\n            queries = queries[1].split('&');\r\n\r\n            for (i = 0, l = queries.length; i < l; i++) {\r\n                temp = queries[i].split('=');\r\n\r\n                if (temp[1]) {\r\n                    params[temp[0]] = decodeURIComponent(temp[1].replace(/\\+/g, '%20'));\r\n                } else {\r\n                    params[temp[0]] = '';\r\n                }\r\n            }\r\n\r\n            return params;\r\n        }\r\n    };\r\n});\r\n","mage/utils/objects.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/strings'\r\n], function (ko, $, _, stringUtils) {\r\n    'use strict';\r\n\r\n    var primitives = [\r\n        'undefined',\r\n        'boolean',\r\n        'number',\r\n        'string'\r\n    ];\r\n\r\n    /**\r\n     * Sets nested property of a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @param {*} value - Value of the last property in 'path' array.\r\n     * returns {*} New value for the property.\r\n     */\r\n    function setNested(parent, path, value) {\r\n        var last = path.pop(),\r\n            len = path.length,\r\n            pi = 0,\r\n            part = path[pi];\r\n\r\n        for (; pi < len; part = path[++pi]) {\r\n            if (!_.isObject(parent[part])) {\r\n                parent[part] = {};\r\n            }\r\n\r\n            parent = parent[part];\r\n        }\r\n\r\n        if (typeof parent[last] === 'function') {\r\n            parent[last](value);\r\n        } else {\r\n            parent[last] = value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves value of a nested property.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @returns {*} Value of the property.\r\n     */\r\n    function getNested(parent, path) {\r\n        var exists = true,\r\n            len = path.length,\r\n            pi = 0;\r\n\r\n        for (; pi < len && exists; pi++) {\r\n            parent = parent[path[pi]];\r\n\r\n            if (typeof parent === 'undefined') {\r\n                exists = false;\r\n            }\r\n        }\r\n\r\n        if (exists) {\r\n            if (ko.isObservable(parent)) {\r\n                parent = parent();\r\n            }\r\n\r\n            return parent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes property from a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object from which to remove property.\r\n     * @param {Array} path - Splitted path to the property.\r\n     */\r\n    function removeNested(parent, path) {\r\n        var field = path.pop();\r\n\r\n        parent = getNested(parent, path);\r\n\r\n        if (_.isObject(parent)) {\r\n            delete parent[field];\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Retrieves or defines objects' property by a composite path.\r\n         *\r\n         * @param {Object} data - Container for the properties specified in path.\r\n         * @param {String} path - Objects' properties divided by dots.\r\n         * @param {*} [value] - New value for the last property.\r\n         * @returns {*} Returns value of the last property in chain.\r\n         *\r\n         * @example\r\n         *      utils.nested({}, 'one.two', 3);\r\n         *      => { one: {two: 3} }\r\n         */\r\n        nested: function (data, path, value) {\r\n            var action = arguments.length > 2 ? setNested : getNested;\r\n\r\n            path = path ? path.split('.') : [];\r\n\r\n            return action(data, path, value);\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from an object.\r\n         *\r\n         * @param {Object} data - Data source.\r\n         * @param {String} path - Path to the property e.g. 'one.two.three'\r\n         */\r\n        nestedRemove: function (data, path) {\r\n            path = path.split('.');\r\n\r\n            removeNested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Flattens objects' nested properties.\r\n         *\r\n         * @param {Object} data - Object to flatten.\r\n         * @param {String} [separator='.'] - Objects' keys separator.\r\n         * @returns {Object} Flattened object.\r\n         *\r\n         * @example Example with a default separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }});\r\n         *      => { 'one.two.three': 'value' };\r\n         *\r\n         * @example Example with a custom separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }}, '=>');\r\n         *      => {'one=>two=>three': 'value'};\r\n         */\r\n        flatten: function (data, separator, parent, result) {\r\n            separator = separator || '.';\r\n            result = result || {};\r\n\r\n            if (!data) {\r\n                return result;\r\n            }\r\n\r\n            // UnderscoreJS each breaks when an object has a length property so we use Object.keys\r\n            _.each(Object.keys(data), function (name) {\r\n                var node = data[name];\r\n\r\n                if ({}.toString.call(node) === '[object Function]') {\r\n                    return;\r\n                }\r\n\r\n                if (parent) {\r\n                    name = parent + separator + name;\r\n                }\r\n\r\n                typeof node === 'object' ?\r\n                    this.flatten(node, separator, name, result) :\r\n                    result[name] = node;\r\n\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Opposite operation of the 'flatten' method.\r\n         *\r\n         * @param {Object} data - Previously flattened object.\r\n         * @param {String} [separator='.'] - Keys separator.\r\n         * @returns {Object} Object with nested properties.\r\n         *\r\n         * @example Example using custom separator.\r\n         *      utils.unflatten({'one=>two': 'value'}, '=>');\r\n         *      => {\r\n         *          one: { two: 'value' }\r\n         *      };\r\n         */\r\n        unflatten: function (data, separator) {\r\n            var result = {};\r\n\r\n            separator = separator || '.';\r\n\r\n            _.each(data, function (value, nodes) {\r\n                nodes = nodes.split(separator);\r\n\r\n                setNested(result, nodes, value);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Same operation as 'flatten' method,\r\n         * but returns objects' keys wrapped in '[]'.\r\n         *\r\n         * @param {Object} data - Object that should be serialized.\r\n         * @returns {Object} Serialized data.\r\n         *\r\n         * @example\r\n         *      utils.serialize({one: { two: { three: 'value'} }});\r\n         *      => { 'one[two][three]': 'value' }\r\n         */\r\n        serialize: function (data) {\r\n            var result = {};\r\n\r\n            data = this.flatten(data);\r\n\r\n            _.each(data, function (value, keys) {\r\n                keys = stringUtils.serializeName(keys);\r\n                value = _.isUndefined(value) ? '' : value;\r\n\r\n                result[keys] = value;\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs deep extend of specified objects.\r\n         *\r\n         * @returns {Object|Array} Extended object.\r\n         */\r\n        extend: function () {\r\n            var args = _.toArray(arguments);\r\n\r\n            args.unshift(true);\r\n\r\n            return $.extend.apply($, args);\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         *\r\n         * @param {(Object|Array)} data - Data that should be copied.\r\n         * @returns {Object|Array} Cloned object.\r\n         */\r\n        copy: function (data) {\r\n            var result = data,\r\n                isArray = Array.isArray(data),\r\n                placeholder;\r\n\r\n            if (this.isObject(data) || isArray) {\r\n                placeholder = isArray ? [] : {};\r\n                result = this.extend(placeholder, data);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         * Doesn't save links to original object.\r\n         *\r\n         * @param {*} original - Object to clone\r\n         * @returns {*}\r\n         */\r\n        hardCopy: function (original) {\r\n            if (original === null || typeof original !== 'object') {\r\n                return original;\r\n            }\r\n\r\n            return JSON.parse(JSON.stringify(original));\r\n        },\r\n\r\n        /**\r\n         * Removes specified nested properties from the target object.\r\n         *\r\n         * @param {Object} target - Object whose properties should be removed.\r\n         * @param {(...String|Array|Object)} list - List that specifies properties to be removed.\r\n         * @returns {Object} Modified object.\r\n         *\r\n         * @example Basic usage\r\n         *      var obj = {a: {b: 2}, c: 'a'};\r\n         *\r\n         *      omit(obj, 'a.b');\r\n         *      => {'a.b': 2};\r\n         *      obj => {a: {}, c: 'a'};\r\n         *\r\n         * @example Various syntaxes that would return same result\r\n         *      omit(obj, ['a.b', 'c']);\r\n         *      omit(obj, 'a.b', 'c');\r\n         *      omit(obj, {'a.b': true, 'c': true});\r\n         */\r\n        omit: function (target, list) {\r\n            var removed = {},\r\n                ignored = list;\r\n\r\n            if (this.isObject(list)) {\r\n                ignored = [];\r\n\r\n                _.each(list, function (value, key) {\r\n                    if (value) {\r\n                        ignored.push(key);\r\n                    }\r\n                });\r\n            } else if (_.isString(list)) {\r\n                ignored = _.toArray(arguments).slice(1);\r\n            }\r\n\r\n            _.each(ignored, function (path) {\r\n                var value = this.nested(target, path);\r\n\r\n                if (!_.isUndefined(value)) {\r\n                    removed[path] = value;\r\n\r\n                    this.nestedRemove(target, path);\r\n                }\r\n            }, this);\r\n\r\n            return removed;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is a plain object.\r\n         *\r\n         * @param {*} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isObject: function (value) {\r\n            var objProto = Object.prototype;\r\n\r\n            return typeof value == 'object' ?\r\n            objProto.toString.call(value) === '[object Object]' :\r\n                false;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isPrimitive: function (value) {\r\n            return value === null || ~primitives.indexOf(typeof value);\r\n        },\r\n\r\n        /**\r\n         * Iterates over obj props/array elems recursively, applying action to each one\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to be called with each item as an argument.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         */\r\n        forEachRecursive: function (data, action, maxDepth) {\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                action(data);\r\n\r\n                return;\r\n            }\r\n\r\n            _.each(data, function (value) {\r\n                this.forEachRecursive(value, action, maxDepth);\r\n            }, this);\r\n\r\n            action(data);\r\n        },\r\n\r\n        /**\r\n         * Maps obj props/array elems recursively\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to transform each item.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         *\r\n         * @returns {Object|Array}\r\n         */\r\n        mapRecursive: function (data, action, maxDepth) {\r\n            var newData;\r\n\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return data;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                return action(data);\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                newData = _.map(data, function (item) {\r\n                    return this.mapRecursive(item, action, maxDepth);\r\n                }, this);\r\n\r\n                return action(newData);\r\n            }\r\n\r\n            newData = _.mapObject(data, function (val, key) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    return this.mapRecursive(val, action, maxDepth);\r\n                }\r\n\r\n                return val;\r\n            }, this);\r\n\r\n            return action(newData);\r\n        },\r\n\r\n        /**\r\n         * Removes empty(in common sence) obj props/array elems\r\n         *\r\n         * @param {*} data - Data to be cleaned.\r\n         * @returns {*}\r\n         */\r\n        removeEmptyValues: function (data) {\r\n            if (!_.isObject(data)) {\r\n                return data;\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                return data.filter(function (item) {\r\n                    return !this.isEmptyObj(item);\r\n                }, this);\r\n            }\r\n\r\n            return _.omit(data, this.isEmptyObj.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Checks that argument of any type is empty in common sence:\r\n         * empty string, string with spaces only, object without own props, empty array, null or undefined\r\n         *\r\n         * @param {*} val - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmptyObj: function (val) {\r\n\r\n            return _.isObject(val) && _.isEmpty(val) ||\r\n            this.isEmpty(val) ||\r\n            val && val.trim && this.isEmpty(val.trim());\r\n        }\r\n    };\r\n});\r\n\r\n","mage/utils/strings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var jsonRe = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to convert string to one of the primitive values,\r\n         * or to parse it as a valid json object.\r\n         *\r\n         * @param {String} str - String to be processed.\r\n         * @returns {*}\r\n         */\r\n        castString: function (str) {\r\n            try {\r\n                str = str === 'true' ? true :\r\n                    str === 'false' ? false :\r\n                        str === 'null' ? null :\r\n                            +str + '' === str ? +str :\r\n                                jsonRe.test(str) ? JSON.parse(str) :\r\n                                    str;\r\n            } catch (e) {\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * Splits string by separator if it's possible,\r\n         * otherwise returns the incoming value.\r\n         *\r\n         * @param {(String|Array|*)} str - String to split.\r\n         * @param {String} [separator=' '] - Seperator based on which to split the string.\r\n         * @returns {Array|*} Splitted string or the incoming value.\r\n         */\r\n        stringToArray: function (str, separator) {\r\n            separator = separator || ' ';\r\n\r\n            return typeof str === 'string' ?\r\n                str.split(separator) :\r\n                str;\r\n        },\r\n\r\n        /**\r\n         * Converts the incoming string which consists\r\n         * of a specified delimiters into a format commonly used in form elements.\r\n         *\r\n         * @param {String} name - The incoming string.\r\n         * @param {String} [separator='.']\r\n         * @returns {String} Serialized string.\r\n         *\r\n         * @example\r\n         *      utils.serializeName('one.two.three');\r\n         *      => 'one[two][three]';\r\n         */\r\n        serializeName: function (name, separator) {\r\n            var result;\r\n\r\n            separator = separator || '.';\r\n            name = name.split(separator);\r\n\r\n            result = name.shift();\r\n\r\n            name.forEach(function (part) {\r\n                result += '[' + part + ']';\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming value is not empty,\r\n         * e.g. not 'null' or 'undefined'\r\n         *\r\n         * @param {*} value - Value to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || _.isUndefined(value) || _.isNull(value);\r\n        },\r\n\r\n        /**\r\n         * Adds 'prefix' to the 'part' value if it was provided.\r\n         *\r\n         * @param {String} prefix\r\n         * @param {String} part\r\n         * @returns {String}\r\n         */\r\n        fullPath: function (prefix, part) {\r\n            return prefix ? prefix + '.' + part : part;\r\n        },\r\n\r\n        /**\r\n         * Splits incoming string and returns its' part specified by offset.\r\n         *\r\n         * @param {String} parts\r\n         * @param {Number} [offset]\r\n         * @param {String} [delimiter=.]\r\n         * @returns {String}\r\n         */\r\n        getPart: function (parts, offset, delimiter) {\r\n            delimiter = delimiter || '.';\r\n            parts = parts.split(delimiter);\r\n            offset = this.formatOffset(parts, offset);\r\n\r\n            parts.splice(offset, 1);\r\n\r\n            return parts.join(delimiter) || '';\r\n        },\r\n\r\n        /**\r\n         * Converts nameThroughCamelCase to name-through-minus\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        camelCaseToMinus: function camelCaseToMinus(string) {\r\n            return ('' + string)\r\n                .split('')\r\n                .map(function (symbol, index) {\r\n                    return index ?\r\n                        symbol.toUpperCase() === symbol ?\r\n                        '-' + symbol.toLowerCase() :\r\n                            symbol :\r\n                        symbol.toLowerCase();\r\n                })\r\n                .join('');\r\n        },\r\n\r\n        /**\r\n         * Converts name-through-minus to nameThroughCamelCase\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        minusToCamelCase: function minusToCamelCase(string) {\r\n            return ('' + string)\r\n                .split('-')\r\n                .map(function (part, index) {\r\n                    return index ? part.charAt(0).toUpperCase() + part.slice(1) : part;\r\n                })\r\n                .join('');\r\n        }\r\n    };\r\n});\r\n","mage/utils/template.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-shadow */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/objects',\r\n    'mage/utils/strings'\r\n], function ($, _, utils, stringUtils) {\r\n    'use strict';\r\n\r\n    var tmplSettings = _.templateSettings,\r\n        interpolate = /\\$\\{([\\s\\S]+?)\\}/g,\r\n        opener = '${',\r\n        template,\r\n        hasStringTmpls;\r\n\r\n    /**\r\n     * Identifies whether ES6 templates are supported.\r\n     */\r\n    hasStringTmpls = (function () {\r\n        var testString = 'var foo = \"bar\"; return `${ foo }` === foo';\r\n\r\n        try {\r\n            return Function(testString)();\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Objects can specify how to use templating for their properties - getting that configuration.\r\n     *\r\n     * To disable rendering for all properties of your object add __disableTmpl: true.\r\n     * To disable for specific property add __disableTmpl: {propertyName: true}.\r\n     * To limit recursion for a specific property add __disableTmpl: {propertyName: numberOfCycles}.\r\n     *\r\n     * @param {String} tmpl\r\n     * @param {Object | undefined} target\r\n     * @returns {Boolean|Object}\r\n     */\r\n    function isTmplIgnored(tmpl, target) {\r\n        var parsedTmpl;\r\n\r\n        try {\r\n            parsedTmpl = JSON.parse(tmpl);\r\n\r\n            if (typeof parsedTmpl === 'object') {\r\n                return tmpl.includes('__disableTmpl');\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        if (typeof target !== 'undefined') {\r\n            if (typeof target === 'object' && target.hasOwnProperty('__disableTmpl')) {\r\n                return target.__disableTmpl;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    if (hasStringTmpls) {\r\n\r\n        /*eslint-disable no-unused-vars, no-eval*/\r\n        /**\r\n         * Evaluates template string using ES6 templates.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} $ - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, $) {\r\n            return eval('`' + tmpl + '`');\r\n        };\r\n\r\n        /*eslint-enable no-unused-vars, no-eval*/\r\n    } else {\r\n\r\n        /**\r\n         * Fallback function used when ES6 templates are not supported.\r\n         * Uses underscore templates renderer.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} data - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, data) {\r\n            var cached = tmplSettings.interpolate;\r\n\r\n            tmplSettings.interpolate = interpolate;\r\n\r\n            tmpl = _.template(tmpl, {\r\n                variable: '$'\r\n            })(data);\r\n\r\n            tmplSettings.interpolate = cached;\r\n\r\n            return tmpl;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if provided value contains template syntax.\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isTemplate(value) {\r\n        return typeof value === 'string' &&\r\n            value.indexOf(opener) !== -1 &&\r\n            // the below pattern almost always indicates an accident which should not cause template evaluation\r\n            // refuse to evaluate\r\n            value.indexOf('${{') === -1;\r\n    }\r\n\r\n    /**\r\n     * Iteratively processes provided string\r\n     * until no templates syntax will be found.\r\n     *\r\n     * @param {String} tmpl - Template string.\r\n     * @param {Object} data - Data object used in a template.\r\n     * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n     *      should be casted after evaluation to a value of another type or\r\n     *      that it should be leaved as a string.\r\n     * @param {Number|undefined} maxCycles - Maximum number of rendering cycles, can be 0.\r\n     * @returns {*} Compiled template.\r\n     */\r\n    function render(tmpl, data, castString, maxCycles) {\r\n        var last = tmpl,\r\n            cycles = 0;\r\n\r\n        while (~tmpl.indexOf(opener) && (typeof maxCycles === 'undefined' || cycles < maxCycles)) {\r\n            if (!isTmplIgnored(tmpl)) {\r\n                tmpl = template(tmpl, data);\r\n            }\r\n\r\n            if (tmpl === last) {\r\n                break;\r\n            }\r\n\r\n            last = tmpl;\r\n            cycles++;\r\n        }\r\n\r\n        return castString ?\r\n            stringUtils.castString(tmpl) :\r\n            tmpl;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Applies provided data to the template.\r\n         *\r\n         * @param {Object|String} tmpl\r\n         * @param {Object} [data] - Data object to match with template.\r\n         * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n         *      should be casted after evaluation to a value of another type or\r\n         *      that it should be leaved as a string.\r\n         * @returns {*}\r\n         *\r\n         * @example Template defined as a string.\r\n         *      var source = { foo: 'Random Stuff', bar: 'Some' };\r\n         *\r\n         *      utils.template('${ $.bar } ${ $.foo }', source);\r\n         *      => 'Some Random Stuff';\r\n         *\r\n         * @example Template defined as an object.\r\n         *      var tmpl = {\r\n         *              key: {'${ $.$data.bar }': '${ $.$data.foo }'},\r\n         *              foo: 'bar',\r\n         *              x1: 2, x2: 5,\r\n         *              delta: '${ $.x2 - $.x1 }',\r\n         *              baz: 'Upper ${ $.foo.toUpperCase() }'\r\n         *      };\r\n         *\r\n         *      utils.template(tmpl, source);\r\n         *      => {\r\n         *          key: {'Some': 'Random Stuff'},\r\n         *          foo: 'bar',\r\n         *          x1: 2, x2: 5,\r\n         *          delta: 3,\r\n         *          baz: 'Upper BAR'\r\n         *      };\r\n         */\r\n        template: function (tmpl, data, castString, dontClone) {\r\n            if (typeof tmpl === 'string') {\r\n                return render(tmpl, data, castString);\r\n            }\r\n\r\n            if (!dontClone) {\r\n                tmpl = utils.copy(tmpl);\r\n            }\r\n\r\n            tmpl.$data = data || {};\r\n\r\n            /**\r\n             * Template iterator function.\r\n             */\r\n            _.each(tmpl, function iterate(value, key, list) {\r\n                var disabled,\r\n                    maxCycles;\r\n\r\n                if (key === '$data') {\r\n                    return;\r\n                }\r\n\r\n                if (isTemplate(key)) {\r\n                    delete list[key];\r\n\r\n                    key = render(key, tmpl);\r\n                    list[key] = value;\r\n                }\r\n\r\n                if (isTemplate(value)) {\r\n                    //Getting template disabling settings, can be true for all disabled and separate settings\r\n                    //for each property.\r\n                    disabled = isTmplIgnored(value, list);\r\n\r\n                    if (typeof disabled === 'object' && disabled.hasOwnProperty(key) && disabled[key] !== false) {\r\n                        //Checking if specific settings for a property provided.\r\n                        maxCycles = disabled[key];\r\n                    }\r\n\r\n                    if (disabled === true || maxCycles === true) {\r\n                        //Rendering for all properties is disabled.\r\n                        maxCycles = 0;\r\n                    }\r\n\r\n                    list[key] = render(value, tmpl, castString, maxCycles);\r\n                } else if ($.isPlainObject(value) || Array.isArray(value)) {\r\n                    _.each(value, iterate);\r\n                }\r\n            });\r\n\r\n            delete tmpl.$data;\r\n\r\n            return tmpl;\r\n        }\r\n    };\r\n});\r\n","mage/utils/wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Utility methods used to wrap and extend functions.\r\n *\r\n * @example Usage of a 'wrap' method with arguments delegation.\r\n *      var multiply = function (a, b) {\r\n *          return a * b;\r\n *      };\r\n *\r\n *      multiply = module.wrap(multiply, function (orig) {\r\n *          return 'Result is: ' + orig();\r\n *      });\r\n *\r\n *      multiply(2, 2);\r\n *      => 'Result is: 4'\r\n *\r\n * @example Usage of 'wrapSuper' method.\r\n *      var multiply = function (a, b) {\r\n *         return a * b;\r\n *      };\r\n *\r\n *      var obj = {\r\n *          multiply: module.wrapSuper(multiply, function () {\r\n *              return 'Result is: ' + this._super();\r\n *          });\r\n *      };\r\n *\r\n *      obj.multiply(2, 2);\r\n *      => 'Result is: 4'\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if string has a '_super' substring.\r\n     */\r\n    var superReg = /\\b_super\\b/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Wraps target function with a specified wrapper, which will receive\r\n         * reference to the original function as a first argument.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapper function.\r\n         */\r\n        wrap: function (target, wrapper) {\r\n            if (!_.isFunction(target) || !_.isFunction(wrapper)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var args    = _.toArray(arguments),\r\n                    ctx     = this,\r\n                    _super;\r\n\r\n                /**\r\n                 * Function that will be passed to the wrapper.\r\n                 * If no arguments will be passed to it, then the original\r\n                 * function will be called with an arguments of a wrapper function.\r\n                 */\r\n                _super = function () {\r\n                    var superArgs = arguments.length ? arguments : args.slice(1);\r\n\r\n                    return target.apply(ctx, superArgs);\r\n                };\r\n\r\n                args.unshift(_super);\r\n\r\n                return wrapper.apply(ctx, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Wraps the incoming function to implement support of the '_super' method.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapped function.\r\n         */\r\n        wrapSuper: function (target, wrapper) {\r\n            if (!this.hasSuper(wrapper) || !_.isFunction(target)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var _super  = this._super,\r\n                    args    = arguments,\r\n                    result;\r\n\r\n                /**\r\n                 * Temporary define '_super' method which\r\n                 * contains call to the original function.\r\n                 */\r\n                this._super = function () {\r\n                    var superArgs = arguments.length ? arguments : args;\r\n\r\n                    return target.apply(this, superArgs);\r\n                };\r\n\r\n                result = wrapper.apply(this, args);\r\n\r\n                this._super = _super;\r\n\r\n                return result;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming method contains calls of the '_super' method.\r\n         *\r\n         * @param {Function} fn - Function to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSuper: function (fn) {\r\n            return _.isFunction(fn) && superReg.test(fn);\r\n        },\r\n\r\n        /**\r\n         * Extends target object with provided extenders.\r\n         * If property in target and extender objects is a function,\r\n         * then it will be wrapped using 'wrap' method.\r\n         *\r\n         * @param {Object} target - Object to be extended.\r\n         * @param {...Object} extenders - Multiple extenders objects.\r\n         * @returns {Object} Modified target object.\r\n         */\r\n        extend: function (target) {\r\n            var extenders = _.toArray(arguments).slice(1),\r\n                iterator = this._extend.bind(this, target);\r\n\r\n            extenders.forEach(iterator);\r\n\r\n            return target;\r\n        },\r\n\r\n        /**\r\n         * Same as the 'extend' method, but operates only on one extender object.\r\n         *\r\n         * @private\r\n         * @param {Object} target\r\n         * @param {Object} extender\r\n         */\r\n        _extend: function (target, extender) {\r\n            _.each(extender, function (value, key) {\r\n                target[key] = this.wrap(target[key], extender[key]);\r\n            }, this);\r\n        }\r\n    };\r\n});\r\n","mage/validation/url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Redirects to the url if it is considered safe\r\n         *\r\n         * @param {String} path - url to be redirected to\r\n         */\r\n        redirect: function (path) {\r\n            path = this.sanitize(path);\r\n\r\n            if (this.validate(path)) {\r\n                window.location.href = path;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates url\r\n         *\r\n         * @param {Object} path - url to be validated\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function (path) {\r\n            var hostname = window.location.hostname;\r\n\r\n            if (path.indexOf(hostname) === -1 ||\r\n                path.indexOf('javascript:') !== -1 ||\r\n                path.indexOf('vbscript:') !== -1) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sanitize url, replacing disallowed chars\r\n         *\r\n         * @param {String} path - url to be normalized\r\n         * @returns {String}\r\n         */\r\n        sanitize: function (path) {\r\n            return path.replace('[^-A-Za-z0-9+&@#/%?=~_|!:,.;\\(\\)]', '');\r\n        }\r\n    };\r\n});\r\n","Magento_AdminAdobeIms/postcss.config.js":"module.exports = {\r\n    plugins: [\r\n        require('postcss-import'),\r\n        require('postcss-varfallback'),\r\n        require('postcss-dropunusedvars'),\r\n        require('cssnano')\r\n    ]\r\n};\r\n","Magento_AdminAdobeIms/js/admin_adobe_ims_load_icons.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_AdminAdobeIms/js/loadicons'\r\n], function ($, _, loadicons) {\r\n    'use strict';\r\n\r\n    var icons = {},\r\n\r\n    loadIcons = {\r\n        /**\r\n         * loadicons initialization\r\n         */\r\n        init: function () {\r\n            loadicons(icons.spectrumCssIcons);\r\n            loadicons(icons.spectrumIcons);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} iconUrls\r\n         * @constructor\r\n         */\r\n        'Magento_AdminAdobeIms/js/admin_adobe_ims_load_icons': function (iconUrls) {\r\n            icons = iconUrls;\r\n            loadIcons.init();\r\n        }\r\n    };\r\n\r\n    return loadIcons;\r\n});\r\n","Magento_AdminAdobeIms/js/adobe-ims-reauth.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'Magento_AdobeIms/js/action/authorization'\r\n], function (Component, $, login) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            loginConfig: {\r\n                url: 'https://ims-na1-stg.adobelogin.com/ims/authorize',\r\n                callbackParsingParams: {\r\n                    regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\r\n                    codeIndex: 1,\r\n                    messageIndex: 2,\r\n                    nameIndex: 3,\r\n                    successCode: 'success',\r\n                    errorCode: 'error'\r\n                },\r\n                popupWindowParams: {\r\n                    width: 500,\r\n                    height: 600,\r\n                    top: 100,\r\n                    left: 300\r\n                },\r\n                popupWindowTimeout: 60000\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.login();\r\n        },\r\n\r\n        /**\r\n         * Open popup for Adobe reauth\r\n         *\r\n         * @return {window.Promise}\r\n         */\r\n        login: function () {\r\n            var deferred = $.Deferred(),\r\n                loginConfig = this.loginConfig;\r\n\r\n            $('input.ims_verification').on('click', function () {\r\n                login(loginConfig)\r\n                    .then(function (response) {\r\n                        if (response.isAuthorized === true) {\r\n                            $('input.ims_verified').val(true);\r\n                        }\r\n                        deferred.resolve(response);\r\n                    })\r\n                    .fail(function (error) {\r\n                        deferred.reject(error);\r\n                    });\r\n            });\r\n\r\n            return deferred.promise();\r\n        }\r\n    });\r\n});\r\n","Magento_AdminAdobeIms/js/loadicons.js":"/*\r\nCopyright 2018 Adobe. All rights reserved.\r\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License. You may obtain a copy\r\nof the License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software distributed under\r\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\r\nOF ANY KIND, either express or implied. See the License for the specific language\r\ngoverning permissions and limitations under the License.\r\n*/\r\n\r\n// UMD pattern via umdjs\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD\r\n    define([], factory);\r\n  }\r\n  else if (typeof module === 'object' && module.exports) {\r\n    // CommonJS-like\r\n    module.exports = factory();\r\n  }\r\n  else {\r\n    // Browser\r\n    root.loadIcons = factory();\r\n  }\r\n}(typeof self !== 'undefined' ? self : this, function() {\r\n  function handleError(string) {\r\n    string = 'loadIcons: '+string;\r\n    var error = new Error(string);\r\n\r\n    console.error(error.toString());\r\n\r\n    if (typeof callback === 'function') {\r\n      callback(error);\r\n    }\r\n  }\r\n\r\n  function injectSVG(svgURL, callback) {\r\n    var error;\r\n    // 200 for web servers, 0 for CEP panels\r\n    if (this.status !== 200 && this.status !== 0) {\r\n      handleError('Failed to fetch icons, server returned ' + this.status);\r\n      return;\r\n    }\r\n\r\n    // Parse the SVG\r\n    var parser = new DOMParser();\r\n    try {\r\n      var doc = parser.parseFromString(this.responseText, 'image/svg+xml');\r\n      var svg = doc.firstChild;\r\n    }\r\n    catch (err) {\r\n      handleError('Error parsing SVG: ' + err);\r\n      return;\r\n    }\r\n\r\n    // Make sure a real SVG was returned\r\n    if (svg && svg.tagName === 'svg') {\r\n      // Hide the element\r\n      svg.style.display = 'none';\r\n\r\n      svg.setAttribute('data-url', svgURL);\r\n\r\n      // Insert it into the head\r\n      document.head.insertBefore(svg, null);\r\n\r\n      // Pass the SVG to the callback\r\n      if (typeof callback === 'function') {\r\n        callback(null, svg);\r\n      }\r\n    }\r\n    else {\r\n      handleError('Parsed SVG document contained something other than an SVG');\r\n    }\r\n  }\r\n\r\n  function loadIcons(svgURL, callback) {\r\n    // Request the SVG sprite\r\n    var req = new XMLHttpRequest();\r\n    req.open('GET', svgURL, true);\r\n    req.addEventListener('load', injectSVG.bind(req, svgURL, callback));\r\n    req.addEventListener('error', function(event) {\r\n      handleError('Request failed');\r\n    });\r\n    req.send();\r\n  }\r\n\r\n  return loadIcons;\r\n}));\r\n","Magento_AdminAnalytics/js/modal/component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal-component',\r\n    'uiRegistry',\r\n    'analyticsPopupConfig'\r\n],\r\n    function (_, $, Modal, registry, analyticsPopupConfig) {\r\n        'use strict';\r\n\r\n        return Modal.extend(\r\n            {\r\n                defaults: {\r\n                    imports: {\r\n                        enableLogAction: '${ $.provider }:data.enableLogAction',\r\n                        disableLogAction: '${ $.provider }:data.disableLogAction'\r\n                    },\r\n                    options: {},\r\n                    notificationWindow: null\r\n                },\r\n\r\n                /**\r\n                 * Initializes modal on opened function\r\n                 */\r\n                initModal: function () {\r\n                    this.options.opened = this.onOpened.bind(this);\r\n                    this._super();\r\n                },\r\n\r\n                /**\r\n                 * Configure ESC and TAB so user can't leave modal\r\n                 * without selecting an option\r\n                 *\r\n                 * @returns {Object} Chainable.\r\n                 */\r\n                initModalEvents: function () {\r\n                    this._super();\r\n                    //Don't allow ESC key to close modal\r\n                    this.options.keyEventHandlers.escapeKey = this.handleEscKey.bind(this);\r\n                    //Restrict tab action to the modal\r\n                    this.options.keyEventHandlers.tabKey = this.handleTabKey.bind(this);\r\n\r\n                    return this;\r\n                },\r\n\r\n                /**\r\n                 * Once the modal is opened it hides the X\r\n                 */\r\n                onOpened: function () {\r\n                    $('.modal-header button.action-close').attr('disabled', true).hide();\r\n\r\n                    this.focusableElements = $(this.rootSelector).find('a[href], button:enabled');\r\n                    this.firstFocusableElement = this.focusableElements[0];\r\n                    this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1];\r\n                    this.firstFocusableElement.focus();\r\n                },\r\n\r\n                /**\r\n                 * Changes admin usage setting to yes\r\n                 */\r\n                enableAdminUsage: function () {\r\n                    var data = {\r\n                        'form_key': window.FORM_KEY\r\n                    };\r\n\r\n                    $.ajax(\r\n                        {\r\n                            type: 'POST',\r\n                            url: this.enableLogAction,\r\n                            data: data,\r\n                            showLoader: true\r\n                        }\r\n                    ).done(\r\n                        function (xhr) {\r\n                            if (xhr.error) {\r\n                                self.onError(xhr);\r\n                            }\r\n                        }\r\n                    ).fail(this.onError);\r\n                    this.openReleasePopup();\r\n                    this.closeModal();\r\n                },\r\n\r\n                /**\r\n                 * Changes admin usage setting to no\r\n                 */\r\n                disableAdminUsage: function () {\r\n                    var data = {\r\n                        'form_key': window.FORM_KEY\r\n                    };\r\n\r\n                    $.ajax(\r\n                        {\r\n                            type: 'POST',\r\n                            url: this.disableLogAction,\r\n                            data: data,\r\n                            showLoader: true\r\n                        }\r\n                    ).done(\r\n                        function (xhr) {\r\n                            if (xhr.error) {\r\n                                self.onError(xhr);\r\n                            }\r\n                        }\r\n                    ).fail(this.onError);\r\n                    this.openReleasePopup();\r\n                    this.closeModal();\r\n                },\r\n\r\n                /**\r\n                 * Allows admin usage popup to be shown first and then new release notification\r\n                 */\r\n                openReleasePopup: function () {\r\n                    var notificationModalSelector = 'release_notification.release_notification.notification_modal_1';\r\n\r\n                    if (analyticsPopupConfig.releaseVisible) {\r\n                        registry.get(notificationModalSelector).initializeContentAfterAnalytics();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Handle Tab and Shift+Tab key event\r\n                 *\r\n                 * Keep the tab actions restricted to the popup modal\r\n                 * so the user must select an option to dismiss the modal\r\n                 */\r\n                handleTabKey: function (event) {\r\n                    var modal = this,\r\n                        KEY_TAB = 9;\r\n\r\n                    /**\r\n                     * Handle Shift+Tab to tab backwards\r\n                     */\r\n                    function handleBackwardTab() {\r\n                        if (document.activeElement === modal.firstFocusableElement ||\r\n                            document.activeElement === $(modal.rootSelector)[0]\r\n                        ) {\r\n                            event.preventDefault();\r\n                            modal.lastFocusableElement.focus();\r\n                        }\r\n                    }\r\n\r\n                    /**\r\n                     * Handle Tab forward\r\n                     */\r\n                    function handleForwardTab() {\r\n                        if (document.activeElement === modal.lastFocusableElement) {\r\n                            event.preventDefault();\r\n                            modal.firstFocusableElement.focus();\r\n                        }\r\n                    }\r\n\r\n                    switch (event.keyCode) {\r\n                        case KEY_TAB:\r\n                            if (modal.focusableElements.length === 1) {\r\n                                event.preventDefault();\r\n                                break;\r\n                            }\r\n\r\n                            if (event.shiftKey) {\r\n                                handleBackwardTab();\r\n                                break;\r\n                            }\r\n                            handleForwardTab();\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Handle Esc key\r\n                 *\r\n                 * Esc key should not close modal\r\n                 */\r\n                handleEscKey: function (event) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        );\r\n    }\r\n);\r\n","Magento_AdminAnalytics/js/release-notification/modal/component-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery', 'analyticsPopupConfig'], function ($, analyticsPopupConfig) {\r\n    'use strict';\r\n\r\n    var deferred = $.Deferred(),\r\n\r\n        mixin = {\r\n        /**\r\n         * Initializes content only if its visible\r\n         */\r\n        initializeContent: function () {\r\n            var initializeContent = this._super.bind(this);\r\n\r\n            if (!analyticsPopupConfig.analyticsVisible) {\r\n                initializeContent();\r\n            } else {\r\n                deferred.then(function () {\r\n                    initializeContent();\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes release notification content after admin analytics\r\n         */\r\n        initializeContentAfterAnalytics: function () {\r\n            deferred.resolve();\r\n        }\r\n    };\r\n\r\n    return function (target) {\r\n        return target.extend(mixin);\r\n    };\r\n});\r\n\r\n","Magento_AdminNotification/toolbar_entry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'domReady!'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Mark notification as read via AJAX call.\r\n     *\r\n     * @param {String} notificationId\r\n     */\r\n    var markNotificationAsRead = function (notificationId) {\r\n            var requestUrl = $('.notifications-wrapper .admin__action-dropdown-menu').attr('data-mark-as-read-url');\r\n\r\n            $.ajax({\r\n                url: requestUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: {\r\n                    id: notificationId\r\n                },\r\n                showLoader: false\r\n            });\r\n        },\r\n        notificationCount = $('.notifications-wrapper').attr('data-notification-count'),\r\n\r\n        /**\r\n         * Remove notification from the list.\r\n         *\r\n         * @param {jQuery} notificationEntry\r\n         */\r\n        removeNotificationFromList = function (notificationEntry) {\r\n            var notificationIcon, actionElement;\r\n\r\n            notificationEntry.remove();\r\n            notificationCount--;\r\n            $('.notifications-wrapper').attr('data-notification-count', notificationCount);\r\n\r\n            if (notificationCount == 0) {// eslint-disable-line eqeqeq\r\n                // Change appearance of the bubble and its behavior when the last notification is removed\r\n                $('.notifications-wrapper .admin__action-dropdown-menu').remove();\r\n                notificationIcon = $('.notifications-wrapper .notifications-icon');\r\n                notificationIcon.removeAttr('data-toggle');\r\n                notificationIcon.off('click.dropdown');\r\n                $('.notifications-action .notifications-counter').text('').hide();\r\n            } else {\r\n                // Change top counter only for allowable range\r\n                if (notificationCount <= 99) {\r\n                    $('.notifications-action .notifications-counter').text(notificationCount);\r\n                }\r\n                $('.notifications-entry-last .notifications-counter').text(notificationCount);\r\n                // Modify caption of the 'See All' link\r\n                actionElement = $('.notifications-wrapper .admin__action-dropdown-menu .last .action-more');\r\n                actionElement.text(actionElement.text().replace(/\\d+/, notificationCount));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show notification details.\r\n         *\r\n         * @param {jQuery} notificationEntry\r\n         */\r\n        showNotificationDetails = function (notificationEntry) {\r\n            var notificationDescription = notificationEntry.find('.notifications-entry-description'),\r\n                notificationDescriptionEnd = notificationEntry.find('.notifications-entry-description-end');\r\n\r\n            if (notificationDescriptionEnd.length > 0) {\r\n                notificationDescriptionEnd.addClass('_show');\r\n            }\r\n\r\n            if (notificationDescription.hasClass('_cutted')) {\r\n                notificationDescription.removeClass('_cutted');\r\n            }\r\n        };\r\n\r\n    // Show notification description when corresponding item is clicked\r\n    $('.notifications-wrapper .admin__action-dropdown-menu .notifications-entry').on(\r\n        'click.showNotification',\r\n        function (event) {\r\n            // hide notification dropdown\r\n            $('.notifications-wrapper .notifications-icon').trigger('click.dropdown');\r\n\r\n            showNotificationDetails($(this));\r\n            event.stopPropagation();\r\n        }\r\n    );\r\n\r\n    // Remove corresponding notification from the list and mark it as read\r\n    $('.notifications-close').on('click.removeNotification', function (event) {\r\n        var notificationEntry = $(this).closest('.notifications-entry'),\r\n            notificationId = notificationEntry.attr('data-notification-id');\r\n\r\n        markNotificationAsRead(notificationId);\r\n        removeNotificationFromList(notificationEntry);\r\n\r\n        // Checking for last unread notification to hide dropdown\r\n        if (notificationCount == 0) {// eslint-disable-line eqeqeq\r\n            $('.notifications-wrapper').removeClass('active')\r\n                .find('.notifications-action')\r\n                .removeAttr('data-toggle')\r\n                .off('click.dropdown');\r\n        }\r\n        event.stopPropagation();\r\n    });\r\n\r\n    // Hide notifications bubble\r\n    if (notificationCount == 0) {// eslint-disable-line eqeqeq\r\n        $('.notifications-action .notifications-counter').hide();\r\n    } else {\r\n        $('.notifications-action .notifications-counter').show();\r\n    }\r\n});\r\n","Magento_AdminNotification/js/grid/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/listing',\r\n    'Magento_Ui/js/lib/spinner',\r\n    'jquery'\r\n], function (Listing, loader, $) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            imports: {\r\n                totalRecords: '${ $.provider }:data.totalRecords'\r\n            },\r\n            selectors: {\r\n                collapsible: '.message-system-collapsible',\r\n                messages: '.message-system'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    totalRecords: 0\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        showLoader: function () {\r\n            if (!this.source.firstLoad) {\r\n                this.fixLoaderHeight();\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Calculates loader height\r\n         *\r\n         * @param {Boolean} [closed]\r\n         */\r\n        fixLoaderHeight: function (closed) {\r\n            var $messagesBlock = $(this.selectors.messages),\r\n                $collapsibleBlock = $(this.selectors.collapsible),\r\n                resultHeight = 0;\r\n\r\n            if ($messagesBlock.length) {\r\n                resultHeight += $messagesBlock.outerHeight();\r\n            }\r\n\r\n            if ($collapsibleBlock.length && $collapsibleBlock.is(':visible') && !closed) {\r\n                resultHeight += $collapsibleBlock.outerHeight();\r\n            }\r\n\r\n            loader.get(this.name).height(resultHeight);\r\n        }\r\n    });\r\n});\r\n","Magento_AdminNotification/js/grid/columns/message.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'underscore'\r\n], function (Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_AdminNotification/grid/cells/message',\r\n            messageIndex: 'text',\r\n            fieldClass: {\r\n                message: true,\r\n                'message-warning': false,\r\n                'message-progress': false,\r\n                'message-success': false,\r\n                'message-error': false\r\n            },\r\n            statusMap: {\r\n                0: 'info',\r\n                1: 'progress',\r\n                2: 'success',\r\n                3: 'error'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getLabel: function (record) {\r\n            return record[this.messageIndex];\r\n        },\r\n\r\n        /**\r\n         * Proxy to getLabel function with UnsanitizedHtml suffix\r\n         *\r\n         * @param {Object} record\r\n         * @returns {String}\r\n         */\r\n        getLabelUnsanitizedHtml: function (record) {\r\n            return this.getLabel(record);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getFieldClass: function ($row) {\r\n            var status = this.statusMap[$row.status] || 'warning',\r\n                result = {};\r\n\r\n            result['message-' + status] = true;\r\n            result = _.extend({}, this.fieldClass, result);\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_AdminNotification/js/system/messages/popup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, modal) {\r\n    'use strict';\r\n\r\n    return function (data, element) {\r\n\r\n        if (modal.modal) {\r\n            modal.modal.html($(element).html());\r\n        } else {\r\n            modal.modal = $(element).modal({\r\n                modalClass: data.class,\r\n                type: 'popup',\r\n                buttons: []\r\n            });\r\n        }\r\n\r\n        modal.modal.modal('openModal');\r\n    };\r\n});\r\n","Magento_AdminNotification/system/notification.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.systemMessageDialog', $.mage.modal, {\r\n        options: {\r\n            modalClass: 'modal-system-messages',\r\n            systemMessageTemplate:\r\n                '<% _.each(data.items, function(item) { %>' +\r\n                    '<li class=\"message message-warning' +\r\n                        '<% if (item.severity == 1) { %>error<% } else { %>warning<% } %>\">' +\r\n                        '<%= item.text %>' +\r\n                    '</li>' +\r\n                '<% }); %>'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.options.title = $('#message-system-all').attr('title');\r\n            this._super();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        openModal: function (severity) {\r\n            var superMethod = $.proxy(this._super, this);\r\n\r\n            $.ajax({\r\n                url: this.options.ajaxUrl,\r\n                type: 'GET',\r\n                data: {\r\n                    severity: severity\r\n                }\r\n            }).done($.proxy(function (data) {\r\n                var tmpl = mageTemplate(this.options.systemMessageTemplate, {\r\n                    data: {\r\n                        items: data\r\n                    }\r\n                });\r\n\r\n                tmpl = $(tmpl);\r\n\r\n                this.element.html(\r\n                    $('<ul></ul>', {\r\n                        'class': 'message-system-list'\r\n                    }).append(tmpl)\r\n                ).trigger('contentUpdated');\r\n\r\n                superMethod();\r\n            }, this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        closeModal: function () {\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    $(function () {\r\n        $('#system_messages .message-system-short .error').on('click', function () {\r\n            $('#message-system-all').systemMessageDialog('openModal', 1);\r\n        });\r\n\r\n        $('#system_messages .message-system-short .warning').on('click', function () {\r\n            $('#message-system-all').systemMessageDialog('openModal', 2);\r\n        });\r\n    });\r\n\r\n    return $.mage.systemMessageDialog;\r\n});\r\n","Magento_AdobeIms/js/config.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        loginUrl: 'https://ims-na1.adobelogin.com/ims/authorize',\r\n        profileUrl: 'adobe_ims/user/profile',\r\n        logoutUrl: 'adobe_ims/user/logout',\r\n        manageAccountLink: 'https://account.adobe.com/',\r\n        login: {\r\n            callbackParsingParams: {\r\n                regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\r\n                codeIndex: 1,\r\n                messageIndex: 2,\r\n                nameIndex: 3,\r\n                successCode: 'success',\r\n                errorCode: 'error'\r\n            },\r\n            popupWindowParams: {\r\n                width: 500,\r\n                height: 600,\r\n                top: 100,\r\n                left: 300\r\n            },\r\n            popupWindowTimeout: 10000\r\n        }\r\n    };\r\n});\r\n\r\n","Magento_AdobeIms/js/signIn.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'Magento_AdobeIms/js/action/authorization'\r\n], function (Component, $, login) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n\r\n        defaults: {\r\n            profileUrl: 'adobe_ims/user/profile',\r\n            logoutUrl: 'adobe_ims/user/logout',\r\n            user: {\r\n                isAuthorized: false,\r\n                name: '',\r\n                email: '',\r\n                image: ''\r\n            },\r\n            loginConfig: {\r\n                url: 'https://ims-na1.adobelogin.com/ims/authorize',\r\n                callbackParsingParams: {\r\n                    regexpPattern: /auth\\[code=(success|error);message=(.+)\\]/,\r\n                    codeIndex: 1,\r\n                    messageIndex: 2,\r\n                    nameIndex: 3,\r\n                    successCode: 'success',\r\n                    errorCode: 'error'\r\n                },\r\n                popupWindowParams: {\r\n                    width: 500,\r\n                    height: 600,\r\n                    top: 100,\r\n                    left: 300\r\n                },\r\n                popupWindowTimeout: 60000\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['user']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Login to Adobe\r\n         *\r\n         * @return {window.Promise}\r\n         */\r\n        login: function () {\r\n            var deferred = $.Deferred();\r\n\r\n            if (this.user().isAuthorized) {\r\n                deferred.resolve();\r\n            }\r\n            login(this.loginConfig)\r\n                .then(function (response) {\r\n                    this.loadUserProfile();\r\n                    deferred.resolve(response);\r\n                }.bind(this))\r\n                .fail(function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Retrieve data to authorized user.\r\n         *\r\n         * @return array\r\n         */\r\n        loadUserProfile: function () {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.profileUrl,\r\n                showLoader: true,\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.user({\r\n                        isAuthorized: true,\r\n                        name: response.result.name,\r\n                        email: response.result.email,\r\n                        image: response.result.image\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Logout from adobe account\r\n         */\r\n        logout: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.logoutUrl,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n                showLoader: true,\r\n                success: function () {\r\n                    this.user({\r\n                        isAuthorized: false,\r\n                        name: '',\r\n                        email: '',\r\n                        image: ''\r\n                    });\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeIms/js/user.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(['ko'], function (ko) {\r\n    'use strict';\r\n\r\n    return {\r\n        isAuthorized: ko.observable(false),\r\n        name: ko.observable(''),\r\n        email: ko.observable('')\r\n    };\r\n});\r\n","Magento_AdobeIms/js/action/authorization.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Build window params\r\n     * @param {Object} windowParams\r\n     * @returns {String}\r\n     */\r\n    function buildWindowParams(windowParams) {\r\n        var output = '',\r\n            coma = '',\r\n            paramName,\r\n            paramValue;\r\n\r\n        for (paramName in windowParams) {\r\n            if (windowParams[paramName]) {\r\n                paramValue = windowParams[paramName];\r\n                output += coma + paramName + '=' + paramValue;\r\n                coma = ',';\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }\r\n\r\n    return function (config) {\r\n        var authWindow,\r\n            deferred = $.Deferred(),\r\n            watcherId,\r\n            stopWatcherId;\r\n\r\n        /**\r\n         * Close authorization window if already opened\r\n         */\r\n        if (window.adobeIMSAuthWindow) {\r\n            window.adobeIMSAuthWindow.close();\r\n        }\r\n\r\n        /**\r\n         * Opens authorization window with special parameters\r\n         */\r\n        authWindow = window.adobeIMSAuthWindow = window.open(\r\n            config.url,\r\n            'authorization_widnow',\r\n            buildWindowParams(\r\n                config.popupWindowParams || {\r\n                    width: 500,\r\n                    height: 300\r\n                }\r\n            )\r\n        );\r\n\r\n        /**\r\n         * Stop handle\r\n         */\r\n        function stopHandle() {\r\n            // Clear timers\r\n            clearTimeout(stopWatcherId);\r\n            clearInterval(watcherId);\r\n\r\n            // Close window\r\n            authWindow.close();\r\n        }\r\n\r\n        /**\r\n         * Start handle\r\n         */\r\n        function startHandle() {\r\n            var responseData;\r\n\r\n            try {\r\n\r\n                if (authWindow.document.domain !== document.domain ||\r\n                    authWindow.document.readyState !== 'complete') {\r\n                    return;\r\n                }\r\n\r\n                /**\r\n                 * If within 10 seconds the result is not received, then reject the request\r\n                 */\r\n                stopWatcherId = setTimeout(function () {\r\n                    stopHandle();\r\n                    deferred.reject(new Error('Time\\'s up.'));\r\n                }, config.popupWindowTimeout || 60000);\r\n\r\n                responseData = authWindow.document.body.innerHTML.match(\r\n                    config.callbackParsingParams.regexpPattern\r\n                );\r\n\r\n                if (!responseData) {\r\n                    return;\r\n                }\r\n\r\n                stopHandle();\r\n\r\n                if (responseData[config.callbackParsingParams.codeIndex] ===\r\n                    config.callbackParsingParams.successCode) {\r\n                    deferred.resolve({\r\n                        isAuthorized: true,\r\n                        lastAuthSuccessMessage: responseData[config.callbackParsingParams.messageIndex]\r\n                    });\r\n                } else {\r\n                    deferred.reject(responseData[config.callbackParsingParams.messageIndex]);\r\n                }\r\n            } catch (e) {\r\n                if (authWindow.closed) {\r\n                    clearTimeout(stopWatcherId);\r\n                    clearInterval(watcherId);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (window.adobeIMSAuthWindow && window.adobeIMSAuthWindow.closed) {\r\n                        deferred.reject(new Error('Authentication window was closed.'));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Watch a result 1 time per second\r\n         */\r\n        watcherId = setInterval(startHandle, 1000);\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockAdminUi/js/connection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'uiComponent',\r\n    'jquery'\r\n], function (ko, Component, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockAdminUi/connection',\r\n            connectionFailedMessage: 'Connection test failed.',\r\n            emptyApiKeyMessage: 'Please fill the \"API Key (Client ID)\" field for a connection test',\r\n            apiKeyInputId: 'system_adobe_stock_integration_api_key',\r\n            url: '',\r\n            success: false,\r\n            message: '',\r\n            visible: false\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'success',\r\n                    'message',\r\n                    'visible'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @override\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.messageClass = ko.computed(function () {\r\n                return 'message-validation message message-' + (this.success() ? 'success' : 'error');\r\n            }, this);\r\n\r\n            if (!this.success()) {\r\n                this.showMessage(false, this.connectionFailedMessage);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {bool} success\r\n         * @param {String} message\r\n         */\r\n        showMessage: function (success, message) {\r\n            this.message(message);\r\n            this.success(success);\r\n            this.visible(true);\r\n        },\r\n\r\n        /**\r\n         * Send request to server to test connection to Adobe Stock API and display the result\r\n         */\r\n        testConnection: function () {\r\n            var apiKey = document.getElementById(this.apiKeyInputId).value;\r\n\r\n            if (apiKey.length === 0) {\r\n                this.showMessage(false, this.emptyApiKeyMessage);\r\n\r\n                return;\r\n            }\r\n\r\n            this.visible(false);\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.url,\r\n                dataType: 'json',\r\n                data: {\r\n                    'api_key': apiKey\r\n                },\r\n                success: function (response) {\r\n                    this.showMessage(response.success === true, response.message);\r\n                }.bind(this),\r\n                error: function () {\r\n                    this.showMessage(false, this.connectionFailedMessage);\r\n                }.bind(this)\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/media-gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Base64 */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    return {\r\n        jsTreeRootFolderId: 'root',\r\n        jsTreeFolderNameMaxLength: 20,\r\n\r\n        /**\r\n         * Locate downloaded image in media browser\r\n         *\r\n         * @param {String} path\r\n         */\r\n        locate: function (path) {\r\n            var imageFolder = this.selectFolder(path),\r\n                imageFilename = path.substring(path.lastIndexOf('/') + 1),\r\n                locatedImage;\r\n\r\n            if (imageFolder.length) {\r\n                locatedImage = $('div[data-row=\"file\"]:has(img[alt=\\\"' + imageFilename + '\\\"])');\r\n\r\n                return locatedImage.length ? locatedImage : false;\r\n            }\r\n\r\n            $.ajaxSetup({\r\n                async: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Select folder\r\n         *\r\n         * @param {String} path\r\n         */\r\n        selectFolder: function (path) {\r\n            var imageFolder,\r\n                pathId,\r\n                imagePath = path.replace(/^\\/+/, ''),\r\n                folderPathParts = imagePath.split('/').slice(0, -1);\r\n\r\n            $.ajaxSetup({\r\n                async: false\r\n            });\r\n\r\n            if (folderPathParts.length > 1) {\r\n                this.openFolderTree(folderPathParts);\r\n            }\r\n\r\n            pathId = Base64.idEncode(folderPathParts.join('/'));\r\n            imageFolder = $('.jstree li[data-id=\"' + pathId + '\"]').children('a');\r\n\r\n            if (!imageFolder.length) {\r\n                imageFolder = $('.jstree li[data-id=\"' + this.jsTreeRootFolderId + '\"]')\r\n                    .children('a');\r\n            }\r\n\r\n            if (imageFolder.length) {\r\n                imageFolder[0].click();\r\n            }\r\n\r\n            return imageFolder;\r\n        },\r\n\r\n        /**\r\n         * Show popup that image cannot be located\r\n         */\r\n        notLocated: function () {\r\n            confirm({\r\n                title: $.mage.__('The image cannot be located'),\r\n                content: $.mage.__('We cannot find this image in the media gallery.'),\r\n                buttons: [{\r\n                    text: $.mage.__('Ok'),\r\n                    class: 'action-primary',\r\n                    attr: {},\r\n\r\n                    /**\r\n                     * Close modal on button click\r\n                     */\r\n                    click: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }]\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Open folder Tree\r\n         *\r\n         * @param {Array} folderPathParts\r\n         */\r\n        openFolderTree: function (folderPathParts) {\r\n            var i,\r\n                pathId,\r\n                openFolderButton,\r\n                folderPath = '';\r\n\r\n            for (i = 0; i < folderPathParts.length - 1; i++) {\r\n                if (folderPath === '') {\r\n                    folderPath = folderPathParts[i];\r\n                } else {\r\n                    folderPath = folderPath + '/' + folderPathParts[i];\r\n                }\r\n                pathId = Base64.idEncode(folderPath);\r\n                openFolderButton = $('.jstree li[data-id=\"' + pathId + '\"].jstree-closed').children('.jstree-icon');\r\n\r\n                if (openFolderButton.length) {\r\n                    openFolderButton.click();\r\n                }\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/panel.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Element, $, $t) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            containerId: '#adobe-stock-images-search-modal',\r\n            masonryComponentPath: 'adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns',\r\n            dataSourcePath: 'adobe_stock_images_listing.adobe_stock_images_listing_data_source',\r\n            modules: {\r\n                masonry: '${ $.masonryComponentPath }',\r\n                source: '${ $.dataSourcePath }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            $(this.containerId).modal({\r\n                type: 'slide',\r\n                buttons: [],\r\n                modalClass: 'adobe-stock-modal',\r\n                title: $t('Adobe Stock')\r\n            }).on('openModal', function () {\r\n                this.masonry().setLayoutStylesWhenLoaded();\r\n            }.bind(this));\r\n\r\n            try {\r\n                $(this.containerId).applyBindings();\r\n            } catch (e) {\r\n                //already bounded\r\n            }\r\n\r\n            $(window).on('fileDeleted.mediabrowser', this.reloadGrid.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update listing data\r\n         */\r\n        reloadGrid: function () {\r\n            this.source().set('params.t', Date.now());\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/path-utility.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Extracts image name from its path\r\n         *\r\n         * @param {String} path\r\n         * @returns {String}\r\n         */\r\n        getImageNameFromPath: function (path) {\r\n            var filePathArray = path.split('/'),\r\n                imageIndex = filePathArray.length - 1;\r\n\r\n            return filePathArray[imageIndex].substring(0, filePathArray[imageIndex].lastIndexOf('.'));\r\n        },\r\n\r\n        /**\r\n         * Generate meaningful name image file,\r\n         * allow only alphanumerics, dashes, and underscores\r\n         *\r\n         * @param {String} title\r\n         * @param {Number} id\r\n         * @return string\r\n         */\r\n        generateImageName: function (title, id) {\r\n            var fileName = title.substring(0, 32)\r\n                .replace(/[^a-zA-Z0-9_]/g, '-')\r\n                .replace(/-{2,}/g, '-')\r\n                .toLowerCase();\r\n\r\n            /* If the filename does not contain latin chars, use ID as a filename */\r\n            return fileName === '-' ? id : fileName;\r\n        },\r\n\r\n        /**\r\n         * Get image file extension\r\n         *\r\n         * @param {String} contentType\r\n         * @return string\r\n         */\r\n        getImageExtension: function (contentType) {\r\n            return contentType.match(/[^/]{1,4}$/);\r\n        },\r\n\r\n        /**\r\n         * Create path\r\n         *\r\n         * @param {String} directoryPath\r\n         * @param {String} fileName\r\n         * @param {String} contentType\r\n         * @returns {String}\r\n         */\r\n        buildPath: function (directoryPath, fileName, contentType) {\r\n            return directoryPath + '/' + fileName + '.' + this.getImageExtension(contentType);\r\n        }\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/signIn.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_AdobeIms/js/signIn',\r\n    'Magento_AdobeIms/js/action/authorization',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, signIn, auth, confirm) {\r\n    'use strict';\r\n\r\n    return signIn.extend({\r\n\r\n        defaults: {\r\n            userQuota: {},\r\n            // eslint-disable-next-line max-len\r\n            dataProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing_data_source, ns = adobe_stock_images_listing',\r\n            // eslint-disable-next-line max-len\r\n            previewProvider: 'name = adobe_stock_images_listing.adobe_stock_images_listing.adobe_stock_images_columns.preview, ns = adobe_stock_images_listing',\r\n            quotaUrl: 'adobe_stock/license/quota',\r\n            modules: {\r\n                source: '${ $.dataProvider }',\r\n                preview: '${ $.previewProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['userQuota']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Login to Adobe\r\n         *\r\n         * @return {*}\r\n         */\r\n        login: function () {\r\n            var deferred = $.Deferred();\r\n\r\n            if (this.user().isAuthorized) {\r\n                return deferred.resolve();\r\n            }\r\n            auth(this.loginConfig)\r\n                .then(function (response) {\r\n                    this.loadUserProfile();\r\n                    deferred.resolve(response);\r\n                }.bind(this))\r\n                .fail(function (error) {\r\n                    deferred.reject(error);\r\n                });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Login action with popup on error..\r\n         */\r\n        loginClick: function () {\r\n            this.login().fail(function (error) {\r\n                this.showLoginErrorPopup(error);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Show popup that user failed to login.\r\n         */\r\n        showLoginErrorPopup: function (error) {\r\n            confirm({\r\n                title: $.mage.__('Couldn\\'t log you in'),\r\n                content: error,\r\n                buttons: [{\r\n                    text: $.mage.__('Ok'),\r\n                    class: 'action-primary action-accept'\r\n                }],\r\n                actions: {\r\n\r\n                    /**\r\n                       * Close modal\r\n                       */\r\n                    confirm: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Logout from adobe account\r\n         */\r\n        logout: function () {\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.logoutUrl,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dataType: 'json',\r\n                context: this,\r\n                showLoader: true,\r\n                success: function () {\r\n                    this.user({\r\n                        isAuthorized: false,\r\n                        name: '',\r\n                        email: '',\r\n                        image: this.defaultProfileImage\r\n                    });\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Retrieves full user quota.\r\n         */\r\n        getUserQuota: function () {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.quotaUrl,\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.userQuota(response.result);\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        loadUserProfile: function () {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.profileUrl,\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns void\r\n                 */\r\n                success: function (response) {\r\n                    this.user({\r\n                        isAuthorized: true,\r\n                        name: response.result.name,\r\n                        email: response.result.email,\r\n                        image: response.result.image\r\n                    });\r\n                    this.getUserQuota();\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 * @returns {String}\r\n                 */\r\n                error: function (response) {\r\n                    return response.message;\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/action/confirmQuota.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (requestUrl, adobeAssetId) {\r\n        var deferred = $.Deferred();\r\n\r\n        $.ajax({\r\n            type: 'GET',\r\n            url: requestUrl,\r\n            dataType: 'json',\r\n            data: {\r\n                'media_id': adobeAssetId\r\n            },\r\n            showLoader: true,\r\n\r\n            /**\r\n             * Extract the data from the response and resolve\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            success: function (response) {\r\n                deferred.resolve({\r\n                    canLicense: response.result.canLicense,\r\n                    message: response.result.message\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Extract the error message and reject\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n                var message = response.JSON ? response.JSON.message\r\n                    : $.mage.__('Could not fetch licensing information.');\r\n\r\n                if (response.status === 403) {\r\n                    message = $.mage.__('Your admin role does not have permissions to license an image');\r\n                }\r\n\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/action/getLicenseStatus.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (requestUrl, ids) {\r\n        var deferred = $.Deferred();\r\n\r\n        $.ajax({\r\n            type: 'GET',\r\n            url: requestUrl + '?ids=' + ids.join(','),\r\n            data: {\r\n                'form_key': window.FORM_KEY\r\n            },\r\n            showLoader: true,\r\n            dataType: 'json',\r\n\r\n            /**\r\n             * Resolve with the response result\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            success: function (response) {\r\n                deferred.resolve(response.result);\r\n            },\r\n\r\n            /**\r\n             * Reject with the message from response\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n                var message = response.message;\r\n\r\n                if (response.status === 403) {\r\n                    message = $.mage.__('Your admin role does not have permissions to license an image');\r\n                }\r\n\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/action/licenseAndSave.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_AdobeStockImageAdminUi/js/action/save',\r\n    'Magento_AdobeStockImageAdminUi/js/confirmation/license',\r\n    'Magento_AdobeStockImageAdminUi/js/path-utility'\r\n], function ($, saveAction, licenseConfirmation, pathUtility) {\r\n    'use strict';\r\n\r\n    return function (\r\n        requestUrl,\r\n        id,\r\n        title,\r\n        path,\r\n        contentType,\r\n        isDownloaded,\r\n        quotaMessage,\r\n        directoryPath\r\n    ) {\r\n        var deferred = $.Deferred(),\r\n            destinationPath;\r\n\r\n        licenseConfirmation(\r\n                title,\r\n                quotaMessage,\r\n                isDownloaded,\r\n                pathUtility.generateImageName(title, id),\r\n                pathUtility.getImageExtension(contentType)\r\n            ).then(function (fileName) {\r\n\r\n                if (typeof fileName === 'undefined') {\r\n                    fileName = pathUtility.getImageNameFromPath(path);\r\n                }\r\n\r\n                destinationPath = pathUtility.buildPath(directoryPath, fileName, contentType);\r\n\r\n                saveAction(\r\n                    requestUrl,\r\n                    id,\r\n                    destinationPath\r\n                ).then(function () {\r\n                    deferred.resolve(destinationPath);\r\n                }).fail(function (message) {\r\n                    deferred.reject(message);\r\n                });\r\n            }).fail(function (error) {\r\n                deferred.reject(error);\r\n            });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/action/save.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (requestUrl, adobeAssetId, destinationPath) {\r\n        var deferred = $.Deferred();\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: requestUrl,\r\n            dataType: 'json',\r\n            showLoader: true,\r\n            data: {\r\n                'media_id': adobeAssetId,\r\n                'destination_path': destinationPath\r\n            },\r\n\r\n            /**\r\n             * Resolve on success\r\n             */\r\n            success: function () {\r\n                deferred.resolve();\r\n            },\r\n\r\n            /**\r\n             * Extract the error message and reject\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n                var message;\r\n\r\n                if (typeof response.responseJSON === 'undefined' ||\r\n                    typeof response.responseJSON.message === 'undefined'\r\n                ) {\r\n                    message = 'Could not save the asset!';\r\n                } else {\r\n                    message = response.responseJSON.message;\r\n                }\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/action/saveLicensed.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_AdobeStockImageAdminUi/js/action/save',\r\n    'Magento_AdobeStockImageAdminUi/js/confirmation/saveLicensed',\r\n    'Magento_AdobeStockImageAdminUi/js/path-utility'\r\n], function ($, saveAction, saveLicensedConfirmation, pathUtility) {\r\n    'use strict';\r\n\r\n    return function (requestUrl, id, title, path, contentType, directoryPath) {\r\n        var imageName = '',\r\n            destinationPath,\r\n            deferred = $.Deferred();\r\n\r\n        if (path !== '') {\r\n            imageName = pathUtility.getImageNameFromPath(path);\r\n            destinationPath = pathUtility.buildPath(directoryPath, imageName, contentType);\r\n            saveAction(\r\n                requestUrl,\r\n                id,\r\n                destinationPath\r\n            ).then(function () {\r\n                deferred.resolve(destinationPath);\r\n            }).fail(function (message) {\r\n                deferred.reject(message);\r\n            });\r\n\r\n            return deferred.promise();\r\n        }\r\n\r\n        saveLicensedConfirmation(\r\n            pathUtility.generateImageName(title, id),\r\n            pathUtility.getImageExtension(contentType)\r\n        ).then(function (fileName) {\r\n            destinationPath = pathUtility.buildPath(directoryPath, fileName, contentType);\r\n            saveAction(\r\n                requestUrl,\r\n                id,\r\n                destinationPath\r\n            ).then(function () {\r\n                deferred.resolve(destinationPath);\r\n            }).fail(function (message) {\r\n                deferred.reject(message);\r\n            });\r\n        }).fail(function (error) {\r\n            deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/action/savePreview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_AdobeStockImageAdminUi/js/action/save',\r\n    'Magento_AdobeStockImageAdminUi/js/confirmation/save',\r\n    'Magento_AdobeStockImageAdminUi/js/path-utility'\r\n], function ($, saveAction, saveConfirmation, pathUtility) {\r\n    'use strict';\r\n\r\n    return function (requestUrl, id, title, contentType, directoryPath) {\r\n        var deferred = $.Deferred(),\r\n            destinationPath;\r\n\r\n        saveConfirmation(\r\n            pathUtility.generateImageName(title, id),\r\n            pathUtility.getImageExtension(contentType)\r\n        ).then(function (fileName) {\r\n            destinationPath = pathUtility.buildPath(directoryPath, fileName, contentType);\r\n\r\n            saveAction(\r\n                requestUrl,\r\n                id,\r\n                destinationPath\r\n            ).then(function () {\r\n                deferred.resolve(destinationPath);\r\n            }).fail(function (error) {\r\n                deferred.reject(error);\r\n            });\r\n        }).fail(function (error) {\r\n            deferred.reject(error);\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/images-grid-sizes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/sizes',\r\n    'underscore'\r\n], function (Sizes, _) {\r\n    'use strict';\r\n\r\n    return Sizes.extend({\r\n        defaults: {\r\n            value: 32,\r\n            minSize: 1,\r\n            maxSize: 64\r\n        },\r\n\r\n        exports: {\r\n            value: '${ $.provider }:params.paging.page',\r\n            options: '${ $.provider }:params.paging.options'\r\n        },\r\n\r\n        sizes: {\r\n            '32': {\r\n                value: 32,\r\n                label: 32\r\n            },\r\n            '48': {\r\n                value: 48,\r\n                label: 48\r\n            },\r\n            '64': {\r\n                value: 64,\r\n                label: 64\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        updateArray: function () {\r\n            if (_.isUndefined(this.options)) {\r\n                this.options = this.sizes;\r\n            }\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/image-preview.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'uiLayout',\r\n    'Magento_Ui/js/grid/columns/image-preview'\r\n], function ($, layout, imagePreview) {\r\n    'use strict';\r\n\r\n    return imagePreview.extend({\r\n        defaults: {\r\n            downloadImagePreviewUrl: 'adobe_stock/preview/download',\r\n            licenseAndDownloadUrl: 'adobe_stock/license/license',\r\n            saveLicensedAndDownloadUrl: 'adobe_stock/license/saveLicensed',\r\n            confirmationUrl: 'adobe_stock/license/confirmation',\r\n            relatedImagesUrl: 'adobe_stock/preview/relatedimages',\r\n            buyCreditsUrl: 'https://stock.adobe.com/',\r\n            mediaGallerySelector: '.media-gallery-modal:has(#search_adobe_stock)',\r\n            adobeStockModalSelector: '.adobe-search-images-modal',\r\n            activeMediaGallerySelector: 'aside.modal-slide.adobe-stock-modal._show',\r\n            modules: {\r\n                keywords: '${ $.name }_keywords',\r\n                related: '${ $.name }_related',\r\n                actions: '${ $.name }_actions'\r\n            },\r\n            viewConfig: [\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/keywords',\r\n                    name: '${ $.name }_keywords'\r\n                },\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/related',\r\n                    name: '${ $.name }_related'\r\n                },\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/actions',\r\n                    name: '${ $.name }_actions',\r\n                    provider: '${ $.provider }',\r\n                    mediaGallery: '${ $.mediaGalleryComponent }',\r\n                    mediaGalleryName: '${ $.mediaGalleryName }',\r\n                    mediaGalleryProvider: '${ $.mediaGalleryProvider }',\r\n                    mediaGallerySortBy: '${ $.mediaGallerySortBy }',\r\n                    mediaGallerySearchInput: '${ $.mediaGallerySearchInput }',\r\n                    mediaGalleryListingFilters: '${ $.mediaGalleryListingFilters }',\r\n                    getMediaGalleryAsset: '${ $.getMediaGalleryAsset }',\r\n                    imageEditDetailsUrl: '${ $.imageEditDetailsUrl }',\r\n                    listingPaging: '${ $.listingPaging }'\r\n                }\r\n            ],\r\n            listens: {\r\n                '${ $.sortByComponentName }:applied': 'hide'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize the component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super().initView();\r\n            $(window).on('fileDeleted.enhancedMediaGallery', this.reloadAdobeGrid.bind(this));\r\n            $(window).on('folderDeleted.enhancedMediaGallery', this.reloadAdobeGrid.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize child components\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initView: function () {\r\n            layout(this.viewConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get previous button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewPrevious: function (record) {\r\n            return this.related().cannotViewPrevious(record);\r\n        },\r\n\r\n        /**\r\n         * Get next button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewNext: function (record) {\r\n            return this.related().cannotViewNext(record);\r\n        },\r\n\r\n        /**\r\n         * Return active adobe gallery selector.\r\n         */\r\n        getAdobeModal: function () {\r\n            return $(this.activeMediaGallerySelector).find(this.adobeStockModalSelector);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        next: function (record) {\r\n            if (this.related().selectedTab()) {\r\n                this.related().nextRelated(record);\r\n\r\n                return;\r\n            }\r\n            this.keywords().hideAllKeywords();\r\n            this._super(record);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        prev: function (record) {\r\n            if (this.related().selectedTab()) {\r\n                this.related().prevRelated(record);\r\n\r\n                return;\r\n            }\r\n            this.keywords().hideAllKeywords();\r\n            this._super(record);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        show: function (record) {\r\n            this.related().selectedTab(null);\r\n            this.keywords().hideAllKeywords();\r\n            this.displayedRecord(record);\r\n            this._super(record);\r\n            this.related().loadRelatedImages(record);\r\n        },\r\n\r\n        /**\r\n         * Show related image data in the preview section\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        showRelated: function (record) {\r\n            this.keywords().hideAllKeywords();\r\n            this.displayedRecord(record);\r\n            this.updateHeight();\r\n        },\r\n\r\n        /**\r\n         * Returns attributes to display under the preview image\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        getDisplayAttributes: function () {\r\n            if (!this.displayedRecord()) {\r\n                return [];\r\n            }\r\n\r\n            return [\r\n                {\r\n                    name: 'Dimensions',\r\n                    value: this.displayedRecord().width + ' x ' + this.displayedRecord().height + ' px'\r\n                },\r\n                {\r\n                    name: 'File type',\r\n                    value: this.displayedRecord()['content_type'].toUpperCase()\r\n                },\r\n                {\r\n                    name: 'Category',\r\n                    value: this.displayedRecord().category.name || 'None'\r\n                },\r\n                {\r\n                    name: 'File #',\r\n                    value: this.displayedRecord().id\r\n                }\r\n            ];\r\n        },\r\n\r\n        /**\r\n         * Reload Adobe grid after deleting image\r\n         */\r\n        reloadAdobeGrid: function () {\r\n            this.actions().source().reload({\r\n                refresh: true\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/overlay.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/columns/overlay',\r\n    'Magento_AdobeStockImageAdminUi/js/action/getLicenseStatus'\r\n], function ($, _, overlay, getLicenseStatus) {\r\n    'use strict';\r\n\r\n    return overlay.extend({\r\n        defaults: {\r\n            // eslint-disable-next-line max-len\r\n            provider: 'name = adobe_stock_images_listing.adobe_stock_images_listing_data_source, ns = adobe_stock_images_listing',\r\n            loginProvider: 'name = adobe-login, ns = adobe-login',\r\n            getImagesUrl: 'adobe_stock/license/getlist',\r\n            licensed: {},\r\n            modules: {\r\n                login: '${ $.loginProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:data.items': 'handleItemsUpdate',\r\n                '${ $.loginProvider }:user': 'handleUserUpdate'\r\n            },\r\n            imports: {\r\n                rows: '${ $.provider }:data.items'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'licensed'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Updates the licensed data when items data is updated.\r\n         *\r\n         * @param {Array} items\r\n         */\r\n        handleItemsUpdate: function (items) {\r\n            var ids = this.getIds(items);\r\n\r\n            this.updateLicensed(ids);\r\n        },\r\n\r\n        /**\r\n         * Updates the licensed data when user data is updated.\r\n         */\r\n        handleUserUpdate: function () {\r\n            var ids = this.getIds(this.rows);\r\n\r\n            this.updateLicensed(ids);\r\n        },\r\n\r\n        /**\r\n         * Set Licensed images data.\r\n         *\r\n         * @param {Array} ids\r\n         */\r\n        updateLicensed: function (ids) {\r\n            if (!this.isUserAuthorized() || ids.length === 0) {\r\n                this.licensed({});\r\n\r\n                return;\r\n            }\r\n\r\n            getLicenseStatus(this.getImagesUrl, ids).then(function (licensed) {\r\n                this.licensed(licensed);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Checks if user is logged in and authorized\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isUserAuthorized: function () {\r\n            return !_.isUndefined(this.login()) && this.login().user().isAuthorized;\r\n        },\r\n\r\n        /**\r\n         * Get all ids from items array\r\n         *\r\n         * @param {Array} items\r\n         * @returns {Number[]}\r\n         */\r\n        getIds: function (items) {\r\n            var ids = [];\r\n\r\n            items.forEach(function (record) {\r\n                ids.push(record.id);\r\n            });\r\n\r\n            return ids;\r\n        },\r\n\r\n        /**\r\n         * Returns top displacement of overlay according to image height\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Object}\r\n         */\r\n        getStyles: function (record) {\r\n            var height = record.styles().height.replace('px', '') - 40;\r\n\r\n            return {\r\n                top: height + 'px'\r\n            };\r\n        },\r\n\r\n        /**\r\n         * If overlay should be visible\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isVisible: function (row) {\r\n            return this.licensed()[row.id];\r\n        },\r\n\r\n        /**\r\n         * Get overlay label\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getLabel: function (row) {\r\n            return this.licensed()[row.id] ? 'Licensed' : '';\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/actions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'uiRegistry',\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_AdobeStockImageAdminUi/js/action/save',\r\n    'Magento_AdobeStockImageAdminUi/js/action/savePreview',\r\n    'Magento_AdobeStockImageAdminUi/js/action/saveLicensed',\r\n    'Magento_AdobeStockImageAdminUi/js/action/licenseAndSave',\r\n    'Magento_AdobeStockImageAdminUi/js/action/confirmQuota',\r\n    'Magento_AdobeStockImageAdminUi/js/media-gallery',\r\n    'Magento_AdobeStockImageAdminUi/js/confirmation/buyCredits',\r\n    'Magento_AdobeStockImageAdminUi/js/action/getLicenseStatus',\r\n    'Magento_Ui/js/modal/alert'\r\n], function (\r\n    Component,\r\n    uiRegistry,\r\n    $,\r\n    _,\r\n    saveAction,\r\n    savePreviewAction,\r\n    saveLicensedAction,\r\n    licenseAndSaveAction,\r\n    confirmQuotaAction,\r\n    mediaGallery,\r\n    buyCreditsConfirmation,\r\n    getLicenseStatus,\r\n    uiAlert\r\n) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/actions',\r\n            loginProvider: 'name = adobe-login, ns = adobe-login',\r\n            mediaGallerySelector: '.media-gallery-modal:has(#search_adobe_stock)',\r\n            adobeStockModalSelector: '.adobe-search-images-modal',\r\n            downloadImagePreviewUrl: 'adobe_stock/preview/download',\r\n            licenseAndDownloadUrl: 'adobe_stock/license/license',\r\n            saveLicensedAndDownloadUrl: 'adobe_stock/license/saveLicensed',\r\n            buyCreditsUrl: 'https://stock.adobe.com/',\r\n            messageDelay: 5,\r\n            mediaGallery: '',\r\n            imageItems: [],\r\n            messages: [],\r\n            listens: {\r\n                '${ $.provider }:data.items': 'updateActions'\r\n            },\r\n            modules: {\r\n                login: '${ $.loginProvider }',\r\n                preview: '${ $.parentName }.preview',\r\n                overlay: '${ $.parentName }.overlay',\r\n                source: '${ $.provider }',\r\n                imageDirectory: '${ $.mediaGalleryName }',\r\n                mediaGallerySortBy: '${ $.mediaGallerySortBy }',\r\n                mediaGallerySearchInput: '${ $.mediaGallerySearchInput }',\r\n                mediaGalleryListingFilters: '${ $.mediaGalleryListingFilters }',\r\n                listingPaging: '${ $.listingPaging }'\r\n            },\r\n            imports: {\r\n                imageItems: '${ $.mediaGalleryProvider }:data.items'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         *\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'imageItems',\r\n                    'messages'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update displayed record data on data source update\r\n         */\r\n        updateActions: function () {\r\n            var displayedRecord = this.preview().displayedRecord(),\r\n                updatedDisplayedRecord = this.preview().displayedRecord(),\r\n                records = this.source().data.items,\r\n                index;\r\n\r\n            if (typeof displayedRecord.id === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            for (index = 0; index < records.length; index++) {\r\n                if (records[index].id === displayedRecord.id) {\r\n                    updatedDisplayedRecord = records[index];\r\n                    break;\r\n                }\r\n            }\r\n\r\n            this.preview().displayedRecord(updatedDisplayedRecord);\r\n        },\r\n\r\n        /**\r\n         * Returns is_downloaded flag as observable for given record\r\n         *\r\n         * @returns {observable}\r\n         */\r\n        isDownloaded: function () {\r\n            return this.preview().displayedRecord()['is_downloaded'];\r\n        },\r\n\r\n        /**\r\n         * Is asset licensed in adobe stock in context of currently logged in account\r\n         *\r\n         * @returns {observable}\r\n         */\r\n        isLicensed: function () {\r\n            return this.overlay().licensed()[this.preview().displayedRecord().id] && !this.isLicensedLocally();\r\n        },\r\n\r\n        /**\r\n         * Is licensed version of asset saved locally\r\n         *\r\n         * @returns {observable}\r\n         */\r\n        isLicensedLocally: function () {\r\n            return this.preview().displayedRecord()['is_licensed_locally'];\r\n        },\r\n\r\n        /**\r\n         * Locate downloaded image in media browser\r\n         */\r\n        openInMediaGalleryClick: function () {\r\n            this.preview().getAdobeModal().trigger('closeModal');\r\n\r\n            if (!this.isMediaBrowser()) {\r\n                this.selectImageInNewMediaGalleryBySearch(this.preview().displayedRecord().id);\r\n            } else {\r\n                this.selectDisplayedImageForOldMediaGallery(this.preview().displayedRecord().path);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Return adobe stock asset by adobe id\r\n         *\r\n         * @param {String} adobeId\r\n         */\r\n        getAssetDetails: function (adobeId) {\r\n            return $.ajax({\r\n                url: this.getMediaGalleryAsset,\r\n                data: {\r\n                    'adobe_id': adobeId\r\n                },\r\n                context: this,\r\n                showLoader: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Select image in new media gallery via search input\r\n         *\r\n         * @param {String} imageId\r\n         */\r\n        selectImageInNewMediaGalleryBySearch: function (imageId) {\r\n            var path;\r\n\r\n            this.mediaGalleryListingFilters().clear();\r\n            this.getAssetDetails(imageId).then(function (assetDetails) {\r\n                if (assetDetails.length === 0) {\r\n                    return;\r\n                }\r\n                this.mediaGallerySearchInput().apply(assetDetails.title);\r\n                path = assetDetails.path;\r\n                path = path.substring(0, path.lastIndexOf('/'));\r\n\r\n                if (path !== '') {\r\n                    this.imageDirectory().locateNode(path);\r\n                }\r\n                this.selectRecordFromMediaGalleryProvider(assetDetails.path);\r\n            }.bind(this));\r\n\r\n        },\r\n\r\n        /**\r\n         * Open recently saved image and go to first page\r\n         */\r\n        openNewestImage: function () {\r\n            this.listingPaging().goFirst();\r\n            this.mediaGallerySortBy().selectDefaultOption();\r\n        },\r\n\r\n        /**\r\n         * Selects displayed image in media gallery for old gallery\r\n         */\r\n        selectDisplayedImageForOldMediaGallery: function (path) {\r\n            var image = mediaGallery.locate(path);\r\n\r\n            image ? image.trigger('click') : mediaGallery.notLocated();\r\n        },\r\n\r\n        /**\r\n         * Select record by image file name\r\n         *\r\n         * @param {String} path\r\n         */\r\n        selectRecordFromMediaGalleryProvider: function (path) {\r\n            var subscription;\r\n\r\n            subscription = this.imageItems.subscribe(function (items) {\r\n                subscription.dispose();\r\n                items.each(function (item) {\r\n                    if (item.path === path) {\r\n                        this.selectRecord(item);\r\n\r\n                        return false;\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this));\r\n\r\n            setTimeout(function () {\r\n                subscription.dispose();\r\n            }, 1500);\r\n        },\r\n\r\n        /**\r\n         * Set the record as selected\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        selectRecord: function (record) {\r\n            uiRegistry.get('name =' + this.mediaGallery).select(record);\r\n        },\r\n\r\n        /**\r\n         * Save preview click handler\r\n         */\r\n        savePreviewClick: function () {\r\n            var record = this.preview().displayedRecord();\r\n\r\n            savePreviewAction(\r\n                this.preview().downloadImagePreviewUrl,\r\n                record.id,\r\n                record.title,\r\n                record['content_type'],\r\n                this.getDestinationDirectoryPath()\r\n            ).then(function (destinationPath) {\r\n                this.updateDownloadedDisplayedRecord(destinationPath);\r\n                this.reloadGrid().done(function () {\r\n                    this.openInMediaGalleryClick();\r\n                }.bind(this));\r\n            }.bind(this)).fail(function (error) {\r\n                if (error) {\r\n                    this.showErrorMessage(error);\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Update displayed record after downloading\r\n         *\r\n         * @param {String} path\r\n         */\r\n        updateDownloadedDisplayedRecord: function (path) {\r\n            var record = this.preview().displayedRecord();\r\n\r\n            record['is_downloaded'] = 1;\r\n\r\n            if (record.path === '') {\r\n                record.path = path;\r\n            }\r\n\r\n            this.preview().displayedRecord(record);\r\n        },\r\n\r\n        /**\r\n         * Update displayed record after licensing\r\n         *\r\n         * @param {String} path\r\n         */\r\n        updateLicensedDisplayedRecord: function (path) {\r\n            var record = this.preview().displayedRecord();\r\n\r\n            record['is_downloaded'] = 1;\r\n\r\n            if (record.path === '') {\r\n                record.path = path;\r\n            }\r\n\r\n            record['is_licensed'] = 1;\r\n            record['is_licensed_locally'] = 1;\r\n\r\n            this.preview().displayedRecord(record);\r\n        },\r\n\r\n        /**\r\n         * Get image destination path\r\n         *\r\n         * @param {String} fileName\r\n         * @param {String} contentType\r\n         * @returns {String}\r\n         */\r\n        getDestinationPath: function (fileName, contentType) {\r\n            return this.getDestinationDirectoryPath() + '/' + fileName + '.' + this.getImageExtension(contentType);\r\n        },\r\n\r\n        /**\r\n         * Get destination directory path\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getDestinationDirectoryPath: function () {\r\n            var activeNodePath,\r\n                activeNode;\r\n\r\n            if (this.isMediaBrowser()) {\r\n                activeNode = this.getMageMediaBrowserData().activeNode;\r\n\r\n                activeNodePath = _.isUndefined(activeNode.original.path) ? '' : activeNode.original.path;\r\n            } else {\r\n                activeNodePath = this.imageDirectory().activeNode() || '';\r\n            }\r\n\r\n            return activeNodePath;\r\n        },\r\n\r\n        /**\r\n         * Reload grid\r\n         *\r\n         * @returns {*}\r\n         */\r\n        reloadGrid: function () {\r\n            var provider,\r\n                dataStorage;\r\n\r\n            if (this.isMediaBrowser()) {\r\n                return this.getMageMediaBrowserData().reload();\r\n            }\r\n\r\n            provider = uiRegistry.get('index = media_gallery_listing_data_source'),\r\n                dataStorage = provider.storage();\r\n\r\n            dataStorage.clearRequests();\r\n\r\n            return provider.reload();\r\n        },\r\n\r\n        /**\r\n         * Get data for media browser\r\n         *\r\n         * @returns {Undefined|Object}\r\n         */\r\n        getMageMediaBrowserData: function () {\r\n            return $(this.preview().mediaGallerySelector).data('mageMediabrowser');\r\n        },\r\n\r\n        /**\r\n         * Is the media browser used in the content of the grid\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isMediaBrowser: function () {\r\n            return typeof this.getMageMediaBrowserData() !== 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Generate meaningful name image file,\r\n         * allow only alphanumerics, dashes, and underscores\r\n         *\r\n         * @param {String} title\r\n         * @param {Number} id\r\n         * @return string\r\n         */\r\n        generateImageName: function (title, id) {\r\n            var fileName = title.substring(0, 32)\r\n                .replace(/[^a-zA-Z0-9_]/g, '-')\r\n                .replace(/-{2,}/g, '-')\r\n                .toLowerCase();\r\n\r\n            /* If the filename does not contain latin chars, use ID as a filename */\r\n            return fileName === '-' ? id : fileName;\r\n        },\r\n\r\n        /**\r\n         * Get image file extension\r\n         *\r\n         * @param {String} contentType\r\n         * @return string\r\n         */\r\n        getImageExtension: function (contentType) {\r\n            return contentType.match(/[^/]{1,4}$/);\r\n        },\r\n\r\n        /**\r\n         * Get messages\r\n         *\r\n         * @return {Array}\r\n         */\r\n        getMessages: function () {\r\n            return this.messages();\r\n        },\r\n\r\n        /**\r\n         * License click handler\r\n         */\r\n        licenseClick: function () {\r\n            var record = this.preview().displayedRecord();\r\n\r\n            this.licenseProcess(\r\n                record.id,\r\n                record.title,\r\n                record.path,\r\n                record['content_type'],\r\n                this.isDownloaded()\r\n            ).then(function (destinationPath) {\r\n                this.updateLicensedDisplayedRecord(destinationPath);\r\n                this.login().getUserQuota();\r\n                this.reloadGrid().done(function () {\r\n                    this.openInMediaGalleryClick();\r\n                }.bind(this));\r\n            }.bind(this)).fail(function (error) {\r\n                if (error) {\r\n                    uiAlert({\r\n                        content: error\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Process of license\r\n         *\r\n         * @param {Number} id\r\n         * @param {String} title\r\n         * @param {String} path\r\n         * @param {String} contentType\r\n         * @param {Boolean} isDownloaded\r\n         * @return {window.Promise}\r\n         */\r\n        licenseProcess: function (id, title, path, contentType, isDownloaded) {\r\n            var deferred = $.Deferred();\r\n\r\n            this.login().login()\r\n                .then(function () {\r\n                    getLicenseStatus(\r\n                        this.overlay().getImagesUrl,\r\n                        [id]\r\n                    ).then(function (licensedInfo) {\r\n                        var isLicensed = licensedInfo[id] || false;\r\n\r\n                        if (isLicensed) {\r\n                            saveLicensedAction(\r\n                                this.preview().saveLicensedAndDownloadUrl,\r\n                                id,\r\n                                title,\r\n                                path,\r\n                                contentType,\r\n                                this.getDestinationDirectoryPath()\r\n                            ).then(function (destinationPath) {\r\n                                deferred.resolve(destinationPath);\r\n                            }).fail(function (error) {\r\n                                deferred.reject(error);\r\n                            });\r\n                        } else {\r\n                            confirmQuotaAction(this.preview().confirmationUrl, id).then(function (data) {\r\n                                if (data.canLicense === false) {\r\n                                    buyCreditsConfirmation(\r\n                                        this.preview().buyCreditsUrl,\r\n                                        title,\r\n                                        data.message\r\n                                    );\r\n                                } else {\r\n                                    licenseAndSaveAction(\r\n                                        this.preview().licenseAndDownloadUrl,\r\n                                        id,\r\n                                        title,\r\n                                        path,\r\n                                        contentType,\r\n                                        isDownloaded,\r\n                                        data.message,\r\n                                        this.getDestinationDirectoryPath()\r\n                                    ).then(function (destinationPath) {\r\n                                        deferred.resolve(destinationPath);\r\n                                    }).fail(function (error) {\r\n                                        deferred.reject(error);\r\n                                    });\r\n                                }\r\n                            }.bind(this)).fail(function (error) {\r\n                                deferred.reject(error);\r\n                            });\r\n                        }\r\n                    }.bind(this)).fail(function (error) {\r\n                        deferred.reject(error);\r\n                    });\r\n                }.bind(this)).fail(function (error) {\r\n                deferred.reject(error);\r\n            });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Save licensed click handler\r\n         */\r\n        saveLicensedClick: function () {\r\n            var record = this.preview().displayedRecord();\r\n\r\n            if (!this.login().user().isAuthorized) {\r\n                return;\r\n            }\r\n\r\n            if (!this.isLicensed()) {\r\n                return;\r\n            }\r\n\r\n            saveLicensedAction(\r\n                this.preview().saveLicensedAndDownloadUrl,\r\n                record.id,\r\n                record.title,\r\n                record.path,\r\n                record['content_type'],\r\n                this.getDestinationDirectoryPath()\r\n            ).then(function (destinationPath) {\r\n                this.updateLicensedDisplayedRecord(destinationPath);\r\n                this.login().getUserQuota();\r\n                this.reloadGrid().done(function () {\r\n                    this.openInMediaGalleryClick();\r\n                }.bind(this));\r\n            }.bind(this)).fail(function (error) {\r\n                if (error) {\r\n                    uiAlert({\r\n                        content: error\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns license button title depending on the existing saved preview\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLicenseButtonTitle: function () {\r\n            return this.isDownloaded() ? $.mage.__('License') : $.mage.__('License and Save');\r\n        },\r\n\r\n        /**\r\n         * Extracts image name from its path\r\n         *\r\n         * @param {String} path\r\n         * @returns {String}\r\n         */\r\n        getImageNameFromPath: function (path) {\r\n            var filePathArray = path.split('/'),\r\n                imageIndex = filePathArray.length - 1;\r\n\r\n            return filePathArray[imageIndex].substring(0, filePathArray[imageIndex].lastIndexOf('.'));\r\n        },\r\n\r\n        /**\r\n         * Show error message and schedule cleanup\r\n         *\r\n         * @param {String} message\r\n         */\r\n        showErrorMessage: function (message) {\r\n            this.messages.push({\r\n                code: 'error',\r\n                messageUnsanitizedHtml: message\r\n            });\r\n            this.messagesCleanup();\r\n        },\r\n\r\n        /**\r\n         * Messages cleanup\r\n         */\r\n        messagesCleanup: function () {\r\n            // eslint-disable-next-line no-unused-vars\r\n            var timerId;\r\n\r\n            // eslint-disable-next-line no-unused-vars\r\n            timerId = setTimeout(function () {\r\n                clearTimeout(timerId);\r\n                this.messages.removeAll();\r\n            }.bind(this), Number(this.messageDelay) * 1000);\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/keywords.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'underscore'\r\n], function (Component, _) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/keywords',\r\n            chipsProvider: 'componentType = filtersChips, ns = ${ $.ns }',\r\n            defaultKeywordsLimit: 5,\r\n            keywordsLimit: 5,\r\n            canViewMoreKeywords: true,\r\n            modules: {\r\n                chips: '${ $.chipsProvider }',\r\n                preview: '${ $.parentName }.preview'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'keywordsLimit',\r\n                    'canViewMoreKeywords'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns keywords to display under the attributes image\r\n         *\r\n         * @returns {*[]}\r\n         */\r\n        getKeywords: function (record) {\r\n            return record.keywords;\r\n        },\r\n\r\n        /**\r\n         * Returns keywords limit to show no of keywords\r\n         */\r\n        getKeywordsLimit: function () {\r\n            return this.keywordsLimit();\r\n        },\r\n\r\n        /**\r\n         * Show all the related keywords\r\n         */\r\n        viewAllKeywords: function (record) {\r\n            this.keywordsLimit(record.keywords.length);\r\n            this.canViewMoreKeywords(false);\r\n            this.preview().updateHeight();\r\n            this.preview().scrollToPreview();\r\n        },\r\n\r\n        /**\r\n         * Hide all the related keywords\r\n         */\r\n        hideAllKeywords: function () {\r\n            this.keywordsLimit(this.defaultKeywordsLimit);\r\n            this.canViewMoreKeywords(true);\r\n        },\r\n\r\n        /**\r\n         * Drop all filters and initiate search on keyword click event\r\n         */\r\n        searchByKeyWord: function (keyword) {\r\n            _.invoke(this.chips().elems(), 'clear');\r\n            _.invoke(this.chips().elems(), 'apply', keyword);\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/components/grid/column/preview/related.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'uiComponent',\r\n    'underscore',\r\n    'jquery'\r\n], function (Component, _, $) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/grid/column/preview/related',\r\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\r\n            filterBookmarksSelector: '.admin__data-grid-action-bookmarks',\r\n            tabImagesLimit: 4,\r\n            tabsContainerId: '#adobe-stock-tabs',\r\n            serieFilterValue: '',\r\n            modelFilterValue: '',\r\n            selectedTab: null,\r\n            loader: false,\r\n            relatedImages: {\r\n                series: {},\r\n                model: {}\r\n            },\r\n            statefull: {\r\n                serieFilterValue: true,\r\n                modelFilterValue: true\r\n            },\r\n            modules: {\r\n                chips: '${ $.chipsProvider }',\r\n                filterChips: '${ $.filterChipsProvider }',\r\n                preview: '${ $.parentName }.preview'\r\n            },\r\n            exports: {\r\n                serieFilterValue: '${ $.provider }:params.filters.serie_id',\r\n                modelFilterValue: '${ $.provider }:params.filters.model_id'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes related component.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.filterChips().updateActive();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable keydown event for related content tabs\r\n         */\r\n        disableTabsKeyDownEvent: function () {\r\n            if ($(this.tabsContainerId + ' li[role=tab]').length === 0) {\r\n                setTimeout(function () {\r\n                    this.disableTabsKeyDownEvent();\r\n                }.bind(this), 100);\r\n            } else {\r\n                $(this.tabsContainerId + ' li[role=tab]').off('keydown');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'serieFilterValue',\r\n                    'modelFilterValue',\r\n                    'selectedTab',\r\n                    'relatedImages',\r\n                    'loader'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check if visible container\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        isVisible: function (record) {\r\n            return this.showSeriesTab(record) && this.showModelTab(record);\r\n        },\r\n\r\n        /**\r\n         * Get image related image series.s\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        loadRelatedImages: function (record) {\r\n            var series = this.getSeries(record),\r\n                model = this.getModel(record);\r\n\r\n            if (series && series.length ||\r\n                model && model.length\r\n            ) {\r\n                return;\r\n            }\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.preview().relatedImagesUrl,\r\n                dataType: 'json',\r\n                beforeSend: function () {\r\n                    this.loader(true);\r\n                }.bind(this),\r\n                data: {\r\n                    'image_id': record.id,\r\n                    'limit': this.tabImagesLimit\r\n                }\r\n            }).done(function (data) {\r\n                var relatedImages = this.relatedImages();\r\n\r\n                this.loader(false);\r\n                relatedImages.series[record.id] = data.result['same_series'];\r\n                relatedImages.model[record.id] = data.result['same_model'];\r\n\r\n                this.relatedImages(relatedImages);\r\n                this.preview().updateHeight();\r\n\r\n                /* Switch to the model tab if the series tab is hidden */\r\n                if (relatedImages.series[record.id].length === 0 && relatedImages.model[record.id].length > 0) {\r\n                    // eslint-disable-next-line jquery-no-input-event-shorthand\r\n                    $('#adobe-stock-tabs').data().mageTabs.select(1);\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Returns true if the series tab should be show, false otherwise\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        showSeriesTab: function (record) {\r\n            return typeof this.relatedImages().series[record.id] === 'undefined' ||\r\n                this.relatedImages().series[record.id].length !== 0;\r\n        },\r\n\r\n        /**\r\n         * Returns true if the model tab should be show, false otherwise\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        showModelTab: function (record) {\r\n            return typeof this.relatedImages().model[record.id] === 'undefined' ||\r\n                this.relatedImages().model[record.id].length !== 0;\r\n        },\r\n\r\n        /**\r\n         * Returns series to display under the image\r\n         *\r\n         * @param {Object} record\r\n         * @returns {*[]}\r\n         */\r\n        getSeries: function (record) {\r\n            return this.relatedImages().series[record.id] || [];\r\n        },\r\n\r\n        /**\r\n         * Check if the number of related series image is greater than 4 or not\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        canShowMoreSeriesImages: function (record) {\r\n            return this.getSeries(record).length >= this.tabImagesLimit;\r\n        },\r\n\r\n        /**\r\n         * Returns model to display under the image\r\n         *\r\n         * @param {Object} record\r\n         * @returns {*[]}\r\n         */\r\n        getModel: function (record) {\r\n            return this.relatedImages().model[record.id] || [];\r\n        },\r\n\r\n        /**\r\n         * Check if the number of related model image is greater than 4 or not\r\n         *\r\n         * @param {Object} record\r\n         * @returns boolean\r\n         */\r\n        canShowMoreModelImages: function (record) {\r\n            return this.getModel(record).length >= this.tabImagesLimit;\r\n        },\r\n\r\n        /**\r\n         * Filter images from serie_id\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        seeMoreFromSeries: function (record) {\r\n            if (this.isSerieFilterApplied(record)) {\r\n                this.scrollToFilter();\r\n\r\n                return;\r\n            }\r\n            this.serieFilterValue(record.id);\r\n            this.applyFilter('serie_id', record.id.toString());\r\n        },\r\n\r\n        /**\r\n         * Filter images from serie_id\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        seeMoreFromModel: function (record) {\r\n            if (this.isModelFilterApplied(record)) {\r\n                this.scrollToFilter();\r\n\r\n                return;\r\n            }\r\n            this.modelFilterValue(record.id);\r\n            this.applyFilter('model_id', record.id.toString());\r\n        },\r\n\r\n        /**\r\n         * Apply series or model id filter and scroll to top of the page\r\n         *\r\n         * @param {String} typeId\r\n         * @param {String} recordId\r\n         */\r\n        applyFilter: function (typeId, recordId) {\r\n            var data = {};\r\n\r\n            data[typeId] = recordId;\r\n\r\n            this.filterChips().clear();\r\n            this.filterChips().setData(data, true);\r\n            this.filterChips().apply();\r\n\r\n            this.scrollToFilter();\r\n        },\r\n\r\n        /**\r\n         * Checks if the filter is applied\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isSerieFilterApplied: function (record) {\r\n            return this.filterChips().get('applied')['serie_id'] === record.id.toString();\r\n        },\r\n\r\n        /**\r\n         * Checks if the filter is applied\r\n         *\r\n         * @param {Object} record\r\n         * @returns {Boolean}\r\n         */\r\n        isModelFilterApplied: function (record) {\r\n            return this.filterChips().get('applied')['model_id'] === record.id.toString();\r\n        },\r\n\r\n        /**\r\n         * Scrolls user window to the filter bookmarks\r\n         */\r\n        scrollToFilter: function () {\r\n            $(this.preview().adobeStockModalSelector + ' ' + this.filterBookmarksSelector).get(0).scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n                inline: 'nearest'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Next related image preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        nextRelated: function (record) {\r\n            var relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record),\r\n                nextRelatedIndex = _.findLastIndex(\r\n                    relatedList,\r\n                    {\r\n                        id: this.preview().displayedRecord().id\r\n                    }\r\n                ) + 1,\r\n                nextRelated = relatedList[nextRelatedIndex];\r\n\r\n            if (typeof nextRelated === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            this.switchImagePreviewToRelatedImage(nextRelated);\r\n        },\r\n\r\n        /**\r\n         * Previous related preview\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        prevRelated: function (record) {\r\n            var relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record),\r\n                prevRelatedIndex = _.findLastIndex(\r\n                    relatedList,\r\n                    {\r\n                        id: this.preview().displayedRecord().id\r\n                    }\r\n                ) - 1,\r\n                prevRelated = relatedList[prevRelatedIndex];\r\n\r\n            if (typeof prevRelated === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            this.switchImagePreviewToRelatedImage(prevRelated);\r\n        },\r\n\r\n        /**\r\n         * Get previous button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewPrevious: function (record) {\r\n            var relatedList, prevRelatedIndex, prevRelated;\r\n\r\n            if (!this.selectedTab()) {\r\n                return false;\r\n            }\r\n            relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record);\r\n            prevRelatedIndex = _.findLastIndex(\r\n                relatedList,\r\n                {\r\n                    id: this.preview().displayedRecord().id\r\n                }\r\n            ) - 1;\r\n            prevRelated = relatedList[prevRelatedIndex];\r\n\r\n            return typeof prevRelated === 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Get next button disabled\r\n         *\r\n         * @param {Object} record\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        cannotViewNext: function (record) {\r\n            var relatedList, nextRelatedIndex, nextRelated;\r\n\r\n            if (!this.selectedTab()) {\r\n                return false;\r\n            }\r\n            relatedList = this.selectedTab() === 'series' ? this.getSeries(record) : this.getModel(record);\r\n            nextRelatedIndex = _.findLastIndex(\r\n                relatedList,\r\n                {\r\n                    id: this.preview().displayedRecord().id\r\n                }\r\n            ) + 1;\r\n            nextRelated = relatedList[nextRelatedIndex];\r\n\r\n            return typeof nextRelated === 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Switch image preview to related image\r\n         *\r\n         * @param {Object|null} relatedImage\r\n         */\r\n        switchImagePreviewToRelatedImage: function (relatedImage) {\r\n            if (!relatedImage) {\r\n                this.selectedTab(null);\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.preview().displayedRecord().id === relatedImage.id) {\r\n                return;\r\n            }\r\n\r\n            this.preview().showRelated(relatedImage);\r\n        },\r\n\r\n        /**\r\n         * Switch image preview to series image\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        switchImagePreviewToSeriesImage: function (record) {\r\n            this.selectedTab('series');\r\n            this.switchImagePreviewToRelatedImage(record);\r\n        },\r\n\r\n        /**\r\n         * Switch image preview to model image\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        switchImagePreviewToModelImage: function (record) {\r\n            this.selectedTab('model');\r\n            this.switchImagePreviewToRelatedImage(record);\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/confirmation/buyCredits.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    return function (buyCreditsUrl, recordTitle, quotaMessage) {\r\n        var confirmationContent = $.mage.__('License \"' + recordTitle + '\"'),\r\n            content = '<p>' + confirmationContent + '</p><p><b>' + quotaMessage + '</b></p><br>';\r\n\r\n        confirm({\r\n            title: $.mage.__('License Adobe Stock Images?'),\r\n            content: content,\r\n            buttons: [{\r\n                text: $.mage.__('Cancel'),\r\n                class: 'action-secondary action-dismiss',\r\n\r\n                /**\r\n                 * Close modal\r\n                 */\r\n                click: function () {\r\n                    this.closeModal();\r\n                }\r\n            },{\r\n                text: $.mage.__('Buy Credits'),\r\n                class: 'action-primary action-accept',\r\n\r\n                /**\r\n                 * Close modal\r\n                 */\r\n                click: function () {\r\n                    window.open(buyCreditsUrl);\r\n                    this.closeModal();\r\n                }\r\n            }]\r\n        });\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/confirmation/license.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\r\n], function ($, prompt, adobePromptContentTmpl) {\r\n    'use strict';\r\n\r\n    return function (recordTitle, quotaMessage, isPreviewDownloaded, proposedfileName, fileExtension) {\r\n        var confirmationContent = $.mage.__('License \"' + recordTitle + '\"'),\r\n            deferred = $.Deferred(),\r\n            displayFieldName = !isPreviewDownloaded ? '<b>' + $.mage.__('File Name') + '</b>' : '',\r\n            content = '<p>' + confirmationContent + '</p><p><b>' + quotaMessage + '</b></p><br>' + displayFieldName,\r\n            data = {\r\n                'title': $.mage.__('License Adobe Stock Images?'),\r\n                'content': content,\r\n                'visible': !isPreviewDownloaded,\r\n                'actions': {\r\n                    /**\r\n                     * Confirm action\r\n                     *\r\n                     * @param {String} fileName\r\n                     */\r\n                    confirm: function (fileName) {\r\n                        deferred.resolve(fileName);\r\n                    }\r\n                },\r\n                'buttons': [{\r\n                    text: $.mage.__('Cancel'),\r\n                    class: 'action-secondary action-dismiss',\r\n\r\n                    /**\r\n                     * Close modal\r\n                     */\r\n                    click: function () {\r\n                        this.closeModal();\r\n                        deferred.reject();\r\n                    }\r\n                }, {\r\n                    text: $.mage.__('Confirm'),\r\n                    class: 'action-primary action-accept'\r\n                }]\r\n\r\n            };\r\n\r\n        prompt({\r\n            title: data.title,\r\n            content:  data.content,\r\n            value: proposedfileName,\r\n            imageExtension: fileExtension,\r\n            visible: data.visible,\r\n            promptContentTmpl: adobePromptContentTmpl,\r\n            modalClass: 'adobe-stock-save-preview-prompt',\r\n            validation: true,\r\n            promptField: '[data-role=\"adobe-stock-image-name-field\"]',\r\n            validationRules: ['required-entry', 'validate-image-name'],\r\n            attributesForm: {\r\n                novalidate: 'novalidate',\r\n                action: '',\r\n                onkeydown: 'return event.key != \\'Enter\\';'\r\n            },\r\n            attributesField: {\r\n                name: 'name',\r\n                'data-validate': '{required:true}',\r\n                maxlength: '128'\r\n            },\r\n            context: this,\r\n            actions: data.actions,\r\n            buttons: data.buttons\r\n        });\r\n\r\n        if (!data.visible) {\r\n            $('.adobe-stock-save-preview-prompt').trigger('focus');\r\n        }\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/confirmation/save.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\r\n], function ($, prompt, adobePromptContentTmpl) {\r\n    'use strict';\r\n\r\n    return function (proposedfileName, fileExtension) {\r\n        var deferred = $.Deferred(),\r\n            data = {\r\n                'title': $.mage.__('Save Preview'),\r\n                'content': $.mage.__('File Name'),\r\n                'visible': true,\r\n                'actions': {\r\n                    /**\r\n                     * Resolve with the specified file name\r\n                     *\r\n                     * @param {String} specifiedFileName\r\n                     */\r\n                    confirm: function (specifiedFileName) {\r\n                        deferred.resolve(specifiedFileName);\r\n                    }\r\n                },\r\n                'buttons': [{\r\n                    text: $.mage.__('Cancel'),\r\n                    class: 'action-secondary action-dismiss',\r\n\r\n                    /**\r\n                     * Close modal on button click\r\n                     */\r\n                    click: function () {\r\n                        this.closeModal();\r\n                        deferred.reject();\r\n                    }\r\n                }, {\r\n                    text: $.mage.__('Confirm'),\r\n                    class: 'action-primary action-accept'\r\n                }]\r\n\r\n            };\r\n\r\n        prompt({\r\n            title: data.title,\r\n            content:  data.content,\r\n            value: proposedfileName,\r\n            imageExtension: fileExtension,\r\n            visible: data.visible,\r\n            promptContentTmpl: adobePromptContentTmpl,\r\n            modalClass: 'adobe-stock-save-preview-prompt',\r\n            validation: true,\r\n            promptField: '[data-role=\"adobe-stock-image-name-field\"]',\r\n            validationRules: ['required-entry', 'validate-image-name'],\r\n            attributesForm: {\r\n                novalidate: 'novalidate',\r\n                action: '',\r\n                onkeydown: 'return event.key != \\'Enter\\';'\r\n            },\r\n            attributesField: {\r\n                name: 'name',\r\n                'data-validate': '{required:true}',\r\n                maxlength: '128'\r\n            },\r\n            context: this,\r\n            actions: data.actions,\r\n            buttons: data.buttons\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/confirmation/saveLicensed.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'text!Magento_AdobeStockImageAdminUi/template/modal/adobe-modal-prompt-content.html'\r\n], function ($, prompt, adobePromptContentTmpl) {\r\n    'use strict';\r\n\r\n    return function (proposedfileName, fileExtension) {\r\n        var deferred = $.Deferred(),\r\n            data = {\r\n                'title': $.mage.__('Save'),\r\n                'content': $.mage.__('File Name'),\r\n                'visible': true,\r\n                'actions': {\r\n                    /**\r\n                     * Resolve with the specified file name\r\n                     *\r\n                     * @param {String} fileName\r\n                     */\r\n                    confirm: function (fileName) {\r\n                        deferred.resolve(fileName);\r\n                    }\r\n                },\r\n                'buttons': [\r\n                    {\r\n                        text: $.mage.__('Cancel'),\r\n                        class: 'action-secondary action-dismiss',\r\n\r\n                        /**\r\n                         * Close modal on button click\r\n                         */\r\n                        click: function () {\r\n                            this.closeModal();\r\n                            deferred.reject();\r\n                        }\r\n                    },\r\n                    {\r\n                        text: $.mage.__('Confirm'),\r\n                        class: 'action-primary action-accept'\r\n                    }\r\n                ]\r\n            };\r\n\r\n        prompt({\r\n            title: data.title,\r\n            content:  data.content,\r\n            value: proposedfileName,\r\n            imageExtension: fileExtension,\r\n            visible: data.visible,\r\n            promptContentTmpl: adobePromptContentTmpl,\r\n            modalClass: 'adobe-stock-save-preview-prompt',\r\n            validation: true,\r\n            promptField: '[data-role=\"adobe-stock-image-name-field\"]',\r\n            validationRules: ['required-entry', 'validate-image-name'],\r\n            attributesForm: {\r\n                novalidate: 'novalidate',\r\n                action: '',\r\n                onkeydown: 'return event.key != \\'Enter\\';'\r\n            },\r\n            attributesField: {\r\n                name: 'name',\r\n                'data-validate': '{required:true}',\r\n                maxlength: '128'\r\n            },\r\n            context: this,\r\n            actions: data.actions,\r\n            buttons: data.buttons\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/mediaGallery/grid/columns/licenseImage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_MediaGalleryUi/js/grid/columns/image'\r\n], function (Image) {\r\n    'use strict';\r\n\r\n    return Image.extend({\r\n        defaults: {\r\n            viewConfig: [\r\n                {\r\n                    component: 'Magento_AdobeStockImageAdminUi/js/mediaGallery/grid/columns/image/licenseActions',\r\n                    name: '${ $.name }_actions',\r\n                    imageModelName: '${ $.name }',\r\n                    imageDetailsUrl: '${ $.imageDetailsurl }',\r\n                    imageComponent: '${ $.imageComponent }'\r\n                }\r\n            ]\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/mediaGallery/grid/columns/image/licenseActions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_MediaGalleryUi/js/grid/columns/image/actions',\r\n    'Magento_MediaGalleryUi/js/action/getDetails',\r\n    'mage/translate'\r\n], function ($, _, Action, getDetails) {\r\n    'use strict';\r\n\r\n    return Action.extend({\r\n        defaults: {\r\n            template: 'Magento_AdobeStockImageAdminUi/mediaGallery/grid/columns/image/licenseActions',\r\n            licenseAction: {\r\n                name: 'license',\r\n                title: $.mage.__('License'),\r\n                handler: 'licenseImageAction'\r\n            },\r\n            modules: {\r\n                image: '${ $.imageComponent }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize the component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.actionsList.push(this.licenseAction);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         *\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'visible'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * License image\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        licenseImageAction: function (record) {\r\n            this.getImageRecord(record.id);\r\n        },\r\n\r\n        /**\r\n         * Check if image licensed\r\n         *\r\n         * @param {Object} record\r\n         * @param {Object} name\r\n         */\r\n        isVisible: function (record, name) {\r\n            if (name === this.licenseAction.name) {\r\n                if (_.isUndefined(record.overlay) || record.overlay === '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Get image record and start license process\r\n         *\r\n         * @param {Number} imageId\r\n         */\r\n        getImageRecord: function (imageId) {\r\n            getDetails(this.imageDetailsUrl, [imageId]).then(function (imageDetails) {\r\n                var id = imageDetails[imageId]['adobe_stock'][0].value;\r\n\r\n                this.image().actions().licenseProcess(\r\n                    id,\r\n                    imageDetails[imageId].title,\r\n                    imageDetails[imageId].path,\r\n                    imageDetails[imageId]['content_type'],\r\n                    true\r\n                ).then(function () {\r\n                    this.image().actions().login().getUserQuota();\r\n                    this.imageModel().reloadGrid();\r\n                    this.imageModel().addMessage('success', $.mage.__('The image has been licensed.'));\r\n                }.bind(this)).fail(function (error) {\r\n                    if (error) {\r\n                        this.imageModel().addMessage('error', error);\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this)).fail(function (message) {\r\n                this.imageModel().addMessage('error', message);\r\n            }.bind(this));\r\n        }\r\n    });\r\n});\r\n","Magento_AdobeStockImageAdminUi/js/validation/validate-image-name.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/translate',\r\n    'jquery/validate'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    $.validator.addMethod(\r\n        'validate-image-name', function (value) {\r\n            return /^[a-zA-Z0-9\\-\\_]+$/i.test(value);\r\n\r\n        }, $t('Please name the file using only letters, numbers, underscores and dashes'));\r\n});\r\n","Magento_AdvancedSearch/js/testconnection.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.testConnection', {\r\n        options: {\r\n            url: '',\r\n            elementId: '',\r\n            successText: '',\r\n            failedText: '',\r\n            fieldMapping: ''\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to events\r\n         */\r\n        _create: function () {\r\n            this._on({\r\n                'click': $.proxy(this._connect, this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Method triggers an AJAX request to check search engine connection\r\n         * @private\r\n         */\r\n        _connect: function () {\r\n            var result = this.options.failedText,\r\n                element =  $('#' + this.options.elementId),\r\n                self = this,\r\n                params = {},\r\n                msg = '',\r\n                fieldToCheck = this.options.fieldToCheck || 'success';\r\n\r\n            element.removeClass('success').addClass('fail');\r\n            $.each(JSON.parse(this.options.fieldMapping), function (key, el) {\r\n                params[key] = $('#' + el).val();\r\n            });\r\n            $.ajax({\r\n                url: this.options.url,\r\n                showLoader: true,\r\n                data: params,\r\n                headers: this.options.headers || {}\r\n            }).done(function (response) {\r\n                if (response[fieldToCheck]) {\r\n                    element.removeClass('fail').addClass('success');\r\n                    result = self.options.successText;\r\n                } else {\r\n                    msg = response.errorMessage;\r\n\r\n                    if (msg) {\r\n                        alert({\r\n                            content: msg\r\n                        });\r\n                    }\r\n                }\r\n            }).always(function () {\r\n                $('#' + self.options.elementId + '_result').text(result);\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.testConnection;\r\n});\r\n","Magento_AsynchronousOperations/js/insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form',\r\n    'uiRegistry'\r\n], function (Insert, registry) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            modalProvider: '${ $.parentName }',\r\n            titlePrefix: '',\r\n            imports: {\r\n                changeModalTitle: '${ $.modalProvider }:state'\r\n            },\r\n            listens: {\r\n                responseData: 'afterRetry'\r\n            },\r\n            modules: {\r\n                modal: '${ $.modalProvider }',\r\n                notificationListing: '${ $.columnsProvider }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initConfig: function () {\r\n            var modalTitleProvider;\r\n\r\n            this._super();\r\n            modalTitleProvider = this.modalTitleProvider.split(':');\r\n            this.modalTitleTarget = modalTitleProvider[0];\r\n            this.modalTitlePath = modalTitleProvider[1];\r\n        },\r\n\r\n        /**\r\n         * Change modal title.\r\n         *\r\n         * @param {Boolean} change\r\n         */\r\n        changeModalTitle: function (change) {\r\n            if (change) {\r\n                registry.get(this.modalTitleTarget, function (target) {\r\n                    this.modal().setTitle(this.titlePrefix + target.get(this.modalTitlePath));\r\n                }.bind(this));\r\n            } else {\r\n                this.modal().setTitle('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Action after retry operation.\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        afterRetry: function (data) {\r\n            if (!data.error) {\r\n                this.modal().closeModal();\r\n                this.notificationListing().reload();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_AsynchronousOperations/js/form/error.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        /** @inheritdoc */\r\n        onUpdate: function () {\r\n            this.bubble('update', this.hasChanged());\r\n        }\r\n    });\r\n});\r\n","Magento_AsynchronousOperations/js/grid/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_AdminNotification/js/grid/listing',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate',\r\n    'underscore',\r\n    'jquery'\r\n], function (Listing, uiAlert, $t, _, $) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            isAllowed: true,\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                data: {},\r\n                url: '${ $.dismissUrl }'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            _.bindAll(this, 'reload', 'onError');\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Dismiss all items.\r\n         */\r\n        dismissAll: function () {\r\n            var toDismiss = [];\r\n\r\n            _.each(this.rows, function (row) {\r\n                if (row.dismiss) {\r\n                    toDismiss.push(row.uuid);\r\n                }\r\n            });\r\n            toDismiss.length && this.dismiss(toDismiss);\r\n        },\r\n\r\n        /**\r\n         * Dismiss action.\r\n         *\r\n         * @param {Array} items\r\n         */\r\n        dismiss: function (items) {\r\n            var config = _.extend({}, this.ajaxSettings);\r\n\r\n            config.data.uuid = items;\r\n            this.showLoader();\r\n\r\n            $.ajax(config)\r\n                .done(this.reload)\r\n                .fail(this.onError);\r\n        },\r\n\r\n        /**\r\n         * Success callback for dismiss request.\r\n         */\r\n        reload: function () {\r\n            this.source.reload({\r\n                refresh: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Error callback for dismiss request.\r\n         *\r\n         * @param {Object} xhr\r\n         */\r\n        onError: function (xhr) {\r\n            this.hideLoader();\r\n\r\n            if (xhr.statusText === 'abort') {\r\n                return;\r\n            }\r\n\r\n            uiAlert({\r\n                content: $t('Something went wrong.')\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Backend/js/delete-with-confirm.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Backend/js/validate-store'\r\n], function ($, validateStore) {\r\n    'use strict';\r\n\r\n    $.widget('mage.deleteWithConfirm', validateStore, {});\r\n\r\n    return $.mage.deleteWithConfirm;\r\n});\r\n","Magento_Backend/js/media-uploader.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\n\r\n/*global byteConvert*/\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/form/element/file-uploader',\r\n    'mage/translate',\r\n    'jquery/file-uploader'\r\n], function ($, mageTemplate, alert, FileUploader) {\r\n    'use strict';\r\n\r\n    var fileUploader = new FileUploader({\r\n        dataScope: '',\r\n        isMultipleFiles: true\r\n    });\r\n\r\n    fileUploader.initUploader();\r\n\r\n    $.widget('mage.mediaUploader', {\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var self = this,\r\n                progressTmpl = mageTemplate('[data-template=\"uploader\"]'),\r\n                isResizeEnabled = this.options.isResizeEnabled,\r\n                resizeConfiguration = {\r\n                    action: 'resizeImage',\r\n                    maxWidth: this.options.maxWidth,\r\n                    maxHeight: this.options.maxHeight\r\n                };\r\n\r\n            if (!isResizeEnabled) {\r\n                resizeConfiguration = {\r\n                    action: 'resizeImage'\r\n                };\r\n            }\r\n\r\n            this.element.find('input[type=file]').fileupload({\r\n                dataType: 'json',\r\n                formData: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                dropZone: this.element.find('input[type=file]').closest('[role=\"dialog\"]'),\r\n                sequentialUploads: true,\r\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n                maxFileSize: this.options.maxFileSize,\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                add: function (e, data) {\r\n                    var fileSize,\r\n                        tmpl;\r\n\r\n                    $.each(data.files, function (index, file) {\r\n                        fileSize = typeof file.size == 'undefined' ?\r\n                            $.mage.__('We could not detect a size.') :\r\n                            byteConvert(file.size);\r\n\r\n                        data.fileId = Math.random().toString(33).substr(2, 18);\r\n\r\n                        tmpl = progressTmpl({\r\n                            data: {\r\n                                name: file.name,\r\n                                size: fileSize,\r\n                                id: data.fileId\r\n                            }\r\n                        });\r\n\r\n                        $(tmpl).appendTo(self.element);\r\n                    });\r\n\r\n                    $(this).fileupload('process', data).done(function () {\r\n                        data.submit();\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                done: function (e, data) {\r\n                    if (data.result && !data.result.error) {\r\n                        self.element.trigger('addItem', data.result);\r\n                    } else {\r\n                        fileUploader.aggregateError(data.files[0].name, data.result.error);\r\n                    }\r\n\r\n                    self.element.find('#' + data.fileId).remove();\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                progress: function (e, data) {\r\n                    var progress = parseInt(data.loaded / data.total * 100, 10),\r\n                        progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\r\n\r\n                    self.element.find(progressSelector).css('width', progress + '%');\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} e\r\n                 * @param {Object} data\r\n                 */\r\n                fail: function (e, data) {\r\n                    var progressSelector = '#' + data.fileId;\r\n\r\n                    self.element.find(progressSelector).removeClass('upload-progress').addClass('upload-failure')\r\n                        .delay(2000)\r\n                        .hide('highlight')\r\n                        .remove();\r\n                },\r\n\r\n                stop: fileUploader.uploaderConfig.stop\r\n            });\r\n\r\n            this.element.find('input[type=file]').fileupload('option', {\r\n                processQueue: [{\r\n                    action: 'loadImage',\r\n                    fileTypes: /^image\\/(gif|jpeg|png)$/\r\n                },\r\n                resizeConfiguration,\r\n                {\r\n                    action: 'saveImage'\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.mediaUploader;\r\n});\r\n","Magento_Backend/js/save-with-confirm.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Backend/js/validate-store'\r\n], function ($, validateStore) {\r\n    'use strict';\r\n\r\n    $.widget('mage.saveWithConfirm', validateStore, {\r\n\r\n        /**\r\n         * Check is it need to show confirmation popup\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        _needConfirm: function () {\r\n\r\n            var storeData = this.settings.storeData,\r\n\r\n            /* edit store view*/\r\n                storeViewEdit = $('[name=\"store[store_id]\"]').length,\r\n                groupId = $('[name=\"store[group_id]\"]').val(),\r\n                isNewStoreView = !$('[name=\"store[store_id]\"]').val(),\r\n\r\n            /* edit store */\r\n                storeEdit = $('[name=\"group[group_id]\"]').length,\r\n                storeId = $('[name=\"group[group_id]\"]').val(),\r\n                rootCategoryId = $('[name=\"group[root_category_id]\"]').val(),\r\n                defaultStoreView = $('[name=\"group[default_store_id]\"]').val(),\r\n\r\n            /* edit website */\r\n                websiteEdit = $('[name=\"website[website_id]\"]').length,\r\n                defaultStore = $('[name=\"website[default_group_id]\"]').val(),\r\n\r\n            /* conditions */\r\n                storeViewUpdated = storeViewEdit && (isNewStoreView || storeData['group_id'] !== groupId),\r\n                storeUpdated = storeEdit && storeId &&\r\n                    (rootCategoryId !== null  && storeData['root_category_id'] !== rootCategoryId ||\r\n                    defaultStoreView !== null && storeData['default_store_id'] !== defaultStoreView),\r\n                websiteUpdated = websiteEdit && defaultStore !== null && storeData['default_group_id'] !== defaultStore;\r\n\r\n            return storeViewUpdated || storeUpdated || websiteUpdated;\r\n        }\r\n    });\r\n\r\n    return $.mage.saveWithConfirm;\r\n});\r\n","Magento_Backend/js/store-switcher.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Object} storeSwitchConfig\r\n     */\r\n    return function (storeSwitchConfig) {\r\n        var scopeSwitcherHandler;\r\n\r\n        (function () {\r\n            var storesList = $('[data-role=stores-list]');\r\n\r\n            storesList.on('click', '[data-value]', function (event) {\r\n                var val = $(event.target).data('value'),\r\n                    role = $(event.target).data('role'),\r\n                    switcher = $('[data-role=' + role + ']');\r\n\r\n                event.preventDefault();\r\n\r\n                if (!switcher.val() || val !== switcher.val()) {\r\n\r\n                    /* Set the value & trigger event */\r\n                    switcher.val(val).trigger('change');\r\n                }\r\n            });\r\n        })($);\r\n\r\n        /**\r\n         * Switch store scope\r\n         *\r\n         * @param {Object} obj\r\n         * @return void\r\n         */\r\n        function switchScope(obj) {\r\n            var switcher = $(obj),\r\n                scopeId = switcher.val(),\r\n                scopeParams = '',\r\n                switcherParams = {};\r\n\r\n            if (scopeId) {\r\n                scopeParams = switcher.data('param') + '/' + scopeId + '/';\r\n            }\r\n\r\n            if (obj.switchParams) {\r\n                scopeParams += obj.switchParams;\r\n            }\r\n\r\n            /**\r\n             * Reload function for switcher\r\n             */\r\n            function reload() {\r\n                var url;\r\n\r\n                if (!storeSwitchConfig.isUsingIframe) {\r\n\r\n                    if (storeSwitchConfig.switchUrl && storeSwitchConfig.switchUrl.length > 0) {\r\n                        url = storeSwitchConfig.switchUrl + scopeParams;\r\n\r\n                        /* eslint-disable no-undef */\r\n                        setLocation(url);\r\n                    }\r\n\r\n                } else {\r\n                    $('#preview_selected_store').val(scopeId);\r\n                    $('#preview_form').trigger('submit');\r\n\r\n                    $('.store-switcher .dropdown-menu li a').each(function () {\r\n                        var $this = $(this);\r\n\r\n                        if ($this.data('role') === 'store-view-id' && $this.data('value') === scopeId) {\r\n                            $('#store-change-button').html($this.text());\r\n                        }\r\n                    });\r\n\r\n                    $('#store-change-button').trigger('click');\r\n                }\r\n            }\r\n\r\n            if (typeof scopeSwitcherHandler !== 'undefined') {\r\n                switcherParams = {\r\n                    scopeId: scopeId,\r\n                    scopeParams: scopeParams,\r\n                    useConfirm: storeSwitchConfig.useConfirm\r\n                };\r\n\r\n                scopeSwitcherHandler(switcherParams);\r\n            } else if (storeSwitchConfig.useConfirm) {\r\n                require([\r\n                    'Magento_Ui/js/modal/confirm',\r\n                    'mage/translate'\r\n                ], function (confirm, $t) {\r\n                    confirm({\r\n                        content: $t('Please confirm scope switching. All data that hasn\\'t been saved will be lost.'),\r\n                        actions: {\r\n\r\n                            /**\r\n                             * Confirm action\r\n                             */\r\n                            confirm: function () {\r\n                                reload();\r\n                            },\r\n\r\n                            /**\r\n                             * Cancel action\r\n                             */\r\n                            cancel: function () {\r\n                                obj.value = storeSwitchConfig.storeId ? storeSwitchConfig.storeId : '';\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                reload();\r\n            }\r\n        }\r\n\r\n        window.scopeSwitcherHandler = scopeSwitcherHandler;\r\n        window.switchScope = switchScope;\r\n    };\r\n});\r\n","Magento_Backend/js/translate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'mage/mage'\r\n], function ($) {\r\n    $.extend(true, $, {\r\n        mage: {\r\n            translate: (function () {\r\n                /**\r\n                 * Key-value translations storage\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                var _data = {};\r\n\r\n                /**\r\n                 * Add new translation (two string parameters) or several translations (object)\r\n                 */\r\n                this.add = function () {\r\n                    if (arguments.length > 1) {\r\n                        _data[arguments[0]] = arguments[1];\r\n                    } else if (typeof arguments[0] === 'object') {\r\n                        $.extend(_data, arguments[0]);\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Make a translation with parsing (to handle case when _data represents tuple)\r\n                 * @param {String} text\r\n                 * @return {String}\r\n                 */\r\n                this.translate = function (text) {\r\n                    return typeof _data[text] === 'string' ? _data[text] : text;\r\n                };\r\n\r\n                return this;\r\n            }())\r\n        }\r\n    });\r\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\r\n\r\n    return $.mage.__;\r\n});\r\n","Magento_Backend/js/validate-store.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'mage/dataPost',\r\n    'mage/backend/validation',\r\n    'Magento_Ui/js/modal/confirm'\r\n], function ($, jqueryUi, dataPost, validation, modalConfirm) {\r\n    'use strict';\r\n\r\n    $.widget('mage.storeValidation', {\r\n\r\n        /**\r\n         * Validation creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            var form = this.element[0],\r\n                validator = $.data(form, 'validator');\r\n\r\n            if (validator && validator.settings) {\r\n                validator.settings.submitHandler = this._saveHandler;\r\n                validator.settings.confirmCallback = this._needConfirm;\r\n                $.extend(validator.settings, this.options);\r\n                $.data(form, 'validator', validator);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check is it need to show confirmation popup\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        _needConfirm: function () {\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Save form with confirmation if needed\r\n         *\r\n         * @param {Object} form\r\n         * @private\r\n         */\r\n        _saveHandler: function (form) {\r\n            var formData = {},\r\n                requestData = {},\r\n                options = $.data(form, 'validator').settings;\r\n\r\n            if ($(form).validation('isValid')) {\r\n                $.each($(form).serializeArray(), function () {\r\n                    formData[this.name] = this.value || '';\r\n                });\r\n                requestData = {\r\n                    action: $(form).attr('action'),\r\n                    data: formData\r\n                };\r\n\r\n                if (options.confirmCallback.call(this)) {\r\n                    modalConfirm({\r\n                        title: $.mage.__('Warning message'),\r\n                        content: $.mage.__('This operation can take a long time'),\r\n                        actions: {\r\n                            /**\r\n                             * 'Confirm' action handler.\r\n                             */\r\n                            confirm: function () {\r\n                                $('body').trigger('processStart');\r\n                                dataPost().postData(requestData);\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    dataPost().postData(requestData);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.storeValidation;\r\n});\r\n","Magento_Backend/js/bootstrap/editor.js":"/**\r\n *\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Variable/variables',\r\n    'mage/adminhtml/browser'\r\n]);\r\n","Magento_Backend/js/dashboard/chart.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*global FORM_KEY*/\r\ndefine([\r\n    'jquery',\r\n    'chartJs',\r\n    'jquery-ui-modules/widget',\r\n    'chartjs/chartjs-adapter-moment',\r\n    'chartjs/es6-shim.min',\r\n    'moment'\r\n], function ($, Chart) {\r\n    'use strict';\r\n\r\n    $.widget('mage.dashboardChart', {\r\n        options: {\r\n            updateUrl: '',\r\n            periodSelect: null,\r\n            periodUnits: [],\r\n            precision: 0,\r\n            type: ''\r\n        },\r\n        chart: null,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.createChart();\r\n\r\n            if (this.options.periodSelect) {\r\n                $(document).on('change', this.options.periodSelect, this.refreshChartData.bind(this));\r\n\r\n                this.period = $(this.options.periodSelect).val();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @public\r\n         */\r\n        createChart: function () {\r\n            this.chart = new Chart(this.element, this.getChartSettings());\r\n            this.refreshChartData();\r\n        },\r\n\r\n        /**\r\n         * @public\r\n         */\r\n        refreshChartData: function () {\r\n            var data = {\r\n                'form_key': FORM_KEY\r\n            };\r\n\r\n            if (this.options.periodSelect) {\r\n                this.period = data.period = $(this.options.periodSelect).val();\r\n            }\r\n\r\n            $.ajax({\r\n                url: this.options.updateUrl,\r\n                showLoader: true,\r\n                data: data,\r\n                dataType: 'json',\r\n                type: 'POST',\r\n                success: this.updateChart.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @public\r\n         * @param {Object} response\r\n         */\r\n        updateChart: function (response) {\r\n            $(this.element).toggle(response.data.length > 0);\r\n            $(this.element).next('.dashboard-diagram-nodata').toggle(response.data.length === 0);\r\n\r\n            this.chart.options.scales.xAxis.time.unit = this.options.periodUnits[this.period] ?\r\n                this.options.periodUnits[this.period] : 'hour';\r\n            this.chart.data.datasets[0].data = response.data;\r\n            this.chart.data.datasets[0].label = response.label;\r\n            this.chart.update();\r\n        },\r\n\r\n        /**\r\n         * @returns {Object} chart object configuration\r\n         */\r\n        getChartSettings: function () {\r\n            return {\r\n                type: 'bar',\r\n                data: {\r\n                    datasets: [{\r\n                        yAxisID: 'yAxis',\r\n                        xAxisID: 'xAxis',\r\n                        data: [],\r\n                        backgroundColor: '#f1d4b3',\r\n                        borderColor: '#eb5202',\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    legend: {\r\n                        onClick: this.handleChartLegendClick,\r\n                        position: 'bottom'\r\n                    },\r\n                    scales: {\r\n                        xAxis: {\r\n                            offset: true,\r\n                            type: 'time',\r\n                            ticks: {\r\n                                source: 'data'\r\n                            }\r\n                        },\r\n                        yAxis: {\r\n                            ticks: {\r\n                                beginAtZero: true,\r\n                                precision: this.options.precision\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @public\r\n         */\r\n        handleChartLegendClick: function () {\r\n            // don't hide dataset on clicking into legend item\r\n        }\r\n    });\r\n\r\n    return $.mage.dashboardChart;\r\n});\r\n","Magento_Backend/js/dashboard/totals.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*global FORM_KEY*/\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.dashboardTotals', {\r\n        options: {\r\n            updateUrl: '',\r\n            periodSelect: null\r\n        },\r\n        elementId: null,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.elementId = $(this.element).attr('id');\r\n\r\n            if (this.options.periodSelect) {\r\n                $(document).on('change', this.options.periodSelect, $.proxy(function () {\r\n                    this.refreshTotals();\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @public\r\n         */\r\n        refreshTotals: function () {\r\n            var periodParam = '';\r\n\r\n            if (this.options.periodSelect && $(this.options.periodSelect).val()) {\r\n                periodParam = 'period/' + $(this.options.periodSelect).val() + '/';\r\n            }\r\n\r\n            $.ajax({\r\n                url: this.options.updateUrl + periodParam,\r\n                showLoader: true,\r\n                data: {\r\n                    'form_key': FORM_KEY\r\n                },\r\n                dataType: 'html',\r\n                type: 'POST',\r\n                success: $.proxy(function (response) {\r\n                    $('#' + this.elementId).replaceWith(response);\r\n                }, this)\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.dashboardTotals;\r\n});\r\n","Magento_Bundle/js/bundle-product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*global FORM_KEY*/\r\n/*global bSelection*/\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/product/weight-handler',\r\n    'Magento_Ui/js/modal/modal',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'Magento_Theme/js/sortable',\r\n    'prototype'\r\n], function ($, weightHandler) {\r\n    'use strict';\r\n\r\n    $.widget('mage.bundleProduct', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._initOptionBoxes()\r\n                ._initSortableSelections()\r\n                ._bindCheckboxHandlers()\r\n                ._initCheckboxState()\r\n                ._bindAddSelectionDialog()\r\n                ._hideProductTypeSwitcher();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _initOptionBoxes: function () {\r\n            var syncOptionTitle;\r\n\r\n            this.element.sortable({\r\n                axis: 'y',\r\n                handle: '[data-role=draggable-handle]',\r\n                items: '.option-box',\r\n                update: this._updateOptionBoxPositions,\r\n                tolerance: 'pointer'\r\n            });\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            syncOptionTitle = function (event) {\r\n                var originalValue = $(event.target).attr('data-original-value'),\r\n                    currentValue = $(event.target).val(),\r\n                    optionBoxTitle = $('.title > span', $(event.target).closest('.option-box')),\r\n                    newOptionTitle = $.mage.__('New Option');\r\n\r\n                optionBoxTitle.text(currentValue === '' && !originalValue.length ? newOptionTitle : currentValue);\r\n            };\r\n            this._on({\r\n                'change .field-option-title input[name$=\"[title]\"]': syncOptionTitle,\r\n                'keyup .field-option-title input[name$=\"[title]\"]': syncOptionTitle,\r\n                'paste .field-option-title input[name$=\"[title]\"]': syncOptionTitle\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _initSortableSelections: function () {\r\n            this.element.find('.option-box .form-list tbody').sortable({\r\n                axis: 'y',\r\n                handle: '[data-role=draggable-handle]',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {jQuery} ui\r\n                 * @return {jQuery}\r\n                 */\r\n                helper: function (event, ui) {\r\n                    ui.children().each(function () {\r\n                        $(this).width($(this).width());\r\n                    });\r\n\r\n                    return ui;\r\n                },\r\n                update: this._updateSelectionsPositions,\r\n                tolerance: 'pointer'\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _initCheckboxState: function () {\r\n            this.element.find('.is-required').each(function () {\r\n                $(this).prop('checked', $(this).closest('.option-box').find('[name$=\"[required]\"]').val() > 0);\r\n            });\r\n\r\n            this.element.find('.is-user-defined-qty').each(function () {\r\n                $(this).prop('checked', $(this).closest('.qty-box').find('.select').val() > 0);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _bindAddSelectionDialog: function () {\r\n            var widget = this;\r\n\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .add-selection': function (event) {\r\n                    var $optionBox = $(event.target).closest('.option-box'),\r\n                        $selectionGrid = $optionBox.find('.selection-search').clone(),\r\n                        optionIndex = $optionBox.attr('id').replace('bundle_option_', ''),\r\n                        productIds = [],\r\n                        productSkus = [],\r\n                        selectedProductList = {};\r\n\r\n                    $optionBox.find('[name$=\"[product_id]\"]').each(function () {\r\n                        if (!$(this).closest('tr').find('[name$=\"[delete]\"]').val()) {\r\n                            productIds.push($(this).val());\r\n                            productSkus.push($(this).closest('tr').find('.col-sku').text());\r\n                        }\r\n                    });\r\n\r\n                    bSelection.gridSelection.set(optionIndex, $H({}));\r\n                    bSelection.gridRemoval = $H({});\r\n                    bSelection.gridSelectedProductSkus = productSkus;\r\n\r\n                    $selectionGrid.on('contentUpdated', bSelection.gridUpdateCallback);\r\n                    $selectionGrid.on('change', '.col-id input', function () {\r\n                        var tr = $(this).closest('tr');\r\n\r\n                        if ($(this).is(':checked')) {\r\n                            selectedProductList[$(this).val()] = {\r\n                                name: tr.find('.col-name').html().trim(),\r\n                                sku: tr.find('.col-sku').html().trim(),\r\n                                'product_id': $(this).val(),\r\n                                'option_id': $('bundle_selection_id_' + optionIndex).val(),\r\n                                'selection_price_value': 0,\r\n                                'selection_qty': 1\r\n                            };\r\n                        } else {\r\n                            delete selectedProductList[$(this).val()];\r\n                        }\r\n                    });\r\n\r\n                    $selectionGrid.modal({\r\n                        title: $optionBox.find('input[name$=\"[title]\"]').val() === '' ?\r\n                            $.mage.__('Add Products to New Option') :\r\n                            $.mage.__('Add Products to Option \"%1\"').replace(\r\n                                '%1',\r\n                                $('<div>').text($optionBox.find('input[name$=\"[title]\"]').val()).html()\r\n                            ),\r\n                        modalClass: 'bundle',\r\n                        type: 'slide',\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} modalWindow\r\n                         */\r\n                        closed: function (e, modalWindow) {\r\n                            modalWindow.modal.remove();\r\n                        },\r\n                        buttons: [{\r\n                            text: $.mage.__('Add Selected Products'),\r\n                            'class': 'action-primary action-add',\r\n\r\n                            /** Click action. */\r\n                            click: function () {\r\n                                $.each(selectedProductList, function () {\r\n                                    window.bSelection.addRow(optionIndex, this);\r\n                                });\r\n                                bSelection.gridRemoval.each(function (pair) {\r\n                                    $optionBox.find('.col-sku').filter(function () {\r\n                                        let text = $(this).text();\r\n\r\n                                        return text.trim() === pair.key; // find row by SKU\r\n                                    }).closest('tr').find('button.delete').trigger('click');\r\n                                });\r\n                                widget.refreshSortableElements();\r\n                                widget._updateSelectionsPositions.apply(widget.element);\r\n                                $selectionGrid.modal('closeModal');\r\n                            }\r\n                        }]\r\n                    });\r\n                    $.ajax({\r\n                        url: bSelection.selectionSearchUrl,\r\n                        dataType: 'html',\r\n                        data: {\r\n                            index: optionIndex,\r\n                            products: productIds,\r\n                            'selected_products': productIds,\r\n                            'form_key': FORM_KEY\r\n                        },\r\n\r\n                        /**\r\n                         * @param {*} data\r\n                         */\r\n                        success: function (data) {\r\n                            $selectionGrid.html(data).modal('openModal');\r\n                        },\r\n                        context: $('body'),\r\n                        showLoader: true\r\n                    });\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _hideProductTypeSwitcher: function () {\r\n            weightHandler.hideWeightSwitcher();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _bindCheckboxHandlers: function () {\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'change .is-required': function (event) {\r\n                    var $this = $(event.target);\r\n\r\n                    $this.closest('.option-box').find('[name$=\"[required]\"]').val($this.is(':checked') ? 1 : 0);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'change .is-user-defined-qty': function (event) {\r\n                    var $this = $(event.target);\r\n\r\n                    $this.closest('.qty-box').find('.select').val($this.is(':checked') ? 1 : 0);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _updateOptionBoxPositions: function () {\r\n            $(this).find('[name^=bundle_options][name$=\"[position]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _updateSelectionsPositions: function () {\r\n            $(this).find('[name^=bundle_selections][name$=\"[position]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @return {Object}\r\n         */\r\n        refreshSortableElements: function () {\r\n            this.element.sortable('refresh');\r\n            this._updateOptionBoxPositions.apply(this.element);\r\n            this._initSortableSelections();\r\n            this._initCheckboxState();\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Bundle/js/bundle-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events',\r\n    'Magento_Catalog/js/product/weight-handler'\r\n], function ($, productType, weight) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Bundle/js/bundle-type-handler': function () {\r\n            this.bindAll();\r\n            this._initType();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init type\r\n         * @private\r\n         */\r\n        _initType: function () {\r\n            if (\r\n                productType.type.init === 'bundle' &&\r\n                productType.type.current !== 'bundle' &&\r\n                !weight.isLocked()\r\n            ) {\r\n                weight.switchWeight();\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Bundle/js/price-bundle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'priceUtils',\r\n    'priceBox'\r\n], function ($, _, mageTemplate, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        optionConfig: null,\r\n        productBundleSelector: 'input.bundle.option, select.bundle.option, textarea.bundle.option',\r\n        qtyFieldSelector: 'input.qty',\r\n        priceBoxSelector: '.price-box',\r\n        optionHandlers: {},\r\n        optionTemplate: '<%- data.label %>' +\r\n            '<% if (data.finalPrice.value) { %>' +\r\n            ' +<%- data.finalPrice.formatted %>' +\r\n            '<% } %>',\r\n        controlContainer: 'dd', // should be eliminated\r\n        priceFormat: {},\r\n        isFixedPrice: false,\r\n        optionTierPricesBlocksSelector: '#option-tier-prices-{1} [data-role=\"selection-tier-prices\"]',\r\n        isOptionsInitialized: false\r\n    };\r\n\r\n    $.widget('mage.priceBundle', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function initPriceBundle() {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form);\r\n\r\n            options.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function createPriceBundle() {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form),\r\n                priceBox = $(this.options.priceBoxSelector, form),\r\n                qty = $(this.options.qtyFieldSelector, form);\r\n\r\n            this._updatePriceBox();\r\n            priceBox.on('price-box-initialized', this._updatePriceBox.bind(this));\r\n            options.on('change', this._onBundleOptionChanged.bind(this));\r\n            qty.on('change', this._onQtyFieldChanged.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Update price box config with bundle option prices\r\n         * @private\r\n         */\r\n        _updatePriceBox: function () {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form),\r\n                priceBox = $(this.options.priceBoxSelector, form);\r\n\r\n            if (!this.options.isOptionsInitialized) {\r\n                if (priceBox.data('magePriceBox') &&\r\n                    priceBox.priceBox('option') &&\r\n                    priceBox.priceBox('option').priceConfig\r\n                ) {\r\n                    if (priceBox.priceBox('option').priceConfig.optionTemplate) { //eslint-disable-line max-depth\r\n                        this._setOption('optionTemplate', priceBox.priceBox('option').priceConfig.optionTemplate);\r\n                    }\r\n                    this._setOption('priceFormat', priceBox.priceBox('option').priceConfig.priceFormat);\r\n                    priceBox.priceBox('setDefault', this.options.optionConfig.prices);\r\n                    this.options.isOptionsInitialized = true;\r\n                }\r\n                this._applyOptionNodeFix(options);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handle change on bundle option inputs\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _onBundleOptionChanged: function onBundleOptionChanged(event) {\r\n            var changes,\r\n                bundleOption = $(event.target),\r\n                priceBox = $(this.options.priceBoxSelector, this.element),\r\n                handler = this.options.optionHandlers[bundleOption.data('role')];\r\n\r\n            bundleOption.data('optionContainer', bundleOption.closest(this.options.controlContainer));\r\n            bundleOption.data('qtyField', bundleOption.data('optionContainer').find(this.options.qtyFieldSelector));\r\n\r\n            if (handler && handler instanceof Function) {\r\n                changes = handler(bundleOption, this.options.optionConfig, this);\r\n            } else {\r\n                changes = defaultGetOptionValue(bundleOption, this.options.optionConfig);//eslint-disable-line\r\n            }\r\n\r\n            // eslint-disable-next-line no-use-before-define\r\n            if (isValidQty(bundleOption)) {\r\n                if (changes) {\r\n                    priceBox.trigger('updatePrice', changes);\r\n                }\r\n\r\n                this._displayTierPriceBlock(bundleOption);\r\n                this.updateProductSummary();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle change on qty inputs near bundle option\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _onQtyFieldChanged: function onQtyFieldChanged(event) {\r\n            var field = $(event.target),\r\n                optionInstance,\r\n                optionConfig;\r\n\r\n            if (field.data('optionId') && field.data('optionValueId')) {\r\n                optionInstance = field.data('option');\r\n                optionConfig = this.options.optionConfig\r\n                    .options[field.data('optionId')]\r\n                    .selections[field.data('optionValueId')];\r\n                optionConfig.qty = field.val();\r\n\r\n                // eslint-disable-next-line no-use-before-define\r\n                if (isValidQty(optionInstance)) {\r\n                    optionInstance.trigger('change');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to fix backend behavior:\r\n         *  - if default qty large than 1 then backend multiply price in config\r\n         *\r\n         * @deprecated\r\n         * @private\r\n         */\r\n        _applyQtyFix: function applyQtyFix() {\r\n            var config = this.options.optionConfig;\r\n\r\n            if (config.isFixedPrice) {\r\n                _.each(config.options, function (option) {\r\n                    _.each(option.selections, function (item) {\r\n                        if (item.qty && item.qty !== 1) {\r\n                            _.each(item.prices, function (price) {\r\n                                price.amount /= item.qty;\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to fix issue with option nodes:\r\n         *  - you can't place any html in option ->\r\n         *    so you can't style it via CSS\r\n         * @param {jQuery} options\r\n         * @private\r\n         */\r\n        _applyOptionNodeFix: function applyOptionNodeFix(options) {\r\n            var config = this.options,\r\n                format = config.priceFormat,\r\n                template = config.optionTemplate;\r\n\r\n            template = mageTemplate(template);\r\n            options.filter('select').each(function (index, element) {\r\n                var $element = $(element),\r\n                    optionId = utils.findOptionId($element),\r\n                    optionConfig = config.optionConfig && config.optionConfig.options[optionId].selections,\r\n                    value;\r\n\r\n                $element.find('option').each(function (idx, option) {\r\n                    var $option,\r\n                        optionValue,\r\n                        toTemplate,\r\n                        prices;\r\n\r\n                    $option = $(option);\r\n                    optionValue = $option.val();\r\n\r\n                    if (!optionValue && optionValue !== 0) {\r\n                        return;\r\n                    }\r\n\r\n                    toTemplate = {\r\n                        data: {\r\n                            label: optionConfig[optionValue] && optionConfig[optionValue].name\r\n                        }\r\n                    };\r\n                    prices = optionConfig[optionValue].prices;\r\n\r\n                    _.each(prices, function (price, type) {\r\n                        value = +price.amount;\r\n                        value += _.reduce(price.adjustments, function (sum, x) {//eslint-disable-line\r\n                            return sum + x;\r\n                        }, 0);\r\n                        toTemplate.data[type] = {\r\n                            value: value,\r\n                            formatted: utils.formatPriceLocale(value, format)\r\n                        };\r\n                    });\r\n\r\n                    $option.html(template(toTemplate));\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge accepted configuration with instance options.\r\n         * @param  {Object}  options\r\n         * @return {$.Widget}\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n\r\n            this._super(options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show or hide option tier prices block\r\n         *\r\n         * @param {Object} optionElement\r\n         * @private\r\n         */\r\n        _displayTierPriceBlock: function (optionElement) {\r\n            var optionType = optionElement.prop('type'),\r\n                optionId,\r\n                optionValue,\r\n                optionTierPricesElements;\r\n\r\n            if (optionType === 'select-one') {\r\n                optionId = utils.findOptionId(optionElement[0]);\r\n                optionValue = optionElement.val() || null;\r\n                optionTierPricesElements = $(this.options.optionTierPricesBlocksSelector.replace('{1}', optionId));\r\n\r\n                _.each(optionTierPricesElements, function (tierPriceElement) {\r\n                    var selectionId = $(tierPriceElement).data('selection-id') + '';\r\n\r\n                    if (selectionId === optionValue) {\r\n                        $(tierPriceElement).show();\r\n                    } else {\r\n                        $(tierPriceElement).hide();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler to update productSummary box\r\n         */\r\n        updateProductSummary: function updateProductSummary() {\r\n            this.element.trigger('updateProductSummary', {\r\n                config: this.options.optionConfig\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.priceBundle;\r\n\r\n    /**\r\n     * Converts option value to priceBox object\r\n     *\r\n     * @param   {jQuery} element\r\n     * @param   {Object} config\r\n     * @returns {Object|null} - priceBox object with additional prices\r\n     */\r\n    function defaultGetOptionValue(element, config) {\r\n        var changes = {},\r\n            optionHash,\r\n            tempChanges,\r\n            qtyField,\r\n            optionId = utils.findOptionId(element[0]),\r\n            optionValue = element.val() || null,\r\n            optionName = element.prop('name'),\r\n            optionType = element.prop('type'),\r\n            optionConfig = config.options[optionId].selections,\r\n            optionQty = 0,\r\n            canQtyCustomize = false,\r\n            selectedIds = config.selected;\r\n\r\n        switch (optionType) {\r\n            case 'radio':\r\n            case 'select-one':\r\n\r\n                if (optionType === 'radio' && !element.is(':checked')) {\r\n                    return null;\r\n                }\r\n\r\n                qtyField = element.data('qtyField');\r\n                qtyField.data('option', element);\r\n\r\n                if (optionValue) {\r\n                    optionQty = optionConfig[optionValue].qty || 0;\r\n                    canQtyCustomize = optionConfig[optionValue].customQty === '1';\r\n                    toggleQtyField(qtyField, optionQty, optionId, optionValue, canQtyCustomize);//eslint-disable-line\r\n                    tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                    tempChanges = applyTierPrice(//eslint-disable-line\r\n                        tempChanges,\r\n                        optionQty,\r\n                        optionConfig[optionValue]\r\n                    );\r\n                    tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                } else {\r\n                    tempChanges = {};\r\n                    toggleQtyField(qtyField, '0', optionId, optionValue, false);//eslint-disable-line\r\n                }\r\n                optionHash = 'bundle-option-' + optionName;\r\n                changes[optionHash] = tempChanges;\r\n                selectedIds[optionId] = [optionValue];\r\n                break;\r\n\r\n            case 'select-multiple':\r\n                optionValue = _.compact(optionValue);\r\n\r\n                _.each(optionConfig, function (row, optionValueCode) {\r\n                    optionHash = 'bundle-option-' + optionName + '##' + optionValueCode;\r\n                    optionQty = row.qty || 0;\r\n                    tempChanges = utils.deepClone(row.prices);\r\n                    tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                    tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                    changes[optionHash] = _.contains(optionValue, optionValueCode) ? tempChanges : {};\r\n                });\r\n\r\n                selectedIds[optionId] = optionValue || [];\r\n                break;\r\n\r\n            case 'checkbox':\r\n                optionHash = 'bundle-option-' + optionName + '##' + optionValue;\r\n                optionQty = optionConfig[optionValue].qty || 0;\r\n                tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                changes[optionHash] = element.is(':checked') ? tempChanges : {};\r\n\r\n                selectedIds[optionId] = selectedIds[optionId] || [];\r\n\r\n                if (!_.contains(selectedIds[optionId], optionValue) && element.is(':checked')) {\r\n                    selectedIds[optionId].push(optionValue);\r\n                } else if (!element.is(':checked')) {\r\n                    selectedIds[optionId] = _.without(selectedIds[optionId], optionValue);\r\n                }\r\n                break;\r\n\r\n            case 'hidden':\r\n                optionHash = 'bundle-option-' + optionName + '##' + optionValue;\r\n                optionQty = optionConfig[optionValue].qty || 0;\r\n                canQtyCustomize = optionConfig[optionValue].customQty === '1';\r\n                qtyField = element.data('qtyField');\r\n                qtyField.data('option', element);\r\n                toggleQtyField(qtyField, optionQty, optionId, optionValue, canQtyCustomize);//eslint-disable-line\r\n                tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n\r\n                optionHash = 'bundle-option-' + optionName;\r\n                changes[optionHash] = tempChanges;\r\n                selectedIds[optionId] = [optionValue];\r\n                break;\r\n        }\r\n\r\n        return changes;\r\n    }\r\n\r\n    /**\r\n     * Check the quantity field if negative value occurs.\r\n     *\r\n     * @param {Object} bundleOption\r\n     */\r\n    function isValidQty(bundleOption) {\r\n        var isValid = true,\r\n            qtyElem = bundleOption.data('qtyField'),\r\n            bundleOptionType = bundleOption.prop('type');\r\n\r\n        if (['radio', 'select-one'].includes(bundleOptionType) && qtyElem.val() < 0) {\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Helper to toggle qty field\r\n     * @param {jQuery} element\r\n     * @param {String|Number} value\r\n     * @param {String|Number} optionId\r\n     * @param {String|Number} optionValueId\r\n     * @param {Boolean} canEdit\r\n     */\r\n    function toggleQtyField(element, value, optionId, optionValueId, canEdit) {\r\n        element\r\n            .val(value)\r\n            .data('optionId', optionId)\r\n            .data('optionValueId', optionValueId)\r\n            .attr('disabled', !canEdit);\r\n\r\n        if (canEdit) {\r\n            element.removeClass('qty-disabled');\r\n        } else {\r\n            element.addClass('qty-disabled');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to multiply on qty\r\n     *\r\n     * @param   {Object} prices\r\n     * @param   {Number} qty\r\n     * @returns {Object}\r\n     */\r\n    function applyQty(prices, qty) {\r\n        _.each(prices, function (everyPrice) {\r\n            everyPrice.amount *= qty;\r\n            _.each(everyPrice.adjustments, function (el, index) {\r\n                everyPrice.adjustments[index] *= qty;\r\n            });\r\n        });\r\n\r\n        return prices;\r\n    }\r\n\r\n    /**\r\n     * Helper to limit price with tier price\r\n     *\r\n     * @param {Object} oneItemPrice\r\n     * @param {Number} qty\r\n     * @param {Object} optionConfig\r\n     * @returns {Object}\r\n     */\r\n    function applyTierPrice(oneItemPrice, qty, optionConfig) {\r\n        var tiers = optionConfig.tierPrice,\r\n            magicKey = _.keys(oneItemPrice)[0],\r\n            tiersFirstKey = _.keys(optionConfig)[0],\r\n            lowest = false;\r\n\r\n        if (!tiers) {//tiers is undefined when options has only one option\r\n            tiers = optionConfig[tiersFirstKey].tierPrice;\r\n        }\r\n\r\n        tiers.sort(function (a, b) {//sorting based on \"price_qty\"\r\n            return a['price_qty'] - b['price_qty'];\r\n        });\r\n\r\n        _.each(tiers, function (tier, index) {\r\n            if (tier['price_qty'] > qty) {\r\n                return;\r\n            }\r\n\r\n            if (tier.prices[magicKey].amount < oneItemPrice[magicKey].amount) {\r\n                lowest = index;\r\n            }\r\n        });\r\n\r\n        if (lowest !== false) {\r\n            oneItemPrice = utils.deepClone(tiers[lowest].prices);\r\n        }\r\n\r\n        return oneItemPrice;\r\n    }\r\n});\r\n","Magento_Bundle/js/components/bundle-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'uiRegistry'\r\n], function (Checkbox, registry) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            clearing: false,\r\n            parentContainer: '',\r\n            parentSelections: '',\r\n            changer: '',\r\n            exports: {\r\n                value: '${$.parentName}:isDefaultValue'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            this._super().\r\n                observe('elementTmpl');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this.imports.changeType = this.retrieveParentName(this.parentContainer) + '.' + this.changer + ':value';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            if (this.prefer === 'radio' && this.checked() && !this.clearing) {\r\n                this.clearValues();\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Checkbox to radio type changer.\r\n         *\r\n         * @param {String} type - type to change.\r\n         */\r\n        changeType: function (type) {\r\n            var typeMap = registry.get(this.retrieveParentName(this.parentContainer) + '.' + this.changer).typeMap;\r\n\r\n            this.prefer = typeMap[type];\r\n            this.elementTmpl(this.templates[typeMap[type]]);\r\n        },\r\n\r\n        /**\r\n         * Clears values in components like this.\r\n         */\r\n        clearValues: function () {\r\n            var records = registry.get(this.retrieveParentName(this.parentSelections)),\r\n                index = this.index,\r\n                uid = this.uid;\r\n\r\n            records.elems.each(function (record) {\r\n                record.elems.filter(function (comp) {\r\n                    return comp.index === index && comp.uid !== uid;\r\n                }).each(function (comp) {\r\n                    comp.clearing = true;\r\n                    comp.clear();\r\n                    comp.clearing = false;\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Retrieve name for the most global parent with provided index.\r\n         *\r\n         * @param {String} parent - parent name.\r\n         * @returns {String}\r\n         */\r\n        retrieveParentName: function (parent) {\r\n            return this.name.replace(new RegExp('^(.+?\\\\.)?' + parent + '\\\\..+'), '$1' + parent);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-dynamic-rows-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid',\r\n    'uiLayout',\r\n    'rjsResolver'\r\n], function (_, dynamicRowsGrid, layout, resolver) {\r\n    'use strict';\r\n\r\n    return dynamicRowsGrid.extend({\r\n        defaults: {\r\n            label: '',\r\n            columnsHeader: false,\r\n            columnsHeaderAfterRender: true,\r\n            addButton: false,\r\n            isDefaultFieldScope: 'is_default',\r\n            defaultRecords: {\r\n                use: [],\r\n                moreThanOne: false,\r\n                state: {}\r\n            },\r\n            listens: {\r\n                inputType: 'onInputTypeChange',\r\n                isDefaultValue: 'onIsDefaultValue',\r\n                pageSize: 'onPageSizeChange'\r\n            },\r\n            sizesConfig: {\r\n                component: 'Magento_Ui/js/grid/paging/sizes',\r\n                name: '${ $.name }_sizes',\r\n                options: {\r\n                    '20': {\r\n                        value: 20,\r\n                        label: 20\r\n                    },\r\n                    '30': {\r\n                        value: 30,\r\n                        label: 30\r\n                    },\r\n                    '50': {\r\n                        value: 50,\r\n                        label: 50\r\n                    },\r\n                    '100': {\r\n                        value: 100,\r\n                        label: 100\r\n                    },\r\n                    '200': {\r\n                        value: 200,\r\n                        label: 200\r\n                    }\r\n                },\r\n                storageConfig: {\r\n                    provider: '${ $.storageConfig.provider }',\r\n                    namespace: '${ $.storageConfig.namespace }'\r\n                },\r\n                enabled: false\r\n            },\r\n            links: {\r\n                options: '${ $.sizesConfig.name }:options',\r\n                pageSize: '${ $.sizesConfig.name }:value'\r\n            },\r\n            modules: {\r\n                sizes: '${ $.sizesConfig.name }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes paging component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSizes();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initSizes: function () {\r\n            if (this.sizesConfig.enabled) {\r\n                layout([this.sizesConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler for type select.\r\n         *\r\n         * @param {String} inputType - changed.\r\n         */\r\n        onInputTypeChange: function (inputType) {\r\n            if (this.defaultRecords.moreThanOne && (inputType === 'radio' || inputType === 'select')) {\r\n                _.each(this.defaultRecords.use, function (index, counter) {\r\n                    this.source.set(\r\n                        this.dataScope + '.bundle_selections.' + index + '.' + this.isDefaultFieldScope,\r\n                        counter ? '0' : '1'\r\n                    );\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for is_default field.\r\n         *\r\n         * @param {Object} data - changed data.\r\n         */\r\n        onIsDefaultValue: function (data) {\r\n            var cb,\r\n                use = 0;\r\n\r\n            this.defaultRecords.use = [];\r\n\r\n            cb = function (elem, key) {\r\n\r\n                if (~~elem) {\r\n                    this.defaultRecords.use.push(key);\r\n                    use++;\r\n                }\r\n\r\n                this.defaultRecords.moreThanOne = use > 1;\r\n            }.bind(this);\r\n\r\n            _.each(data, cb);\r\n        },\r\n\r\n        /**\r\n         * Initialize elements from grid\r\n         *\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initElements: function (data) {\r\n            var newData = this.getNewData(data),\r\n                recordIndex;\r\n\r\n            this.parsePagesData(data);\r\n\r\n            if (newData.length) {\r\n                if (this.insertData().length) {\r\n                    recordIndex = data.length - newData.length - 1;\r\n\r\n                    _.each(newData, function (newRecord) {\r\n                        this.processingAddChild(newRecord, ++recordIndex, newRecord[this.identificationProperty]);\r\n                    }, this);\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Mapping value from grid\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        mappingValue: function (data) {\r\n            if (_.isEmpty(data)) {\r\n                return;\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the page size.\r\n         */\r\n        onPageSizeChange: function () {\r\n            resolver(function () {\r\n                if (this.elems().length) {\r\n                    this.reload();\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-dynamic-rows.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function (_, utils, registry, dynamicRows) {\r\n    'use strict';\r\n\r\n    return dynamicRows.extend({\r\n        defaults: {\r\n            label: '',\r\n            collapsibleHeader: true,\r\n            columnsHeader: false,\r\n            deleteProperty: false,\r\n            addButton: false\r\n        },\r\n\r\n        /**\r\n         * Set new data to dataSource,\r\n         * delete element\r\n         *\r\n         * @param {Array} data - record data\r\n         */\r\n        _updateData: function (data) {\r\n            var elems = _.clone(this.elems()),\r\n                path,\r\n                dataArr,\r\n                optionBaseData;\r\n\r\n            dataArr = this.recordData.splice(this.startIndex, this.recordData().length - this.startIndex);\r\n            dataArr.splice(0, this.pageSize);\r\n            elems = _.sortBy(this.elems(), function (elem) {\r\n                return ~~elem.index;\r\n            });\r\n\r\n            data.concat(dataArr).forEach(function (rec, idx) {\r\n                if (elems[idx]) {\r\n                    elems[idx].recordId = rec[this.identificationProperty];\r\n                }\r\n\r\n                if (!rec.position) {\r\n                    rec.position = this.maxPosition;\r\n                    this.setMaxPosition();\r\n                }\r\n\r\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + idx);\r\n                optionBaseData = _.pick(rec, function (value) {\r\n                    return !_.isObject(value);\r\n                });\r\n                this.source.set(path, optionBaseData);\r\n                this.source.set(path + '.bundle_button_proxy', []);\r\n                this.source.set(path + '.bundle_selections', []);\r\n                this.removeBundleItemsFromOption(idx);\r\n                _.each(rec['bundle_selections'], function (obj, index) {\r\n                    this.source.set(path + '.bundle_button_proxy' + '.' + index, rec['bundle_button_proxy'][index]);\r\n                    this.source.set(path + '.bundle_selections' + '.' + index, obj);\r\n                }, this);\r\n            }, this);\r\n\r\n            this.elems(elems);\r\n        },\r\n\r\n        /**\r\n         *  Removes nested dynamic-rows-grid rendered records from option\r\n         *\r\n         * @param {Number|String} index - element index\r\n         */\r\n        removeBundleItemsFromOption: function (index) {\r\n            var bundleSelections = registry.get(this.name + '.' + index + '.' + this.bundleSelectionsName),\r\n                bundleSelectionsLength = (bundleSelections.elems() || []).length,\r\n                i;\r\n\r\n            if (bundleSelectionsLength) {\r\n                for (i = 0; i < bundleSelectionsLength; i++) {\r\n                    bundleSelections.elems()[0].destroy();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n        * {@inheritdoc}\r\n        */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            var recordIds = _.map(this.recordData(), function (rec) {\r\n                return parseInt(rec['record_id'], 10);\r\n            }),\r\n            maxRecordId = _.max(recordIds);\r\n\r\n            prop = maxRecordId > -1 ? maxRecordId + 1 : prop;\r\n            this._super(ctx, index, prop);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-input-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated Not used anymore\r\n * @see Magento_Bundle/js/components/bundle-record\r\n * @see Magento_Bundle/js/components/bundle-checkbox\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry'\r\n], function (Select, registry) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            previousType: '',\r\n            parentContainer: '',\r\n            selections: '',\r\n            targetIndex: '',\r\n            typeMap: {}\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            var type = this.typeMap[this.value()];\r\n\r\n            if (type !== this.previousType) {\r\n                this.previousType = type;\r\n                this.processSelections(type === 'radio');\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Toggle 'User Defined' column and clears values\r\n         * @param {Boolean} isRadio\r\n         */\r\n        processSelections: function (isRadio) {\r\n            var records = registry.get(this.retrieveParentName(this.parentContainer) + '.' + this.selections),\r\n                checkedFound = false;\r\n\r\n            records.elems.each(function (record) {\r\n                record.elems.filter(function (comp) {\r\n                    return comp.index === this.userDefinedIndex;\r\n                }, this).each(function (comp) {\r\n                    comp.visible(isRadio);\r\n                });\r\n\r\n                if (isRadio) {\r\n                    record.elems.filter(function (comp) {\r\n                        return comp.index === this.isDefaultIndex;\r\n                    }, this).each(function (comp) {\r\n                        if (comp.checked()) {\r\n                            if (checkedFound) {\r\n                                comp.clearing = true;\r\n                                comp.clear();\r\n                                comp.clearing = false;\r\n                            }\r\n\r\n                            checkedFound = true;\r\n                        }\r\n                    });\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Retrieve name for the most global parent with provided index.\r\n         *\r\n         * @param {String} parent - parent name.\r\n         * @returns {String}\r\n         */\r\n        retrieveParentName: function (parent) {\r\n            return this.name.replace(new RegExp('^(.+?\\\\.)?' + parent + '\\\\..+'), '$1' + parent);\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-option-qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            valueUpdate: 'input',\r\n            isInteger: true,\r\n            validation: {\r\n                'validate-number': true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setInitialValue: function () {\r\n            this.initialValue = this.getInitialValue();\r\n\r\n            if (this.initialValue === undefined || this.initialValue === '') {\r\n                this.initialValue = 1;\r\n            }\r\n\r\n            if (this.value.peek() !== this.initialValue) {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.on('value', this.onUpdate.bind(this));\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onUpdate: function () {\r\n            this.validation['validate-digits'] = this.isInteger;\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        hasChanged: function () {\r\n            var notEqual = this.value() !== this.initialValue.toString();\r\n\r\n            return !this.visible() ? false : notEqual;\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-record.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/dynamic-rows/record',\r\n    'uiRegistry'\r\n], function (Record, registry) {\r\n    'use strict';\r\n\r\n    return Record.extend({\r\n        /**\r\n         * @param {String} val - type of Input Type\r\n         */\r\n        onTypeChanged: function (val) {\r\n            var columnVisibility  = !(val === 'multi' || val === 'checkbox');\r\n\r\n            registry.async(this.name + '.' + 'selection_can_change_qty')(function (elem) {\r\n                elem.visible(columnVisibility);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Bundle/js/components/bundle-user-defined-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            listens: {\r\n                inputType: 'onInputTypeChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for \"inputType\" property\r\n         *\r\n         * @param {String} data\r\n         */\r\n        onInputTypeChange: function (data) {\r\n            data === 'checkbox' || data === 'multi' ?\r\n                this.clear()\r\n                    .visible(false) :\r\n                this.visible(true);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/catalog/apply-to-type-switcher.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Bind event\r\n         */\r\n        bindAll: function () {\r\n            $('[data-form=edit-product] [data-role=tabs]').on(\r\n                'contentUpdated',\r\n                this._switchToTypeByApplyAttr.bind(this)\r\n            );\r\n\r\n            $('#product_info_tabs').on(\r\n                'beforePanelsMove tabscreate tabsactivate',\r\n                this._switchToTypeByApplyAttr.bind(this)\r\n            );\r\n\r\n            $(document).on('changeTypeProduct', this._switchToTypeByApplyAttr.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Catalog/catalog/apply-to-type-switcher': function () {\r\n            this.bindAll();\r\n            this._switchToTypeByApplyAttr();\r\n        },\r\n\r\n        /**\r\n         * Show/hide elements based on type\r\n         *\r\n         * @private\r\n         */\r\n        _switchToTypeByApplyAttr: function () {\r\n            $('[data-apply-to]:not(.removed)').each(function (index, element) {\r\n                var attrContainer = $(element),\r\n                    applyTo = attrContainer.data('applyTo') || [],\r\n                    $inputs = attrContainer.find('select, input, textarea');\r\n\r\n                if (applyTo.length === 0 || $.inArray(productType.type.current, applyTo) !== -1) {\r\n                    attrContainer.removeClass('not-applicable-attribute');\r\n                    $inputs.removeClass('ignore-validate');\r\n                } else {\r\n                    attrContainer.addClass('not-applicable-attribute');\r\n                    $inputs.addClass('ignore-validate');\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/base-image-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'jquery/file-uploader',\r\n    'mage/translate',\r\n    'mage/backend/notification'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.baseImage', {\r\n        /**\r\n         * Button creation\r\n         * @protected\r\n         */\r\n        options: {\r\n            maxImageUploadCount: 10\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var $container = this.element,\r\n                imageTmpl = mageTemplate(this.element.find('[data-template=image]').html()),\r\n                $dropPlaceholder = this.element.find('.image-placeholder'),\r\n                $galleryContainer = $('#media_gallery_content'),\r\n                mainClass = 'base-image',\r\n                maximumImageCount = 5,\r\n                $fieldCheckBox = $container.closest('[data-attribute-code=image]').find(':checkbox'),\r\n                isDefaultChecked = $fieldCheckBox.is(':checked'),\r\n                findElement, updateVisibility;\r\n\r\n            if (isDefaultChecked) {\r\n                $fieldCheckBox.trigger('click');\r\n            }\r\n\r\n            /**\r\n             * @param {Object} data\r\n             * @return {HTMLElement}\r\n             */\r\n            findElement = function (data) {\r\n                return $container.find('.image:not(.image-placeholder)').filter(function () {\r\n                    if (!$(this).data('image')) {\r\n                        return false;\r\n                    }\r\n\r\n                    return $(this).data('image').file === data.file;\r\n                }).first();\r\n            };\r\n\r\n            /** Update image visibility. */\r\n            updateVisibility = function () {\r\n                var elementsList = $container.find('.image:not(.removed-item)');\r\n\r\n                elementsList.each(function (index) {\r\n                    $(this)[index < maximumImageCount ? 'show' : 'hide']();\r\n                });\r\n                $dropPlaceholder[elementsList.length > maximumImageCount ? 'hide' : 'show']();\r\n            };\r\n\r\n            $galleryContainer.on('setImageType', function (event, data) {\r\n                if (data.type === 'image') {\r\n                    $container.find('.' + mainClass).removeClass(mainClass);\r\n\r\n                    if (data.imageData) {\r\n                        findElement(data.imageData).addClass(mainClass);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $galleryContainer.on('addItem', function (event, data) {\r\n                var tmpl = imageTmpl({\r\n                    data: data\r\n                });\r\n\r\n                $(tmpl).data('image', data).insertBefore($dropPlaceholder);\r\n\r\n                updateVisibility();\r\n            });\r\n\r\n            $galleryContainer.on('removeItem', function (event, image) {\r\n                findElement(image).addClass('removed-item').hide();\r\n                updateVisibility();\r\n            });\r\n\r\n            $galleryContainer.on('moveElement', function (event, data) {\r\n                var $element = findElement(data.imageData),\r\n                    $after;\r\n\r\n                if (data.position === 0) {\r\n                    $container.prepend($element);\r\n                } else {\r\n                    $after = $container.find('.image').eq(data.position);\r\n\r\n                    if (!$element.is($after)) {\r\n                        $element.insertAfter($after);\r\n                    }\r\n                }\r\n                updateVisibility();\r\n            });\r\n\r\n            $container.on('click', '[data-role=make-base-button]', function (event) {\r\n                var data;\r\n\r\n                event.preventDefault();\r\n                data = $(event.target).closest('.image').data('image');\r\n                $galleryContainer.productGallery('setBase', data);\r\n            });\r\n\r\n            $container.on('click', '[data-role=delete-button]', function (event) {\r\n                event.preventDefault();\r\n                $galleryContainer.trigger('removeItem', $(event.target).closest('.image').data('image'));\r\n            });\r\n\r\n            $container.sortable({\r\n                axis: 'x',\r\n                items: '.image:not(.image-placeholder)',\r\n                distance: 8,\r\n                tolerance: 'pointer',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {Object} data\r\n                 */\r\n                stop: function (event, data) {\r\n                    $galleryContainer.trigger('setPosition', {\r\n                        imageData: data.item.data('image'),\r\n                        position: $container.find('.image').index(data.item)\r\n                    });\r\n                    $galleryContainer.trigger('resort');\r\n                }\r\n            }).disableSelection();\r\n\r\n            this.element.find('input[type=\"file\"]').fileupload({\r\n                dataType: 'json',\r\n                dropZone: $dropPlaceholder.closest('[data-attribute-code]'),\r\n                acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n                maxFileSize: this.element.data('maxFileSize'),\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {Object} data\r\n                 */\r\n                done: function (event, data) {\r\n                    $dropPlaceholder.find('.progress-bar').text('').removeClass('in-progress');\r\n\r\n                    if (!data.result) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!data.result.error) {\r\n                        $galleryContainer.trigger('addItem', data.result);\r\n                    } else {\r\n                        alert({\r\n                            content: $.mage.__('We don\\'t recognize or support this file extension type.')\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} data\r\n                 */\r\n                change: function (e, data) {\r\n                    if (data.files.length > this.options.maxImageUploadCount) {\r\n                        $('body').notification('clear').notification('add', {\r\n                            error: true,\r\n                            message: $.mage.__('You can\\'t upload more than ' + this.options.maxImageUploadCount +\r\n                                ' images in one time'),\r\n\r\n                            /**\r\n                             * @param {*} message\r\n                             */\r\n                            insertMethod: function (message) {\r\n                                $('.page-main-actions').after(message);\r\n                            }\r\n                        });\r\n\r\n                        return false;\r\n                    }\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 * @param {*} data\r\n                 */\r\n                add: function (event, data) {\r\n                    $(this).fileupload('process', data).done(function () {\r\n                        data.submit();\r\n                    });\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} e\r\n                 * @param {Object} data\r\n                 */\r\n                progress: function (e, data) {\r\n                    var progress = parseInt(data.loaded / data.total * 100, 10);\r\n\r\n                    $dropPlaceholder.find('.progress-bar').addClass('in-progress').text(progress + '%');\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                start: function (event) {\r\n                    var uploaderContainer = $(event.target).closest('.image-placeholder');\r\n\r\n                    uploaderContainer.addClass('loading');\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                stop: function (event) {\r\n                    var uploaderContainer = $(event.target).closest('.image-placeholder');\r\n\r\n                    uploaderContainer.removeClass('loading');\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.baseImage;\r\n});\r\n","Magento_Catalog/catalog/product-attributes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'mage/translate'\r\n], function ($, _, registry) {\r\n    'use strict';\r\n\r\n    $.widget('mage.productAttributes', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._on({\r\n                'click': '_showPopup'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initModal: function () {\r\n            var self = this;\r\n\r\n            this.modal = $('<div id=\"create_new_attribute\"></div>').modal({\r\n                title: $.mage.__('New Attribute'),\r\n                type: 'slide',\r\n                buttons: [],\r\n\r\n                /** @inheritdoc */\r\n                opened: function () {\r\n                    $(this).parent().addClass('modal-content-new-attribute');\r\n                    self.iframe = $('<iframe id=\"create_new_attribute_container\"></iframe>').attr({\r\n                        src: self._prepareUrl(),\r\n                        frameborder: 0\r\n                    });\r\n                    self.modal.append(self.iframe);\r\n                    self._changeIframeSize();\r\n                    $(window).off().on('resize.modal', _.debounce(self._changeIframeSize.bind(self), 400));\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                closed: function () {\r\n                    var doc = self.iframe.get(0).document;\r\n\r\n                    if (doc && typeof doc.execCommand === 'function') {\r\n                        //IE9 break script loading but not execution on iframe removing\r\n                        doc.execCommand('stop');\r\n                        self.iframe.remove();\r\n                    }\r\n                    self.modal.data('mageModal').modal.remove();\r\n                    $(window).off('resize.modal');\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _getHeight: function () {\r\n            var modal = this.modal.data('mageModal').modal,\r\n                modalHead = modal.find('header'),\r\n                modalHeadHeight = modalHead.outerHeight(),\r\n                modalHeight = modal.outerHeight(),\r\n                modalContentPadding = this.modal.parent().outerHeight() - this.modal.parent().height();\r\n\r\n            return modalHeight - modalHeadHeight - modalContentPadding;\r\n        },\r\n\r\n        /**\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _getWidth: function () {\r\n            return this.modal.width();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _changeIframeSize: function () {\r\n            this.modal.parent().outerHeight(this._getHeight());\r\n            this.iframe.outerHeight(this._getHeight());\r\n            this.iframe.outerWidth(this._getWidth());\r\n\r\n        },\r\n\r\n        /**\r\n         * @return {String}\r\n         * @private\r\n         */\r\n        _prepareUrl: function () {\r\n            var productSource,\r\n                attributeSetId = '';\r\n\r\n            if (this.options.dataProvider) {\r\n                try {\r\n                    productSource = registry.get(this.options.dataProvider);\r\n                    attributeSetId = productSource.data.product['attribute_set_id'];\r\n                } catch (e) {}\r\n            }\r\n\r\n            return this.options.url +\r\n                (/\\?/.test(this.options.url) ? '&' : '?') +\r\n                'set=' + attributeSetId;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _showPopup: function () {\r\n            this._initModal();\r\n            this.modal.modal('openModal');\r\n        }\r\n    });\r\n\r\n    return $.mage.productAttributes;\r\n});\r\n","Magento_Catalog/catalog/product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    window.Product = {};\r\n\r\n    /**\r\n     * @param {String} id\r\n     * @return {*|jQuery|HTMLElement}\r\n     */\r\n    function byId(id) {\r\n        return $('#' + id);\r\n    }\r\n\r\n    /**\r\n     * @param {String} fieldId\r\n     */\r\n    function disableFieldEditMode(fieldId) {\r\n        var field = byId(fieldId);\r\n\r\n        field.prop('disabled', true);\r\n\r\n        if (field.next().hasClass('addafter')) {\r\n            field.parent().addClass('_update-attributes-disabled');\r\n        }\r\n\r\n        if (byId(fieldId + '_hidden').length) {\r\n            byId(fieldId + '_hidden').prop('disabled', true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} fieldId\r\n     */\r\n    function enableFieldEditMode(fieldId) {\r\n        var field = byId(fieldId);\r\n\r\n        field.prop('disabled', false);\r\n\r\n        if (field.parent().hasClass('_update-attributes-disabled')) {\r\n            field.parent().removeClass('_update-attributes-disabled');\r\n        }\r\n\r\n        if (byId(fieldId + '_hidden').length) {\r\n            byId(fieldId + '_hidden').prop('disabled', false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {String} toogleIdentifier\r\n     * @param {String} fieldId\r\n     */\r\n    function toogleFieldEditMode(toogleIdentifier, fieldId) {\r\n        if ($(toogleIdentifier).is(':checked')) {\r\n            enableFieldEditMode(fieldId);\r\n        } else {\r\n            disableFieldEditMode(fieldId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On complete disable.\r\n     */\r\n    function onCompleteDisableInited() {\r\n        var item;\r\n\r\n        $.each($('[data-disable]'), function () {\r\n            item = $(this).data('disable');\r\n            disableFieldEditMode(item);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {String} urlKey\r\n     */\r\n    function onUrlkeyChanged(urlKey) {\r\n        var hidden, chbx, oldValue;\r\n\r\n        urlKey = byId(urlKey);\r\n        hidden = urlKey.siblings('input[type=hidden]');\r\n        chbx = urlKey.siblings('input[type=checkbox]');\r\n        oldValue = chbx.val();\r\n\r\n        chbx.prop('disabled', oldValue === urlKey.val());\r\n        hidden.prop('disabled', chbx.prop('disabled'));\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLElement} element\r\n     */\r\n    function onCustomUseParentChanged(element) {\r\n        var useParent, parent;\r\n\r\n        element = $(element);\r\n        useParent = element.val() == 1; //eslint-disable-line eqeqeq\r\n        parent = element.offsetParent().parent();\r\n\r\n        parent.find('input, select, textarea').each(function (i, el) {\r\n            el = $(el);\r\n\r\n            if (element.prop('id') !== el.prop('id')) {\r\n                el.prop('disabled', useParent);\r\n            }\r\n        });\r\n\r\n        parent.find('img').each(function (i, el) {\r\n            if (useParent) {\r\n                $(el).hide();\r\n            } else {\r\n                $(el).show();\r\n            }\r\n        });\r\n    }\r\n\r\n    window.onCustomUseParentChanged = onCustomUseParentChanged;\r\n    window.onUrlkeyChanged = onUrlkeyChanged;\r\n    window.toogleFieldEditMode = toogleFieldEditMode;\r\n\r\n    $(onCompleteDisableInited);\r\n});\r\n","Magento_Catalog/catalog/type-events.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n        $type: $('#product_type_id'),\r\n\r\n        /**\r\n         * Init\r\n         */\r\n        init: function () {\r\n            this.type = {\r\n                init: this.$type.val(),\r\n                current: this.$type.val()\r\n            };\r\n\r\n            this.bindAll();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('setTypeProduct', function (event, type) {\r\n                this.setType(type);\r\n            }.bind(this));\r\n\r\n            //direct change type input\r\n            this.$type.on('change', function () {\r\n                this.type.current = this.$type.val();\r\n                this._notifyType();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set type\r\n         * @param {String} type - type product (downloadable, simple, virtual ...)\r\n         * @returns {*}\r\n         */\r\n        setType: function (type) {\r\n            return this.$type.val(type || this.type.init).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Notify type\r\n         * @private\r\n         */\r\n        _notifyType: function () {\r\n            $(document).trigger('changeTypeProduct', this.type);\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/assign-products.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'mage/adminhtml/grid'\r\n], function () {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var selectedProducts = config.selectedProducts,\r\n            categoryProducts = $H(selectedProducts),\r\n            gridJsObject = window[config.gridJsObjectName],\r\n            tabIndex = 1000;\r\n\r\n        $('in_category_products').value = Object.toJSON(categoryProducts);\r\n\r\n        /**\r\n         * Register Category Product\r\n         *\r\n         * @param {Object} grid\r\n         * @param {Object} element\r\n         * @param {Boolean} checked\r\n         */\r\n        function registerCategoryProduct(grid, element, checked) {\r\n            if (checked) {\r\n                if (element.positionElement) {\r\n                    element.positionElement.disabled = false;\r\n                    categoryProducts.set(element.value, element.positionElement.value);\r\n                }\r\n            } else {\r\n                if (element.positionElement) {\r\n                    element.positionElement.disabled = true;\r\n                }\r\n                categoryProducts.unset(element.value);\r\n            }\r\n            $('in_category_products').value = Object.toJSON(categoryProducts);\r\n            grid.reloadParams = {\r\n                'selected_products[]': categoryProducts.keys()\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Click on product row\r\n         *\r\n         * @param {Object} grid\r\n         * @param {String} event\r\n         */\r\n        function categoryProductRowClick(grid, event) {\r\n            var trElement = Event.findElement(event, 'tr'),\r\n                eventElement = Event.element(event),\r\n                isInputCheckbox = eventElement.tagName === 'INPUT' && eventElement.type === 'checkbox',\r\n                isInputPosition = grid.targetElement &&\r\n                    grid.targetElement.tagName === 'INPUT' &&\r\n                    grid.targetElement.name === 'position',\r\n                checked = false,\r\n                checkbox = null;\r\n\r\n            if (eventElement.tagName === 'LABEL' &&\r\n                trElement.querySelector('#' + eventElement.htmlFor) &&\r\n                trElement.querySelector('#' + eventElement.htmlFor).type === 'checkbox'\r\n            ) {\r\n                event.stopPropagation();\r\n                trElement.querySelector('#' + eventElement.htmlFor).trigger('click');\r\n\r\n                return;\r\n            }\r\n\r\n            if (trElement && !isInputPosition) {\r\n                checkbox = Element.getElementsBySelector(trElement, 'input');\r\n\r\n                if (checkbox[0]) {\r\n                    checked = isInputCheckbox ? checkbox[0].checked : !checkbox[0].checked;\r\n                    gridJsObject.setCheckboxChecked(checkbox[0], checked);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Change product position\r\n         *\r\n         * @param {String} event\r\n         */\r\n        function positionChange(event) {\r\n            var element = Event.element(event);\r\n\r\n            if (element && element.checkboxElement && element.checkboxElement.checked) {\r\n                categoryProducts.set(element.checkboxElement.value, element.value);\r\n                $('in_category_products').value = Object.toJSON(categoryProducts);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Initialize category product row\r\n         *\r\n         * @param {Object} grid\r\n         * @param {String} row\r\n         */\r\n        function categoryProductRowInit(grid, row) {\r\n            var checkbox = $(row).getElementsByClassName('checkbox')[0],\r\n                position = $(row).getElementsByClassName('input-text')[0];\r\n\r\n            if (checkbox && position) {\r\n                checkbox.positionElement = position;\r\n                position.checkboxElement = checkbox;\r\n                position.disabled = !checkbox.checked;\r\n                position.tabIndex = tabIndex++;\r\n                Event.observe(position, 'keyup', positionChange);\r\n            }\r\n        }\r\n\r\n        gridJsObject.rowClickCallback = categoryProductRowClick;\r\n        gridJsObject.initRowCallback = categoryProductRowInit;\r\n        gridJsObject.checkboxCheckCallback = registerCategoryProduct;\r\n\r\n        if (gridJsObject.rows) {\r\n            gridJsObject.rows.each(function (row) {\r\n                categoryProductRowInit(gridJsObject, row);\r\n            });\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/category/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var categoryForm = {\r\n            options: {\r\n                categoryIdSelector: 'input[name=\"id\"]',\r\n                categoryPathSelector: 'input[name=\"path\"]',\r\n                categoryParentSelector: 'input[name=\"parent\"]',\r\n                categoryLevelSelector: 'input[name=\"level\"]',\r\n                refreshUrl: config.refreshUrl\r\n            },\r\n\r\n            /**\r\n             * Sending ajax to server to refresh field 'path'\r\n             * @protected\r\n             */\r\n            refreshPath: function () {\r\n                if (!$(this.options.categoryIdSelector)) {\r\n                    return false;\r\n                }\r\n                $.ajax({\r\n                    url: this.options.refreshUrl,\r\n                    method: 'GET',\r\n                    showLoader: true\r\n                }).done(this._refreshPathSuccess.bind(this));\r\n            },\r\n\r\n            /**\r\n             * Refresh field 'path' on ajax success\r\n             * @param {Object} data\r\n             * @private\r\n             */\r\n            _refreshPathSuccess: function (data) {\r\n                if (data.error) {\r\n                    alert({\r\n                        content: data.message\r\n                    });\r\n                } else {\r\n                    $(this.options.categoryIdSelector).val(data.id).trigger('change');\r\n                    $(this.options.categoryPathSelector).val(data.path).trigger('change');\r\n                    $(this.options.categoryParentSelector).val(data.parentId).trigger('change');\r\n                    $(this.options.categoryLevelSelector).val(data.level).trigger('change');\r\n                }\r\n            }\r\n        };\r\n\r\n        $('body').on('categoryMove.tree', $.proxy(categoryForm.refreshPath.bind(categoryForm), this));\r\n    };\r\n});\r\n","Magento_Catalog/catalog/product/attribute/unique-validate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/backend/validation'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var msg = '',\r\n            _config = jQuery.extend({\r\n                element: null,\r\n                message: '',\r\n                uniqueClass: 'required-unique'\r\n            }, config),\r\n\r\n            /** @inheritdoc */\r\n            messager = function () {\r\n                return msg;\r\n            };\r\n\r\n        if (typeof _config.element === 'string') {\r\n            jQuery.validator.addMethod(\r\n                _config.element,\r\n\r\n                function (value, element) {\r\n                    var inputs = jQuery(element)\r\n                            .closest('table')\r\n                            .find('.' + _config.uniqueClass + ':visible'),\r\n                        valuesHash = {},\r\n                        isValid = true,\r\n                        duplicates = [];\r\n\r\n                    inputs.each(function (el) {\r\n                        var inputValue = inputs[el].value;\r\n\r\n                        if (typeof valuesHash[inputValue] !== 'undefined') {\r\n                            isValid = false;\r\n                            duplicates.push(inputValue);\r\n                        }\r\n                        valuesHash[inputValue] = el;\r\n                    });\r\n\r\n                    if (!isValid) {\r\n                        msg = _config.message + ' (' + duplicates.join(', ') + ')';\r\n                    }\r\n\r\n                    return isValid;\r\n                },\r\n\r\n                messager\r\n            );\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/catalog/product/composite/configure.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'prototype',\r\n    'Magento_Ui/js/modal/modal'\r\n], function (jQuery) {\r\n\r\n    window.ProductConfigure = Class.create();\r\n\r\n    ProductConfigure.prototype = {\r\n\r\n        listTypes:                  $H({}),\r\n        current:                    $H({}),\r\n        itemsFilter:                $H({}),\r\n        blockWindow:                null,\r\n        blockForm:                  null,\r\n        blockFormFields:            null,\r\n        blockFormAdd:               null,\r\n        blockFormConfirmed:         null,\r\n        blockConfirmed:             null,\r\n        blockIFrame:                null,\r\n        blockCancelBtn:             null,\r\n        blockMask:                  null,\r\n        blockMsg:                   null,\r\n        blockMsgError:              null,\r\n        windowHeight:               null,\r\n        confirmedCurrentId:         null,\r\n        confirmCallback:            {},\r\n        cancelCallback:             {},\r\n        onLoadIFrameCallback:       {},\r\n        showWindowCallback:         {},\r\n        beforeSubmitCallback:       {},\r\n        iFrameJSVarname:            null,\r\n        _listTypeId:                1,\r\n\r\n        /**\r\n         * Initialize object\r\n         */\r\n        initialize: function () {\r\n            var self = this,\r\n                popupDialog = jQuery('#product_composite_configure');\r\n\r\n            this._initWindowElements();\r\n            jQuery.async('#product_composite_configure', function (el) {\r\n                if (el !== popupDialog[0]) {\r\n                    el = popupDialog[0];\r\n                }\r\n                self.dialog = jQuery(el).modal({\r\n                    title: jQuery.mage.__('Configure Product'),\r\n                    type: 'slide',\r\n                    buttons: [{\r\n                        text: jQuery.mage.__('OK'),\r\n                        'class': 'action-primary',\r\n                        click: function () {\r\n                            self.onConfirmBtn();\r\n                        }\r\n                    }],\r\n                    closed: function () {\r\n                        self.clean('window');\r\n                    },\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Initialize window elements\r\n         */\r\n        _initWindowElements: function () {\r\n            this.blockWindow                = $('product_composite_configure');\r\n            this.blockForm                  = $('product_composite_configure_form');\r\n            this.blockFormFields            = $('product_composite_configure_form_fields');\r\n            this.blockFormAdd               = $('product_composite_configure_form_additional');\r\n            this.blockFormConfirmed         = $('product_composite_configure_form_confirmed');\r\n            this.blockConfirmed             = $('product_composite_configure_confirmed');\r\n            this.blockIFrame                = $('product_composite_configure_iframe');\r\n            this.blockCancelBtn             = $('product_composite_configure_form_cancel');\r\n            this.blockMsg                   = $('product_composite_configure_messages');\r\n            this.blockMsgError              = this.blockMsg.select('.message.error div')[0];\r\n            this.iFrameJSVarname            = this.blockForm.select('input[name=\"as_js_varname\"]')[0].value;\r\n        },\r\n\r\n        /**\r\n         * Returns next unique list type id\r\n         */\r\n        _generateListTypeId: function () {\r\n            return '_internal_lt_' + this._listTypeId++;\r\n        },\r\n\r\n        /**\r\n         * Add product list types as scope and their urls\r\n         * example: addListType('product_to_add', {urlFetch: 'http://magento...'})\r\n         * example: addListType('wishlist', {urlSubmit: 'http://magento...'})\r\n         *\r\n         * @param type types as scope\r\n         * @param urls obj can be\r\n         *             - {urlFetch: 'http://magento...'} for fetching configuration fields through ajax\r\n         *             - {urlConfirm: 'http://magento...'} for submit configured data through iFrame when clicked confirm button\r\n         *             - {urlSubmit: 'http://magento...'} for submit configured data through iFrame\r\n         */\r\n        addListType: function (type, urls) {\r\n            if ('undefined' == typeof this.listTypes[type]) {\r\n                this.listTypes[type] = {};\r\n            }\r\n            Object.extend(this.listTypes[type], urls);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds complex list type - that is used to submit several list types at once\r\n         * Only urlSubmit is possible for this list type\r\n         * example: addComplexListType(['wishlist', 'product_list'], 'http://magento...')\r\n         *\r\n         * @param type types as scope\r\n         * @param urls obj can be\r\n         *             - {urlSubmit: 'http://magento...'} for submit configured data through iFrame\r\n         * @return type string\r\n         */\r\n        addComplexListType: function (types, urlSubmit) {\r\n            var type = this._generateListTypeId();\r\n\r\n            this.listTypes[type] = {};\r\n            this.listTypes[type].complexTypes = types;\r\n            this.listTypes[type].urlSubmit = urlSubmit;\r\n\r\n            return type;\r\n        },\r\n\r\n        /**\r\n         * Add filter of items\r\n         *\r\n         * @param listType scope name\r\n         * @param itemsFilter\r\n         */\r\n        addItemsFilter: function (listType, itemsFilter) {\r\n            if (!listType || !itemsFilter) {\r\n                return false;\r\n            }\r\n\r\n            if ('undefined' == typeof this.itemsFilter[listType]) {\r\n                this.itemsFilter[listType] = [];\r\n            }\r\n            this.itemsFilter[listType] = this.itemsFilter[listType].concat(itemsFilter);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Returns id of block where configuration for an item is stored\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         * @return string\r\n         */\r\n        _getConfirmedBlockId: function (listType, itemId) {\r\n            return this.blockConfirmed.id + '[' + listType + '][' + itemId + ']';\r\n        },\r\n\r\n        /**\r\n         * Checks whether item has some configuration fields\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         * @return bool\r\n         */\r\n        itemConfigured: function (listType, itemId) {\r\n            var confirmedBlockId = this._getConfirmedBlockId(listType, itemId);\r\n            var itemBlock = $(confirmedBlockId);\r\n\r\n            return !!(itemBlock && itemBlock.innerHTML);\r\n        },\r\n\r\n        /**\r\n         * Show configuration fields of item, if it not found then get it through ajax\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         */\r\n        showItemConfiguration: function (listType, itemId) {\r\n            if (!listType || !itemId) {\r\n                return false;\r\n            }\r\n\r\n            this.initialize();\r\n            this.current.listType = listType;\r\n            this.current.itemId = itemId;\r\n            this.confirmedCurrentId = this._getConfirmedBlockId(listType, itemId);\r\n\r\n            if (!this.itemConfigured(listType, itemId)) {\r\n                this._requestItemConfiguration(listType, itemId);\r\n            } else {\r\n                this._processFieldsData('item_restore');\r\n                this._showWindow();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get configuration fields of product through ajax and show them\r\n         *\r\n         * @param listType scope name\r\n         * @param itemId\r\n         */\r\n        _requestItemConfiguration: function (listType, itemId) {\r\n            if (!this.listTypes[listType].urlFetch) {\r\n                return false;\r\n            }\r\n            var url = this.listTypes[listType].urlFetch;\r\n\r\n            if (url) {\r\n                new Ajax.Request(url, {\r\n                    parameters: {\r\n                        id: itemId\r\n                    },\r\n                    onSuccess: function (transport) {\r\n                        var response = transport.responseText;\r\n\r\n                        if (response.isJSON()) {\r\n                            response = response.evalJSON();\r\n\r\n                            if (response.error) {\r\n                                this.blockMsg.show();\r\n                                this.blockMsgError.innerHTML = response.message;\r\n                                if(this.blockCancelBtn) {\r\n                                    this.blockCancelBtn.hide();\r\n                                }\r\n                                this.setConfirmCallback(listType, null);\r\n                                this._showWindow();\r\n                            }\r\n                        } else if (response) {\r\n                            response += '';\r\n                            this.blockFormFields.update(response);\r\n\r\n                            // Add special div to hold mage data, e.g. scripts to execute on every popup show\r\n                            var mageData = {};\r\n                            var scripts = response.extractScripts();\r\n\r\n                            mageData.scripts = scripts;\r\n\r\n                            var scriptHolder = new Element('div', {\r\n                                'style': 'display:none'\r\n                            });\r\n\r\n                            scriptHolder.mageData = mageData;\r\n                            this.blockFormFields.insert(scriptHolder);\r\n\r\n                            // Show window\r\n                            this._showWindow();\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Triggered on confirm button click\r\n         * Do submit configured data through iFrame if needed\r\n         */\r\n        onConfirmBtn: function () {\r\n            if (jQuery(this.blockForm).valid()) {\r\n                if (this.listTypes[this.current.listType].urlConfirm) {\r\n                    this.submit();\r\n                } else {\r\n                    this._processFieldsData('item_confirm');\r\n                    this._closeWindow();\r\n\r\n                    if (Object.isFunction(this.confirmCallback[this.current.listType])) {\r\n                        this.confirmCallback[this.current.listType]();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered on cancel button click\r\n         */\r\n        onCancelBtn: function () {\r\n            this._closeWindow();\r\n\r\n            if (Object.isFunction(this.cancelCallback[this.current.listType])) {\r\n                this.cancelCallback[this.current.listType]();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Submit configured data through iFrame\r\n         *\r\n         * @param listType scope name\r\n         */\r\n        submit: function (listType) {\r\n            // prepare data\r\n            if (listType) {\r\n                this.current.listType = listType;\r\n                this.current.itemId = null;\r\n            }\r\n            var urlConfirm = this.listTypes[this.current.listType].urlConfirm;\r\n            var urlSubmit = this.listTypes[this.current.listType].urlSubmit;\r\n\r\n            if (!urlConfirm && !urlSubmit) {\r\n                return false;\r\n            }\r\n\r\n            if (urlConfirm) {\r\n                this.blockForm.action = urlConfirm;\r\n                this.addFields([new Element('input', {\r\n                    type: 'hidden', name: 'id', value: this.current.itemId\r\n                })]);\r\n            } else {\r\n                this.blockForm.action = urlSubmit;\r\n\r\n                var complexTypes = this.listTypes[this.current.listType].complexTypes;\r\n\r\n                if (complexTypes) {\r\n                    this.addFields([new Element('input', {\r\n                        type: 'hidden', name: 'configure_complex_list_types', value: complexTypes.join(',')\r\n                    })]);\r\n                }\r\n\r\n                this._processFieldsData('current_confirmed_to_form');\r\n\r\n                // Disable item controls that duplicate added fields (e.g. sometimes qty controls can intersect)\r\n                // so they won't be submitted\r\n                var tagNames = ['input', 'select', 'textarea'];\r\n\r\n                var names = {}; // Map of added field names\r\n\r\n                for (var i = 0, len = tagNames.length; i < len; i++) {\r\n                    var tagName = tagNames[i];\r\n                    var elements = this.blockFormAdd.getElementsByTagName(tagName);\r\n\r\n                    for (var index = 0, elLen = elements.length; index < elLen; index++) {\r\n                        names[elements[index].name] = true;\r\n                    }\r\n                }\r\n\r\n                for (var i = 0, len = tagNames.length; i < len; i++) {\r\n                    var tagName = tagNames[i];\r\n                    var elements = this.blockFormConfirmed.getElementsByTagName(tagName);\r\n\r\n                    for (var index = 0, elLen = elements.length; index < elLen; index++) {\r\n                        var element = elements[index];\r\n\r\n                        if (names[element.name]) {\r\n                            element.setAttribute('configure_disabled', 1);\r\n                            element.setAttribute('configure_prev_disabled', element.disabled ? 1 : 0);\r\n                            element.disabled = true;\r\n                        } else {\r\n                            element.setAttribute('configure_disabled', 0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // do submit\r\n            if (Object.isFunction(this.beforeSubmitCallback[this.current.listType])) {\r\n                this.beforeSubmitCallback[this.current.listType]();\r\n            }\r\n            this.blockForm.submit();\r\n\r\n            // Show loader\r\n            jQuery(this.blockForm).trigger('processStart');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Add dynamically additional fields for form\r\n         *\r\n         * @param fields\r\n         */\r\n        addFields: function (fields) {\r\n            fields.each(function (elm) {\r\n                this.blockFormAdd.insert(elm);\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Triggered when form was submitted and iFrame was loaded. Get response from iFrame and handle it\r\n         */\r\n        onLoadIFrame: function () {\r\n            this.blockFormConfirmed.select('[configure_disabled=1]').each(function (element) {\r\n                element.disabled = element.getAttribute('configure_prev_disabled') == '1';\r\n            });\r\n\r\n            this._processFieldsData('form_confirmed_to_confirmed');\r\n\r\n            var response = this.blockIFrame.contentWindow[this.iFrameJSVarname];\r\n\r\n            if (response && 'object' == typeof response) {\r\n                if (this.listTypes[this.current.listType].urlConfirm) {\r\n                    if (response.ok) {\r\n                        this._closeWindow();\r\n                        this.clean('current');\r\n                    } else if (response.error) {\r\n                        this.showItemConfiguration(this.current.listType, this.current.itemId);\r\n                        this.blockMsg.show();\r\n                        this.blockMsgError.innerHTML = response.message;\r\n                        this._showWindow();\r\n\r\n                        jQuery(this.blockForm).trigger('processStop');\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                if (Object.isFunction(this.onLoadIFrameCallback[this.current.listType])) {\r\n                    this.onLoadIFrameCallback[this.current.listType](response);\r\n                }\r\n                document.fire(this.current.listType + ':afterIFrameLoaded');\r\n            }\r\n            // Hide loader\r\n            jQuery(this.blockForm).trigger('processStop');\r\n\r\n            this.clean('current');\r\n            this.initialize();\r\n        },\r\n\r\n        /**\r\n         * Helper for fetching content from iFrame\r\n         */\r\n        _getIFrameContent: function () {\r\n            var content = this.blockIFrame.contentWindow || this.blockIFrame.contentDocument;\r\n\r\n            if (content.document) {\r\n                content = content.document;\r\n            }\r\n\r\n            return content;\r\n        },\r\n\r\n        /**\r\n         * Helper to find qty of currently confirmed item\r\n         */\r\n        getCurrentConfirmedQtyElement: function () {\r\n            var elms = $(this.confirmedCurrentId).getElementsByTagName('input');\r\n\r\n            for (var i = 0; i < elms.length; i++) {\r\n                if (elms[i].name == 'qty') {\r\n                    return elms[i];\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to find select element of currently confirmed item\r\n         */\r\n        getCurrentConfirmedSelectElement: function () {\r\n            return $(this.confirmedCurrentId).getElementsByTagName('select');\r\n        },\r\n\r\n        /**\r\n         * Helper to find qty of active form\r\n         */\r\n        getCurrentFormQtyElement: function () {\r\n            var elms = this.blockFormFields.getElementsByTagName('input');\r\n\r\n            for (var i = 0; i < elms.length; i++) {\r\n                if (elms[i].name == 'qty') {\r\n                    return elms[i];\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show configuration window\r\n         */\r\n        _showWindow: function () {\r\n            this.dialog.modal('openModal');\r\n            //this._toggleSelectsExceptBlock(false);\r\n\r\n            if (Object.isFunction(this.showWindowCallback[this.current.listType])) {\r\n                this.showWindowCallback[this.current.listType]();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close configuration window\r\n         */\r\n        _closeWindow: function () {\r\n            this.dialog.modal('closeModal');\r\n            //this.blockWindow.style.display = 'none';\r\n            //this.clean('window');\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when confirm button was clicked\r\n         *\r\n         * @param confirmCallback\r\n         */\r\n        setConfirmCallback: function (listType, confirmCallback) {\r\n            this.confirmCallback[listType] = confirmCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when cancel button was clicked\r\n         *\r\n         * @param cancelCallback\r\n         */\r\n        setCancelCallback: function (listType, cancelCallback) {\r\n            this.cancelCallback[listType] = cancelCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when iFrame was loaded\r\n         *\r\n         * @param onLoadIFrameCallback\r\n         */\r\n        setOnLoadIFrameCallback: function (listType, onLoadIFrameCallback) {\r\n            this.onLoadIFrameCallback[listType] = onLoadIFrameCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered when iFrame was loaded\r\n         *\r\n         * @param showWindowCallback\r\n         */\r\n        setShowWindowCallback: function (listType, showWindowCallback) {\r\n            this.showWindowCallback[listType] = showWindowCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Attach callback function triggered before submitting form\r\n         *\r\n         * @param beforeSubmitCallback\r\n         */\r\n        setBeforeSubmitCallback: function (listType, beforeSubmitCallback) {\r\n            this.beforeSubmitCallback[listType] = beforeSubmitCallback;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Clean object data\r\n         *\r\n         * @param method can be 'all' or 'current'\r\n         */\r\n        clean: function (method) {\r\n            var listInfo = null;\r\n            var listTypes = null;\r\n            var removeConfirmed = function (listTypes) {\r\n                this.blockConfirmed.childElements().each(function (elm) {\r\n                    for (var i = 0, len = listTypes.length; i < len; i++) {\r\n                        var pattern = this.blockConfirmed.id + '[' + listTypes[i] + ']';\r\n\r\n                        if (elm.id.indexOf(pattern) == 0) {\r\n                            elm.remove();\r\n                            break;\r\n                        }\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this);\r\n\r\n            switch (method) {\r\n                case 'current':\r\n                    listInfo = this.listTypes[this.current.listType];\r\n                    listTypes = [this.current.listType];\r\n\r\n                    if (listInfo && listInfo.complexTypes) {\r\n                        listTypes = listTypes.concat(listInfo.complexTypes);\r\n                    }\r\n                    removeConfirmed(listTypes);\r\n                    break;\r\n\r\n                case 'window':\r\n                    this.blockFormFields.update();\r\n                    this.blockMsg.hide();\r\n                    this.blockMsgError.update();\r\n                    if(this.blockCancelBtn) {\r\n                        this.blockCancelBtn.show();\r\n                    }\r\n                    break;\r\n                default:\r\n                    // search in list types for its cleaning\r\n                    if (this.listTypes[method]) {\r\n                        listInfo = this.listTypes[method];\r\n                        listTypes = [method];\r\n\r\n                        if (listInfo.complexTypes) {\r\n                            listTypes = listTypes.concat(listInfo.complexTypes);\r\n                        }\r\n                        removeConfirmed(listTypes);\r\n                        // clean all\r\n                    } else if (!method) {\r\n                        this.current = $H({});\r\n                        this.blockConfirmed.update();\r\n                        this.blockFormFields.update();\r\n                        this.blockMsg.hide();\r\n                        this.blockMsgError.update();\r\n                        if(this.blockCancelBtn) {\r\n                            this.blockCancelBtn.show();\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n            this._getIFrameContent().body.innerHTML = '';\r\n            this.blockIFrame.contentWindow[this.iFrameJSVarname] = {};\r\n            this.blockFormAdd.update();\r\n            this.blockFormConfirmed.update();\r\n            this.blockForm.action = '';\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Process fields data: save, restore, move saved to form and back\r\n         *\r\n         * @param method can be 'item_confirm', 'item_restore', 'current_confirmed_to_form', 'form_confirmed_to_confirmed'\r\n         */\r\n        _processFieldsData: function (method) {\r\n            var self = this;\r\n\r\n            /**\r\n             * Internal function for rename fields names of some list type\r\n             * if listType is not specified, then it won't be added as prefix to all names\r\n             *\r\n             * @param method can be 'current_confirmed_to_form', 'form_confirmed_to_confirmed'\r\n             * @param blockItem\r\n             */\r\n            var _renameFields = function (method, blockItem, listType) {\r\n                var pattern           = null;\r\n                var patternFlat       = null;\r\n                var patternPrefix     = RegExp('\\\\s', 'g');\r\n                var replacement       = null;\r\n                var replacementFlat   = null;\r\n                var replacementPrefix = '_';\r\n                var scopeArr          = blockItem.id.match(/.*\\[\\w+\\]\\[([^\\]]+)\\]$/);\r\n                var itemId            = scopeArr[1];\r\n\r\n                if (method == 'current_confirmed_to_form') {\r\n                    pattern         = RegExp('(\\\\w+)(\\\\[?)');\r\n                    patternFlat     = RegExp('(\\\\w+)');\r\n                    replacement     = 'item[' + itemId + '][$1]$2';\r\n                    replacementFlat = 'item_' + itemId + '_$1';\r\n\r\n                    if (listType) {\r\n                        replacement = 'list[' + listType + '][item][' + itemId + '][$1]$2';\r\n                        replacementFlat = 'list_' + listType + '_' + replacementFlat;\r\n                    }\r\n                } else if (method == 'form_confirmed_to_confirmed') {\r\n                    var stPattern = 'item\\\\[' + itemId + '\\\\]\\\\[(\\\\w+)\\\\](.*)';\r\n                    var stPatternFlat = 'item_' + itemId + '_(\\\\w+)';\r\n\r\n                    if (listType) {\r\n                        stPattern = 'list\\\\[' + listType + '\\\\]\\\\[item\\\\]\\\\[' + itemId + '\\\\]\\\\[(\\\\w+)\\\\](.*)';\r\n                        stPatternFlat = 'list_' + listType + '_' + stPatternFlat;\r\n                    }\r\n                    pattern         = new RegExp(stPattern);\r\n                    patternFlat     = new RegExp(stPatternFlat);\r\n                    replacement     = '$1$2';\r\n                    replacementFlat = '$1';\r\n                } else {\r\n                    return false;\r\n                }\r\n                var rename = function (elms) {\r\n                    for (var i = 0; i < elms.length; i++) {\r\n                        if (elms[i].name && elms[i].type == 'file') {\r\n                            var prefixName = 'options[files_prefix]',\r\n                                prefixValue = 'item_' + itemId + '_';\r\n\r\n                            self.blockFormFields.insert(new Element('input', {\r\n                                type: 'hidden',\r\n                                name: prefixName.replace(pattern, replacement),\r\n                                value: prefixValue.replace(patternPrefix, replacementPrefix)\r\n                            }));\r\n                            elms[i].name = elms[i].name.replace(patternFlat, replacementFlat);\r\n                        } else if (elms[i].name) {\r\n                            elms[i].name = elms[i].name.replace(pattern, replacement);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                rename(blockItem.getElementsByTagName('input'));\r\n                rename(blockItem.getElementsByTagName('select'));\r\n                rename(blockItem.getElementsByTagName('textarea'));\r\n            };\r\n\r\n            switch (method) {\r\n                case 'item_confirm':\r\n                    if (!$(this.confirmedCurrentId)) {\r\n                        this.blockConfirmed.insert(new Element('div', {\r\n                            id: this.confirmedCurrentId\r\n                        }));\r\n                    } else {\r\n                        $(this.confirmedCurrentId).update();\r\n                    }\r\n                    this.blockFormFields.childElements().each(function (elm) {\r\n                        $(this.confirmedCurrentId).insert(elm);\r\n                    }.bind(this));\r\n                    break;\r\n\r\n                case 'item_restore':\r\n                    this.blockFormFields.update();\r\n\r\n                    // clone confirmed to form\r\n                    var mageData = null;\r\n\r\n                    $(this.confirmedCurrentId).childElements().each(function (elm) {\r\n                        var cloned = elm.cloneNode(true);\r\n\r\n                        if (elm.mageData) {\r\n                            cloned.mageData = elm.mageData;\r\n                            mageData = elm.mageData;\r\n                        }\r\n                        this.blockFormFields.insert(cloned);\r\n                    }.bind(this));\r\n\r\n                    // get confirmed values\r\n                    var fieldsValue = {};\r\n                    var getConfirmedValues = function (elms) {\r\n                        for (var i = 0; i < elms.length; i++) {\r\n                            if (elms[i].name) {\r\n                                if ('undefined' == typeof fieldsValue[elms[i].name]) {\r\n                                    fieldsValue[elms[i].name] = {};\r\n                                }\r\n\r\n                                if (elms[i].type == 'checkbox') {\r\n                                    fieldsValue[elms[i].name][elms[i].value] = elms[i].checked;\r\n                                } else if (elms[i].type == 'radio') {\r\n                                    if (elms[i].checked) {\r\n                                        fieldsValue[elms[i].name] = elms[i].value;\r\n                                    }\r\n                                } else {\r\n                                    fieldsValue[elms[i].name] = Form.Element.getValue(elms[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('input'));\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('select'));\r\n                    getConfirmedValues($(this.confirmedCurrentId).getElementsByTagName('textarea'));\r\n\r\n                    // restore confirmed values\r\n                    var restoreConfirmedValues = function (elms) {\r\n                        for (var i = 0; i < elms.length; i++) {\r\n                            if ('undefined' != typeof fieldsValue[elms[i].name]) {\r\n                                if (elms[i].type != 'file') {\r\n                                    if (elms[i].type == 'checkbox') {\r\n                                        elms[i].checked = fieldsValue[elms[i].name][elms[i].value];\r\n                                    } else if (elms[i].type == 'radio') {\r\n                                        if (elms[i].value == fieldsValue[elms[i].name]) {\r\n                                            elms[i].checked = true;\r\n                                        }\r\n                                    } else {\r\n                                        elms[i].setValue(fieldsValue[elms[i].name]);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('input'));\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('select'));\r\n                    restoreConfirmedValues(this.blockFormFields.getElementsByTagName('textarea'));\r\n\r\n                    // Execute scripts\r\n                    if (mageData && mageData.scripts) {\r\n                        this.restorePhase = true;\r\n\r\n                        try {\r\n                            mageData.scripts.map(function (script) {\r\n                                return eval(script);\r\n                            });\r\n                        } catch (e) {\r\n\r\n                        }\r\n                        this.restorePhase = false;\r\n                    }\r\n                    break;\r\n\r\n                case 'current_confirmed_to_form':\r\n                    var allowedListTypes = {};\r\n\r\n                    allowedListTypes[this.current.listType] = true;\r\n                    var listInfo = this.listTypes[this.current.listType];\r\n\r\n                    if (listInfo.complexTypes) {\r\n                        for (var i = 0, len = listInfo.complexTypes.length; i < len; i++) {\r\n                            allowedListTypes[listInfo.complexTypes[i]] = true;\r\n                        }\r\n                    }\r\n\r\n                    this.blockFormConfirmed.update();\r\n                    this.blockConfirmed.childElements().each(function (blockItem) {\r\n                        var scopeArr    = blockItem.id.match(/.*\\[(\\w+)\\]\\[([^\\]]+)\\]$/);\r\n                        var listType    = scopeArr[1];\r\n                        var itemId    = scopeArr[2];\r\n\r\n                        if (allowedListTypes[listType] && (!this.itemsFilter[listType] ||\r\n                            this.itemsFilter[listType].indexOf(itemId) != -1)) {\r\n                            _renameFields(method, blockItem, listInfo.complexTypes ? listType : null);\r\n                            this.blockFormConfirmed.insert(blockItem);\r\n                        }\r\n                    }.bind(this));\r\n                    break;\r\n\r\n                case 'form_confirmed_to_confirmed':\r\n                    var listInfo = this.listTypes[this.current.listType];\r\n\r\n                    this.blockFormConfirmed.childElements().each(function (blockItem) {\r\n                        var scopeArr = blockItem.id.match(/.*\\[(\\w+)\\]\\[([^\\]]+)\\]$/);\r\n                        var listType = scopeArr[1];\r\n\r\n                        _renameFields(method, blockItem, listInfo.complexTypes ? listType : null);\r\n                        this.blockConfirmed.insert(blockItem);\r\n                    }.bind(this));\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if qty selected correctly\r\n         *\r\n         * @param object element\r\n         * @param object event\r\n         */\r\n        changeOptionQty: function (element, event) {\r\n            var checkQty = true;\r\n\r\n            if ('undefined' != typeof event) {\r\n                if (event.keyCode == 8 || event.keyCode == 46) {\r\n                    checkQty = false;\r\n                }\r\n            }\r\n\r\n            if (checkQty && (Number(element.value) <= 0 || isNaN(Number(element.value)))) {\r\n                element.value = 1;\r\n            }\r\n        }\r\n    };\r\n\r\n    productConfigure = new ProductConfigure();\r\n    jQuery(document).trigger('productConfigure:inited');\r\n    jQuery(document).data('productConfigureInited', true);\r\n});\r\n","Magento_Catalog/catalog/product/edit/attribute.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        $(element).mage('form').validation({\r\n            validationUrl: config.validationUrl\r\n        });\r\n    };\r\n});\r\n","Magento_Catalog/component/file-type-field.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if (value === 'file') {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/image-size-field.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/lib/validation/utils',\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'mage/translate'\r\n], function ($, utils, Abstract, validator) {\r\n    'use strict';\r\n\r\n    validator.addRule(\r\n        'validate-image-size-range',\r\n        function (value) {\r\n            var dataAttrRange = /^(\\d+)x(\\d+)$/,\r\n                m;\r\n\r\n            if (utils.isEmptyNoTrim(value)) {\r\n                return true;\r\n            }\r\n\r\n            m = dataAttrRange.exec(value);\r\n\r\n            return !!(m &&  m[1] > 0 && m[2] > 0);\r\n        },\r\n        $.mage.__('This value does not follow the specified format (for example, 200X300).')\r\n    );\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks for relevant value\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isRangeCorrect: function () {\r\n            return validator('validate-image-size-range', this.value()).passed;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/select-type-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['drop_down', 'radio', 'checkbox', 'multiple']) !== -1) {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-container.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/components/group'\r\n], function ($, Group) {\r\n    'use strict';\r\n\r\n    return Group.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['field', 'area', 'file', 'date', 'date_time', 'time']) !== -1) {\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (registry, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            parentOption: null\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .initLinkToParent();\r\n        },\r\n\r\n        /**\r\n         * Cache link to parent component - option holder.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initLinkToParent: function () {\r\n            var pathToParent = this.parentName.replace(/(\\.[^.]*){2}$/, '');\r\n\r\n            this.parentOption = registry.async(pathToParent);\r\n            this.value() && this.parentOption('label', this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * On value change handler.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onUpdate: function (value) {\r\n            this.parentOption(function (component) {\r\n                component.set('label', value ? value : component.get('headerLabel'));\r\n            });\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/static-type-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/element/select'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks is relevant value\r\n         *\r\n         * @param {String} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if (!value || $.inArray(value, ['drop_down', 'radio', 'checkbox', 'multiple']) !== -1) {\r\n                this.reset();\r\n                this.disabled(true);\r\n\r\n                return false;\r\n            }\r\n\r\n            this.disabled(false);\r\n\r\n            return true;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/component/text-type-field.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Checks for relevant value\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isRelevant: function (value) {\r\n            if ($.inArray(value, ['field', 'area']) !== -1) {\r\n                this.disabled(false);\r\n                this.visible(true);\r\n\r\n                return true;\r\n            }\r\n\r\n            this.reset();\r\n            this.disabled(true);\r\n            this.visible(false);\r\n\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/bundle-proxy-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Button, registry, _) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            currentRecordNamespace: 'bundle_current_record',\r\n            listingDataProvider: '',\r\n            value: [],\r\n            imports: {\r\n                currentRecordName: '${ $.provider }:${ $.currentRecordNamespace }',\r\n                listingData: '${ $.provider }:${ $.listingDataProvider }'\r\n            },\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScope }'\r\n            },\r\n            listens: {\r\n                listingData: 'setListingData'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSource();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'value',\r\n                    'listingData'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'destroy' of parent and\r\n         * clear listing provider source\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        destroy: function () {\r\n            this._super();\r\n            this.source.set(this.listingDataProvider, []);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Call parent \"action\" method\r\n         * and set new data to record and listing.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n\r\n        action: function () {\r\n            this._super();\r\n            this.source.set(this.currentRecordNamespace, this.name);\r\n            this.source.set(this.listingDataProvider, this.value());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init current source.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initSource: function () {\r\n            if (!_.isFunction(this.source)) {\r\n                this.source = registry.get(this.provider);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set data to listing source.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setListingData: function (data) {\r\n            if (this.name === this.currentRecordName) {\r\n                this.source.set(this.dataScope, data);\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/category-checkbox-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Ext, varienWindowOnload, varienElementMethods */\r\n\r\ndefine([\r\n    'jquery',\r\n    'prototype',\r\n    'extjs/ext-tree-checkbox',\r\n    'mage/adminhtml/form'\r\n], function (jQuery) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var tree,\r\n            options = {\r\n                dataUrl: config.dataUrl,\r\n                divId: config.divId,\r\n                rootVisible: config.rootVisible,\r\n                useAjax: config.useAjax,\r\n                currentNodeId: config.currentNodeId,\r\n                jsFormObject: window[config.jsFormObject],\r\n                name: config.name,\r\n                checked: config.checked,\r\n                allowDrop: config.allowDrop,\r\n                rootId: config.rootId,\r\n                expanded: config.expanded,\r\n                categoryId: config.categoryId,\r\n                treeJson: config.treeJson\r\n            },\r\n            data = {},\r\n            parameters = {},\r\n            root = {},\r\n            key = '';\r\n\r\n        /**\r\n         * Fix ext compatibility with prototype 1.6\r\n         */\r\n        Ext.lib.Event.getTarget = function (e) {\r\n            var ee = e.browserEvent || e;\r\n\r\n            return ee.target ? Event.element(ee) : null;\r\n        };\r\n\r\n        /**\r\n         * @param {Object} el\r\n         * @param {Object} nodeConfig\r\n         */\r\n        Ext.tree.TreePanel.Enhanced = function (el, nodeConfig) {\r\n            Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, nodeConfig);\r\n        };\r\n\r\n        Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {\r\n            /**\r\n             * @param {Object} treeConfig\r\n             * @param {Boolean} firstLoad\r\n             */\r\n            loadTree: function (treeConfig, firstLoad) {\r\n                parameters = treeConfig.parameters,\r\n                    data = treeConfig.data,\r\n                    root = new Ext.tree.TreeNode(parameters);\r\n\r\n                if (typeof parameters.rootVisible !== 'undefined') {\r\n                    this.rootVisible = parameters.rootVisible * 1;\r\n                }\r\n\r\n                this.nodeHash = {};\r\n                this.setRootNode(root);\r\n\r\n                if (firstLoad) {\r\n                    this.addListener('click', this.categoryClick.createDelegate(this));\r\n                }\r\n\r\n                this.loader.buildCategoryTree(root, data);\r\n                this.el.dom.innerHTML = '';\r\n                // render the tree\r\n                this.render();\r\n            },\r\n\r\n            /**\r\n             * @param {Object} node\r\n             */\r\n            categoryClick: function (node) {\r\n                node.getUI().check(!node.getUI().checked());\r\n            }\r\n        });\r\n\r\n        jQuery(function () {\r\n            var categoryLoader = new Ext.tree.TreeLoader({\r\n                dataUrl: config.dataUrl\r\n            });\r\n\r\n            /**\r\n             * @param {Object} response\r\n             * @param {Object} parent\r\n             * @param {Function} callback\r\n             */\r\n            categoryLoader.processResponse = function (response, parent, callback) {\r\n                config = JSON.parse(response.responseText);\r\n\r\n                this.buildCategoryTree(parent, config);\r\n\r\n                if (typeof callback === 'function') {\r\n                    callback(this, parent);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @param {Object} nodeConfig\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.createNode = function (nodeConfig) {\r\n                var node;\r\n\r\n                nodeConfig.uiProvider = Ext.tree.CheckboxNodeUI;\r\n\r\n                if (nodeConfig.children && !nodeConfig.children.length) {\r\n                    delete nodeConfig.children;\r\n                    node = new Ext.tree.AsyncTreeNode(nodeConfig);\r\n                } else {\r\n                    node = new Ext.tree.TreeNode(nodeConfig);\r\n                }\r\n\r\n                return node;\r\n            };\r\n\r\n            /**\r\n             * @param {Object} parent\r\n             * @param {Object} nodeConfig\r\n             * @param {Integer} i\r\n             */\r\n            categoryLoader.processCategoryTree = function (parent, nodeConfig, i) {\r\n                var node,\r\n                    _node = {};\r\n\r\n                nodeConfig[i].uiProvider = Ext.tree.CheckboxNodeUI;\r\n\r\n                _node = Object.clone(nodeConfig[i]);\r\n\r\n                if (_node.children && !_node.children.length) {\r\n                    delete _node.children;\r\n                    node = new Ext.tree.AsyncTreeNode(_node);\r\n                } else {\r\n                    node = new Ext.tree.TreeNode(nodeConfig[i]);\r\n                }\r\n                parent.appendChild(node);\r\n                node.loader = node.getOwnerTree().loader;\r\n\r\n                if (_node.children) {\r\n                    categoryLoader.buildCategoryTree(node, _node.children);\r\n                }\r\n            };\r\n\r\n            /**\r\n             * @param {Object} parent\r\n             * @param {Object} nodeConfig\r\n             * @returns {void}\r\n             */\r\n            categoryLoader.buildCategoryTree = function (parent, nodeConfig) {\r\n                var i = 0;\r\n\r\n                if (!nodeConfig) {\r\n                    return null;\r\n                }\r\n\r\n                if (parent && nodeConfig && nodeConfig.length) {\r\n                    for (i; i < nodeConfig.length; i++) {\r\n                        categoryLoader.processCategoryTree(parent, nodeConfig, i);\r\n                    }\r\n                }\r\n            };\r\n\r\n            /**\r\n             *\r\n             * @param {Object} hash\r\n             * @param {Object} node\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.buildHashChildren = function (hash, node) {\r\n                var i = 0,\r\n                    len;\r\n\r\n                if (node.childNodes.length > 0 || node.loaded === false && node.loading === false) {\r\n                    hash.children = [];\r\n\r\n                    for (i, len = node.childNodes.length; i < len; i++) {\r\n                        hash.children = hash.children ? hash.children : [];\r\n                        hash.children.push(this.buildHash(node.childNodes[i]));\r\n                    }\r\n                }\r\n\r\n                return hash;\r\n            };\r\n\r\n            /**\r\n             * @param {Object} node\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.buildHash = function (node) {\r\n                var hash = {};\r\n\r\n                hash = this.toArray(node.attributes);\r\n\r\n                return categoryLoader.buildHashChildren(hash, node);\r\n            };\r\n\r\n            /**\r\n             * @param {Object} attributes\r\n             * @returns {Object}\r\n             */\r\n            categoryLoader.toArray = function (attributes) {\r\n                data = {};\r\n\r\n                for (key in attributes) {\r\n\r\n                    if (attributes[key]) {\r\n                        data[key] = attributes[key];\r\n                    }\r\n                }\r\n\r\n                return data;\r\n            };\r\n\r\n            categoryLoader.on('beforeload', function (treeLoader, node) {\r\n                treeLoader.baseParams.id = node.attributes.id;\r\n                treeLoader.baseParams.selected = options.jsFormObject.updateElement.value;\r\n            });\r\n\r\n            categoryLoader.on('load', function () {\r\n                varienWindowOnload();\r\n            });\r\n\r\n            tree = new Ext.tree.TreePanel.Enhanced(options.divId, {\r\n                animate: false,\r\n                loader: categoryLoader,\r\n                enableDD: false,\r\n                containerScroll: true,\r\n                selModel: new Ext.tree.CheckNodeMultiSelectionModel(),\r\n                rootVisible: options.rootVisible,\r\n                useAjax: options.useAjax,\r\n                currentNodeId: options.currentNodeId,\r\n                addNodeTo: false,\r\n                rootUIProvider: Ext.tree.CheckboxNodeUI\r\n            });\r\n\r\n            tree.on('check', function (node) {\r\n                options.jsFormObject.updateElement.value = this.getChecked().join(', ');\r\n                varienElementMethods.setHasChanges(node.getUI().checkbox);\r\n            }, tree);\r\n\r\n            // set the root node\r\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            parameters = {\r\n                text: options.name,\r\n                draggable: false,\r\n                checked: options.checked,\r\n                uiProvider: Ext.tree.CheckboxNodeUI,\r\n                allowDrop: options.allowDrop,\r\n                id: options.rootId,\r\n                expanded: options.expanded,\r\n                category_id: options.categoryId\r\n            };\r\n            //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n\r\n            tree.loadTree({\r\n                parameters: parameters, data: options.treeJson\r\n            }, true);\r\n        });\r\n    };\r\n});\r\n","Magento_Catalog/js/category-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mageUtils',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    $.widget('mage.categoryTree', {\r\n        options: {\r\n            url: '',\r\n            data: [],\r\n            tree: {\r\n                core: {\r\n                    themes: {\r\n                        dots: false\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var options = this.options,\r\n                treeOptions = $.extend(\r\n                    true,\r\n                    {},\r\n                    options.tree,\r\n                    {\r\n                        core: {\r\n                            data: this._convertData(this.options.data).children\r\n                        }\r\n                    }\r\n                );\r\n\r\n            this.element.jstree(treeOptions);\r\n            this.element.on('select_node.jstree', $.proxy(this._selectNode, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _selectNode: function (event, data) {\r\n            var node = data.node;\r\n\r\n            if (!node.state.disabled) {\r\n                window.location = window.location + '/' + node.id;\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} nodes\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _convertDataNodes: function (nodes) {\r\n            var nodesData = [];\r\n\r\n            nodes.children.forEach(function (node) {\r\n                nodesData.push(this._convertData(node));\r\n            }, this);\r\n\r\n            return nodesData;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} node\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _convertData: function (node) {\r\n            var self = this,\r\n                result;\r\n\r\n            if (!node) {\r\n                return result;\r\n            }\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            result = {\r\n                id: node.id,\r\n                text: utils.unescape(node.name) + ' (' + node.product_count + ')',\r\n                li_attr: {\r\n                    class: node.cls + (!!node.disabled ? ' disabled' : '') //eslint-disable-line no-extra-boolean-cast\r\n                },\r\n                state: {\r\n                    disabled: node.disabled,\r\n                    opened:  !!node.children_count && node.expanded\r\n                }\r\n            };\r\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (node.children) {\r\n                result.children = [];\r\n                $.each(node.children, function () {\r\n                    result.children.push(self._convertData(this));\r\n                });\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return $.mage.categoryTree;\r\n});\r\n","Magento_Catalog/js/custom-options-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function ($, _, registry, UiSelect) {\r\n    'use strict';\r\n\r\n    return UiSelect.extend({\r\n        defaults: {\r\n            previousGroup: null,\r\n            groupsConfig: {},\r\n            valuesMap: {},\r\n            indexesMap: {},\r\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .initMapping()\r\n                .updateComponents(this.initialValue, true);\r\n        },\r\n\r\n        /**\r\n         * Create additional mappings.\r\n         *\r\n         * @returns {Element}\r\n         */\r\n        initMapping: function () {\r\n            _.each(this.groupsConfig, function (groupData, group) {\r\n                _.each(groupData.values, function (value) {\r\n                    this.valuesMap[value] = group;\r\n                }, this);\r\n\r\n                _.each(groupData.indexes, function (index) {\r\n                    if (!this.indexesMap[index]) {\r\n                        this.indexesMap[index] = [];\r\n                    }\r\n\r\n                    this.indexesMap[index].push(group);\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         *\r\n         * @param {String} currentValue\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function (currentValue) {\r\n            this.updateComponents(currentValue);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Show, hide or clear components based on the current type value.\r\n         *\r\n         * @param {String} currentValue\r\n         * @param {Boolean} isInitialization\r\n         * @returns {Element}\r\n         */\r\n        updateComponents: function (currentValue, isInitialization) {\r\n            var currentGroup = this.valuesMap[currentValue];\r\n\r\n            if (currentGroup !== this.previousGroup) {\r\n                _.each(this.indexesMap, function (groups, index) {\r\n                    var template = this.filterPlaceholder + ', index = ' + index,\r\n                        visible = groups.indexOf(currentGroup) !== -1,\r\n                        component;\r\n\r\n                    switch (index) {\r\n                        case 'container_type_static':\r\n                        case 'values':\r\n                            template = 'ns=' + this.ns +\r\n                                ', dataScope=' + this.parentScope +\r\n                                ', index=' + index;\r\n                            break;\r\n                    }\r\n\r\n                    /*eslint-disable max-depth */\r\n                    if (isInitialization) {\r\n                        registry.async(template)(\r\n                            function (currentComponent) {\r\n                                currentComponent.visible(visible);\r\n                            }\r\n                        );\r\n                    } else {\r\n                        component = registry.get(template);\r\n\r\n                        if (component) {\r\n                            component.visible(visible);\r\n                        }\r\n                    }\r\n                }, this);\r\n\r\n                this.previousGroup = currentGroup;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/custom-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'useDefault',\r\n    'collapsable',\r\n    'mage/translate',\r\n    'mage/backend/validation',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.customOptions', {\r\n        options: {\r\n            selectionItemCount: {}\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.baseTmpl = mageTemplate('#custom-option-base-template');\r\n            this.rowTmpl = mageTemplate('#custom-option-select-type-row-template');\r\n\r\n            this._initOptionBoxes();\r\n            this._initSortableSelections();\r\n            this._bindCheckboxHandlers();\r\n            this._bindReadOnlyMode();\r\n            this._addValidation();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _addValidation: function () {\r\n            $.validator.addMethod(\r\n                'required-option-select', function (value) {\r\n                    return value !== '';\r\n                }, $.mage.__('Select type of option.'));\r\n\r\n            $.validator.addMethod(\r\n                'required-option-select-type-rows', function (value, element) {\r\n                    var optionContainerElm = element.up('div[id*=_type_]'),\r\n                        selectTypesFlag = false,\r\n                        selectTypeElements = $('#' + optionContainerElm.id + ' .select-type-title');\r\n\r\n                    selectTypeElements.each(function () {\r\n                        if (!$(this).closest('tr').hasClass('ignore-validate')) {\r\n                            selectTypesFlag = true;\r\n                        }\r\n                    });\r\n\r\n                    return selectTypesFlag;\r\n                }, $.mage.__('Please add rows to option.'));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initOptionBoxes: function () {\r\n            var syncOptionTitle;\r\n\r\n            if (!this.options.isReadonly) {\r\n                this.element.sortable({\r\n                    axis: 'y',\r\n                    handle: '[data-role=draggable-handle]',\r\n                    items: '#product_options_container_top > div',\r\n                    update: this._updateOptionBoxPositions,\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            syncOptionTitle = function (event) {\r\n                var currentValue = $(event.target).val(),\r\n                    optionBoxTitle = $(\r\n                        '.admin__collapsible-title > span',\r\n                        $(event.target).closest('.fieldset-wrapper')\r\n                    ),\r\n                    newOptionTitle = $.mage.__('New Option');\r\n\r\n                optionBoxTitle.text(currentValue === '' ? newOptionTitle : currentValue);\r\n            };\r\n            this._on({\r\n                /**\r\n                 * Reset field value to Default\r\n                 */\r\n                'click .use-default-label': function (event) {\r\n                    $(event.target).closest('label').find('input').prop('checked', true).trigger('change');\r\n                },\r\n\r\n                /**\r\n                 * Remove custom option or option row for 'select' type of custom option\r\n                 */\r\n                'click button[id^=product_option_][id$=_delete]': function (event) {\r\n                    var element = $(event.target).closest('#product_options_container_top > div.fieldset-wrapper,tr');\r\n\r\n                    if (element.length) {\r\n                        $('#product_' + element.attr('id').replace('product_', '') + '_is_delete').val(1);\r\n                        element.addClass('ignore-validate').hide();\r\n                        this.refreshSortableElements();\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Minimize custom option block\r\n                 */\r\n                'click #product_options_container_top [data-target$=-content]': function () {\r\n                    if (this.options.isReadonly) {\r\n                        return false;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add new custom option\r\n                 */\r\n                'click #add_new_defined_option': function (event) {\r\n                    this.addOption(event);\r\n                },\r\n\r\n                /**\r\n                 * Add new option row for 'select' type of custom option\r\n                 */\r\n                'click button[id^=product_option_][id$=_add_select_row]': function (event) {\r\n                    this.addSelection(event);\r\n                },\r\n\r\n                /**\r\n                 * Import custom options from products\r\n                 */\r\n                'click #import_new_defined_option': function () {\r\n                    var importContainer = $('#import-container'),\r\n                        widget = this;\r\n\r\n                    importContainer.modal({\r\n                        title: $.mage.__('Select Product'),\r\n                        type: 'slide',\r\n\r\n                        /** @inheritdoc */\r\n                        opened: function () {\r\n                            $(document).off().on('click', '#productGrid_massaction-form button', function () {\r\n                                $('.import-custom-options-apply-button').trigger('click', 'massActionTrigger');\r\n                            });\r\n                        },\r\n                        buttons: [{\r\n                            text: $.mage.__('Import'),\r\n                            attr: {\r\n                                id: 'import-custom-options-apply-button'\r\n                            },\r\n                            'class': 'action-primary action-import import-custom-options-apply-button',\r\n\r\n                            /** @inheritdoc */\r\n                            click: function (event, massActionTrigger) {\r\n                                var request = [];\r\n\r\n                                $(this.element).find('input[name=product]:checked').map(function () {\r\n                                    request.push(this.value);\r\n                                });\r\n\r\n                                if (request.length === 0) {\r\n                                    if (!massActionTrigger) {\r\n                                        alert({\r\n                                            content: $.mage.__('An item needs to be selected. Select and try again.')\r\n                                        });\r\n                                    }\r\n\r\n                                    return;\r\n                                }\r\n\r\n                                $.post(widget.options.customOptionsUrl, {\r\n                                    'products[]': request,\r\n                                    'form_key': widget.options.formKey\r\n                                }, function ($data) {\r\n                                    $.each(JSON.parse($data), function (el) {\r\n                                        var i;\r\n\r\n                                        el.id = widget.getFreeOptionId(el.id);\r\n                                        el['option_id'] = el.id;\r\n\r\n                                        if (typeof el.optionValues !== 'undefined') {\r\n                                            for (i = 0; i < el.optionValues.length; i++) {\r\n                                                el.optionValues[i]['option_id'] = el.id;\r\n                                            }\r\n                                        }\r\n                                        //Adding option\r\n                                        widget.addOption(el);\r\n                                        //Will save new option on server side\r\n                                        $('#product_option_' + el.id + '_option_id').val(0);\r\n                                        $('#option_' + el.id + ' input[name$=\"option_type_id]\"]').val(-1);\r\n                                    });\r\n                                    importContainer.modal('closeModal');\r\n                                });\r\n                            }\r\n                        }]\r\n                    });\r\n                    importContainer.load(\r\n                        this.options.productGridUrl,\r\n                        {\r\n                            'form_key': this.options.formKey,\r\n                            'current_product_id': this.options.currentProductId\r\n                        },\r\n                        function () {\r\n                            importContainer.modal('openModal');\r\n                        }\r\n                    );\r\n                },\r\n\r\n                /**\r\n                 * Change custom option type\r\n                 */\r\n                'change select[id^=product_option_][id$=_type]': function (event, data) {\r\n                    var widget = this,\r\n                        currentElement = $(event.target),\r\n                        parentId = '#' + currentElement.closest('.fieldset-alt').attr('id'),\r\n                        group = currentElement.find('[value=\"' + currentElement.val() + '\"]')\r\n                            .closest('optgroup').attr('data-optgroup-name'),\r\n                        previousGroup = $(parentId + '_previous_group').val(),\r\n                        previousBlock = $(parentId + '_type_' + previousGroup),\r\n                        tmpl, disabledBlock, priceType;\r\n\r\n                    data = data || {};\r\n\r\n                    if (typeof group !== 'undefined') {\r\n                        group = group.toLowerCase();\r\n                    }\r\n\r\n                    if (previousGroup !== group) {\r\n                        if (previousBlock.length) {\r\n                            previousBlock.addClass('ignore-validate').hide();\r\n                        }\r\n                        $(parentId + '_previous_group').val(group);\r\n\r\n                        if (typeof group === 'undefined') {\r\n                            return;\r\n                        }\r\n                        disabledBlock = $(parentId).find(parentId + '_type_' + group);\r\n\r\n                        if (disabledBlock.length) {\r\n                            disabledBlock.removeClass('ignore-validate').show();\r\n                        } else {\r\n                            if ($.isEmptyObject(data)) { //eslint-disable-line max-depth\r\n                                data['option_id'] = $(parentId + '_id').val();\r\n                                data.price = data.sku = '';\r\n                            }\r\n                            data.group = group;\r\n\r\n                            tmpl = widget.element.find('#custom-option-' + group + '-type-template').html();\r\n                            tmpl = mageTemplate(tmpl, {\r\n                                data: data\r\n                            });\r\n\r\n                            $(tmpl).insertAfter($(parentId));\r\n\r\n                            if (data['price_type']) { //eslint-disable-line max-depth\r\n                                priceType = $('#' + widget.options.fieldId + '_' + data['option_id'] + '_price_type');\r\n                                priceType.val(data['price_type']).attr('data-store-label', data['price_type']);\r\n                            }\r\n                            this._bindUseDefault(widget.options.fieldId + '_' + data['option_id'], data);\r\n                            //Add selections\r\n\r\n                            if (data.optionValues) { //eslint-disable-line max-depth\r\n                                data.optionValues.each(function (value) {\r\n                                    widget.addSelection(value);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                //Sync title\r\n                'change .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle,\r\n                'keyup .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle,\r\n                'paste .field-option-title > .control > input[id$=\"_title\"]': syncOptionTitle\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initSortableSelections: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.find('[id^=product_option_][id$=_type_select] tbody').sortable({\r\n                    axis: 'y',\r\n                    handle: '[data-role=draggable-handle]',\r\n\r\n                    /** @inheritdoc */\r\n                    helper: function (event, ui) {\r\n                        ui.children().each(function () {\r\n                            $(this).width($(this).width());\r\n                        });\r\n\r\n                        return ui;\r\n                    },\r\n                    update: this._updateSelectionsPositions,\r\n                    tolerance: 'pointer'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sync sort order checkbox with hidden dropdown\r\n         */\r\n        _bindCheckboxHandlers: function () {\r\n            this._on({\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'change [id^=product_option_][id$=_required]': function (event) {\r\n                    var $this = $(event.target);\r\n\r\n                    $this.closest('#product_options_container_top > div')\r\n                        .find('[name$=\"[is_require]\"]').val($this.is(':checked') ? 1 : 0);\r\n                }\r\n            });\r\n            this.element.find('[id^=product_option_][id$=_required]').each(function () {\r\n                $(this).prop('checked', $(this).closest('#product_options_container_top > div')\r\n                        .find('[name$=\"[is_require]\"]').val() > 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Update Custom option position\r\n         */\r\n        _updateOptionBoxPositions: function () {\r\n            $(this).find('div[id^=option_]:not(.ignore-validate) .fieldset-alt > [name$=\"[sort_order]\"]').each(\r\n                function (index) {\r\n                    $(this).val(index);\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Update selections positions for 'select' type of custom option\r\n         */\r\n        _updateSelectionsPositions: function () {\r\n            $(this).find('tr:not(.ignore-validate) [name$=\"[sort_order]\"]').each(function (index) {\r\n                $(this).val(index);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Disable input data if \"Read Only\"\r\n         */\r\n        _bindReadOnlyMode: function () {\r\n            if (this.options.isReadonly) {\r\n                $('div.product-custom-options').find('button,input,select,textarea').each(function () {\r\n                    $(this).prop('disabled', true);\r\n\r\n                    if ($(this).is('button')) {\r\n                        $(this).addClass('disabled');\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _bindUseDefault: function (id, data) {\r\n            var title = $('#' + id + '_title'),\r\n                price = $('#' + id + '_price'),\r\n                priceType = $('#' + id + '_price_type');\r\n\r\n            //enable 'use default' link for title\r\n            if (data.checkboxScopeTitle) {\r\n                title.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_title]',\r\n                    checkbox: 'input[id$=_title_use_default]',\r\n                    label: 'span'\r\n                });\r\n            }\r\n            //enable 'use default' link for price and price_type\r\n            if (data.checkboxScopePrice) {\r\n                price.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_price]',\r\n                    checkbox: 'input[id$=_price_use_default]',\r\n                    label: 'span'\r\n                });\r\n                //not work set default value for second field\r\n                priceType.useDefault({\r\n                    field: '.field',\r\n                    useDefault: 'label[for$=_price]',\r\n                    checkbox: 'input[id$=_price_use_default]',\r\n                    label: 'span'\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add selection value for 'select' type of custom option\r\n         */\r\n        addSelection: function (event) {\r\n            var data = {},\r\n                element = event.target || event.srcElement || event.currentTarget,\r\n                rowTmpl, priceType;\r\n\r\n            if (typeof element !== 'undefined') {\r\n                data.id = $(element).closest('#product_options_container_top > div')\r\n                    .find('[name^=\"product[options]\"][name$=\"[id]\"]').val();\r\n                data['option_type_id'] = -1;\r\n\r\n                if (!this.options.selectionItemCount[data.id]) {\r\n                    this.options.selectionItemCount[data.id] = 1;\r\n                }\r\n\r\n                data['select_id'] = this.options.selectionItemCount[data.id];\r\n                data.price = data.sku = '';\r\n            } else {\r\n                data = event;\r\n                data.id = data['option_id'];\r\n                data['select_id'] = data['option_type_id'];\r\n                this.options.selectionItemCount[data.id] = data['item_count'];\r\n            }\r\n\r\n            rowTmpl = this.rowTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(rowTmpl).appendTo($('#select_option_type_row_' + data.id));\r\n\r\n            //set selected price_type value if set\r\n            if (data['price_type']) {\r\n                priceType = $('#' + this.options.fieldId + '_' + data.id + '_select_' + data['select_id'] +\r\n                    '_price_type');\r\n                priceType.val(data['price_type']).attr('data-store-label', data['price_type']);\r\n            }\r\n\r\n            this._bindUseDefault(this.options.fieldId + '_' + data.id + '_select_' + data['select_id'], data);\r\n            this.refreshSortableElements();\r\n            this.options.selectionItemCount[data.id] = parseInt(this.options.selectionItemCount[data.id], 10) + 1;\r\n\r\n            $('#' + this.options.fieldId + '_' + data.id + '_select_' + data['select_id'] + '_title').trigger('focus');\r\n        },\r\n\r\n        /**\r\n         * Add custom option\r\n         */\r\n        addOption: function (event) {\r\n            var data = {},\r\n                element = event.target || event.srcElement || event.currentTarget,\r\n                baseTmpl;\r\n\r\n            if (typeof element !== 'undefined') {\r\n                data.id = this.options.itemCount;\r\n                data.type = '';\r\n                data['option_id'] = 0;\r\n            } else {\r\n                data = event;\r\n                this.options.itemCount = data['item_count'];\r\n            }\r\n\r\n            baseTmpl = this.baseTmpl({\r\n                data: data\r\n            });\r\n\r\n            $(baseTmpl)\r\n                .appendTo(this.element.find('#product_options_container_top'))\r\n                .find('.collapse').collapsable();\r\n\r\n            //set selected type value if set\r\n            if (data.type) {\r\n                $('#' + this.options.fieldId + '_' + data.id + '_type').val(data.type).trigger('change', data);\r\n            }\r\n\r\n            //set selected is_require value if set\r\n            if (data['is_require']) {\r\n                $('#' + this.options.fieldId + '_' + data.id + '_is_require').val(data['is_require']).trigger('change');\r\n            }\r\n\r\n            this.refreshSortableElements();\r\n            this._bindCheckboxHandlers();\r\n            this._bindReadOnlyMode();\r\n            this.options.itemCount++;\r\n            $('#' + this.options.fieldId + '_' + data.id + '_title').trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         */\r\n        refreshSortableElements: function () {\r\n            if (!this.options.isReadonly) {\r\n                this.element.sortable('refresh');\r\n                this._updateOptionBoxPositions.apply(this.element);\r\n                this._updateSelectionsPositions.apply(this.element);\r\n                this._initSortableSelections();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {String} id\r\n         * @return {*}\r\n         */\r\n        getFreeOptionId: function (id) {\r\n            return $('#' + this.options.fieldId + '_' + id).length ? this.getFreeOptionId(parseInt(id, 10) + 1) : id;\r\n        }\r\n    });\r\n\r\n});\r\n","Magento_Catalog/js/edit-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n// jscs:disable jsDoc\r\n\r\nrequire([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'loadingPopup',\r\n    'mage/backend/floating-header'\r\n], function (jQuery, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Delete some category\r\n     * This routine get categoryId explicitly, so even if currently selected tree node is out of sync\r\n     * with this form, we surely delete same category in the tree and at backend.\r\n     *\r\n     * @deprecated\r\n     * @see deleteConfirm\r\n     */\r\n    function categoryDelete(url) {\r\n        confirm({\r\n            content: 'Are you sure you want to delete this category?',\r\n            actions: {\r\n                confirm: function () {\r\n                    location.href = url;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function displayLoadingMask() {\r\n        jQuery('body').loadingPopup();\r\n    }\r\n\r\n    window.categoryDelete = categoryDelete;\r\n    window.displayLoadingMask = displayLoadingMask;\r\n});\r\n","Magento_Catalog/js/new-category-dialog.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\n/*global FORM_KEY*/\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/backend/tree-suggest',\r\n    'mage/backend/validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /** Clear parent category. */\r\n    var clearParentCategory = function () {\r\n        $('#new_category_parent').find('option').each(function () {\r\n            $('#new_category_parent-suggest').treeSuggest('removeOption', null, this);\r\n        });\r\n    };\r\n\r\n    $.widget('mage.newCategoryDialog', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var widget = this,\r\n                newCategoryForm;\r\n\r\n            $('#new_category_parent').before($('<input>', {\r\n                id: 'new_category_parent-suggest',\r\n                placeholder: $.mage.__('start typing to search category')\r\n            }));\r\n\r\n            $('#new_category_parent-suggest').treeSuggest(this.options.suggestOptions)\r\n                .on('suggestbeforeselect', function (event) {\r\n                    clearParentCategory();\r\n                    $(event.target).treeSuggest('close');\r\n                });\r\n\r\n            $.validator.addMethod('validate-parent-category', function () {\r\n                return $('#new_category_parent').val() || $('#new_category_parent-suggest').val() === '';\r\n            }, $.mage.__('Choose existing category.'));\r\n            newCategoryForm = $('#new_category_form');\r\n            newCategoryForm.mage('validation', {\r\n                /**\r\n                 * @param {jQuery} error\r\n                 * @param {*} element\r\n                 */\r\n                errorPlacement: function (error, element) {\r\n                    error.insertAfter(element.is('#new_category_parent') ?\r\n                        $('#new_category_parent-suggest').closest('.mage-suggest') :\r\n                        element);\r\n                }\r\n            }).on('highlight.validate', function (e) {\r\n                var options = $(this).validation('option');\r\n\r\n                if ($(e.target).is('#new_category_parent')) {\r\n                    options.highlight($('#new_category_parent-suggest').get(0),\r\n                        options.errorClass, options.validClass || '');\r\n                }\r\n            });\r\n            this.element.modal({\r\n                type: 'slide',\r\n                modalClass: 'mage-new-category-dialog form-inline',\r\n                title: $.mage.__('Create Category'),\r\n\r\n                /** @inheritdoc */\r\n                opened: function () {\r\n                    var enteredName = $('#category_ids-suggest').val();\r\n\r\n                    $('#new_category_name').val(enteredName);\r\n\r\n                    if (enteredName === '') {\r\n                        $('#new_category_name').trigger('focus');\r\n                    }\r\n                    $('#new_category_messages').html('');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                closed: function () {\r\n                    var validationOptions = newCategoryForm.validation('option');\r\n\r\n                    $('#new_category_name, #new_category_parent-suggest').val('');\r\n                    validationOptions.unhighlight($('#new_category_parent-suggest').get(0),\r\n                        validationOptions.errorClass, validationOptions.validClass || '');\r\n                    newCategoryForm.validation('clearError');\r\n                    $('#category_ids-suggest').trigger('focus');\r\n                },\r\n                buttons: [{\r\n                    text: $.mage.__('Create Category'),\r\n                    class: 'action-primary',\r\n\r\n                    /** @inheritdoc */\r\n                    click: function (e) {\r\n                        var thisButton;\r\n\r\n                        if (!newCategoryForm.valid()) {\r\n                            return;\r\n                        }\r\n                        thisButton = $(e.currentTarget);\r\n\r\n                        thisButton.prop('disabled', true);\r\n                        $.ajax({\r\n                            type: 'POST',\r\n                            url: widget.options.saveCategoryUrl,\r\n                            data: {\r\n                                name: $('#new_category_name').val(),\r\n                                parent: $('#new_category_parent').val(),\r\n                                'is_active': 1,\r\n                                'include_in_menu': 1,\r\n                                'use_config': ['available_sort_by', 'default_sort_by'],\r\n                                'form_key': FORM_KEY,\r\n                                'return_session_messages_only': 1\r\n                            },\r\n                            dataType: 'json',\r\n                            context: $('body')\r\n                        }).done(function (data) {\r\n                            var $suggest;\r\n\r\n                            if (!data.error) {\r\n                                $suggest = $('#category_ids-suggest');\r\n\r\n                                $suggest.trigger('selectItem', {\r\n                                    id: data.category['entity_id'],\r\n                                    label: data.category.name\r\n                                });\r\n                                $('#new_category_name, #new_category_parent-suggest').val('');\r\n                                $suggest.val('');\r\n                                clearParentCategory();\r\n                                $(widget.element).modal('closeModal');\r\n                            } else {\r\n                                $('#new_category_messages').html(data.messages);\r\n                            }\r\n                        }).always(\r\n                            function () {\r\n                                thisButton.prop('disabled', false);\r\n                            }\r\n                        );\r\n                    }\r\n                }]\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.newCategoryDialog;\r\n});\r\n","Magento_Catalog/js/options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-undef */\r\n// jscs:disable jsDoc\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'prototype',\r\n    'form',\r\n    'validation',\r\n    'mage/translate'\r\n], function (jQuery, mageTemplate, rg) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        var optionPanel = jQuery('#manage-options-panel'),\r\n            editForm = jQuery('#edit_form'),\r\n            attributeOption = {\r\n                table: $('attribute-options-table'),\r\n                itemCount: 0,\r\n                totalItems: 0,\r\n                rendered: 0,\r\n                template: mageTemplate('#row-template'),\r\n                newOptionClass: 'new-option',\r\n                isReadOnly: config.isReadOnly,\r\n                add: function (data, render) {\r\n                    var isNewOption = false,\r\n                        element;\r\n\r\n                    if (typeof data.id == 'undefined') {\r\n                        data = {\r\n                            'id': 'option_' + this.itemCount,\r\n                            'sort_order': this.itemCount + 1,\r\n                            'rowClasses': this.newOptionClass\r\n                        };\r\n                        isNewOption = true;\r\n                    }\r\n\r\n                    if (!data.intype) {\r\n                        data.intype = this.getOptionInputType();\r\n                    }\r\n\r\n                    element = this.template({\r\n                        data: data\r\n                    });\r\n\r\n                    if (isNewOption && !this.isReadOnly) {\r\n                        this.enableNewOptionDeleteButton(data.id);\r\n                    }\r\n                    this.itemCount++;\r\n                    this.totalItems++;\r\n                    this.elements += element;\r\n\r\n                    if (render) {\r\n                        this.render();\r\n                        this.updateItemsCountField();\r\n                    }\r\n                },\r\n                remove: function (event) {\r\n                    var element = $(Event.findElement(event, 'tr')),\r\n                        elementFlags; // !!! Button already have table parent in safari\r\n\r\n                    // Safari workaround\r\n                    element.ancestors().each(function (parentItem) {\r\n                        if (parentItem.hasClassName('option-row')) {\r\n                            element = parentItem;\r\n                            throw $break;\r\n                        } else if (parentItem.hasClassName('box')) {\r\n                            throw $break;\r\n                        }\r\n                    });\r\n\r\n                    if (element) {\r\n                        elementFlags = element.getElementsByClassName('delete-flag');\r\n\r\n                        if (elementFlags[0]) {\r\n                            elementFlags[0].value = 1;\r\n                        }\r\n\r\n                        element.addClassName('no-display');\r\n                        element.addClassName('template');\r\n                        element.hide();\r\n                        this.totalItems--;\r\n                        this.updateItemsCountField();\r\n                    }\r\n\r\n                    if (element.hasClassName(this.newOptionClass)) {\r\n                        element.remove();\r\n                    }\r\n                },\r\n                updateItemsCountField: function () {\r\n                    $('option-count-check').value = this.totalItems > 0 ? '1' : '';\r\n                },\r\n                enableNewOptionDeleteButton: function (id) {\r\n                    $$('#delete_button_container_' + id + ' button').each(function (button) {\r\n                        button.enable();\r\n                        button.removeClassName('disabled');\r\n                    });\r\n                },\r\n                bindRemoveButtons: function () {\r\n                    jQuery('#swatch-visual-options-panel').on('click', '.delete-option', this.remove.bind(this));\r\n                },\r\n                render: function () {\r\n                    Element.insert($$('[data-role=options-container]')[0], this.elements);\r\n                    this.elements = '';\r\n                },\r\n                renderWithDelay: function (data, from, step, delay) {\r\n                    var arrayLength = data.length,\r\n                        len;\r\n\r\n                    for (len = from + step; from < len && from < arrayLength; from++) {\r\n                        this.add(data[from]);\r\n                    }\r\n                    this.render();\r\n\r\n                    if (from === arrayLength) {\r\n                        this.updateItemsCountField();\r\n                        this.rendered = 1;\r\n                        jQuery('body').trigger('processStop');\r\n\r\n                        return true;\r\n                    }\r\n                    setTimeout(this.renderWithDelay.bind(this, data, from, step, delay), delay);\r\n                },\r\n                ignoreValidate: function () {\r\n                    var ignore = '.ignore-validate input, ' +\r\n                        '.ignore-validate select, ' +\r\n                        '.ignore-validate textarea';\r\n\r\n                    jQuery('#edit_form').data('validator').settings.forceIgnore = ignore;\r\n                },\r\n                getOptionInputType: function () {\r\n                    var optionDefaultInputType = 'radio';\r\n\r\n                    if ($('frontend_input') && $('frontend_input').value === 'multiselect') {\r\n                        optionDefaultInputType = 'checkbox';\r\n                    }\r\n\r\n                    return optionDefaultInputType;\r\n                }\r\n            },\r\n            tableBody = jQuery(),\r\n            activePanelClass = 'selected-type-options';\r\n\r\n        if ($('add_new_option_button')) {\r\n            Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption, {}, true));\r\n        }\r\n        $('manage-options-panel').on('click', '.delete-option', function (event) {\r\n            attributeOption.remove(event);\r\n        });\r\n\r\n        optionPanel.on('render', function () {\r\n            attributeOption.ignoreValidate();\r\n\r\n            if (attributeOption.rendered) {\r\n                return false;\r\n            }\r\n            jQuery('body').trigger('processStart');\r\n            attributeOption.renderWithDelay(config.attributesData, 0, 100, 300);\r\n            attributeOption.bindRemoveButtons();\r\n        });\r\n\r\n        if (config.isSortable) {\r\n            jQuery(function ($) {\r\n                $('[data-role=options-container]').sortable({\r\n                    distance: 8,\r\n                    tolerance: 'pointer',\r\n                    cancel: 'input, button',\r\n                    axis: 'y',\r\n                    update: function () {\r\n                        $('[data-role=options-container] [data-role=order]').each(function (index, element) {\r\n                            $(element).val(index + 1);\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        editForm.on('beforeSubmit', function () {\r\n            var optionContainer = optionPanel.find('table tbody'),\r\n                optionsValues;\r\n\r\n            if (optionPanel.hasClass(activePanelClass)) {\r\n                optionsValues = jQuery.map(\r\n                    optionContainer.find('tr'),\r\n                    function (row) {\r\n                        return jQuery(row).find('input, select, textarea').serialize();\r\n                    }\r\n                );\r\n                jQuery('<input>')\r\n                    .attr({\r\n                        type: 'hidden',\r\n                        name: 'serialized_options'\r\n                    })\r\n                    .val(JSON.stringify(optionsValues))\r\n                    .prependTo(editForm);\r\n            }\r\n            tableBody = optionContainer.detach();\r\n        });\r\n        editForm.on('afterValidate.error highlight.validate', function () {\r\n            if (optionPanel.hasClass(activePanelClass)) {\r\n                optionPanel.find('table').append(tableBody);\r\n                jQuery('input[name=\"serialized_options\"]').remove();\r\n            }\r\n        });\r\n        window.attributeOption = attributeOption;\r\n        window.optionDefaultInputType = attributeOption.getOptionInputType();\r\n\r\n        rg.set('manage-options-panel', attributeOption);\r\n    };\r\n});\r\n","Magento_Catalog/js/price-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/price-utils',\r\n    'underscore',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, utils, _, mageTemplate) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        productId: null,\r\n        priceConfig: null,\r\n        prices: {},\r\n        priceTemplate: '<span class=\"price\"><%- data.formatted %></span>'\r\n    };\r\n\r\n    $.widget('mage.priceBox', {\r\n        options: globalOptions,\r\n        qtyInfo: '#qty',\r\n\r\n        /**\r\n         * Widget initialisation.\r\n         * Every time when option changed prices also can be changed. So\r\n         * changed options.prices -> changed cached prices -> recalculation -> redraw price box\r\n         */\r\n        _init: function initPriceBox() {\r\n            var box = this.element;\r\n\r\n            box.trigger('updatePrice');\r\n            this.cache.displayPrices = utils.deepClone(this.options.prices);\r\n        },\r\n\r\n        /**\r\n         * Widget creating.\r\n         */\r\n        _create: function createPriceBox() {\r\n            var box = this.element;\r\n\r\n            this.cache = {};\r\n            this._setDefaultsFromPriceConfig();\r\n            this._setDefaultsFromDataSet();\r\n\r\n            box.on('reloadPrice', this.reloadPrice.bind(this));\r\n            box.on('updatePrice', this.onUpdatePrice.bind(this));\r\n            $(this.qtyInfo).on('input', this.updateProductTierPrice.bind(this));\r\n            box.trigger('price-box-initialized');\r\n        },\r\n\r\n        /**\r\n         * Call on event updatePrice. Proxy to updatePrice method.\r\n         * @param {Event} event\r\n         * @param {Object} prices\r\n         */\r\n        onUpdatePrice: function onUpdatePrice(event, prices) {\r\n            return this.updatePrice(prices);\r\n        },\r\n\r\n        /**\r\n         * Updates price via new (or additional values).\r\n         * It expects object like this:\r\n         * -----\r\n         *   \"option-hash\":\r\n         *      \"price-code\":\r\n         *         \"amount\": 999.99999,\r\n         *         ...\r\n         * -----\r\n         * Empty option-hash object or empty price-code object treats as zero amount.\r\n         * @param {Object} newPrices\r\n         */\r\n        updatePrice: function updatePrice(newPrices) {\r\n            var prices = this.cache.displayPrices,\r\n                additionalPrice = {},\r\n                pricesCode = [],\r\n                priceValue, origin, finalPrice;\r\n\r\n            this.cache.additionalPriceObject = this.cache.additionalPriceObject || {};\r\n\r\n            if (newPrices) {\r\n                $.extend(this.cache.additionalPriceObject, newPrices);\r\n            }\r\n\r\n            if (!_.isEmpty(additionalPrice)) {\r\n                pricesCode = _.keys(additionalPrice);\r\n            } else if (!_.isEmpty(prices)) {\r\n                pricesCode = _.keys(prices);\r\n            }\r\n\r\n            _.each(this.cache.additionalPriceObject, function (additional) {\r\n                if (additional && !_.isEmpty(additional)) {\r\n                    pricesCode = _.keys(additional);\r\n                }\r\n                _.each(pricesCode, function (priceCode) {\r\n                    priceValue = additional[priceCode] || {};\r\n                    priceValue.amount = +priceValue.amount || 0;\r\n                    priceValue.adjustments = priceValue.adjustments || {};\r\n\r\n                    additionalPrice[priceCode] = additionalPrice[priceCode] || {\r\n                        'amount': 0,\r\n                        'adjustments': {}\r\n                    };\r\n                    additionalPrice[priceCode].amount =  0 + (additionalPrice[priceCode].amount || 0) +\r\n                        priceValue.amount;\r\n                    _.each(priceValue.adjustments, function (adValue, adCode) {\r\n                        additionalPrice[priceCode].adjustments[adCode] = 0 +\r\n                            (additionalPrice[priceCode].adjustments[adCode] || 0) + adValue;\r\n                    });\r\n                });\r\n            });\r\n\r\n            if (_.isEmpty(additionalPrice)) {\r\n                this.cache.displayPrices = utils.deepClone(this.options.prices);\r\n            } else {\r\n                _.each(additionalPrice, function (option, priceCode) {\r\n                    origin = this.options.prices[priceCode] || {};\r\n                    finalPrice = prices[priceCode] || {};\r\n                    option.amount = option.amount || 0;\r\n                    origin.amount = origin.amount || 0;\r\n                    origin.adjustments = origin.adjustments || {};\r\n                    finalPrice.adjustments = finalPrice.adjustments || {};\r\n\r\n                    finalPrice.amount = 0 + origin.amount + option.amount;\r\n                    _.each(option.adjustments, function (pa, paCode) {\r\n                        finalPrice.adjustments[paCode] = 0 + (origin.adjustments[paCode] || 0) + pa;\r\n                    });\r\n                }, this);\r\n            }\r\n\r\n            this.element.trigger('priceUpdated', this.cache.displayPrices);\r\n            this.element.trigger('reloadPrice');\r\n        },\r\n\r\n        /*eslint-disable no-extra-parens*/\r\n        /**\r\n         * Render price unit block.\r\n         */\r\n        reloadPrice: function reDrawPrices() {\r\n            var priceFormat = (this.options.priceConfig && this.options.priceConfig.priceFormat) || {},\r\n                priceTemplate = mageTemplate(this.options.priceTemplate);\r\n\r\n            _.each(this.cache.displayPrices, function (price, priceCode) {\r\n                price.final = _.reduce(price.adjustments, function (memo, amount) {\r\n                    return memo + amount;\r\n                }, price.amount);\r\n\r\n                price.formatted = utils.formatPriceLocale(price.final, priceFormat);\r\n\r\n                $('[data-price-type=\"' + priceCode + '\"]', this.element).html(priceTemplate({\r\n                    data: price\r\n                }));\r\n            }, this);\r\n        },\r\n\r\n        /*eslint-enable no-extra-parens*/\r\n        /**\r\n         * Overwrites initial (default) prices object.\r\n         * @param {Object} prices\r\n         */\r\n        setDefault: function setDefaultPrices(prices) {\r\n            this.cache.displayPrices = utils.deepClone(prices);\r\n            this.options.prices = utils.deepClone(prices);\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge of accepted configuration.\r\n         * @param  {Object} options\r\n         * @return {mage.priceBox}\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n\r\n            if ('disabled' in options) {\r\n                this._setOption('disabled', options.disabled);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * setDefaultsFromDataSet\r\n         */\r\n        _setDefaultsFromDataSet: function _setDefaultsFromDataSet() {\r\n            var box = this.element,\r\n                priceHolders = $('[data-price-type]', box),\r\n                prices = this.options.prices;\r\n\r\n            this.options.productId = box.data('productId');\r\n\r\n            if (_.isEmpty(prices)) {\r\n                priceHolders.each(function (index, element) {\r\n                    var type = $(element).data('priceType'),\r\n                        amount = parseFloat($(element).data('priceAmount'));\r\n\r\n                    if (type && !_.isNaN(amount)) {\r\n                        prices[type] = {\r\n                            amount: amount\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * setDefaultsFromPriceConfig\r\n         */\r\n        _setDefaultsFromPriceConfig: function _setDefaultsFromPriceConfig() {\r\n            var config = this.options.priceConfig;\r\n\r\n            if (config && config.prices) {\r\n                this.options.prices = config.prices;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Updates product final and base price according to tier prices\r\n         */\r\n        updateProductTierPrice: function updateProductTierPrice() {\r\n            var originalPrice,\r\n                prices = {'prices': {}};\r\n\r\n            if (this.options.prices.finalPrice) {\r\n                originalPrice = this.options.prices.finalPrice.amount;\r\n                prices.prices.finalPrice = {'amount': this.getPrice('price') - originalPrice};\r\n            }\r\n\r\n            if (this.options.prices.basePrice) {\r\n                originalPrice = this.options.prices.basePrice.amount;\r\n                prices.prices.basePrice = {'amount': this.getPrice('basePrice') - originalPrice};\r\n            }\r\n\r\n            this.updatePrice(prices);\r\n        },\r\n\r\n        /**\r\n         * Returns price.\r\n         *\r\n         * @param {String} priceKey\r\n         * @returns {Number}\r\n         */\r\n        getPrice: function (priceKey) {\r\n            var productQty = $(this.qtyInfo).val(),\r\n                result,\r\n                tierPriceItem,\r\n                i;\r\n\r\n            for (i = 0; i < this.options.priceConfig.tierPrices.length; i++) {\r\n                tierPriceItem = this.options.priceConfig.tierPrices[i];\r\n                if (productQty >= tierPriceItem.qty && tierPriceItem[priceKey]) {\r\n                    result = tierPriceItem[priceKey];\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return $.mage.priceBox;\r\n});\r\n","Magento_Catalog/js/price-option-date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'priceUtils',\r\n    'priceOptions',\r\n    'jquery-ui-modules/widget'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n            fromSelector: 'form',\r\n            dropdownsSelector: '[data-role=calendar-dropdown]'\r\n        },\r\n        optionHandler = {};\r\n\r\n    optionHandler.optionHandlers = {};\r\n\r\n    /**\r\n     * Custom handler for Date-with-Dropdowns option type.\r\n     * @param  {jQuery} siblings\r\n     * @return {Function} function that return object { optionHash : optionAdditionalPrice }\r\n     */\r\n    function onCalendarDropdownChange(siblings) {\r\n        return function (element, optionConfig) {\r\n            var changes = {},\r\n                optionId = utils.findOptionId(element),\r\n                overhead = optionConfig[optionId].prices,\r\n                isNeedToUpdate = true,\r\n                optionHash = 'price-option-calendar-' + optionId;\r\n\r\n            siblings.each(function (index, el) {\r\n                isNeedToUpdate = isNeedToUpdate && !!$(el).val();\r\n            });\r\n\r\n            overhead = isNeedToUpdate ? overhead : {};\r\n            changes[optionHash] = overhead;\r\n\r\n            return changes;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns number of days for special month and year\r\n     * @param  {Number} month\r\n     * @param  {Number} year\r\n     * @return {Number}\r\n     */\r\n    function getDaysInMonth(month, year) {\r\n        return new Date(year, month, 0).getDate();\r\n    }\r\n\r\n    /**\r\n     * Adjusts the number of days in the day option element based on which month or year\r\n     * is selected (changed). Adjusts the days to 28, 29, 30, or 31 typically.\r\n     * @param {jQuery} dropdowns\r\n     */\r\n    function onDateChange(dropdowns) {\r\n        var daysNodes,\r\n            curMonth, curYear, expectedDays,\r\n            options, needed,\r\n            month = dropdowns.filter('[data-calendar-role=month]'),\r\n            year = dropdowns.filter('[data-calendar-role=year]');\r\n\r\n        if (month.length && year.length) {\r\n            daysNodes = dropdowns.filter('[data-calendar-role=day]').find('option');\r\n\r\n            curMonth = month.val() || '01';\r\n            curYear = year.val() || '2000';\r\n            expectedDays = getDaysInMonth(curMonth, curYear);\r\n\r\n            if (daysNodes.length - 1 > expectedDays) { // remove unnecessary option nodes\r\n                daysNodes.each(function (i, e) {\r\n                    if (e.value > expectedDays) {\r\n                        $(e).remove();\r\n                    }\r\n                });\r\n            } else if (daysNodes.length - 1 < expectedDays) { // add missing option nodes\r\n                options = [];\r\n                needed = expectedDays - daysNodes.length + 1;\r\n\r\n                while (needed--) { //eslint-disable-line max-depth\r\n                    options.push(\r\n                        '<option value=\"' + (expectedDays - needed) + '\">' + (expectedDays - needed) + '</option>'\r\n                    );\r\n                }\r\n                $(options.join('')).insertAfter(daysNodes.last());\r\n            }\r\n        }\r\n    }\r\n\r\n    $.widget('mage.priceOptionDate', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * Function-initializer of priceOptionDate widget\r\n         * @private\r\n         */\r\n        _create: function initOptionDate() {\r\n            var field = this.element,\r\n                form = field.closest(this.options.fromSelector),\r\n                dropdowns = $(this.options.dropdownsSelector, field),\r\n                dateOptionId;\r\n\r\n            if (dropdowns.length) {\r\n                dateOptionId = this.options.dropdownsSelector + dropdowns.attr('name');\r\n\r\n                optionHandler.optionHandlers[dateOptionId] = onCalendarDropdownChange(dropdowns);\r\n\r\n                form.priceOptions(optionHandler);\r\n\r\n                dropdowns.data('role', dateOptionId);\r\n                dropdowns.on('change', onDateChange.bind(this, dropdowns));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptionDate;\r\n});\r\n","Magento_Catalog/js/price-option-file.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.priceOptionFile', {\r\n        options: {\r\n            fileName: '',\r\n            fileNamed: '',\r\n            fieldNameAction: '',\r\n            changeFileSelector: '',\r\n            deleteFileSelector: ''\r\n        },\r\n\r\n        /**\r\n         * Creates instance of widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.fileDeleteFlag = this.fileChangeFlag = false;\r\n            this.inputField = this.element.find('input[name=' + this.options.fileName + ']')[0];\r\n            this.inputFieldAction = this.element.find('input[name=' + this.options.fieldNameAction + ']')[0];\r\n            this.fileNameSpan = this.element.parent('dd').find('.' + this.options.fileNamed);\r\n\r\n            $(this.options.changeFileSelector).on('click', $.proxy(function () {\r\n                this._toggleFileChange();\r\n            }, this));\r\n            $(this.options.deleteFileSelector).on('click', $.proxy(function () {\r\n                this._toggleFileDelete();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Toggles whether the current file is being changed or not. If the file is being deleted\r\n         * then the option to change the file is disabled.\r\n         * @private\r\n         */\r\n        _toggleFileChange: function () {\r\n            this.element.toggle();\r\n            this.fileChangeFlag = !this.fileChangeFlag;\r\n\r\n            if (!this.fileDeleteFlag) {\r\n                $(this.inputFieldAction).attr('value', this.fileChangeFlag ? 'save_new' : 'save_old');\r\n                this.inputField.disabled = !this.fileChangeFlag;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggles whether the file is to be deleted. When the file is being deleted, the name of\r\n         * the file is decorated with strike-through text and the option to change the file is\r\n         * disabled.\r\n         * @private\r\n         */\r\n        _toggleFileDelete: function () {\r\n            this.fileDeleteFlag = $(this.options.deleteFileSelector + ':checked').val();\r\n            $(this.inputFieldAction).attr('value',\r\n                this.fileDeleteFlag ? '' : this.fileChangeFlag ? 'save_new' : 'save_old');\r\n            this.inputField.disabled = this.fileDeleteFlag || !this.fileChangeFlag;\r\n            this.fileNameSpan.css('text-decoration', this.fileDeleteFlag ? 'line-through' : 'none');\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptionFile;\r\n});\r\n","Magento_Catalog/js/price-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'priceUtils',\r\n    'priceBox',\r\n    'jquery-ui-modules/widget'\r\n], function ($, _, mageTemplate, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        productId: null,\r\n        priceHolderSelector: '.price-box', //data-role=\"priceBox\"\r\n        optionsSelector: '.product-custom-option',\r\n        optionConfig: {},\r\n        optionHandlers: {},\r\n        optionTemplate: '<%= data.label %>' +\r\n        '<% if (data.finalPrice.value > 0) { %>' +\r\n        ' +<%- data.finalPrice.formatted %>' +\r\n        '<% } else if (data.finalPrice.value < 0) { %>' +\r\n        ' <%- data.finalPrice.formatted %>' +\r\n        '<% } %>',\r\n        controlContainer: 'dd'\r\n    };\r\n\r\n    /**\r\n     * Custom option preprocessor\r\n     * @param  {jQuery} element\r\n     * @param  {Object} optionsConfig - part of config\r\n     * @return {Object}\r\n     */\r\n    function defaultGetOptionValue(element, optionsConfig) {\r\n        var changes = {},\r\n            optionValue = element.val(),\r\n            optionId = utils.findOptionId(element[0]),\r\n            optionName = element.prop('name'),\r\n            optionType = element.prop('type'),\r\n            optionConfig = optionsConfig[optionId],\r\n            optionHash = optionName;\r\n\r\n        switch (optionType) {\r\n            case 'text':\r\n            case 'textarea':\r\n                changes[optionHash] = optionValue ? optionConfig.prices : {};\r\n                break;\r\n\r\n            case 'radio':\r\n                if (element.is(':checked')) {\r\n                    changes[optionHash] = optionConfig[optionValue] && optionConfig[optionValue].prices || {};\r\n                }\r\n                break;\r\n\r\n            case 'select-one':\r\n                changes[optionHash] = optionConfig[optionValue] && optionConfig[optionValue].prices || {};\r\n                break;\r\n\r\n            case 'select-multiple':\r\n                _.each(optionConfig, function (row, optionValueCode) {\r\n                    optionHash = optionName + '##' + optionValueCode;\r\n                    changes[optionHash] = _.contains(optionValue, optionValueCode) ? row.prices : {};\r\n                });\r\n                break;\r\n\r\n            case 'checkbox':\r\n                optionHash = optionName + '##' + optionValue;\r\n                changes[optionHash] = element.is(':checked') ? optionConfig[optionValue].prices : {};\r\n                break;\r\n\r\n            case 'file':\r\n                // Checking for 'disable' property equal to checking DOMNode with id*=\"change-\"\r\n                changes[optionHash] = optionValue || element.prop('disabled') ? optionConfig.prices : {};\r\n                break;\r\n        }\r\n\r\n        return changes;\r\n    }\r\n\r\n    $.widget('mage.priceOptions', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function initPriceBundle() {\r\n            $(this.options.optionsSelector, this.element).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Widget creating method.\r\n         * Triggered once.\r\n         * @private\r\n         */\r\n        _create: function createPriceOptions() {\r\n            var form = this.element,\r\n                options = $(this.options.optionsSelector, form),\r\n                priceBox = $(this.options.priceHolderSelector, $(this.options.optionsSelector).element);\r\n\r\n            if (priceBox.data('magePriceBox') &&\r\n                priceBox.priceBox('option') &&\r\n                priceBox.priceBox('option').priceConfig\r\n            ) {\r\n                if (priceBox.priceBox('option').priceConfig.optionTemplate) {\r\n                    this._setOption('optionTemplate', priceBox.priceBox('option').priceConfig.optionTemplate);\r\n                }\r\n                this._setOption('priceFormat', priceBox.priceBox('option').priceConfig.priceFormat);\r\n            }\r\n\r\n            this._applyOptionNodeFix(options);\r\n\r\n            options.on('change', this._onOptionChanged.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Custom option change-event handler\r\n         * @param {Event} event\r\n         * @private\r\n         */\r\n        _onOptionChanged: function onOptionChanged(event) {\r\n            var changes,\r\n                option = $(event.target),\r\n                handler = this.options.optionHandlers[option.data('role')];\r\n\r\n            option.data('optionContainer', option.closest(this.options.controlContainer));\r\n\r\n            if (handler && handler instanceof Function) {\r\n                changes = handler(option, this.options.optionConfig, this);\r\n            } else {\r\n                changes = defaultGetOptionValue(option, this.options.optionConfig);\r\n            }\r\n            $(this.options.priceHolderSelector).trigger('updatePrice', changes);\r\n        },\r\n\r\n        /**\r\n         * Helper to fix issue with option nodes:\r\n         *  - you can't place any html in option ->\r\n         *    so you can't style it via CSS\r\n         * @param {jQuery} options\r\n         * @private\r\n         */\r\n        _applyOptionNodeFix: function applyOptionNodeFix(options) {\r\n            var config = this.options,\r\n                format = config.priceFormat,\r\n                template = config.optionTemplate;\r\n\r\n            template = mageTemplate(template);\r\n            options.filter('select').each(function (index, element) {\r\n                var $element = $(element),\r\n                    optionId = utils.findOptionId($element),\r\n                    optionConfig = config.optionConfig && config.optionConfig[optionId];\r\n\r\n                $element.find('option').each(function (idx, option) {\r\n                    var $option,\r\n                        optionValue,\r\n                        toTemplate,\r\n                        prices;\r\n\r\n                    $option = $(option);\r\n                    optionValue = $option.val();\r\n\r\n                    if (!optionValue && optionValue !== 0) {\r\n                        return;\r\n                    }\r\n\r\n                    toTemplate = {\r\n                        data: {\r\n                            label: optionConfig[optionValue] && optionConfig[optionValue].name\r\n                        }\r\n                    };\r\n                    prices = optionConfig[optionValue] ? optionConfig[optionValue].prices : null;\r\n\r\n                    if (prices) {\r\n                        _.each(prices, function (price, type) {\r\n                            var value = +price.amount;\r\n\r\n                            value += _.reduce(price.adjustments, function (sum, x) { //eslint-disable-line\r\n                                return sum + x;\r\n                            }, 0);\r\n                            toTemplate.data[type] = {\r\n                                value: value,\r\n                                formatted: utils.formatPriceLocale(value, format)\r\n                            };\r\n                        });\r\n\r\n                        $option.text(template(toTemplate));\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge accepted configuration with instance options.\r\n         * @param  {Object}  options\r\n         * @return {$.Widget}\r\n         * @private\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n            this._super(options);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptions;\r\n});\r\n","Magento_Catalog/js/price-utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var globalPriceFormat = {\r\n        requiredPrecision: 2,\r\n        integerRequired: 1,\r\n        decimalSymbol: ',',\r\n        groupSymbol: ',',\r\n        groupLength: ','\r\n    };\r\n\r\n    /**\r\n     * Repeats {string} {times} times\r\n     * @param  {String} string\r\n     * @param  {Number} times\r\n     * @return {String}\r\n     */\r\n    function stringPad(string, times) {\r\n        return new Array(times + 1).join(string);\r\n    }\r\n\r\n    /**\r\n     * Format the price with the compliance to the specified locale\r\n     *\r\n     * @param {Number} amount\r\n     * @param {Object} format\r\n     * @param  {Boolean} isShowSign\r\n     */\r\n    function formatPriceLocale(amount, format, isShowSign)\r\n    {\r\n        var s = '',\r\n            precision, pattern, locale, r;\r\n\r\n        format = _.extend(globalPriceFormat, format);\r\n        precision = isNaN(format.requiredPrecision = Math.abs(format.requiredPrecision)) ? 2 : format.requiredPrecision;\r\n        pattern = format.pattern || '%s';\r\n        locale = window.LOCALE || 'en-US';\r\n        if (isShowSign === undefined || isShowSign === true) {\r\n            s = amount < 0 ? '-' : isShowSign ? '+' : '';\r\n        } else if (isShowSign === false) {\r\n            s = '';\r\n        }\r\n        pattern = pattern.indexOf('{sign}') < 0 ? s + pattern : pattern.replace('{sign}', s);\r\n        amount = Number(Math.round(Math.abs(+amount || 0) + 'e+' + precision) + ('e-' + precision));\r\n        r = amount.toLocaleString(locale, {minimumFractionDigits: precision});\r\n\r\n        return pattern.replace('%s', r).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n\r\n    /**\r\n     * Formatter for price amount\r\n     * @param  {Number}  amount\r\n     * @param  {Object}  format\r\n     * @param  {Boolean} isShowSign\r\n     * @return {String}              Formatted value\r\n     * @deprecated\r\n     */\r\n    function formatPrice(amount, format, isShowSign) {\r\n        var s = '',\r\n            precision, integerRequired, decimalSymbol, groupSymbol, groupLength, pattern, i, pad, j, re, r, am;\r\n\r\n        format = _.extend(globalPriceFormat, format);\r\n\r\n        // copied from price-option.js | Could be refactored with varien/js.js\r\n\r\n        precision = isNaN(format.requiredPrecision = Math.abs(format.requiredPrecision)) ? 2 : format.requiredPrecision;\r\n        integerRequired = isNaN(format.integerRequired = Math.abs(format.integerRequired)) ? 1 : format.integerRequired;\r\n        decimalSymbol = format.decimalSymbol === undefined ? ',' : format.decimalSymbol;\r\n        groupSymbol = format.groupSymbol === undefined ? '.' : format.groupSymbol;\r\n        groupLength = format.groupLength === undefined ? 3 : format.groupLength;\r\n        pattern = format.pattern || '%s';\r\n\r\n        if (isShowSign === undefined || isShowSign === true) {\r\n            s = amount < 0 ? '-' : isShowSign ? '+' : '';\r\n        } else if (isShowSign === false) {\r\n            s = '';\r\n        }\r\n        pattern = pattern.indexOf('{sign}') < 0 ? s + pattern : pattern.replace('{sign}', s);\r\n\r\n        // we're avoiding the usage of to fixed, and using round instead with the e representation to address\r\n        // numbers like 1.005 = 1.01. Using ToFixed to only provide trailing zeroes in case we have a whole number\r\n        i = parseInt(\r\n                amount = Number(Math.round(Math.abs(+amount || 0) + 'e+' + precision) + ('e-' + precision)),\r\n                10\r\n            ) + '';\r\n        pad = i.length < integerRequired ? integerRequired - i.length : 0;\r\n\r\n        i = stringPad('0', pad) + i;\r\n\r\n        j = i.length > groupLength ? i.length % groupLength : 0;\r\n        re = new RegExp('(\\\\d{' + groupLength + '})(?=\\\\d)', 'g');\r\n\r\n        // replace(/-/, 0) is only for fixing Safari bug which appears\r\n        // when Math.abs(0).toFixed() executed on '0' number.\r\n        // Result is '0.-0' :(\r\n\r\n        am = Number(Math.round(Math.abs(amount - i) + 'e+' + precision) + ('e-' + precision));\r\n        r = (j ? i.substr(0, j) + groupSymbol : '') +\r\n            i.substr(j).replace(re, '$1' + groupSymbol) +\r\n            (precision ? decimalSymbol + am.toFixed(precision).replace(/-/, 0).slice(2) : '');\r\n\r\n        return pattern.replace('%s', r).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n\r\n    /**\r\n     * Deep clone of Object. Doesn't support functions\r\n     * @param {Object} obj\r\n     * @return {Object}\r\n     */\r\n    function objectDeepClone(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n\r\n    /**\r\n     * Helper to find ID in name attribute\r\n     * @param   {jQuery} element\r\n     * @returns {undefined|String}\r\n     */\r\n    function findOptionId(element) {\r\n        var re, id, name;\r\n\r\n        if (!element) {\r\n            return id;\r\n        }\r\n        name = $(element).attr('name');\r\n\r\n        if (name.indexOf('[') !== -1) {\r\n            re = /\\[([^\\]]+)?\\]/;\r\n        } else {\r\n            re = /_([^\\]]+)?_/; // just to support file-type-option\r\n        }\r\n        id = re.exec(name) && re.exec(name)[1];\r\n\r\n        if (id) {\r\n            return id;\r\n        }\r\n    }\r\n\r\n    return {\r\n        formatPriceLocale: formatPriceLocale,\r\n        formatPrice: formatPrice,\r\n        deepClone: objectDeepClone,\r\n        strPad: stringPad,\r\n        findOptionId: findOptionId\r\n    };\r\n});\r\n","Magento_Catalog/js/product-gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'uiRegistry',\r\n    'jquery/ui',\r\n    'baseImage'\r\n], function ($, _, mageTemplate, registry) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Formats incoming bytes value to a readable format.\r\n     *\r\n     * @param {Number} bytes\r\n     * @returns {String}\r\n     */\r\n    function bytesToSize(bytes) {\r\n        var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'],\r\n            i;\r\n\r\n        if (bytes === 0) {\r\n            return '0 Byte';\r\n        }\r\n\r\n        i = window.parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n\r\n        return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n    }\r\n\r\n    /**\r\n     * Product gallery widget\r\n     */\r\n    $.widget('mage.productGallery', {\r\n        options: {\r\n            imageSelector: '[data-role=image]',\r\n            imageElementSelector: '[data-role=image-element]',\r\n            template: '[data-template=image]',\r\n            imageResolutionLabel: '[data-role=resolution]',\r\n            imgTitleSelector: '[data-role=img-title]',\r\n            imageSizeLabel: '[data-role=size]',\r\n            types: null,\r\n            initialized: false\r\n        },\r\n\r\n        /**\r\n         * Gallery creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.options.types = this.options.types || this.element.data('types');\r\n            this.options.images = this.options.images || this.element.data('images');\r\n            this.options.parentComponent = this.options.parentComponent || this.element.data('parent-component');\r\n\r\n            this.imgTmpl = mageTemplate(this.element.find(this.options.template).html().trim());\r\n\r\n            this._bind();\r\n\r\n            this._isInitializingItems = true;\r\n            this._initializedItemCount = 0;\r\n            this._lastInitializedElement = null;\r\n\r\n            $.each(this.options.images, $.proxy(function (index, imageData) {\r\n                this.element.trigger('addItem', imageData);\r\n            }, this));\r\n\r\n            this._updateImagesRoles();\r\n            this._contentUpdated();\r\n\r\n            this._isInitializingItems = false;\r\n            this.options.initialized = true;\r\n        },\r\n\r\n        /**\r\n         * Bind handler to elements\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                updateImageTitle: '_updateImageTitle',\r\n                updateVisibility: '_updateVisibility',\r\n                openDialog: '_onOpenDialog',\r\n                addItem: '_addItem',\r\n                removeItem: '_removeItem',\r\n                setImageType: '_setImageType',\r\n                setPosition: '_setPosition',\r\n                resort: '_resort',\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseup [data-role=delete-button]': function (event) {\r\n                    var $imageContainer;\r\n\r\n                    event.preventDefault();\r\n                    $imageContainer = $(event.currentTarget).closest(this.options.imageSelector);\r\n                    this.element.find('[data-role=dialog]').trigger('close');\r\n                    this.element.trigger('removeItem', $imageContainer.data('imageData'));\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseup [data-role=make-base-button]': function (event) {\r\n                    var $imageContainer,\r\n                        imageData;\r\n\r\n                    event.preventDefault();\r\n                    event.stopImmediatePropagation();\r\n                    $imageContainer = $(event.currentTarget).closest(this.options.imageSelector);\r\n                    imageData = $imageContainer.data('imageData');\r\n                    this.setBase(imageData);\r\n                }\r\n            });\r\n\r\n            this.element.sortable({\r\n                distance: 8,\r\n                items: this.options.imageSelector,\r\n                tolerance: 'pointer',\r\n                cancel: 'input, button, .uploader',\r\n                update: $.proxy(function () {\r\n                    this.element.trigger('resort');\r\n                }, this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set image as main\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        setBase: function (imageData) {\r\n            var baseImage = this.options.types.image,\r\n                sameImages = $.grep(\r\n                    $.map(this.options.types, function (el) {\r\n                        return el;\r\n                    }),\r\n                    function (el) {\r\n                        return el.value === baseImage.value;\r\n                    }\r\n                ),\r\n                isImageOpened = this.findElement(imageData).hasClass('active');\r\n\r\n            $.each(sameImages, $.proxy(function (index, image) {\r\n                this.element.trigger('setImageType', {\r\n                    type: image.code,\r\n                    imageData: imageData\r\n                });\r\n\r\n                if (isImageOpened) {\r\n                    this.element.find('.item').addClass('selected');\r\n                    this.element.find('[data-role=type-selector]').prop({\r\n                        'checked': true\r\n                    });\r\n                }\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Find element by fileName\r\n         * @param {Object} data\r\n         * @returns {Element}\r\n         */\r\n        findElement: function (data) {\r\n            return this.element.find(this.options.imageSelector).filter(function () {\r\n                return $(this).data('imageData').file === data.file;\r\n            }).first();\r\n        },\r\n\r\n        /**\r\n         * Mark parent fieldset that content was updated\r\n         */\r\n        _contentUpdated: function () {\r\n            if (this.options.initialized && this.options.parentComponent) {\r\n                registry.async(this.options.parentComponent)(\r\n                    function (parentComponent) {\r\n                        parentComponent.bubble('update', true);\r\n                    }\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add image\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _addItem: function (event, imageData) {\r\n            var element,\r\n                imgElement,\r\n                lastElement,\r\n                count,\r\n                position;\r\n\r\n            if (this._isInitializingItems) {\r\n                count = this._initializedItemCount++;\r\n                lastElement = this._lastInitializedElement;\r\n            } else {\r\n                count = this.element.find(this.options.imageSelector).length;\r\n                lastElement = this.element.find(this.options.imageSelector + ':last');\r\n            }\r\n\r\n            position = count + 1;\r\n\r\n            if (lastElement && lastElement.length === 1) {\r\n                position = parseInt(lastElement.data('imageData').position || count, 10) + 1;\r\n            }\r\n            imageData = $.extend({\r\n                'file_id': imageData['value_id'] ? imageData['value_id'] : Math.random().toString(33).substr(2, 18),\r\n                'disabled': imageData.disabled ? imageData.disabled : 0,\r\n                'position': position,\r\n                sizeLabel: bytesToSize(imageData.size)\r\n            }, imageData);\r\n\r\n            element = this.imgTmpl({\r\n                data: imageData\r\n            });\r\n\r\n            element = $(element).data('imageData', imageData);\r\n\r\n            if (count === 0) {\r\n                element.prependTo(this.element);\r\n            } else {\r\n                element.insertAfter(lastElement);\r\n            }\r\n\r\n            this._lastInitializedElement = element;\r\n\r\n            if (!this.options.initialized &&\r\n                this.options.images.length === 0 ||\r\n                this.options.initialized &&\r\n                this.element.find(this.options.imageSelector + ':not(.removed)').length === 1\r\n            ) {\r\n                this.setBase(imageData);\r\n            }\r\n\r\n            imgElement = element.find(this.options.imageElementSelector);\r\n\r\n            imgElement.on('load', this._updateImageDimesions.bind(this, element));\r\n\r\n            $.each(this.options.types, $.proxy(function (index, image) {\r\n                if (imageData.file === image.value) {\r\n                    this.element.trigger('setImageType', {\r\n                        type: image.code,\r\n                        imageData: imageData\r\n                    });\r\n                }\r\n            }, this));\r\n\r\n            if (!this._isInitializingItems) {\r\n                this._updateImagesRoles();\r\n                this._contentUpdated();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns a list of current images.\r\n         *\r\n         * @returns {jQueryCollection}\r\n         */\r\n        _getImages: function () {\r\n            return this.element.find(this.options.imageSelector);\r\n        },\r\n\r\n        /**\r\n         * Returns a list of images roles.\r\n         *\r\n         * @return {Object}\r\n         */\r\n        _getRoles: function () {\r\n            return _.mapObject(this.options.types, function (data, key) {\r\n                var elem = this.element.find('.image-' + key);\r\n\r\n                return {\r\n                    index: key,\r\n                    value: elem.val(),\r\n                    elem: elem\r\n                };\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Updates labels with roles information for each image.\r\n         */\r\n        _updateImagesRoles: function () {\r\n            var $images = this._getImages().toArray(),\r\n                roles = this._getRoles();\r\n\r\n            $images.forEach(function (img) {\r\n                var $img = $(img),\r\n                    data = $img.data('imageData');\r\n\r\n                $img.find('[data-role=roles-labels] li').each(function (index, elem) {\r\n                    var $elem = $(elem),\r\n                        roleCode = $elem.data('roleCode'),\r\n                        role = roles[roleCode];\r\n\r\n                    role.value === data.file  ?\r\n                        $elem.show() :\r\n                        $elem.hide();\r\n                });\r\n\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates image's dimensions information.\r\n         *\r\n         * @param {jQeuryCollection} imgContainer\r\n         */\r\n        _updateImageDimesions: function (imgContainer) {\r\n            var $img = imgContainer.find(this.options.imageElementSelector)[0],\r\n                $dimens = imgContainer.find('[data-role=image-dimens]');\r\n\r\n            $dimens.text($img.naturalWidth + 'x' + $img.naturalHeight + ' px');\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         */\r\n        _updateImageTitle: function (event, data) {\r\n            var imageData = data.imageData,\r\n                $imgContainer = this.findElement(imageData),\r\n                $title = $imgContainer.find(this.options.imgTitleSelector),\r\n                value;\r\n\r\n            value = imageData['media_type'] === 'external-video' ?\r\n                imageData['video_title'] :\r\n                imageData.label;\r\n\r\n            $title.text(value);\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Remove Image\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _removeItem: function (event, imageData) {\r\n            var $imageContainer = this.findElement(imageData);\r\n\r\n            imageData.isRemoved = true;\r\n            $imageContainer.addClass('removed').hide().find('.is-removed').val(1);\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image type\r\n         * @param {jQuery.Event} event\r\n         * @param {Obejct} data\r\n         * @private\r\n         */\r\n        _setImageType: function (event, data) {\r\n            if (data.type === 'image') {\r\n                this.element.find('.base-image').removeClass('base-image');\r\n            }\r\n\r\n            if (data.imageData) {\r\n                this.options.types[data.type].value = data.imageData.file;\r\n\r\n                if (data.type === 'image') {\r\n                    this.findElement(data.imageData).addClass('base-image');\r\n                }\r\n            } else {\r\n                this.options.types[data.type].value = 'no_selection';\r\n            }\r\n            this.element.find('.image-' + data.type).val(this.options.types[data.type].value || 'no_selection');\r\n            this._updateImagesRoles();\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Resort images\r\n         * @private\r\n         */\r\n        _resort: function () {\r\n            this.element.find('.position').each($.proxy(function (index, element) {\r\n                var value = $(element).val();\r\n\r\n                if (value != index) { //eslint-disable-line eqeqeq\r\n                    this.element.trigger('moveElement', {\r\n                        imageData: $(element).closest(this.options.imageSelector).data('imageData'),\r\n                        position: index\r\n                    });\r\n                    $(element).val(index);\r\n                }\r\n            }, this));\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image position\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _setPosition: function (event, data) {\r\n            var $element = this.findElement(data.imageData),\r\n                curIndex = this.element.find(this.options.imageSelector).index($element),\r\n                newPosition = data.position + (curIndex > data.position ? -1 : 0);\r\n\r\n            if (data.position != curIndex) { //eslint-disable-line eqeqeq\r\n                if (data.position === 0) {\r\n                    this.element.prepend($element);\r\n                } else {\r\n                    $element.insertAfter(\r\n                        this.element.find(this.options.imageSelector).eq(newPosition)\r\n                    );\r\n                }\r\n                this.element.trigger('resort');\r\n            }\r\n\r\n            this._contentUpdated();\r\n        }\r\n    });\r\n\r\n    // Extension for mage.productGallery - Add advanced settings block\r\n    $.widget('mage.productGallery', $.mage.productGallery, {\r\n        options: {\r\n            dialogTemplate: '[data-role=img-dialog-tmpl]',\r\n            dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var template = this.element.find(this.options.dialogTemplate),\r\n                containerTmpl = this.element.find(this.options.dialogContainerTmpl);\r\n\r\n            this._super();\r\n            this.modalPopupInit = false;\r\n\r\n            if (template.length) {\r\n                this.dialogTmpl = mageTemplate(template.html().trim());\r\n            }\r\n\r\n            if (containerTmpl.length) {\r\n                this.dialogContainerTmpl = mageTemplate(containerTmpl.html().trim());\r\n            } else {\r\n                this.dialogContainerTmpl = mageTemplate('');\r\n            }\r\n\r\n            this._initDialog();\r\n        },\r\n\r\n        /**\r\n         * Bind handler to elements\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            var events = {};\r\n\r\n            this._super();\r\n\r\n            events['click [data-role=close-panel]'] = $.proxy(function () {\r\n                this.element.find('[data-role=dialog]').trigger('close');\r\n            }, this);\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['click ' + this.options.imageSelector] = function (event) {\r\n                var imageData, $imageContainer;\r\n\r\n                if (!$(event.currentTarget).is('.ui-sortable-helper')) {\r\n                    $(event.currentTarget).addClass('active');\r\n                    imageData = $(event.currentTarget).data('imageData');\r\n                    $imageContainer = this.findElement(imageData);\r\n\r\n                    if ($imageContainer.is('.removed')) {\r\n                        return;\r\n                    }\r\n                    this.element.trigger('openDialog', [imageData]);\r\n                }\r\n            };\r\n            this._on(events);\r\n            this.element.on('sortstart', $.proxy(function () {\r\n                this.element.find('[data-role=dialog]').trigger('close');\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Initializes dialog element.\r\n         */\r\n        _initDialog: function () {\r\n            var $dialog = $(this.dialogContainerTmpl());\r\n\r\n            $dialog.modal({\r\n                'type': 'slide',\r\n                title: $.mage.__('Image Detail'),\r\n                buttons: [],\r\n\r\n                /** @inheritdoc */\r\n                opened: function () {\r\n                    $dialog.trigger('open');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                closed: function () {\r\n                    $dialog.trigger('close');\r\n                }\r\n            });\r\n\r\n            $dialog.on('open', this.onDialogOpen.bind(this));\r\n            $dialog.on('close', function () {\r\n                var $imageContainer = $dialog.data('imageContainer');\r\n\r\n                $imageContainer.removeClass('active');\r\n                $dialog.find('#hide-from-product-page').remove();\r\n            });\r\n\r\n            $dialog.on('change', '[data-role=type-selector]', function () {\r\n                var parent = $(this).closest('.item'),\r\n                    selectedClass = 'selected';\r\n\r\n                parent.toggleClass(selectedClass, $(this).prop('checked'));\r\n            });\r\n\r\n            $dialog.on('change', '[data-role=type-selector]', $.proxy(this._notifyType, this));\r\n\r\n            $dialog.on('change', '[data-role=visibility-trigger]', $.proxy(function (e) {\r\n                var imageData = $dialog.data('imageData');\r\n\r\n                this.element.trigger('updateVisibility', {\r\n                    disabled: $(e.currentTarget).is(':checked'),\r\n                    imageData: imageData\r\n                });\r\n            }, this));\r\n\r\n            $dialog.on('change', '[data-role=\"image-description\"]', function (e) {\r\n                var target = $(e.target),\r\n                    targetName = target.attr('name'),\r\n                    desc = target.val(),\r\n                    imageData = $dialog.data('imageData');\r\n\r\n                this.element.find('input[type=\"hidden\"][name=\"' + targetName + '\"]').val(desc);\r\n\r\n                imageData.label = desc;\r\n                imageData['label_default'] = desc;\r\n\r\n                this.element.trigger('updateImageTitle', {\r\n                    imageData: imageData\r\n                });\r\n            }.bind(this));\r\n\r\n            this.$dialog = $dialog;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _showDialog: function (imageData) {\r\n            var $imageContainer = this.findElement(imageData),\r\n                $template;\r\n\r\n            $template = this.dialogTmpl({\r\n                'data': imageData\r\n            });\r\n\r\n            this.$dialog\r\n                .html($template)\r\n                .data('imageData', imageData)\r\n                .data('imageContainer', $imageContainer)\r\n                .modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Handles dialog open event.\r\n         *\r\n         * @param {EventObject} event\r\n         */\r\n        onDialogOpen: function (event) {\r\n            var imageData = this.$dialog.data('imageData'),\r\n                imageSizeKb = imageData.sizeLabel,\r\n                image = document.createElement('img'),\r\n                sizeSpan = this.$dialog.find(this.options.imageSizeLabel)\r\n                    .find('[data-message]'),\r\n                resolutionSpan = this.$dialog.find(this.options.imageResolutionLabel)\r\n                    .find('[data-message]'),\r\n                sizeText = sizeSpan.attr('data-message').replace('{size}', imageSizeKb),\r\n                resolutionText;\r\n\r\n            image.src = imageData.url;\r\n\r\n            resolutionText = resolutionSpan\r\n                .attr('data-message')\r\n                .replace('{width}^{height}', image.width + 'x' + image.height);\r\n\r\n            sizeSpan.text(sizeText);\r\n            resolutionSpan.text(resolutionText);\r\n\r\n            $(event.target)\r\n                .find('[data-role=type-selector]')\r\n                .each($.proxy(function (index, checkbox) {\r\n                    var $checkbox = $(checkbox),\r\n                        parent = $checkbox.closest('.item'),\r\n                        selectedClass = 'selected',\r\n                        isChecked = this.options.types[$checkbox.val()].value == imageData.file; //eslint-disable-line\r\n\r\n                    $checkbox.prop(\r\n                        'checked',\r\n                        isChecked\r\n                    );\r\n                    parent.toggleClass(selectedClass, isChecked);\r\n                }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * Click by image handler\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} imageData\r\n         * @private\r\n         */\r\n        _onOpenDialog: function (e, imageData) {\r\n            if (imageData['media_type'] && imageData['media_type'] != 'image') { //eslint-disable-line eqeqeq\r\n                return;\r\n            }\r\n            this._showDialog(imageData);\r\n        },\r\n\r\n        /**\r\n         * Change visibility\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * * @param {Object} data\r\n         * @private\r\n         */\r\n        _updateVisibility: function (event, data) {\r\n            var imageData = data.imageData,\r\n                disabled = +data.disabled,\r\n                $imageContainer = this.findElement(imageData);\r\n\r\n            !!disabled ? //eslint-disable-line no-extra-boolean-cast\r\n                $imageContainer.addClass('hidden-for-front') :\r\n                $imageContainer.removeClass('hidden-for-front');\r\n\r\n            $imageContainer.find('[name*=\"disabled\"]').val(disabled);\r\n            imageData.disabled = disabled;\r\n\r\n            this._contentUpdated();\r\n        },\r\n\r\n        /**\r\n         * Set image\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _notifyType: function (event) {\r\n            var $checkbox = $(event.currentTarget),\r\n                $imageContainer = $checkbox.closest('[data-role=dialog]').data('imageContainer');\r\n\r\n            this.element.trigger('setImageType', {\r\n                type: $checkbox.val(),\r\n                imageData: $checkbox.is(':checked') ? $imageContainer.data('imageData') : null\r\n            });\r\n\r\n            this._updateImagesRoles();\r\n        }\r\n    });\r\n\r\n    return $.mage.productGallery;\r\n});\r\n","Magento_Catalog/js/components/attribute-set-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            listens: {\r\n                'value': 'changeFormSubmitUrl'\r\n            },\r\n            modules: {\r\n                formProvider: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change set parameter in save and validate urls of form\r\n         *\r\n         * @param {String|Number} value\r\n         */\r\n        changeFormSubmitUrl: function (value) {\r\n            var pattern = /(set\\/)(\\d)*?\\//,\r\n                change = '$1' + value + '/';\r\n\r\n            this.formProvider().client.urls.save = this.formProvider().client.urls.save.replace(pattern, change);\r\n            this.formProvider().client.urls.beforeSave = this.formProvider().client.urls.beforeSave.replace(\r\n                pattern,\r\n                change\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-fieldset.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Ui/js/core/app'\r\n], function (Fieldset, app) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:additionalAttributes': 'onAttributeAdd'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * On attribute add trigger\r\n         *\r\n         * @param {Object} listOfNewAttributes\r\n         */\r\n        onAttributeAdd: function (listOfNewAttributes) {\r\n            app(listOfNewAttributes, true);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-grid-paging.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/paging',\r\n    'underscore'\r\n], function (Paging, _) {\r\n    'use strict';\r\n\r\n    return Paging.extend({\r\n        defaults: {\r\n            totalTmpl: 'Magento_Catalog/attributes/grid/paging',\r\n            modules: {\r\n                selectionColumn: '${ $.selectProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.selectProvider }:selected': 'changeLabel'\r\n            },\r\n            label: '',\r\n            selectedAttrs: []\r\n        },\r\n\r\n        /**\r\n         * Change label.\r\n         *\r\n         * @param {Array} selected\r\n         */\r\n        changeLabel: function (selected) {\r\n            this.selectedAttrs = [];\r\n            _.each(this.selectionColumn().rows(), function (row) {\r\n                if (selected.indexOf(row['attribute_id']) !== -1) {\r\n                    this.selectedAttrs.push(row['attribute_code']);\r\n                }\r\n            }, this);\r\n\r\n            this.label(this.selectedAttrs.join(', '));\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('label');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/attributes-insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'uiRegistry',\r\n    'underscore',\r\n    'Magento_Ui/js/form/components/insert-listing'\r\n], function ($, registry, _, InsertListing) {\r\n    'use strict';\r\n\r\n    return InsertListing.extend({\r\n        defaults: {\r\n            addAttributeUrl: '',\r\n            attributeSetId: '',\r\n            attributeIds: '',\r\n            groupCode: '',\r\n            groupName: '',\r\n            groupSortOrder: 0,\r\n            productId: 0,\r\n            formProvider: '',\r\n            modules: {\r\n                form: '${ $.formProvider }',\r\n                modal: '${ $.parentName }'\r\n            },\r\n            productType: ''\r\n        },\r\n\r\n        /**\r\n         * Render attribute\r\n         */\r\n        render: function () {\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Save attribute\r\n         */\r\n        save: function () {\r\n            this.addSelectedAttributes();\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Add selected attributes\r\n         */\r\n        addSelectedAttributes: function () {\r\n            $.ajax({\r\n                url: this.addAttributeUrl,\r\n                type: 'POST',\r\n                dataType: 'json',\r\n                data: {\r\n                    attributeIds: this.selections().getSelections(),\r\n                    templateId: this.attributeSetId,\r\n                    groupCode: this.groupCode,\r\n                    groupName: this.groupName,\r\n                    groupSortOrder: this.groupSortOrder,\r\n                    productId: this.productId,\r\n                    componentJson: 1\r\n                },\r\n                success: function () {\r\n                    this.form().params = {\r\n                        set: this.attributeSetId,\r\n                        id: this.productId,\r\n                        type: this.productType\r\n                    };\r\n                    this.form().reload();\r\n                    this.modal().state(false);\r\n                    this.reload();\r\n                }.bind(this)\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'knockout'\r\n], function (Abstract, ko) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n\r\n        /**\r\n         * Initializes observable properties of instance\r\n         *\r\n         * @returns {Element} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe('checked');\r\n\r\n            this.value = ko.pureComputed({\r\n\r\n                /**\r\n                 * use 'mappedValue' as value if checked\r\n                 */\r\n                read: function () {\r\n                    return this.checked() ? this.mappedValue : '';\r\n                },\r\n\r\n                /**\r\n                 * any value made checkbox checked\r\n                 */\r\n                write: function (val) {\r\n                    if (val) {\r\n                        this.checked(true);\r\n                    }\r\n                },\r\n                owner: this\r\n            });\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/custom-options-component.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.addBefore(this.addbefore);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n\r\n            this.observe('addBefore');\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/custom-options-price-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry'\r\n], function (_, Select, uiRegistry) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        onUpdate: function () {\r\n            this._super();\r\n\r\n            this.updateAddBeforeForPrice();\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            this.updateAddBeforeForPrice();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Update addbefore for price field. Change it to currency or % depends of price_type value.\r\n         */\r\n        updateAddBeforeForPrice: function () {\r\n            var addBefore, currentValue, priceIndex, priceName, uiPrice;\r\n\r\n            priceIndex = typeof this.imports.priceIndex == 'undefined' ? 'price' : this.imports.priceIndex;\r\n            priceName = this.parentName + '.' + priceIndex;\r\n\r\n            uiPrice = uiRegistry.get(priceName);\r\n\r\n            if (uiPrice && uiPrice.addbeforePool) {\r\n                currentValue = this.value();\r\n\r\n                uiPrice.addbeforePool.forEach(function (item) {\r\n                    if (item.value === currentValue) {\r\n                        addBefore = item.label;\r\n                    }\r\n                });\r\n\r\n                if (typeof addBefore != 'undefined') {\r\n                    uiPrice.addBefore(addBefore);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/disable-hide-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, visibleStrategy, disableStrategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(visibleStrategy).extend(disableStrategy);\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-import-custom-options-per-page.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Catalog/js/components/dynamic-rows-import-custom-options',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'rjsResolver'\r\n], function (DrCustomOptions, _, utils, layout, resolver) {\r\n    'use strict';\r\n\r\n    return DrCustomOptions.extend({\r\n        defaults: {\r\n            sizesConfig: {\r\n                component: 'Magento_Ui/js/grid/paging/sizes',\r\n                name: '${ $.name }_sizes',\r\n                options: {\r\n                    '20': {\r\n                        value: 20,\r\n                        label: 20\r\n                    },\r\n                    '30': {\r\n                        value: 30,\r\n                        label: 30\r\n                    },\r\n                    '50': {\r\n                        value: 50,\r\n                        label: 50\r\n                    },\r\n                    '100': {\r\n                        value: 100,\r\n                        label: 100\r\n                    },\r\n                    '200': {\r\n                        value: 200,\r\n                        label: 200\r\n                    }\r\n                },\r\n                storageConfig: {\r\n                    provider: '${ $.storageConfig.provider }',\r\n                    namespace: '${ $.storageConfig.namespace }'\r\n                },\r\n                enabled: false\r\n            },\r\n            links: {\r\n                options: '${ $.sizesConfig.name }:options',\r\n                pageSize: '${ $.sizesConfig.name }:value'\r\n            },\r\n            listens: {\r\n                'pageSize': 'onPageSizeChange'\r\n            },\r\n            modules: {\r\n                sizes: '${ $.sizesConfig.name }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes paging component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSizes();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initSizes: function () {\r\n            if (this.sizesConfig.enabled) {\r\n                layout([this.sizesConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'pageSize'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the page size.\r\n         */\r\n        onPageSizeChange: function () {\r\n            resolver(function () {\r\n                if (this.elems().length) {\r\n                    this.reload();\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-import-custom-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid',\r\n    'underscore',\r\n    'mageUtils'\r\n], function (DynamicRows, _, utils) {\r\n    'use strict';\r\n\r\n    return DynamicRows.extend({\r\n        defaults: {\r\n            mappingSettings: {\r\n                enabled: false,\r\n                distinct: false\r\n            },\r\n            update: true,\r\n            map: {\r\n                'option_id': 'option_id'\r\n            },\r\n            identificationProperty: 'option_id',\r\n            identificationDRProperty: 'option_id'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        processingInsertData: function (data) {\r\n            var options = [],\r\n                currentOption,\r\n                generalContext = this;\r\n\r\n            if (!data) {\r\n                return;\r\n            }\r\n            _.each(data, function (item) {\r\n                if (!item.options) {\r\n                    return;\r\n                }\r\n                _.each(item.options, function (option) {\r\n                    currentOption = utils.copy(option);\r\n\r\n                    if (currentOption.hasOwnProperty('option_id')) {\r\n                        delete currentOption['option_id'];\r\n                    }\r\n\r\n                    if (currentOption.values.length > 0) {\r\n                        generalContext.removeOptionsIds(currentOption.values);\r\n                    }\r\n                    options.push(currentOption);\r\n                });\r\n            });\r\n\r\n            if (!options.length) {\r\n                return;\r\n            }\r\n            this.cacheGridData = options;\r\n            _.each(options, function (opt) {\r\n                this.mappingValue(opt);\r\n            }, this);\r\n\r\n            this.insertData([]);\r\n        },\r\n\r\n        /**\r\n         * Removes option_id and option_type_id from every option\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        removeOptionsIds: function (options) {\r\n            _.each(options, function (optionValue) {\r\n                delete optionValue['option_id'];\r\n                delete optionValue['option_type_id'];\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        processingAddChild: function (ctx, index, prop) {\r\n            if (!ctx) {\r\n                this.showSpinner(true);\r\n                this.addChild(ctx, index, prop);\r\n\r\n                return;\r\n            }\r\n\r\n            this._super(ctx, index, prop);\r\n        },\r\n\r\n        /**\r\n         * Set empty array to dataProvider\r\n         */\r\n        clearDataProvider: function () {\r\n            this.source.set(this.dataProvider, []);\r\n        },\r\n\r\n        /**\r\n         * Mutes parent method\r\n         */\r\n        updateInsertData: function () {\r\n            return false;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-per-page.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows',\r\n    'underscore',\r\n    'mageUtils',\r\n    'uiLayout',\r\n    'rjsResolver'\r\n], function (DynamicRows, _, utils, layout, resolver) {\r\n    'use strict';\r\n\r\n    return DynamicRows.extend({\r\n        defaults: {\r\n            sizesConfig: {\r\n                component: 'Magento_Ui/js/grid/paging/sizes',\r\n                name: '${ $.name }_sizes',\r\n                options: {\r\n                    '20': {\r\n                        value: 20,\r\n                        label: 20\r\n                    },\r\n                    '30': {\r\n                        value: 30,\r\n                        label: 30\r\n                    },\r\n                    '50': {\r\n                        value: 50,\r\n                        label: 50\r\n                    },\r\n                    '100': {\r\n                        value: 100,\r\n                        label: 100\r\n                    },\r\n                    '200': {\r\n                        value: 200,\r\n                        label: 200\r\n                    }\r\n                },\r\n                storageConfig: {\r\n                    provider: '${ $.storageConfig.provider }',\r\n                    namespace: '${ $.storageConfig.namespace }'\r\n                },\r\n                enabled: false\r\n            },\r\n            links: {\r\n                options: '${ $.sizesConfig.name }:options',\r\n                pageSize: '${ $.sizesConfig.name }:value'\r\n            },\r\n            listens: {\r\n                'pageSize': 'onPageSizeChange'\r\n            },\r\n            modules: {\r\n                sizes: '${ $.sizesConfig.name }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes paging component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initSizes();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes sizes component.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initSizes: function () {\r\n            if (this.sizesConfig.enabled) {\r\n                layout([this.sizesConfig]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Paging} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track([\r\n                    'pageSize'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handles changes of the page size.\r\n         */\r\n        onPageSizeChange: function () {\r\n            resolver(function () {\r\n                if (this.elems().length) {\r\n                    this.reload();\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/dynamic-rows-tier-price.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows'\r\n], function (_, DynamicRows) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @deprecated Parent method contains labels sorting.\r\n     * @see Magento_Ui/js/dynamic-rows/dynamic-rows\r\n     */\r\n    return DynamicRows.extend({\r\n\r\n        /**\r\n         * Init header elements\r\n         */\r\n        initHeader: function () {\r\n            var labels;\r\n\r\n            this._super();\r\n            labels = _.clone(this.labels());\r\n            labels = _.sortBy(labels, function (label) {\r\n                return label.sortOrder;\r\n            });\r\n\r\n            this.labels(labels);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/import-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (Abstract, _, registry) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            allowImport: true,\r\n            autoImportIfEmpty: false,\r\n            values: {},\r\n            mask: '',\r\n            queryTemplate: 'ns = ${ $.ns }, index = '\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.allowImport) {\r\n                this.setHandlers();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Split mask placeholder and attach events to placeholder fields.\r\n         */\r\n        setHandlers: function () {\r\n            var str = this.mask || '',\r\n                placeholders;\r\n\r\n            placeholders = str.match(/{{(.*?)}}/g); // Get placeholders\r\n\r\n            _.each(placeholders, function (placeholder) {\r\n                placeholder = placeholder.replace(/[{{}}]/g, ''); // Remove curly braces\r\n\r\n                registry.get(this.queryTemplate + placeholder, function (component) {\r\n                    this.values[placeholder] = component.getPreview();\r\n                    component.on('value', this.updateValue.bind(this, placeholder, component));\r\n                    component.valueUpdate = 'keyup';\r\n                }.bind(this));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Update field with mask value, if it's allowed.\r\n         *\r\n         * @param {Object} placeholder\r\n         * @param {Object} component\r\n         */\r\n        updateValue: function (placeholder, component) {\r\n            var string = this.mask || '',\r\n                nonEmptyValueFlag = false;\r\n\r\n            if (placeholder) {\r\n                this.values[placeholder] = component.getPreview() || '';\r\n            }\r\n\r\n            if (!this.allowImport) {\r\n                return;\r\n            }\r\n\r\n            _.each(this.values, function (propertyValue, propertyName) {\r\n                string = string.replace('{{' + propertyName + '}}', propertyValue);\r\n                nonEmptyValueFlag = nonEmptyValueFlag || !!propertyValue;\r\n            });\r\n\r\n            if (nonEmptyValueFlag) {\r\n                string = string.replace(/(<([^>]+)>)/ig, ''); // Remove html tags\r\n                this.value(string);\r\n            } else {\r\n                this.value('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disallow import when initial value isn't empty string\r\n         *\r\n         * @returns {*}\r\n         */\r\n        setInitialValue: function () {\r\n            this._super();\r\n\r\n            if (this.initialValue !== '') {\r\n                this.allowImport = false;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *  Callback when value is changed by user,\r\n         *  and disallow/allow import value\r\n         */\r\n        userChanges: function () {\r\n\r\n            /**\r\n             *  As userChanges is called before updateValue,\r\n             *  we forced to get value from component by reference\r\n             */\r\n            var actualValue = arguments[1].currentTarget.value;\r\n\r\n            this._super();\r\n\r\n            if (actualValue === '') {\r\n                this.allowImport = true;\r\n\r\n                if (this.autoImportIfEmpty) {\r\n                    this.updateValue(null, null);\r\n                }\r\n            } else {\r\n                this.allowImport = false;\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/html'\r\n], function (Html) {\r\n    'use strict';\r\n\r\n    return Html.extend({\r\n        defaults: {\r\n            form: '${ $.namespace }.${ $.namespace }',\r\n            visible: false,\r\n            imports: {\r\n                responseData: '${ $.form }:responseData',\r\n                visible: 'responseData.error',\r\n                content: 'responseData.messages'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:data.reset': 'hide'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show messages.\r\n         */\r\n        show: function () {\r\n            this.visible(true);\r\n        },\r\n\r\n        /**\r\n         * Hide messages.\r\n         */\r\n        hide: function () {\r\n            this.visible(false);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-attribute-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/form',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'Magento_Ui/js/modal/alert'\r\n], function ($, Form, prompt, alert) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            newSetPromptMessage: '',\r\n            listens: {\r\n                responseData: 'processResponseData'\r\n            },\r\n            modules: {\r\n                productForm: 'product_form.product_form'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process response data\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processResponseData: function (data) {\r\n            if (data.params['new_attribute_set_id']) {\r\n                this.productForm().params = {\r\n                    set: data.params['new_attribute_set_id']\r\n                };\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Process Save In New Attribute Set prompt\r\n         */\r\n        saveAttributeInNewSet: function () {\r\n\r\n            var self = this;\r\n\r\n            this.validate();\r\n\r\n            if (!this.additionalInvalid && !this.source.get('params.invalid')) {\r\n                prompt({\r\n                    content: this.newSetPromptMessage,\r\n                    actions: {\r\n\r\n                        /**\r\n                         * @param {String} val\r\n                         * @this {actions}\r\n                         */\r\n                        confirm: function (val) {\r\n                            var rules = ['required-entry', 'validate-no-html-tags'],\r\n                                editForm = self,\r\n                                newAttributeSetName = val,\r\n                                i,\r\n                                params = {};\r\n\r\n                            if (!newAttributeSetName) {\r\n                                return;\r\n                            }\r\n\r\n                            for (i = 0; i < rules.length; i++) {\r\n                                if (!$.validator.methods[rules[i]](newAttributeSetName)) {\r\n                                    alert({\r\n                                        content: $.validator.messages[rules[i]]\r\n                                    });\r\n\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            params['new_attribute_set_name'] = newAttributeSetName;\r\n                            editForm.setAdditionalData(params);\r\n                            editForm.save();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                this.focusInvalid();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-attribute-insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form'\r\n], function (InsertForm) {\r\n    'use strict';\r\n\r\n    return InsertForm.extend({\r\n        defaults: {\r\n            modules: {\r\n                productForm: 'product_form.product_form'\r\n            },\r\n            listens: {\r\n                responseStatus: 'processResponseStatus'\r\n            },\r\n            attributeSetId: 0,\r\n            productId: 0\r\n        },\r\n\r\n        /**\r\n         * Process response status.\r\n         */\r\n        processResponseStatus: function () {\r\n            if (this.responseStatus()) {\r\n\r\n                if (this.productForm().params === undefined) {\r\n                    this.productForm().params = {\r\n                        set: this.attributeSetId\r\n                    };\r\n                }\r\n\r\n                if (this.productId) {\r\n                    this.productForm().params.id = this.productId;\r\n                }\r\n                this.productForm().params.type = this.productType;\r\n\r\n                this.productForm().reload();\r\n                this.resetForm();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/new-category.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n\r\n        /**\r\n         * Parse data and set it to options.\r\n         *\r\n         * @param {Object} data - Response data object.\r\n         * @returns {Object}\r\n         */\r\n        setParsed: function (data) {\r\n            var option = this.parseData(data);\r\n\r\n            if (data.error) {\r\n                return this;\r\n            }\r\n\r\n            this.options([]);\r\n            this.setOption(option);\r\n            this.set('newOption', option);\r\n        },\r\n\r\n        /**\r\n         * Normalize option object.\r\n         *\r\n         * @param {Object} data - Option object.\r\n         * @returns {Object}\r\n         */\r\n        parseData: function (data) {\r\n            return {\r\n                'is_active': data.category['is_active'],\r\n                level: data.category.level,\r\n                value: data.category['entity_id'],\r\n                label: data.category.name,\r\n                parent: data.category.parent\r\n            };\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/product-ui-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated see Magento/Ui/view/base/web/js/grid/filters/elements/ui-select.js\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/ui-select',\r\n    'jquery',\r\n    'underscore'\r\n], function (Select, $, _) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            validationUrl: false,\r\n            loadedOption: [],\r\n            validationLoading: true\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.validateInitialValue();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Validate initial value actually exists\r\n         */\r\n        validateInitialValue: function () {\r\n            if (!_.isEmpty(this.value())) {\r\n                $.ajax({\r\n                    url: this.validationUrl,\r\n                    type: 'GET',\r\n                    dataType: 'json',\r\n                    context: this,\r\n                    data: {\r\n                        productId: this.value()\r\n                    },\r\n\r\n                    /** @param {Object} response */\r\n                    success: function (response) {\r\n                        if (!_.isEmpty(response)) {\r\n                            this.options([response]);\r\n                            this.loadedOption = response;\r\n                        }\r\n                    },\r\n\r\n                    /** set empty array if error occurs */\r\n                    error: function () {\r\n                        this.options([]);\r\n                    },\r\n\r\n                    /** stop loader */\r\n                    complete: function () {\r\n                        this.validationLoading(false);\r\n                        this.setCaption();\r\n                    }\r\n                });\r\n            } else {\r\n                this.validationLoading(false);\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getSelected: function () {\r\n            var options = this._super();\r\n\r\n            if (!_.isEmpty(this.loadedOption)) {\r\n                return this.value() === this.loadedOption.value ? [this.loadedOption] : options;\r\n            }\r\n\r\n            return options;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/reset-dynamic-rows-grid-row-position-on-delete.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'rjsResolver',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid'\r\n], function (_, registry, resolver, dynamicRowsGrid) {\r\n    'use strict';\r\n\r\n    return dynamicRowsGrid.extend({\r\n\r\n        /** @inheritdoc */\r\n        deleteRecord: function () {\r\n            this._super();\r\n            this.resetPosition();\r\n        },\r\n\r\n        /**\r\n         * Reset the position on delete of the record.\r\n         */\r\n        resetPosition() {\r\n            let self = this,\r\n                position = 0;\r\n\r\n            _.filter(this.elems(), function (elem, index) {\r\n                if (index === 0) {\r\n                    position = (self.currentPage() - 1) * self.pageSize + 1;\r\n                }\r\n                _.filter(elem.elems(),function (childElem) {\r\n                    if (childElem.index === 'position') {\r\n                        childElem.value(position);\r\n                    }\r\n                });\r\n                position++;\r\n            });\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        nextPage: function () {\r\n            this._super();\r\n            resolver(function () {\r\n                if (this.elems().length) {\r\n                    this.resetPosition();\r\n                }\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/url-key-handle-changes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            imports: {\r\n                handleUseDefault: '${ $.parentName }.use_default.url_key:checked',\r\n                urlKey: '${ $.provider }:data.url_key'\r\n            },\r\n            listens: {\r\n                urlKey: 'handleChanges'\r\n            },\r\n            modules: {\r\n                useDefault: '${ $.parentName }.use_default.url_key'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable checkbox field, when 'url_key' field without changes or 'use default' field is checked\r\n         */\r\n        handleChanges: function (newValue) {\r\n            this.disabled(newValue === this.valueMap['true'] || this.useDefault.checked);\r\n        },\r\n\r\n        /**\r\n         * Disable checkbox field, when 'url_key' field without changes or 'use default' field is checked\r\n         */\r\n        handleUseDefault: function (checkedUseDefault) {\r\n            this.disabled(this.urlKey === this.valueMap['true'] || checkedUseDefault);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/website-currency-symbol.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            currenciesForWebsites: {},\r\n            tracks: {\r\n                currency: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set currency symbol per website\r\n         *\r\n         * @param {String} value - currency symbol\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this.currency = this.currenciesForWebsites[value];\r\n\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/strategy.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        defaults: {\r\n            valuesForEnable: [],\r\n            disabled: true,\r\n            imports: {\r\n                toggleDisable:\r\n                    'product_attribute_add_form.product_attribute_add_form.base_fieldset.frontend_input:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggle disabled state.\r\n         *\r\n         * @param {Number} selected\r\n         */\r\n        toggleDisable: function (selected) {\r\n            this.disabled(!(selected in this.valuesForEnable));\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/components/disable-on-option/yesno.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'Magento_Catalog/js/components/disable-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    var comp = Element.extend(strategy).extend({\r\n\r\n        defaults: {\r\n            listens: {\r\n                disabled: 'updateValueForDisabledField',\r\n                visible: 'updateValueForDisabledField'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.updateValueForDisabledField();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Set element value to O(No) if element is invisible and disabled\r\n         * Set element value to initialValue if element becomes visible and enable\r\n         */\r\n        updateValueForDisabledField: function () {\r\n            if (!this.disabled() && this.visible()) {\r\n                this.set('value', this.initialValue);\r\n            } else {\r\n                this.set('value', 0);\r\n            }\r\n        }\r\n    });\r\n\r\n    return comp.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component;\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/single-checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component;\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/textarea.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/textarea'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component;\r\n});\r\n","Magento_Catalog/js/components/use-parent-settings/toggle-disabled-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var mixin = {\r\n        defaults: {\r\n            imports: {\r\n                toggleDisabled: '${ $.parentName }.custom_use_parent_settings:checked'\r\n            },\r\n            useParent: false,\r\n            useDefaults: false\r\n        },\r\n\r\n        /**\r\n         * Disable form input if settings for parent section is used\r\n         * or default value is applied.\r\n         *\r\n         * @param {Boolean} isUseParent\r\n         */\r\n        toggleDisabled: function (isUseParent) {\r\n            var disabled = this.useParent = isUseParent;\r\n\r\n            if (!disabled && !_.isUndefined(this.service)) {\r\n                disabled = !!this.isUseDefault();\r\n            }\r\n\r\n            this.saveUseDefaults();\r\n            this.disabled(disabled);\r\n        },\r\n\r\n        /**\r\n         * Stores original state of the field.\r\n         */\r\n        saveUseDefaults: function () {\r\n            this.useDefaults = this.disabled();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setInitialValue: function () {\r\n            this._super();\r\n            this.isUseDefault(this.useDefaults);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        toggleUseDefault: function (state) {\r\n            this._super();\r\n            this.disabled(state || this.useParent);\r\n        }\r\n    };\r\n\r\n    return function (target) {\r\n        return target.extend(mixin);\r\n    };\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/date',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/fieldset.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Fieldset, strategy) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend(strategy).extend(\r\n        {\r\n            defaults: {\r\n                openOnShow: true\r\n            },\r\n\r\n            /**\r\n             * Toggle visibility state.\r\n             */\r\n            toggleVisibility: function () {\r\n                this._super();\r\n\r\n                if (this.openOnShow) {\r\n                    this.opened(this.inverseVisibility ? !this.isShown : this.isShown);\r\n                }\r\n            }\r\n        }\r\n    );\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/strategy.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function () {\r\n    'use strict';\r\n\r\n    return {\r\n        defaults: {\r\n            valuesForOptions: [],\r\n            imports: {\r\n                toggleVisibility:\r\n                    'product_attribute_add_form.product_attribute_add_form.base_fieldset.frontend_input:value'\r\n            },\r\n            isShown: false,\r\n            inverseVisibility: false\r\n        },\r\n\r\n        /**\r\n         * Toggle visibility state.\r\n         *\r\n         * @param {Number} selected\r\n         */\r\n        toggleVisibility: function (selected) {\r\n            this.isShown = selected in this.valuesForOptions;\r\n            this.visible(this.inverseVisibility ? !this.isShown : this.isShown);\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/textarea.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/textarea',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/components/visible-on-option/yesno.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'Magento_Catalog/js/components/visible-on-option/strategy'\r\n], function (Element, strategy) {\r\n    'use strict';\r\n\r\n    return Element.extend(strategy);\r\n});\r\n","Magento_Catalog/js/form/element/action-delete.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            prefixName: '',\r\n            prefixElementName: '',\r\n            elementName: '',\r\n            suffixName: ''\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @param  {Object} config\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function (config) {\r\n            this._super(config);\r\n\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId,\r\n                prefixName,\r\n                suffixName;\r\n\r\n            // Get recordId\r\n            recordId = this.parentName.split('.').last();\r\n\r\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\r\n            this.elementName = this.prefixElementName + recordId;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '[' + this.suffixName + ']';\r\n            }\r\n            this.inputName = prefixName + '[' + this.elementName + ']' + suffixName;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '.' + this.suffixName;\r\n            }\r\n            this.dataScope = 'data.' + this.prefixName + '.' + this.elementName + suffixName;\r\n\r\n            this.links.value = this.provider + ':' + this.dataScope;\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Reduce\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        },\r\n\r\n        /**\r\n         * Delete record instance\r\n         * update data provider dataScope\r\n         *\r\n         * @param {Object} parents\r\n         */\r\n        deleteRecord: function (parents) {\r\n            this.value(1);\r\n            parents[1].deleteRecord(parents[0].index, parents[0].recordId);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/form/element/checkbox.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Checkbox) {\r\n    'use strict';\r\n\r\n    return Checkbox.extend({\r\n        defaults: {\r\n            inputCheckBoxName: '',\r\n            prefixElementName: '',\r\n            parentDynamicRowName: 'visual_swatch'\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (this.rows && this.rows().elems().length === 0) {\r\n                this.checked(true);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId,\r\n                value;\r\n\r\n            recordId = this.parentName.split('.').last();\r\n            value = this.prefixElementName + recordId;\r\n\r\n            this.dataScope = 'data.' + this.inputCheckBoxName;\r\n            this.inputName = this.dataScopeToHtmlArray(this.inputCheckBoxName);\r\n\r\n            this.initialValue = value;\r\n\r\n            this.links.value = this.provider + ':' + this.dataScope;\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Add new level of nesting.\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/form/element/input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            prefixName: '',\r\n            prefixElementName: '',\r\n            elementName: '',\r\n            suffixName: ''\r\n        },\r\n\r\n        /**\r\n         * Parses options and merges the result with instance\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initConfig: function () {\r\n            this._super();\r\n            this.configureDataScope();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Configure data scope.\r\n         */\r\n        configureDataScope: function () {\r\n            var recordId,\r\n                prefixName,\r\n                suffixName;\r\n\r\n            // Get recordId\r\n            recordId = this.parentName.split('.').last();\r\n\r\n            prefixName = this.dataScopeToHtmlArray(this.prefixName);\r\n            this.elementName = this.prefixElementName + recordId;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '[' + this.suffixName + ']';\r\n            }\r\n            this.inputName = prefixName + '[' + this.elementName + ']' + suffixName;\r\n\r\n            suffixName = '';\r\n\r\n            if (!_.isEmpty(this.suffixName) || _.isNumber(this.suffixName)) {\r\n                suffixName = '.' + this.suffixName;\r\n            }\r\n\r\n            this.exportDataLink = 'data.' + this.prefixName + '.' + this.elementName + suffixName;\r\n            this.exports.value = this.provider + ':' + this.exportDataLink;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        destroy: function () {\r\n            this._super();\r\n\r\n            this.source.remove(this.exportDataLink);\r\n        },\r\n\r\n        /**\r\n         * Get HTML array from data scope.\r\n         *\r\n         * @param {String} dataScopeString\r\n         * @returns {String}\r\n         */\r\n        dataScopeToHtmlArray: function (dataScopeString) {\r\n            var dataScopeArray, dataScope, reduceFunction;\r\n\r\n            /**\r\n             * Add new level of nesting.\r\n             *\r\n             * @param {String} prev\r\n             * @param {String} curr\r\n             * @returns {String}\r\n             */\r\n            reduceFunction = function (prev, curr) {\r\n                return prev + '[' + curr + ']';\r\n            };\r\n\r\n            dataScopeArray = dataScopeString.split('.');\r\n\r\n            dataScope = dataScopeArray.shift();\r\n            dataScope += dataScopeArray.reduce(reduceFunction, '');\r\n\r\n            return dataScope;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/addtocart-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Element, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Prepare data, that will be inserted as data-mage-init attribute into button. With help of this attribute\r\n         * Add To * buttons can understand post data and urls\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getDataMageInit: function (row) {\r\n            return '{\"redirectUrl\": { \"url\" : \"'  + uencProcessor(row['add_to_cart_button'].url) + '\"}}';\r\n        },\r\n\r\n        /**\r\n         * Prepare Data-Post data that will be used in data-mage-init\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['add_to_cart_button']['post_data']);\r\n        },\r\n\r\n        /**\r\n         * Check if product has required options.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        hasRequiredOptions: function (row) {\r\n            return row['add_to_cart_button']['required_options'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to cart\" button can be shown or hide\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isSalable: function (row) {\r\n            return row['is_salable'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, stock status text can be \"In stock\" or \"Out Of Stock\"\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isAvailable: function (row) {\r\n            return row['is_available'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to cart\" button can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_cart', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/addtocompare-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Prepare Data-Post data that will be used in data-mage-init\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Array}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['add_to_compare_button'].url ||\r\n                    row['add_to_compare_button']['post_data']);\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to compare\" button can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_compare', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/learn-more.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        /**\r\n         * Depends on this option, \"Learn More\" link can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'learn_more', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/name.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator',\r\n    'escaper'\r\n], function (Column, columnStatusValidator, escaper) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            allowedTags: ['div', 'span', 'b', 'strong', 'i', 'em', 'u', 'a']\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, product name can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'name', 'show_attributes');\r\n        },\r\n\r\n        /**\r\n         * Name column.\r\n         *\r\n         * @param {String} label\r\n         * @returns {String}\r\n         */\r\n        getNameUnsanitizedHtml: function (label) {\r\n            return escaper.escapeHtml(label, this.allowedTags);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/weight-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Get weight\r\n         * @returns {*|jQuery|HTMLElement}\r\n         */\r\n        $weight: function () {\r\n            return $('#weight');\r\n        },\r\n\r\n        /**\r\n         * Weight Switcher\r\n         * @returns {*|jQuery|HTMLElement}\r\n         */\r\n        $weightSwitcher: function () {\r\n            return $('[data-role=weight-switcher]');\r\n        },\r\n\r\n        /**\r\n         * Weight Change Toggle\r\n         * @returns {*|jQuery|HTMLElement}\r\n         */\r\n        $weightChangeToggle: function () {\r\n            return $('#toggle_weight');\r\n        },\r\n\r\n        /**\r\n         * Is locked\r\n         * @returns {*}\r\n         */\r\n        isLocked: function () {\r\n            return this.$weight().is('[data-locked]');\r\n        },\r\n\r\n        /**\r\n         * Disabled\r\n         */\r\n        disabled: function () {\r\n            this.$weight().addClass('ignore-validate').prop('disabled', true);\r\n        },\r\n\r\n        /**\r\n         * Enabled\r\n         */\r\n        enabled: function () {\r\n            this.$weight().removeClass('ignore-validate').prop('disabled', false);\r\n        },\r\n\r\n        /**\r\n         * Disabled Switcher\r\n         */\r\n        disabledSwitcher: function () {\r\n            this.$weightSwitcher().find('input[type=\"radio\"]').addClass('ignore-validate').prop('disabled', true);\r\n        },\r\n\r\n        /**\r\n         * Enabled Switcher\r\n         */\r\n        enabledSwitcher: function () {\r\n            this.$weightSwitcher().find('input[type=\"radio\"]').removeClass('ignore-validate').prop('disabled', false);\r\n        },\r\n\r\n        /**\r\n         * Switch Weight\r\n         * @returns {*}\r\n         */\r\n        switchWeight: function () {\r\n            if (this.hasWeightChangeToggle()) {\r\n                return;\r\n            }\r\n\r\n            return this.productHasWeightBySwitcher() ? this.enabled() : this.disabled();\r\n        },\r\n\r\n        /**\r\n         * Toggle Switcher\r\n         */\r\n        toggleSwitcher: function () {\r\n            this.isWeightChanging() ? this.enabledSwitcher() : this.disabledSwitcher();\r\n        },\r\n\r\n        /**\r\n         * Hide weight switcher\r\n         */\r\n        hideWeightSwitcher: function () {\r\n            this.$weightSwitcher().hide();\r\n        },\r\n\r\n        /**\r\n         * Has weight switcher\r\n         * @returns {*}\r\n         */\r\n        hasWeightSwitcher: function () {\r\n            return this.$weightSwitcher().is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Has weight\r\n         * @returns {*}\r\n         */\r\n        hasWeight: function () {\r\n            return this.$weight.is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Has weight change toggle\r\n         * @returns {*}\r\n         */\r\n        hasWeightChangeToggle: function () {\r\n            return this.$weightChangeToggle().is(':visible');\r\n        },\r\n\r\n        /**\r\n         * Product has weight\r\n         * @returns {Bool}\r\n         */\r\n        productHasWeightBySwitcher: function () {\r\n            return $('input:checked', this.$weightSwitcher()).val() === '1';\r\n        },\r\n\r\n        /**\r\n         * Product weight toggle is checked\r\n         * @returns {Bool}\r\n         */\r\n        isWeightChanging: function () {\r\n            return this.$weightChangeToggle().is(':checked');\r\n        },\r\n\r\n        /**\r\n         * Change\r\n         * @param {String} data\r\n         */\r\n        change: function (data) {\r\n            var value = data !== undefined ? +data : !this.productHasWeightBySwitcher();\r\n\r\n            $('input[value=' + value + ']', this.$weightSwitcher()).prop('checked', true);\r\n            this.switchWeight();\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         */\r\n        'Magento_Catalog/js/product/weight-handler': function () {\r\n            this.bindAll();\r\n\r\n            if (this.hasWeightSwitcher()) {\r\n                this.switchWeight();\r\n            }\r\n\r\n            if (this.hasWeightChangeToggle()) {\r\n                this.toggleSwitcher();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            this.$weightSwitcher().find('input').on('change', this.switchWeight.bind(this));\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/product/list/column-status-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return _.extend({\r\n        /**\r\n         * Check whether we can show column depends on server settings or not\r\n         *\r\n         * @param {Object} source\r\n         * @param {String} attributeCode\r\n         * @param {String} type\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function (source, attributeCode, type) {\r\n            var attributes;\r\n\r\n            if (!source[type]) {\r\n                return false;\r\n            }\r\n\r\n            attributes = source[type].split(',');\r\n\r\n            return _.contains(attributes, attributeCode);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/listing'\r\n], function (ko, _, Listing) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            additionalClasses: '',\r\n            filteredRows: {},\r\n            limit: 5,\r\n            listens: {\r\n                elems: 'filterRowsFromCache',\r\n                '${ $.provider }:data.items': 'filterRowsFromServer'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.filteredRows = ko.observable();\r\n            this.initProductsLimit();\r\n            this.hideLoader();\r\n        },\r\n\r\n        /**\r\n         * Initialize product limit\r\n         * Product limit can be configured through Ui component.\r\n         * Product limit are present in widget form\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initProductsLimit: function () {\r\n            if (this.source['page_size']) {\r\n                this.limit = this.source['page_size'];\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    rows: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sort and filter rows, that are already in magento storage cache\r\n         *\r\n         * @return void\r\n         */\r\n        filterRowsFromCache: function () {\r\n            this._filterRows(this.rows);\r\n        },\r\n\r\n        /**\r\n         * Sort and filter rows, that are come from backend\r\n         *\r\n         * @param {Object} rows\r\n         */\r\n        filterRowsFromServer: function (rows) {\r\n            this._filterRows(rows);\r\n        },\r\n\r\n        /**\r\n         * Filter rows by limit and sort them\r\n         *\r\n         * @param {Array} rows\r\n         * @private\r\n         */\r\n        _filterRows: function (rows) {\r\n            this.filteredRows(_.sortBy(rows, 'added_at').reverse().slice(0, this.limit));\r\n        },\r\n\r\n        /**\r\n         * Can retrieve product url\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getUrl: function (row) {\r\n            return row.url;\r\n        },\r\n\r\n        /**\r\n         * Get product attribute by code.\r\n         *\r\n         * @param {String} code\r\n         * @return {Object}\r\n         */\r\n        getComponentByCode: function (code) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                component;\r\n\r\n            component = _.filter(elems, function (elem) {\r\n                return elem.index === code;\r\n            }, this).pop();\r\n\r\n            return component;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/final-price.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiCollection'\r\n], function (_, registry, utils, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            label: false,\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            showMinimalPrice: false,\r\n            showMaximumPrice: false,\r\n            useLinkForAsLowAs: false,\r\n            bodyTmpl: 'Magento_Catalog/product/final_price',\r\n            priceWrapperCssClasses: '',\r\n            priceWrapperAttr: {}\r\n        },\r\n\r\n        /**\r\n         * Get product final price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} final price html\r\n         */\r\n        getPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} final price html\r\n         */\r\n        getPriceUnsanitizedHtml: function (row) {\r\n            return this.getPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get product regular price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} regular price html\r\n         */\r\n        getRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['regular_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getRegularPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} regular price html\r\n         */\r\n        getRegularPriceUnsanitizedHtml: function (row) {\r\n            return this.getRegularPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Check if product has a price range.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        hasPriceRange: function (row) {\r\n            return row['price_info']['max_regular_price'] !== row['price_info']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} special price html\r\n         */\r\n        hasSpecialPrice: function (row) {\r\n            return row['price_info']['regular_price'] > row['price_info']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has minimal price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        isMinimalPrice: function (row) {\r\n            return row['price_info']['minimal_price'] < row['price_info']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product minimal price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        getMinimalPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['minimal_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMinimalPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        getMinimalPriceUnsanitizedHtml: function (row) {\r\n            return this.getMinimalPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Check if product is salable.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        isSalable: function (row) {\r\n            return row['is_salable'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum price html\r\n         */\r\n        getMaxPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['max_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMaxPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum price html\r\n         */\r\n        getMaxPriceUnsanitizedHtml: function (row) {\r\n            return this.getMaxPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get product maximum regular price in case of price range and special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum regular price html\r\n         */\r\n        getMaxRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['max_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMaxRegularPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum regular price html\r\n         */\r\n        getMaxRegularPriceUnsanitizedHtml: function (row) {\r\n            return this.getMaxRegularPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get product minimal regular price in case of price range and special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal regular price html\r\n         */\r\n        getMinRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMinRegularPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal regular price html\r\n         */\r\n        getMinRegularPriceUnsanitizedHtml: function (row) {\r\n            return this.getMinRegularPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get adjustments names and return as string.\r\n         *\r\n         * @return {String} adjustments classes\r\n         */\r\n        getAdjustmentCssClasses: function () {\r\n            return _.pluck(this.getAdjustments(), 'index').join(' ');\r\n        },\r\n\r\n        /**\r\n         * Get product minimal price as number.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal price amount\r\n         */\r\n        getMinimalPriceAmount: function (row) {\r\n            return row['price_info']['minimal_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMinimalPriceAmount\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal price amount\r\n         */\r\n        getMinimalPriceAmountUnsanitizedHtml: function (row) {\r\n            return this.getMinimalPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Get product minimal regular price as number in case of special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal regular price amount\r\n         */\r\n        getMinimalRegularPriceAmount: function (row) {\r\n            return row['price_info']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum price as number.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} maximum price amount\r\n         */\r\n        getMaximumPriceAmount: function (row) {\r\n            return row['price_info']['max_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum regular price as number in case of special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} maximum regular price amount\r\n         */\r\n        getMaximumRegularPriceAmount: function (row) {\r\n            return row['price_info']['max_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if minimal regular price exist for product.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        showMinRegularPrice: function (row) {\r\n            return this.getMinimalPriceAmount(row) < this.getMinimalRegularPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Check if maximum regular price exist for product.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        showMaxRegularPrice: function (row) {\r\n            return this.getMaximumPriceAmount(row) < this.getMaximumRegularPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Get path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Get all price adjustments.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getAdjustments: function () {\r\n            var adjustments = this.elems();\r\n\r\n            _.each(adjustments, function (adjustment) {\r\n                adjustment.setPriceType(this.priceType);\r\n                adjustment.source = this.source;\r\n            }, this);\r\n\r\n            return adjustments;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (_, Element, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Catalog/product/list/columns/image',\r\n            imageCode: 'default',\r\n            image: {}\r\n        },\r\n\r\n        /**\r\n         * Find image by code in scope of images\r\n         *\r\n         * @param {Object} images\r\n         * @returns {*|T}\r\n         */\r\n        getImage: function (images) {\r\n            return _.filter(images, function (image) {\r\n                return this.imageCode === image.code;\r\n            }, this).pop();\r\n        },\r\n\r\n        /**\r\n         * Get image path.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getImageUrl: function (row) {\r\n            return this.getImage(row.images).url;\r\n        },\r\n\r\n        /**\r\n         * Get image box width.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getWidth: function (row) {\r\n            return this.getImage(row.images).width;\r\n        },\r\n\r\n        /**\r\n         * Get image box height.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getHeight: function (row) {\r\n            return this.getImage(row.images).height;\r\n        },\r\n\r\n        /**\r\n         * Get resized image width.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getResizedImageWidth: function (row) {\r\n            return this.getImage(row.images)['resized_width'];\r\n        },\r\n\r\n        /**\r\n         * Get resized image height.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getResizedImageHeight: function (row) {\r\n            return this.getImage(row.images)['resized_height'];\r\n        },\r\n\r\n        /**\r\n         * Get image alt text.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getLabel: function (row) {\r\n            if (!this.imageExists(row)) {\r\n                return this._super();\r\n            }\r\n\r\n            return this.getImage(row.images).label;\r\n        },\r\n\r\n        /**\r\n         * Check if image exist.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        imageExists: function (row) {\r\n            return this.getImage(row.images) !== 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Check if component must be shown.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'image', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/price-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiCollection',\r\n    'Magento_Catalog/js/product/list/column-status-validator',\r\n    'uiLayout'\r\n], function (ko, _, registry, utils, Collection, columnStatusValidator, layout) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            label: '',\r\n            hasSpecialPrice: false,\r\n            showMinimalPrice: false,\r\n            useLinkForAsLowAs: false,\r\n            visible: true,\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            bodyTmpl: 'Magento_Catalog/product/price/price_box',\r\n            disableAction: false,\r\n            controlVisibility: true,\r\n            sortable: false,\r\n            sorting: false,\r\n            draggable: true,\r\n            fieldClass: {},\r\n            renders: {\r\n                default: {}\r\n            },\r\n            ignoreTmpls: {\r\n                fieldAction: true\r\n            },\r\n            statefull: {\r\n                visible: true,\r\n                sorting: true\r\n            },\r\n            imports: {\r\n                exportSorting: 'sorting'\r\n            },\r\n            listens: {\r\n                elems: ''\r\n            },\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            },\r\n            pricesInit: {}\r\n        },\r\n\r\n        /**\r\n         * Sort prices api\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        sort: function () {\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check whether is allowed to render price or not\r\n         *\r\n         * @returns {*}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'price', 'show_attributes');\r\n        },\r\n\r\n        /**\r\n         * Retrieve array of prices, that should be rendered for specific product\r\n         *\r\n         * @param {Array} row\r\n         * @return {Array}\r\n         */\r\n        getPrices: function (row) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                result;\r\n\r\n            //we cant take type of product from row\r\n            this.initPrices(row);\r\n            result = _.filter(elems, function (elem) {\r\n                return elem.productType === row.type;\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Recursive Merging of objects\r\n         *\r\n         * @param {Array} target\r\n         * @param {Array} source\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _deepObjectExtend: function (target, source) {\r\n            var _target = utils.copy(target);\r\n\r\n            _.each(source, function (value, key) {\r\n                if (_.keys(value).length && typeof _target[key] !== 'undefined') {\r\n                    _target[key] = this._deepObjectExtend(_target[key], value);\r\n                } else {\r\n                    _target[key] = value;\r\n                }\r\n            }, this);\r\n\r\n            return _target;\r\n        },\r\n\r\n        /**\r\n         * Init price type box, in cases when product type has custom component or bodyTmpl\r\n         *\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _initPriceWithCustomMetaData: function (productType) {\r\n            var price = this._deepObjectExtend(\r\n                this.renders.prices['default'],\r\n                this.renders.prices[productType]\r\n            );\r\n\r\n            price.name = productType + '.default';\r\n            price.parent = this.name;\r\n            price.source = this.source;\r\n            price.productType = productType;\r\n            layout([price]);\r\n        },\r\n\r\n        /**\r\n         * Init Prices by product type and add them to layout\r\n         *\r\n         * @param {Array} _priceData\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _initPricesForProductType: function (_priceData, productType) {\r\n            var prices = [];\r\n\r\n            this._setPriceNamesToPrices(_priceData, productType);\r\n            _.sortBy(_priceData, this._comparePrices);\r\n\r\n            _.each(_priceData, function (priceData) {\r\n                if (!priceData.component) {\r\n                    return;\r\n                }\r\n\r\n                priceData.parent = this.name;\r\n                priceData.provider = this.provider;\r\n                priceData.productType = productType;\r\n                priceData = utils.template(priceData, this);\r\n                prices.push(priceData);\r\n            }, this);\r\n\r\n            layout(prices);\r\n        },\r\n\r\n        /**\r\n         * Init dynamic price components\r\n         *\r\n         * @param {Array} row\r\n         * @returns {void}\r\n         */\r\n        initPrices: function (row) {\r\n            var _priceData = [],\r\n                productType = row.type,\r\n                defaultPrice = this.renders.prices['default'];\r\n\r\n            if (this.pricesInit[productType]) {\r\n                return true;\r\n            }\r\n\r\n            this.pricesInit[productType] = true;\r\n\r\n            if (this.renders.prices[productType] && this._needToApplyCustomTemplate(this.renders.prices[productType])) {\r\n                return this._initPriceWithCustomMetaData(productType);\r\n            }\r\n\r\n            if (this.renders.prices[productType] && this.renders.prices[productType].children) {\r\n                _priceData = this._deepObjectExtend(defaultPrice.children, this.renders.prices[productType].children);\r\n            } else {\r\n                _priceData = defaultPrice.children;\r\n            }\r\n\r\n            return this._initPricesForProductType(_priceData, productType);\r\n        },\r\n\r\n        /**\r\n         * Set name to all price components\r\n         *\r\n         * @param {Array} prices\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _setPriceNamesToPrices: function (prices, productType) {\r\n            _.each(prices, function (price, name) {\r\n                price.priceType = name;\r\n                price.name = name + '.' + productType;\r\n            });\r\n\r\n            return prices;\r\n        },\r\n\r\n        /**\r\n         * Sort callback to compare prices by sort order\r\n         *\r\n         * @param {Number} firstPrice\r\n         * @param {Number} secondPrice\r\n         * @returns {Number}\r\n         * @private\r\n         */\r\n        _comparePrices: function (firstPrice, secondPrice) {\r\n            if (firstPrice.sortOrder < secondPrice.sortOrder) {\r\n                return -1;\r\n            }\r\n\r\n            if (firstPrice.sortOrder > secondPrice.sortOrder) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        /**\r\n         * Check whether metadata of product type prices was changed, and we should\r\n         * to apply custom template or custom component\r\n         *\r\n         * @param {Array} productData\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _needToApplyCustomTemplate: function (productData) {\r\n            return productData.bodyTmpl || productData.component;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Get price label.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/pricetype-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'uiCollection'\r\n], function (ko, _, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        /**\r\n         * Find from all price ui components, price with specific code, init source on it and set priceType\r\n         *\r\n         * @param {String} code\r\n         * @returns {*|T}\r\n         */\r\n        getPriceByCode: function (code) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                price;\r\n\r\n            price = _.filter(elems, function (elem) {\r\n                return elem.index.split('.').shift() === code;\r\n            }, this).pop();\r\n\r\n            price.source = this.source();\r\n            price.priceType = code;\r\n\r\n            return price;\r\n        },\r\n\r\n        /**\r\n         * Retrieve body template\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Check whether price has price range, depends on different options, that can be choose\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        hasPriceRange: function (row) {\r\n            return row['price_info']['max_regular_price'] !== row['price_info']['min_regular_price'];\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/tier-price/percentage-processor.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'Magento_Catalog/js/utils/percentage-price-calculator'\r\n], function (Element, _, $, percentagePriceCalculator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            priceElem: '${ $.parentName }.price',\r\n            selector: 'input',\r\n            imports: {\r\n                priceValue: '${ $.priceElem }:priceValue'\r\n            },\r\n            exports: {\r\n                calculatedVal: '${ $.priceElem }:value'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            _.bindAll(this, 'initPriceListener', 'onInput');\r\n\r\n            $.async({\r\n                component: this.priceElem,\r\n                selector: this.selector\r\n            }, this.initPriceListener);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initObservable: function () {\r\n            return this._super()\r\n                .observe(['visible']);\r\n        },\r\n\r\n        /**\r\n         * Handles keyup event on price input.\r\n         *\r\n         * {@param} HTMLElement elem\r\n         */\r\n        initPriceListener: function (elem) {\r\n            $(elem).on('keyup.priceCalc', this.onInput);\r\n        },\r\n\r\n        /**\r\n         * Delegates calculation of the price input value to percentagePriceCalculator.\r\n         *\r\n         * {@param} object event\r\n         */\r\n        onInput: function (event) {\r\n            var value = event.currentTarget.value;\r\n\r\n            if (value.slice(-1) === '%') {\r\n                value = percentagePriceCalculator(this.priceValue, value);\r\n                this.set('calculatedVal', value);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/tier-price/value-type-select.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Select, uiRegistry, _) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            prices: {}\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            delete this.prices.__disableTmpl;\r\n            this.prepareForm();\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        setInitialValue: function () {\r\n            this.initialValue = this.getInitialValue();\r\n\r\n            if (this.value.peek() !== this.initialValue) {\r\n                this.value(this.initialValue);\r\n            }\r\n\r\n            this.isUseDefault(this.disabled());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * {@inheritdoc}\r\n         */\r\n        prepareForm: function () {\r\n            var elements = this.getElementsByPrices(),\r\n                prices = this.prices,\r\n                currencyType = _.keys(prices)[0],\r\n                select = this;\r\n\r\n            uiRegistry.get(elements, function () {\r\n                _.each(arguments, function (currentValue) {\r\n                    if (parseFloat(currentValue.value()) > 0) {\r\n                        _.each(prices, function (priceValue, priceKey) {\r\n                            if (priceValue === currentValue.name) {\r\n                                currencyType = priceKey;\r\n                            }\r\n                        });\r\n                    }\r\n                });\r\n                select.value(currencyType);\r\n                select.on('value', select.onUpdate.bind(select));\r\n                select.onUpdate();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @returns {Array}\r\n         */\r\n        getElementsByPrices: function () {\r\n            var elements = [];\r\n\r\n            _.each(this.prices, function (currentValue) {\r\n                elements.push(currentValue);\r\n            });\r\n\r\n            return elements;\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated\r\n         */\r\n        onUpdate: function () {\r\n            var value = this.value(),\r\n                prices = this.prices,\r\n                select = this,\r\n                parentDataScopeArr = this.dataScope.split('.'),\r\n                parentDataScope,\r\n                elements = this.getElementsByPrices();\r\n\r\n            parentDataScopeArr.pop();\r\n            parentDataScope = parentDataScopeArr.join('.');\r\n\r\n            uiRegistry.get(elements, function () {\r\n                var sourceData = select.source.get(parentDataScope);\r\n\r\n                _.each(arguments, function (currentElement) {\r\n                    var index;\r\n\r\n                    _.each(prices, function (priceValue, priceKey) {\r\n                        if (priceValue === currentElement.name) {\r\n                            index = priceKey;\r\n                        }\r\n                    });\r\n\r\n                    if (value === index) {\r\n                        currentElement.visible(true);\r\n                        sourceData[currentElement.index] = currentElement.value();\r\n                    } else {\r\n                        currentElement.value('');\r\n                        currentElement.visible(false);\r\n                        delete sourceData[currentElement.index];\r\n                    }\r\n                });\r\n                select.source.set(parentDataScope, sourceData);\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/utils/percentage-price-calculator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(['Magento_Ui/js/lib/validation/utils'], function (utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Calculates the price input value when entered percentage value.\r\n     *\r\n     * @param {String} price\r\n     * @param {String} input\r\n     *\r\n     * @returns {String}\r\n     */\r\n    return function (price, input) {\r\n        var result,\r\n            lastInputSymbol = input.slice(-1),\r\n            inputPercent = input.slice(0, -1),\r\n            parsedPercent = utils.parseNumber(inputPercent),\r\n            parsedPrice = utils.parseNumber(price);\r\n\r\n        if (lastInputSymbol !== '%') {\r\n            result = input;\r\n        } else if (\r\n            input === '%' ||\r\n            isNaN(parsedPrice) ||\r\n            parsedPercent != inputPercent || /* eslint eqeqeq:0 */\r\n            isNaN(parsedPercent) ||\r\n            input === ''\r\n        ) {\r\n            result = '';\r\n        } else if (parsedPercent > 100) {\r\n            result = '0.00';\r\n        } else if (lastInputSymbol === '%') {\r\n            result = parsedPrice - parsedPrice * (inputPercent / 100);\r\n            result = result.toFixed(2);\r\n        } else {\r\n            result = input;\r\n        }\r\n\r\n        return result;\r\n    };\r\n});\r\n","Magento_CatalogInventory/js/components/qty-validator-changer.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            valueUpdate: 'input'\r\n        },\r\n\r\n        /**\r\n         * Change validator\r\n         */\r\n        handleChanges: function (value) {\r\n            var isDigits = value !== 1;\r\n\r\n            this.validation['validate-integer'] = isDigits;\r\n            this.validation['less-than-equals-to'] = isDigits ? 99999999 : 99999999.9999;\r\n            this.validate();\r\n        }\r\n    });\r\n});\r\n","Magento_CatalogInventory/js/components/use-config-min-sale-qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox',\r\n    'underscore',\r\n    'uiRegistry'\r\n], function (checkbox, _, registry) {\r\n    'use strict';\r\n\r\n    return checkbox.extend({\r\n        defaults: {\r\n            valueFromConfig: ''\r\n        },\r\n\r\n        /**\r\n         * @returns {Element}\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['valueFromConfig']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.onCheckedChanged(this.checked());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            var valueFromConfig = this.valueFromConfig();\r\n\r\n            if (newChecked && (_.isArray(valueFromConfig) && valueFromConfig.length === 0 || valueFromConfig === 1)) {\r\n                this.changeVisibleDisabled(this.inputField, true, true, 1);\r\n            } else if (newChecked && _.isObject(valueFromConfig)) {\r\n                this.changeVisibleDisabled(this.inputField, false, true, null);\r\n                this.changeVisibleDisabled(this.dynamicRowsField, true, true, null);\r\n            } else if (newChecked && _.isNumber(valueFromConfig)) {\r\n                this.changeVisibleDisabled(this.inputField, true, true, null);\r\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\r\n            } else {\r\n                this.changeVisibleDisabled(this.inputField, true, this.disabled() || false, null);\r\n                this.changeVisibleDisabled(this.dynamicRowsField, false, true, null);\r\n            }\r\n\r\n            this._super(newChecked);\r\n        },\r\n\r\n        /**\r\n         * Change visible and disabled\r\n         *\r\n         * @param {String} filter\r\n         * @param {Boolean} visible\r\n         * @param {Boolean} disabled\r\n         * @param {Null|Number} valueFromConfig\r\n         */\r\n        changeVisibleDisabled: function (filter, visible, disabled, valueFromConfig) {\r\n            registry.async(filter)(\r\n                function (currentComponent) {\r\n                    var initialValue = currentComponent.initialValue;\r\n\r\n                    if (_.isString(initialValue) || initialValue === 0 || valueFromConfig === 1) {\r\n                        currentComponent.value(1);\r\n                    } else if (initialValue) {\r\n                        currentComponent.value(initialValue);\r\n                    }\r\n\r\n                    currentComponent.visible(visible);\r\n                    currentComponent.disabled(disabled);\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_CatalogInventory/js/components/use-config-settings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (checkbox) {\r\n    'use strict';\r\n\r\n    return checkbox.extend({\r\n        defaults: {\r\n            valueFromConfig: '',\r\n            linkedValue: '',\r\n            disableParent: false,\r\n            listens: {\r\n                disabled: 'processState',\r\n                checked: 'processState onCheckedChanged'\r\n            },\r\n            imports: {\r\n                readOnly: 'ns = ${ $.ns }, index = stock_data:disabled'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @returns {Element}\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['valueFromConfig', 'linkedValue', 'disableParent']);\r\n        },\r\n\r\n        /**\r\n         * Handle checked and disabled changes to calculate disableParent value\r\n         */\r\n        processState: function () {\r\n            this.disableParent(this.checked() || this.readOnly);\r\n\r\n            if (this.readOnly) {\r\n                this.disable();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            if (newChecked) {\r\n                this.linkedValue(this.valueFromConfig());\r\n            }\r\n\r\n            this._super(newChecked);\r\n        }\r\n    });\r\n});\r\n","Magento_Checkout/js/model/default-post-code-resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    /**\r\n     * Define necessity of using default post code value\r\n     */\r\n    var useDefaultPostCode;\r\n\r\n    return {\r\n        /**\r\n         * Resolve default post code\r\n         *\r\n         * @returns {String|null}\r\n         */\r\n        resolve: function () {\r\n            return useDefaultPostCode ?  window.checkoutConfig.defaultPostcode : null;\r\n        },\r\n\r\n        /**\r\n         * Set state to useDefaultPostCode variable\r\n         *\r\n         * @param {Boolean} shouldUseDefaultPostCode\r\n         * @returns {underscore}\r\n         */\r\n        setUseDefaultPostCode: function (shouldUseDefaultPostCode) {\r\n            useDefaultPostCode = shouldUseDefaultPostCode;\r\n\r\n            return this;\r\n        }\r\n    };\r\n});\r\n","Magento_Cms/js/folder-tree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery/ui',\r\n    'jquery/jstree/jquery.jstree'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.folderTree', {\r\n        options: {\r\n            root: 'root',\r\n            rootName: 'Root',\r\n            url: '',\r\n            currentPath: ['root'],\r\n            tree: {\r\n                core: {\r\n                    themes: {\r\n                        dots: false\r\n                    },\r\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                    check_callback: true\r\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n                }\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var options = this.options,\r\n                treeOptions = $.extend(\r\n                    true,\r\n                    {},\r\n                    options.tree,\r\n                    {\r\n                        core: {\r\n                            data: {\r\n                                url: options.url,\r\n                                type: 'POST',\r\n                                dataType: 'text',\r\n                                dataFilter: $.proxy(function (data) {\r\n                                    return this._convertData(JSON.parse(data));\r\n                                }, this),\r\n\r\n                                /**\r\n                                 * @param {HTMLElement} node\r\n                                 * @return {Object}\r\n                                 */\r\n                                data: function (node) {\r\n                                    return {\r\n                                        node: node.id === 'root' ? null : node.id,\r\n                                        'form_key': window.FORM_KEY\r\n                                    };\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                );\r\n\r\n            this.element.jstree(treeOptions)\r\n                .on('ready.jstree', $.proxy(this.treeLoaded, this))\r\n                .on('load_node.jstree', $.proxy(this._createRootNode, this));\r\n        },\r\n\r\n        /**\r\n         * Tree loaded.\r\n         */\r\n        treeLoaded: function () {\r\n            var path = this.options.currentPath,\r\n                tree = this.element,\r\n                lastExistentFolderEl,\r\n\r\n                /**\r\n                 * Recursively open folders specified in path array.\r\n                 */\r\n                recursiveOpen = function () {\r\n                    var folderEl = $('[data-id=\"' + path.pop() + '\"]');\r\n\r\n                    // if folder doesn't exist, select the last opened folder\r\n                    if (!folderEl.length) {\r\n                        tree.jstree('select_node', lastExistentFolderEl);\r\n\r\n                        return;\r\n                    }\r\n\r\n                    lastExistentFolderEl = folderEl;\r\n\r\n                    if (path.length) {\r\n                        tree.jstree('open_node', folderEl, recursiveOpen);\r\n                    } else {\r\n                        tree.jstree('open_node', folderEl, function () {\r\n                            tree.jstree('select_node', folderEl);\r\n                        });\r\n                    }\r\n                };\r\n\r\n            recursiveOpen();\r\n        },\r\n\r\n        /**\r\n         * Create tree root node\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _createRootNode: function (event, data) {\r\n            var rootNode, children;\r\n\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (data.node.id === '#') {\r\n                rootNode = {\r\n                    id: this.options.root,\r\n                    text: this.options.rootName,\r\n                    li_attr: {\r\n                        'data-id': this.options.root\r\n                    }\r\n                };\r\n                children = data.node.children;\r\n\r\n                data.instance.element.jstree().create_node(null, rootNode, 'first', function () {\r\n                    data.instance.element.jstree().move_node(children, rootNode.id);\r\n                });\r\n            }\r\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n        },\r\n\r\n        /**\r\n         * @param {*} data\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _convertData: function (data) {\r\n            return $.map(data, function (node) {\r\n\r\n                return {\r\n                    id: node.id,\r\n                    text: node.text,\r\n                    path: node.path,\r\n                    // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                    li_attr: {\r\n                        'data-id': node.id\r\n                    },\r\n                    // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n                    children: node.children\r\n                };\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.folderTree;\r\n});\r\n","Magento_ConfigurableProduct/js/configurable-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events',\r\n    'collapsible',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'domReady!'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n        $block: null,\r\n        hasVariations: null,\r\n        configurationSectionMessageHandler: (function () {\r\n            var title = $('[data-role=\"product-create-configuration-info\"]'),\r\n                buttons = $('[data-action=\"product-create-configuration-buttons\"]'),\r\n                newText = 'Configurations cannot be created for a standard product with downloadable files.' +\r\n                ' To create configurations, first remove all downloadable files.',\r\n                oldText = title.text();\r\n\r\n            return function (change) {\r\n                if (change) {\r\n                    title.text(newText);\r\n                    buttons.hide();\r\n                } else {\r\n                    title.text(oldText);\r\n                    buttons.show();\r\n                }\r\n            };\r\n        }()),\r\n\r\n        /**\r\n         * Set element disabled\r\n         * @param {Object} $element - jquery instance element\r\n         * @param {Bool} state\r\n         * @param {Bool} triggerEvent\r\n         * @private\r\n         */\r\n        _setElementDisabled: function ($element, state, triggerEvent) {\r\n            if (!$element.is('[data-locked]')) {\r\n                $element.prop('disabled', state);\r\n\r\n                if (triggerEvent) {\r\n                    $element.trigger('change');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show\r\n         */\r\n        show: function () {\r\n            this.configurationSectionMessageHandler(false);\r\n        },\r\n\r\n        /**\r\n         * Hide\r\n         */\r\n        hide: function () {\r\n            this.configurationSectionMessageHandler(true);\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            $(document).on('changeConfigurableTypeProduct', function (event, isConfigurable) {\r\n                $(document).trigger('setTypeProduct', isConfigurable ?\r\n                    'configurable' :\r\n                    productType.type.init === 'configurable' ? 'simple' : productType.type.init\r\n                );\r\n            });\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init type\r\n         * @private\r\n         */\r\n        _initType: function () {\r\n\r\n            /*var suggestContainer = $('#product-template-suggest-container .action-dropdown > .action-toggle');\r\n\r\n\r\n            if (productType.type.current === 'configurable') {\r\n                this._setElementDisabled(suggestContainer.addClass('disabled'), true);\r\n                this._setElementDisabled($('#inventory_qty'), true);\r\n                this._setElementDisabled($('#inventory_stock_availability'), false);\r\n                this._setElementDisabled($('#qty'), true, true);\r\n                this._setElementDisabled($('#quantity_and_stock_status'), false, false);\r\n            } else {\r\n                this._setElementDisabled(suggestContainer.removeClass('disabled'), false);\r\n                this._setElementDisabled($('#inventory_qty'), false);\r\n                this._setElementDisabled($('#inventory_stock_availability'), true);\r\n                this._setElementDisabled($('#qty'), false, true);\r\n            }\r\n            */\r\n\r\n            /*if (['simple', 'virtual', 'configurable'].indexOf(productType.type.current) < 0) {\r\n                this.hide();\r\n            } else {\r\n                this.show();\r\n            }*/\r\n\r\n            this.show();\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         * @param {Object} data - this backend data\r\n         */\r\n        'Magento_ConfigurableProduct/js/configurable-type-handler': function (data) {\r\n            this.$block = $(data.blockId + ' input[name=\"attributes[]\"]');\r\n            this.hasVariations = data.hasVariations;\r\n\r\n            //advancedPricingHandler.init();\r\n            //priceTypeHandler.init();\r\n\r\n            /*if (productType.type.init === 'configurable' && !this.hasVariations) {\r\n                $(document).trigger('setTypeProduct', 'simple');\r\n            }*/\r\n            $(document).trigger('setTypeProduct', 'simple');\r\n\r\n            this.bindAll();\r\n            this._initType();\r\n        }\r\n    };\r\n});\r\n","Magento_ConfigurableProduct/js/configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**************************** CONFIGURABLE PRODUCT **************************/\r\n/* global Product, optionsPrice */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'mage/translate',\r\n    'prototype'\r\n], function (jQuery, mageTemplate) {\r\n    'use strict';\r\n\r\n    if (typeof Product == 'undefined') {\r\n        window.Product = {};\r\n    }\r\n\r\n    Product.Config = Class.create();\r\n    Product.Config.prototype = {\r\n        /**\r\n         * Initialize function.\r\n         *\r\n         * @param {Object} config\r\n         */\r\n        initialize: function (config) {\r\n            var separatorIndex, paramsStr, urlValues, i, childSettings, prevSetting, nextSetting;\r\n\r\n            // Magic preprocessing\r\n            // TODO MAGETWO-31539\r\n            config.taxConfig = {\r\n                showBothPrices: false,\r\n                inclTaxTitle: jQuery.mage.__('Incl. Tax')\r\n            };\r\n\r\n            this.config     = config;\r\n            this.taxConfig  = this.config.taxConfig;\r\n\r\n            if (config.containerId) {\r\n                this.settings   = $$('#' + config.containerId + ' ' + '.super-attribute-select');\r\n            } else {\r\n                this.settings   = $$('.super-attribute-select');\r\n            }\r\n            this.state      = new Hash();\r\n            this.priceTemplate = mageTemplate(this.config.template);\r\n            this.prices     = config.prices;\r\n            this.values     = {};\r\n\r\n            // Set default values from config\r\n            if (config.defaultValues) {\r\n                this.values = config.defaultValues;\r\n            }\r\n\r\n            // Overwrite defaults by url\r\n            separatorIndex = window.location.href.indexOf('#');\r\n\r\n            if (separatorIndex != -1) { //eslint-disable-line eqeqeq\r\n                paramsStr = window.location.href.substr(separatorIndex + 1);\r\n                urlValues = paramsStr.toQueryParams();\r\n\r\n                for (i in urlValues) { //eslint-disable-line guard-for-in\r\n                    this.values[i] = urlValues[i];\r\n                }\r\n            }\r\n\r\n            // Overwrite defaults by inputs values if needed\r\n            if (config.inputsInitialized) {\r\n                this.values = {};\r\n                this.settings.each(function (element) {\r\n                    var attributeId;\r\n\r\n                    if (element.value) {\r\n                        attributeId = element.id.replace(/[a-z]*/, '');\r\n                        this.values[attributeId] = element.value;\r\n                    }\r\n                }.bind(this));\r\n            }\r\n\r\n            // Put events to check select reloads\r\n            this.settings.each(function (element) {\r\n                Event.observe(element, 'change', this.configure.bind(this));\r\n            }.bind(this));\r\n\r\n            // fill state\r\n            this.settings.each(function (element) {\r\n                var attributeId = element.id.replace(/[a-z]*/, '');\r\n\r\n                if (attributeId && this.config.attributes[attributeId]) {\r\n                    element.config = this.config.attributes[attributeId];\r\n                    element.attributeId = attributeId;\r\n                    this.state[attributeId] = false;\r\n                }\r\n            }.bind(this));\r\n\r\n            // Init settings dropdown\r\n            childSettings = [];\r\n\r\n            for (i = this.settings.length - 1; i >= 0; i--) {\r\n                prevSetting = this.settings[i - 1] ? this.settings[i - 1] : false;\r\n                nextSetting = this.settings[i + 1] ? this.settings[i + 1] : false;\r\n\r\n                if (i === 0) {\r\n                    this.fillSelect(this.settings[i]);\r\n                } else {\r\n                    this.settings[i].disabled = true;\r\n                }\r\n                $(this.settings[i]).childSettings = childSettings.clone();\r\n                $(this.settings[i]).prevSetting   = prevSetting;\r\n                $(this.settings[i]).nextSetting   = nextSetting;\r\n                childSettings.push(this.settings[i]);\r\n            }\r\n\r\n            // Set values to inputs\r\n            this.configureForValues();\r\n            document.observe('dom:loaded', this.configureForValues.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Configure for values.\r\n         */\r\n        configureForValues: function () {\r\n            if (this.values) {\r\n                this.settings.each(function (element) {\r\n                    var attributeId = element.attributeId;\r\n\r\n                    element.value = typeof this.values[attributeId] === 'undefined' ? '' : this.values[attributeId];\r\n                    this.configureElement(element);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} event\r\n         */\r\n        configure: function (event) {\r\n            var element = Event.element(event);\r\n\r\n            this.configureElement(element);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        configureElement: function (element) {\r\n            this.reloadOptionLabels(element);\r\n\r\n            if (element.value) {\r\n                this.state[element.config.id] = element.value;\r\n\r\n                if (element.nextSetting) {\r\n                    element.nextSetting.disabled = false;\r\n                    this.fillSelect(element.nextSetting);\r\n                    this.resetChildren(element.nextSetting);\r\n                }\r\n            } else {\r\n                this.resetChildren(element);\r\n            }\r\n            this.reloadPrice();\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        reloadOptionLabels: function (element) {\r\n            var selectedPrice = 0,\r\n                option, i;\r\n\r\n            if (element.options[element.selectedIndex] && element.options[element.selectedIndex].config) {\r\n                option = element.options[element.selectedIndex].config;\r\n                selectedPrice = parseFloat(this.config.optionPrices[option.allowedProducts[0]].finalPrice.amount);\r\n            }\r\n            element.setAttribute('price', selectedPrice);\r\n\r\n            for (i = 0; i < element.options.length; i++) {\r\n                if (element.options[i].config) {\r\n                    element.options[i].setAttribute('price', selectedPrice);\r\n                    element.options[i].setAttribute('summarizePrice', 0);\r\n                    element.options[i].text = this.getOptionLabel(element.options[i].config, selectedPrice);\r\n                }\r\n            }\r\n        },\r\n\r\n        /* eslint-disable max-depth */\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        resetChildren: function (element) {\r\n            var i;\r\n\r\n            if (element.childSettings) {\r\n                for (i = 0; i < element.childSettings.length; i++) {\r\n                    element.childSettings[i].selectedIndex = 0;\r\n                    element.childSettings[i].disabled = true;\r\n\r\n                    if (element.config) {\r\n                        this.state[element.config.id] = false;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        fillSelect: function (element) {\r\n            var attributeId = element.id.replace(/[a-z]*/, ''),\r\n                options = this.getAttributeOptions(attributeId),\r\n                prevConfig = false,\r\n                index = 1,\r\n                i, j, allowedProducts;\r\n\r\n            this.clearSelect(element);\r\n            element.options[0] = new Option('', '');\r\n            element.options[0].innerHTML = this.config.chooseText;\r\n\r\n            if (element.prevSetting) {\r\n                prevConfig = element.prevSetting.options[element.prevSetting.selectedIndex];\r\n            }\r\n\r\n            if (options) {\r\n                for (i = 0; i < options.length; i++) {\r\n                    allowedProducts = [];\r\n\r\n                    if (prevConfig) {\r\n                        for (j = 0; j < options[i].products.length; j++) {\r\n                            if (prevConfig.config.allowedProducts &&\r\n                                prevConfig.config.allowedProducts.indexOf(options[i].products[j]) > -1\r\n                            ) {\r\n                                allowedProducts.push(options[i].products[j]);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        allowedProducts = options[i].products.clone();\r\n                    }\r\n\r\n                    if (allowedProducts.size() > 0) {\r\n                        options[i].allowedProducts = allowedProducts;\r\n                        element.options[index] = new Option(this.getOptionLabel(options[i]), options[i].id);\r\n\r\n                        if (typeof options[i].price != 'undefined') {\r\n                            element.options[index].setAttribute('price', options[i].price);\r\n                        }\r\n                        element.options[index].config = options[i];\r\n                        index++;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        //eslint-enable max-depth\r\n        /**\r\n         * @param {Object} option\r\n         */\r\n        getOptionLabel: function (option) {\r\n            return option.label;\r\n        },\r\n\r\n        /**\r\n         * @param {*} price\r\n         * @param {Boolean} showSign\r\n         * @return {String}\r\n         */\r\n        formatPrice: function (price, showSign) {\r\n            var str = '',\r\n                roundedPrice;\r\n\r\n            price = parseFloat(price);\r\n\r\n            if (showSign) {\r\n                if (price < 0) {\r\n                    str += '-';\r\n                    price = -price;\r\n                } else {\r\n                    str += '+';\r\n                }\r\n            }\r\n\r\n            roundedPrice = Number(Math.round(price + 'e+2') + 'e-2').toString();\r\n\r\n            if (this.prices && this.prices[roundedPrice]) {\r\n                str += this.prices[roundedPrice];\r\n            } else {\r\n                str += this.priceTemplate({\r\n                    data: {\r\n                        price: price.toFixed(2)\r\n                    }\r\n                });\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         */\r\n        clearSelect: function (element) {\r\n            var i;\r\n\r\n            for (i = element.options.length - 1; i >= 0; i--) {\r\n                element.remove(i);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} attributeId\r\n         * @return {*|undefined}\r\n         */\r\n        getAttributeOptions: function (attributeId) {\r\n            if (this.config.attributes[attributeId]) {\r\n                return this.config.attributes[attributeId].options;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload price.\r\n         *\r\n         * @return {undefined|Number}\r\n         */\r\n        reloadPrice: function () {\r\n            var price = 0,\r\n                oldPrice = 0,\r\n                inclTaxPrice = 0,\r\n                exclTaxPrice = 0,\r\n                i, selected;\r\n\r\n            if (this.config.disablePriceReload) {\r\n                return undefined;\r\n            }\r\n\r\n            for (i = this.settings.length - 1; i >= 0; i--) {\r\n                selected = this.settings[i].options[this.settings[i].selectedIndex];\r\n\r\n                if (selected.config) {\r\n                    price += parseFloat(selected.config.price);\r\n                    oldPrice += parseFloat(selected.config.oldPrice);\r\n                    inclTaxPrice += parseFloat(selected.config.inclTaxPrice);\r\n                    exclTaxPrice += parseFloat(selected.config.exclTaxPrice);\r\n                }\r\n            }\r\n\r\n            optionsPrice.changePrice(\r\n                'config', {\r\n                    'price': price,\r\n                    'oldPrice': oldPrice,\r\n                    'inclTaxPrice': inclTaxPrice,\r\n                    'exclTaxPrice': exclTaxPrice\r\n                }\r\n            );\r\n            optionsPrice.reload();\r\n\r\n            return price;\r\n        },\r\n\r\n        /**\r\n         * Reload old price.\r\n         */\r\n        reloadOldPrice: function () {\r\n            var price, i, selected;\r\n\r\n            if (this.config.disablePriceReload) {\r\n                return;\r\n            }\r\n\r\n            if ($('old-price-' + this.config.productId)) {\r\n\r\n                price = parseFloat(this.config.oldPrice);\r\n\r\n                for (i = this.settings.length - 1; i >= 0; i--) {\r\n                    selected = this.settings[i].options[this.settings[i].selectedIndex];\r\n\r\n                    if (selected.config) {\r\n                        price += parseFloat(selected.config.price);\r\n                    }\r\n                }\r\n\r\n                if (price < 0) {\r\n                    price = 0;\r\n                }\r\n                price = this.formatPrice(price);\r\n\r\n                if ($('old-price-' + this.config.productId)) {\r\n                    $('old-price-' + this.config.productId).innerHTML = price;\r\n                }\r\n\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_ConfigurableProduct/js/components/associated-product-insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/form/components/insert-listing'\r\n], function (_, insertListing) {\r\n    'use strict';\r\n\r\n    return insertListing.extend({\r\n        defaults: {\r\n            gridInitialized: false,\r\n            paramsUpdated: false,\r\n            showMassActionColumn: true,\r\n            currentProductId: 0,\r\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\r\n            typeGrid: '',\r\n            product: {},\r\n            rowIndexForChange: undefined,\r\n            changeProductData: [],\r\n            modules: {\r\n                productsProvider: '${ $.productsProvider }',\r\n                productsColumns: '${ $.productsColumns }',\r\n                productsMassAction: '${ $.productsMassAction }',\r\n                modalWithGrid: '${ $.modalWithGrid }',\r\n                productsFilters: '${ $.productsFilters }'\r\n            },\r\n            exports: {\r\n                externalProviderParams: '${ $.externalProvider }:params'\r\n            },\r\n            links: {\r\n                changeProductData: '${ $.provider }:${ $.changeProductProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.externalProvider }:params': '_setFilters _setVisibilityMassActionColumn',\r\n                '${ $.productsProvider }:data': '_handleManualGridOpening',\r\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize observables.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(\r\n                'changeProductData'\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get ids of used products.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getUsedProductIds: function () {\r\n            var usedProductsIds = this.source.get(this.dataScopeAssociatedProduct);\r\n\r\n            return usedProductsIds.slice();\r\n        },\r\n\r\n        /**\r\n         * Request for render content.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        doRender: function (showMassActionColumn, typeGrid) {\r\n            this.typeGrid = typeGrid;\r\n            this.showMassActionColumn = showMassActionColumn;\r\n\r\n            if (this.gridInitialized) {\r\n                this.paramsUpdated = false;\r\n                this.productsFilters().clear();\r\n                this._setFilters(this.externalProviderParams);\r\n                this._setVisibilityMassActionColumn();\r\n            }\r\n\r\n            return this.render();\r\n        },\r\n\r\n        /**\r\n         * Show grid with assigned product.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        showGridAssignProduct: function () {\r\n            this.product = {};\r\n            this.rowIndexForChange = undefined;\r\n\r\n            return this.doRender(true, 'assignProduct');\r\n        },\r\n\r\n        /**\r\n         * Show grid with changed product.\r\n         *\r\n         * @param {String} rowIndex\r\n         * @param {String} product\r\n         */\r\n        showGridChangeProduct: function (rowIndex, product) {\r\n            this.rowIndexForChange = rowIndex;\r\n            this.product = product;\r\n            this.doRender(false, 'changeProduct');\r\n        },\r\n\r\n        /**\r\n         * Select product.\r\n         *\r\n         * @param {String} rowIndex\r\n         */\r\n        selectProduct: function (rowIndex) {\r\n            this.changeProductData({\r\n                rowIndex: this.rowIndexForChange,\r\n                product: this.productsProvider().data.items[rowIndex]\r\n            });\r\n            this.modalWithGrid().closeModal();\r\n        },\r\n\r\n        /**\r\n         * Set visibility state for mass action column\r\n         *\r\n         * @private\r\n         */\r\n        _setVisibilityMassActionColumn: function () {\r\n            this.productsMassAction(function (massActionComponent) {\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = this.showMassActionColumn;\r\n                }, this);\r\n                massActionComponent.visible = this.showMassActionColumn;\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set filters.\r\n         *\r\n         * @param {Object} params\r\n         * @private\r\n         */\r\n        _setFilters: function (params) {\r\n            var filterModifier = {},\r\n                attrCodes,\r\n                usedProductIds,\r\n                attributes;\r\n\r\n            params = _.omit(params);\r\n\r\n            if (!this.paramsUpdated) {\r\n                this.gridInitialized = true;\r\n                this.paramsUpdated = true;\r\n\r\n                attrCodes = this._getAttributesCodes();\r\n                usedProductIds = this.getUsedProductIds();\r\n\r\n                if (this.currentProductId) {\r\n                    usedProductIds.push(this.currentProductId);\r\n                }\r\n\r\n                filterModifier['entity_id'] = {\r\n                    'condition_type': 'nin', value: usedProductIds\r\n                };\r\n                attrCodes.each(function (code) {\r\n                    filterModifier[code] = {\r\n                        'condition_type': 'notnull'\r\n                    };\r\n                });\r\n\r\n                if (this.typeGrid === 'changeProduct') {\r\n                    attributes = JSON.parse(this.product.attributes);\r\n\r\n                    filterModifier = _.extend(filterModifier, _.mapObject(attributes, function (value) {\r\n                        return {\r\n                            'condition_type': 'eq',\r\n                            'value': value\r\n                        };\r\n                    }));\r\n\r\n                    params.filters = attributes;\r\n                } else {\r\n                    params.filters = {};\r\n                }\r\n\r\n                params['attributes_codes'] = attrCodes;\r\n\r\n                this.set('externalProviderParams', params);\r\n                this.set('externalFiltersModifier', filterModifier);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get attribute codes.\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _getAttributesCodes: function () {\r\n            var attrCodes = this.source.get('data.attribute_codes');\r\n\r\n            return attrCodes ? attrCodes : [];\r\n        },\r\n\r\n        /**\r\n         * Get product variations.\r\n         *\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _getProductVariations: function () {\r\n            var matrix = this.source.get('data.configurable-matrix');\r\n\r\n            return matrix ? matrix : [];\r\n        },\r\n\r\n        /**\r\n         * Handle manual grid after opening\r\n         * @private\r\n         */\r\n        _handleManualGridOpening: function (data) {\r\n            if (data.items.length && this.typeGrid === 'assignProduct') {\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = true;\r\n                });\r\n\r\n                this._disableRows(data.items);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle manual selection.\r\n         *\r\n         * @param {Array} selected\r\n         * @private\r\n         */\r\n        _handleManualGridSelect: function (selected) {\r\n            var selectedRows,\r\n                selectedVariationKeys;\r\n\r\n            if (this.typeGrid === 'assignProduct') {\r\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\r\n                    return selected.indexOf(row['entity_id']) !== -1;\r\n                });\r\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\r\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable rows in grid for products with the same variation key\r\n         *\r\n         * @param {Array} items\r\n         * @param {Array} selectedVariationKeys\r\n         * @param {Array} selected\r\n         * @private\r\n         */\r\n        _disableRows: function (items, selectedVariationKeys, selected) {\r\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\r\n            selected = selected === undefined ? [] : selected;\r\n            this.productsMassAction(function (massaction) {\r\n                var configurableVariationKeys = _.union(\r\n                    selectedVariationKeys,\r\n                    _.pluck(this._getProductVariations(), 'variationKey')\r\n                    ),\r\n                    variationKeyMap = this._getVariationKeyMap(items),\r\n                    rowsForDisable = _.keys(_.pick(\r\n                        variationKeyMap,\r\n                        function (variationKey) {\r\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\r\n                        }\r\n                    ));\r\n\r\n                massaction.disabled(_.difference(rowsForDisable, selected));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Get variation key map used in manual grid.\r\n         *\r\n         * @param {Array} items\r\n         * @returns {Array} [{entity_id: variation-key}, ...]\r\n         * @private\r\n         */\r\n        _getVariationKeyMap: function (items) {\r\n            var variationKeyMap = {};\r\n\r\n            _.each(items, function (row) {\r\n                variationKeyMap[row['entity_id']] = _.values(\r\n                    _.pick(row, this._getAttributesCodes())\r\n                ).sort().join('-');\r\n\r\n            }, this);\r\n\r\n            return variationKeyMap;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/container-configurable-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            listens: {\r\n                '${ $.provider }:data.is_downloadable': 'handleProductType'\r\n            },\r\n            links: {\r\n                isDownloadable: '${ $.provider }:data.is_downloadable'\r\n            },\r\n            modules: {\r\n                createConfigurableButton: '${$.createConfigurableButton}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.handleProductType(this.isDownloadable);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['content']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Change content for container and visibility for button\r\n         *\r\n         * @param {String} isDownloadable\r\n         */\r\n        handleProductType: function (isDownloadable) {\r\n            if (isDownloadable === '1') {\r\n                this.content(this.content2);\r\n\r\n                if (this.createConfigurableButton()) {\r\n                    this.createConfigurableButton().visible(false);\r\n                }\r\n            } else {\r\n                this.content(this.content1);\r\n\r\n                if (this.createConfigurableButton()) {\r\n                    this.createConfigurableButton().visible(true);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/custom-options-price-type.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Catalog/js/components/custom-options-price-type'\r\n], function (_, PriceType) {\r\n    'use strict';\r\n\r\n    return PriceType.extend({\r\n        defaults: {\r\n            isConfigurable: false,\r\n            isFiltered: null,\r\n            defaultOptions: null,\r\n            filteredOptions: null,\r\n            bannedOptions: []\r\n        },\r\n\r\n        /**\r\n         * Updates options.\r\n         *\r\n         * @param {Boolean} variationsEmpty\r\n         * @returns {Boolean}\r\n         */\r\n        updateOptions: function (variationsEmpty) {\r\n            var isFiltered = this.isConfigurable || !variationsEmpty,\r\n                value;\r\n\r\n            if (this.isFiltered !== isFiltered) {\r\n                value = this.value();\r\n\r\n                this.options(isFiltered ? this.getFilteredOptions() : this.getDefaultOptions());\r\n                this.value(value);\r\n            }\r\n\r\n            return isFiltered;\r\n        },\r\n\r\n        /**\r\n         * Get default list of options.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getDefaultOptions: function () {\r\n            if (this.defaultOptions === null) {\r\n                this.defaultOptions = this.options();\r\n            }\r\n\r\n            return this.defaultOptions;\r\n        },\r\n\r\n        /**\r\n         * Get filtered list of options.\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getFilteredOptions: function () {\r\n            var defaultOptions;\r\n\r\n            if (this.filteredOptions === null) {\r\n                defaultOptions = this.getDefaultOptions();\r\n                this.filteredOptions = [];\r\n\r\n                _.each(defaultOptions, function (option) {\r\n                    if (this.bannedOptions.indexOf(option.value) === -1) {\r\n                        this.filteredOptions.push(option);\r\n                    }\r\n                }, this);\r\n            }\r\n\r\n            return this.filteredOptions;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/custom-options-warning.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/html'\r\n], function (Html) {\r\n    'use strict';\r\n\r\n    return Html.extend({\r\n        defaults: {\r\n            isConfigurable: false\r\n        },\r\n\r\n        /**\r\n         * Updates component visibility state.\r\n         *\r\n         * @param {Boolean} variationsEmpty\r\n         * @returns {Boolean}\r\n         */\r\n        updateVisibility: function (variationsEmpty) {\r\n            var isVisible = this.isConfigurable || !variationsEmpty;\r\n\r\n            this.visible(isVisible);\r\n\r\n            return isVisible;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/dynamic-rows-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows',\r\n    'jquery'\r\n], function (_, registry, dynamicRows, $) {\r\n    'use strict';\r\n\r\n    return dynamicRows.extend({\r\n        defaults: {\r\n            actionsListOpened: false,\r\n            canEditField: 'canEdit',\r\n            newProductField: 'newProduct',\r\n            dataScopeAssociatedProduct: 'data.associated_product_ids',\r\n            dataProviderFromGrid: '',\r\n            dataProviderChangeFromGrid: '',\r\n            insertDataFromGrid: [],\r\n            changeDataFromGrid: [],\r\n            dataProviderFromWizard: '',\r\n            insertDataFromWizard: [],\r\n            map: null,\r\n            isEmpty: true,\r\n            isShowAddProductButton: false,\r\n            cacheGridData: [],\r\n            unionInsertData: [],\r\n            deleteProperty: false,\r\n            dataLength: 0,\r\n            identificationProperty: 'id',\r\n            'attribute_set_id': '',\r\n            attributesTmp: [],\r\n            changedFlag: 'was_changed',\r\n            listens: {\r\n                'insertDataFromGrid': 'processingInsertDataFromGrid',\r\n                'insertDataFromWizard': 'processingInsertDataFromWizard',\r\n                'unionInsertData': 'processingUnionInsertData',\r\n                'changeDataFromGrid': 'processingChangeDataFromGrid',\r\n                'isEmpty': 'changeVisibility'\r\n            },\r\n            imports: {\r\n                'attribute_set_id': '${$.provider}:data.product.attribute_set_id'\r\n            },\r\n            'exports': {\r\n                'attribute_set_id': '${$.provider}:data.new-variations-attribute-set-id'\r\n            },\r\n            modules: {\r\n                modalWithGrid: '${ $.modalWithGrid }',\r\n                gridWithProducts: '${ $.gridWithProducts}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .changeVisibility(this.isEmpty());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Change visibility\r\n         *\r\n         * When isEmpty = true, then visbible = false\r\n         *\r\n         * @param {Boolean} isEmpty\r\n         */\r\n        changeVisibility: function (isEmpty) {\r\n            this.visible(!isEmpty);\r\n        },\r\n\r\n        /**\r\n         * Open modal with grid.\r\n         *\r\n         * @param {String} rowIndex\r\n         */\r\n        openModalWithGrid: function (rowIndex) {\r\n            var productSource = this.source.get(this.dataScope + '.' + this.index + '.' + rowIndex),\r\n                product = {\r\n                    'id': productSource.id,\r\n                    'attributes': productSource['configurable_attribute']\r\n                };\r\n\r\n            this.modalWithGrid().openModal();\r\n            this.gridWithProducts().showGridChangeProduct(rowIndex, product);\r\n        },\r\n\r\n        /**\r\n         * Initialize children\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initChildren: function () {\r\n            var tmpArray = [];\r\n\r\n            this.recordData.each(function (recordData) {\r\n                tmpArray.push(recordData);\r\n            }, this);\r\n\r\n            this.unionInsertData(tmpArray);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delete record\r\n         *\r\n         * @param {Number} index - row index\r\n         */\r\n        deleteRecord: function (index) {\r\n            var tmpArray,\r\n                lastRecord;\r\n\r\n            this.reRender = false;\r\n            tmpArray = this.getUnionInsertData();\r\n            tmpArray.splice(index, 1);\r\n\r\n            if (!tmpArray.length) {\r\n                this.attributesTmp = this.source.get('data.attributes');\r\n                this.source.set('data.attributes', []);\r\n                this.cacheGridData = [];\r\n            }\r\n\r\n            if (parseInt(this.currentPage(), 10) === this.pages()) {\r\n                lastRecord =\r\n                    _.findWhere(this.elems(), {\r\n                        index: this.startIndex + this.getChildItems().length - 1\r\n                    }) ||\r\n                    _.findWhere(this.elems(), {\r\n                        index: (this.startIndex + this.getChildItems().length - 1).toString()\r\n                    });\r\n\r\n                lastRecord.destroy();\r\n            }\r\n\r\n            this.unionInsertData(tmpArray);\r\n\r\n            if (this.pages() < parseInt(this.currentPage(), 10)) {\r\n                this.currentPage(this.pages());\r\n            }\r\n\r\n            this.reRender = true;\r\n            this.showSpinner(false);\r\n        },\r\n\r\n        /**\r\n         * Generate associated products\r\n         */\r\n        generateAssociatedProducts: function () {\r\n            var productsIds = [];\r\n\r\n            this.getUnionInsertData().forEach(function (data) {\r\n                if (data.id !== null) {\r\n                    productsIds.push(data.id);\r\n                }\r\n            });\r\n\r\n            this.source.set(this.dataScopeAssociatedProduct, productsIds);\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'insertDataFromGrid', 'unionInsertData', 'isEmpty', 'isShowAddProductButton', 'actionsListOpened'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get union insert data from source\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getUnionInsertData: function () {\r\n            var source = this.source.get(this.dataScope + '.' + this.index),\r\n                result = [];\r\n\r\n            _.each(source, function (data) {\r\n                result.push(data);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Process union insert data.\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        processingUnionInsertData: function (data) {\r\n            var dataCount,\r\n                elemsCount,\r\n                tmpData,\r\n                path,\r\n                attributeCodes = this.source.get('data.attribute_codes');\r\n\r\n            this.isEmpty(data.length === 0);\r\n            this.isShowAddProductButton(\r\n                (!attributeCodes || data.length > 0 ? data.length : attributeCodes.length) > 0\r\n            );\r\n\r\n            tmpData = data.slice(this.pageSize * (this.currentPage() - 1),\r\n                                 this.pageSize * (this.currentPage() - 1) + parseInt(this.pageSize, 10));\r\n\r\n            this.source.set(this.dataScope + '.' + this.index, []);\r\n\r\n            _.each(tmpData, function (row, index) {\r\n                path = this.dataScope + '.' + this.index + '.' + (this.startIndex + index);\r\n                row.attributes = $('<i></i>').text(row.attributes).html();\r\n                this.source.set(path, row);\r\n            }, this);\r\n\r\n            this.source.set(this.dataScope + '.' + this.index, data);\r\n            this.parsePagesData(data);\r\n\r\n            // Render\r\n            dataCount = tmpData.length;\r\n            elemsCount = this.elems().length;\r\n\r\n            if (dataCount > elemsCount) {\r\n                tmpData.each(function (elemData, index) {\r\n                    this.addChild(elemData, this.startIndex + index);\r\n                }, this);\r\n            } else {\r\n                for (elemsCount; elemsCount > dataCount; elemsCount--) {\r\n                    this.elems()[elemsCount - 1].destroy();\r\n                }\r\n            }\r\n\r\n            this.generateAssociatedProducts();\r\n        },\r\n\r\n        /**\r\n         * Set initial property to records data\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setInitialProperty: function () {\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Parsed data\r\n         *\r\n         * @param {Array} data - array with data\r\n         * about selected records\r\n         */\r\n        processingInsertDataFromGrid: function (data) {\r\n            var changes,\r\n                tmpArray;\r\n\r\n            if (!data.length) {\r\n                return;\r\n            }\r\n\r\n            tmpArray = this.getUnionInsertData();\r\n\r\n            changes = this._checkGridData(data);\r\n            this.cacheGridData = data;\r\n\r\n            changes.each(function (changedObject) {\r\n                var mappedData = this.mappingValue(changedObject);\r\n\r\n                mappedData[this.canEditField] = 0;\r\n                mappedData[this.newProductField] = 0;\r\n                mappedData.variationKey = this._getVariationKey(changedObject);\r\n                mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\r\n                tmpArray.push(mappedData);\r\n            }, this);\r\n\r\n            // Attributes cannot be changed before regeneration thought wizard\r\n            if (!this.source.get('data.attributes').length) {\r\n                this.source.set('data.attributes', this.attributesTmp);\r\n            }\r\n            this.unionInsertData(tmpArray);\r\n        },\r\n\r\n        /**\r\n         * Process changes from grid.\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processingChangeDataFromGrid: function (data) {\r\n            var tmpArray = this.getUnionInsertData(),\r\n                mappedData = this.mappingValue(data.product);\r\n\r\n            mappedData[this.canEditField] = 0;\r\n            mappedData[this.newProductField] = 0;\r\n            mappedData.variationKey = this._getVariationKey(data.product);\r\n            mappedData['configurable_attribute'] = this._getConfigurableAttribute(data.product);\r\n            tmpArray[data.rowIndex] = mappedData;\r\n\r\n            this.unionInsertData(tmpArray);\r\n        },\r\n\r\n        /**\r\n         * Get variation key.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _getVariationKey: function (data) {\r\n            var attrCodes = this.source.get('data.attribute_codes'),\r\n                key = [];\r\n\r\n            attrCodes.each(function (code) {\r\n                key.push(data[code]);\r\n            });\r\n\r\n            return key.sort().join('-');\r\n        },\r\n\r\n        /**\r\n         * Get configurable attribute.\r\n         *\r\n         * @param {Object} data\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _getConfigurableAttribute: function (data) {\r\n            var attrCodes = this.source.get('data.attribute_codes'),\r\n                confAttrs = {};\r\n\r\n            attrCodes.each(function (code) {\r\n                confAttrs[code] = data[code];\r\n            });\r\n\r\n            return JSON.stringify(confAttrs);\r\n        },\r\n\r\n        /**\r\n         * Process data insertion from wizard\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processingInsertDataFromWizard: function (data) {\r\n            var tmpArray = this.getUnionInsertData(),\r\n                productIdsToDelete = this.source.get(this.dataScopeAssociatedProduct),\r\n                index,\r\n                product = {};\r\n\r\n            tmpArray = this.unsetArrayItem(\r\n                tmpArray,\r\n                {\r\n                    id: null\r\n                }\r\n            );\r\n\r\n            _.each(data, function (row) {\r\n                if (row.productId) {\r\n                    index = _.indexOf(productIdsToDelete, row.productId);\r\n\r\n                    if (index > -1) {\r\n                        productIdsToDelete.splice(index, 1);\r\n                        tmpArray = this.unsetArrayItem(\r\n                            tmpArray,\r\n                            {\r\n                                id: row.productId\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                product = this.getProductData(row);\r\n\r\n                product[this.changedFlag] = true;\r\n                product[this.canEditField] = row.editable;\r\n                product[this.newProductField] = row.newProduct;\r\n                tmpArray.push(product);\r\n            }, this);\r\n\r\n            _.each(productIdsToDelete, function (id) {\r\n                tmpArray = this.unsetArrayItem(\r\n                    tmpArray,\r\n                    {\r\n                        id: id\r\n                    }\r\n                );\r\n            }, this);\r\n\r\n            this.unionInsertData(tmpArray);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Object}\r\n         */\r\n        getProductData: function (row) {\r\n            var product,\r\n                attributesText = '';\r\n\r\n            _.each(row.options, function (attribute) {\r\n                if (attributesText) {\r\n                    attributesText += ', ';\r\n                }\r\n                attributesText += attribute['attribute_label'] + ': ' + attribute.label;\r\n            }, this);\r\n\r\n            product = {\r\n                'id': row.productId,\r\n                'product_link': row.productUrl,\r\n                'name': row.name,\r\n                'sku': row.sku,\r\n                'status': row.status,\r\n                'price': row.price,\r\n                'price_currency': row.priceCurrency,\r\n                'price_string': row.priceCurrency + row.price,\r\n                'weight': row.weight,\r\n                'qty': row.quantity,\r\n                'variationKey': row.variationKey,\r\n                'configurable_attribute': row.attribute,\r\n                'thumbnail_image': row.images.preview,\r\n                'media_gallery': row['media_gallery'],\r\n                'swatch_image': row['swatch_image'],\r\n                'small_image': row['small_image'],\r\n                image: row.image,\r\n                'thumbnail': row.thumbnail,\r\n                'attributes': attributesText\r\n            };\r\n\r\n            return product;\r\n        },\r\n\r\n        /**\r\n         * Remove array items matching condition.\r\n         *\r\n         * @param {Array} data\r\n         * @param {Object} condition\r\n         * @returns {Array}\r\n         */\r\n        unsetArrayItem: function (data, condition) {\r\n            var objs = _.where(data, condition);\r\n\r\n            _.each(objs, function (obj) {\r\n                var index = _.indexOf(data, obj);\r\n\r\n                if (index > -1) {\r\n                    data.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Check changed records\r\n         *\r\n         * @param {Array} data - array with records data\r\n         * @returns {Array} Changed records\r\n         */\r\n        _checkGridData: function (data) {\r\n            var cacheLength = this.cacheGridData.length,\r\n                curData = data.length,\r\n                max = cacheLength > curData ? this.cacheGridData : data,\r\n                changes = [],\r\n                obj = {};\r\n\r\n            max.each(function (record, index) {\r\n                obj[this.map.id] = record[this.map.id];\r\n\r\n                if (!_.where(this.cacheGridData, obj).length) {\r\n                    changes.push(data[index]);\r\n                }\r\n            }, this);\r\n\r\n            return changes;\r\n        },\r\n\r\n        /**\r\n         * Mapped value\r\n         */\r\n        mappingValue: function (data) {\r\n            var result = {};\r\n\r\n            _.each(this.map, function (prop, index) {\r\n                result[index] = data[prop];\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Toggle actions list.\r\n         *\r\n         * @param {Number} rowIndex\r\n         * @returns {Object} Chainable.\r\n         */\r\n        toggleActionsList: function (rowIndex) {\r\n            var state = false;\r\n\r\n            if (rowIndex !== this.actionsListOpened()) {\r\n                state = rowIndex;\r\n            }\r\n            this.actionsListOpened(state);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close action list.\r\n         *\r\n         * @param {Number} rowIndex\r\n         * @returns {Object} Chainable\r\n         */\r\n        closeList: function (rowIndex) {\r\n            if (this.actionsListOpened() === rowIndex) {\r\n                this.actionsListOpened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle product status.\r\n         *\r\n         * @param {Number} rowIndex\r\n         */\r\n        toggleStatusProduct: function (rowIndex) {\r\n            var tmpArray = this.getUnionInsertData(),\r\n                status = parseInt(tmpArray[rowIndex].status, 10);\r\n\r\n            if (status === 1) {\r\n                tmpArray[rowIndex].status = 2;\r\n            } else {\r\n                tmpArray[rowIndex].status = 1;\r\n            }\r\n\r\n            tmpArray[rowIndex][this.changedFlag] = true;\r\n            this.unionInsertData(tmpArray);\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/file-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/file-uploader',\r\n    'underscore'\r\n], function (Element, _) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        processedFile: {},\r\n        actionsListOpened: false,\r\n        thumbnailUrl: '',\r\n        thumbnail: null,\r\n        smallImage: null,\r\n        defaults: {\r\n            fileInputName: ''\r\n        },\r\n\r\n        /**\r\n         * Initialize observables.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe(['processedFile', 'actionsListOpened', 'thumbnailUrl', 'thumbnail', 'smallImage']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setInitialValue: function () {\r\n            var value = this.getInitialValue();\r\n\r\n            if (!_.isString(value)) {\r\n                this._super();\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds provided file to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {Object} Chainable.\r\n         */\r\n        addFile: function (file) {\r\n            this.processedFile(this.processFile(file));\r\n\r\n            this.value(this.processedFile().file);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle actions list.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        toggleActionsList: function () {\r\n            if (this.actionsListOpened()) {\r\n                this.actionsListOpened(false);\r\n            } else {\r\n                this.actionsListOpened(true);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Close action list.\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        closeList: function () {\r\n            if (this.actionsListOpened()) {\r\n                this.actionsListOpened(false);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Delete Image\r\n         *\r\n         * @returns {Object} Chainable\r\n         */\r\n        deleteImage: function () {\r\n            this.processedFile({});\r\n            this.value(null);\r\n            this.thumbnail(null);\r\n            this.thumbnailUrl(null);\r\n            this.smallImage(null);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/modal-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/modal/modal-component',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Modal, registry, _) {\r\n    'use strict';\r\n\r\n    return Modal.extend({\r\n        defaults: {\r\n            stepWizard: '',\r\n            modules: {\r\n                form: '${ $.formName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open modal\r\n         */\r\n        openModal: function () {\r\n            var stepWizard = {};\r\n\r\n            this.form().validate();\r\n\r\n            if (this.form().source.get('params.invalid') === false) {\r\n                stepWizard = registry.get('index = ' + this.stepWizard);\r\n\r\n                if (!_.isUndefined(stepWizard)) {\r\n                    stepWizard.open();\r\n                }\r\n\r\n                this._super();\r\n            } else {\r\n                this.form().focusInvalid();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/price-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (_, registry, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            imports: {\r\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\r\n            },\r\n            modules: {\r\n                createConfigurableButton: '${$.createConfigurableButton}'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            // resolve initial disable state\r\n            this.handlePriceValue(this.isConfigurable);\r\n            // add listener to track \"configurable\" type\r\n            this.setListeners({\r\n                isConfigurable: 'handlePriceValue'\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['content']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable and clear price if product type changed to configurable\r\n         *\r\n         * @param {String} isConfigurable\r\n         */\r\n        handlePriceValue: function (isConfigurable) {\r\n            this.disabled(!!this.isUseDefault() || isConfigurable);\r\n            this.required(!!this.isUseDefault() || !isConfigurable);\r\n\r\n            if (isConfigurable) {\r\n                this.clear();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/components/qty-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            imports: {\r\n                isConfigurable: '!ns = ${ $.ns }, index = configurable-matrix:isEmpty'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            // resolve initial disable state\r\n            this.handleQtyValue(this.isConfigurable);\r\n\r\n            /** important to set this listener in initialize because of a different order of processing.\r\n             * Do not move to defaults->listens section */\r\n            this.setListeners({\r\n                isConfigurable: 'handleQtyValue'\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable and clear Qty if product type changed to configurable\r\n         *\r\n         * @param {String} isConfigurable\r\n         */\r\n        handleQtyValue: function (isConfigurable) {\r\n            this.disabled(!!this.isUseDefault() || isConfigurable);\r\n\r\n            if (isConfigurable) {\r\n                this.clear();\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/options/price-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/catalog/type-events',\r\n    'notification',\r\n    'mage/translate'\r\n], function ($, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n        isConfigurable: false,\r\n        messageInited: false,\r\n        messageSelector: '[data-role=product-custom-options-content]',\r\n        isPercentPriceTypeExist: function () {\r\n            var productOptionsContainer = $('#product_options_container_top');\r\n\r\n            return !!productOptionsContainer.length;\r\n        },\r\n        showWarning: function () {\r\n            if (!this.messageInited) {\r\n                $(this.messageSelector).notification();\r\n                this.messageInited = true;\r\n            }\r\n            this.hideWarning();\r\n            $(this.messageSelector).notification('add', {\r\n                message: $.mage.__('Custom options with price type \"percent\" is not available for ' +\r\n                    'configurable product.'),\r\n                error: false,\r\n                messageContainer: this.messageSelector\r\n            });\r\n        },\r\n        hideWarning: function () {\r\n            $(this.messageSelector).notification('clear');\r\n        },\r\n        init: function () {\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n\r\n            $('#product-edit-form-tabs').on('change', '.opt-type > select', function () {\r\n                var selected = $('.opt-type > select :selected'),\r\n                    optGroup = selected.parent().attr('label');\r\n\r\n                if (optGroup === 'Select') {\r\n                    $('#product-edit-form-tabs').on(\r\n                        'click',\r\n                        '[data-ui-id=\"admin-product-options-options-box-select-option-type-add-select-row-button\"]',\r\n                        function () {\r\n                            this.percentPriceTypeHandler();\r\n                        }.bind(this)\r\n                    );\r\n                } else {\r\n                    this.percentPriceTypeHandler();\r\n                }\r\n            }.bind(this));\r\n\r\n            this._initType();\r\n        },\r\n        _initType: function () {\r\n            this.isConfigurable = productType.type.current === 'configurable';\r\n            if (this.isPercentPriceTypeExist()) {\r\n                this.percentPriceTypeHandler();\r\n            }\r\n        },\r\n        percentPriceTypeHandler: function () {\r\n            var priceType = $('[data-attr=\"price-type\"]'),\r\n                optionPercentPriceType = priceType.find('option[value=\"percent\"]');\r\n\r\n            if (this.isConfigurable) {\r\n                this.showWarning();\r\n                optionPercentPriceType.hide();\r\n                optionPercentPriceType.parent().val() === 'percent' ? optionPercentPriceType.parent().val('fixed') : '';\r\n            } else {\r\n                $(this.messageSelector).notification();\r\n                optionPercentPriceType.show();\r\n                this.hideWarning();\r\n            }\r\n        }\r\n    };\r\n});\r\n*/\r\n","Magento_ConfigurableProduct/js/variations/product-grid.js":"// jscs:disable requireDotNotation\r\n/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'Magento_Ui/js/core/app',\r\n    'underscore',\r\n    'notification',\r\n    'mage/translate'\r\n], function (Component, $, bootstrap, _) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            productsGridUrl: null,\r\n            productAttributes: [],\r\n            productsModal: null,\r\n            button: '',\r\n            gridSelector: '[data-grid-id=associated-products-container]',\r\n            modules: {\r\n                productsFilter: '${ $.productsFilter }',\r\n                productsProvider: '${ $.productsProvider }',\r\n                productsMassAction: '${ $.productsMassAction }',\r\n                productsColumns: '${ $.productsColumns }',\r\n                variationsComponent: '${ $.configurableVariations }'\r\n            },\r\n            listens: {\r\n                '${ $.productsProvider }:data': '_showMessageAssociatedGrid _handleManualGridOpening',\r\n                '${ $.productsMassAction }:selected': '_handleManualGridSelect',\r\n                '${ $.configurableVariations }:productMatrix': '_showButtonAddManual _switchProductType'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        initialize: function (options) {\r\n            this._super(options);\r\n            this.productsModal = $(this.gridSelector).modal({\r\n                title: $.mage.__('Select Associated Product'),\r\n                type: 'slide',\r\n                buttons: [\r\n                    {\r\n                        text: $.mage.__('Cancel'),\r\n\r\n                        /** Close modal */\r\n                        click: function () {\r\n                            this.closeModal();\r\n                        }\r\n                    }, {\r\n                        text: $.mage.__('Done'),\r\n                        click: this.close.bind(this, null)\r\n                    }\r\n                ]\r\n            });\r\n\r\n            this.productsProvider(function () {\r\n                this.productsModal.notification();\r\n            }.bind(this));\r\n            this.variationsComponent(function (variation) {\r\n                this._showButtonAddManual(variation.productMatrix());\r\n            }.bind(this));\r\n\r\n            this._initGrid = _.once(this._initGrid);\r\n            this._switchProductType = _.wrap(this._switchProductType.bind(this), function (func, params) {\r\n                if (!!params.length !== !!this.init) {\r\n                    this.init = !!params.length;\r\n                    func(params);\r\n                }\r\n            }.bind(this._switchProductType));\r\n        },\r\n\r\n        /**\r\n         * Initial observerable\r\n         * @returns {*}\r\n         */\r\n        initObservable: function () {\r\n            this._super().observe('button');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * init Grid\r\n         * @private\r\n         */\r\n        _initGrid: function (filterData) {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this._buildGridUrl(filterData),\r\n                context: $('body')\r\n            }).done(function (data) {\r\n                bootstrap(JSON.parse(data));\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Select different product in configurations section\r\n         * @see configurable_associated_product_listing.xml\r\n         * @param {Integer} rowIndex\r\n         */\r\n        selectProduct: function (rowIndex) {\r\n            this.close(rowIndex);\r\n        },\r\n\r\n        /**\r\n         * Open\r\n         * @param {Object} filterData - filter data\r\n         * @param {Object|*} filterData.filters - attribute name\r\n         * @param {Object|*} filterData.filters_modifier - modifier value\r\n         * @param {String} callbackName\r\n         * @param {Boolean} showMassActionColumn\r\n         */\r\n        open: function (filterData, callbackName, showMassActionColumn) {\r\n            this.callbackName = callbackName;\r\n            this.productsMassAction(function (massActionComponent) {\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = showMassActionColumn;\r\n                });\r\n                massActionComponent.visible = showMassActionColumn;\r\n            }.bind(this));\r\n            this._setFilter(filterData);\r\n            this._initGrid(filterData);\r\n            this.productsModal.trigger('openModal');\r\n        },\r\n\r\n        /**\r\n         * Close\r\n         */\r\n        close: function (rowIndex) {\r\n            try {\r\n                if (this.productsMassAction().selected.getLength()) {\r\n                    this.variationsComponent()[this.callbackName](this.productsMassAction()\r\n                        .selected.map(this.getProductById.bind(this)));\r\n                    this.productsMassAction().deselectAll();\r\n                } else if (!_.isNull(rowIndex)) {\r\n                    this.variationsComponent()[this.callbackName]([this.getProductByIndex(rowIndex)]);\r\n                }\r\n                this.productsModal.trigger('closeModal');\r\n            } catch (e) {\r\n                if (e.name === 'UserException') {\r\n                    this.productsModal.notification('clear');\r\n                    this.productsModal.notification('add', {\r\n                        message: e.message,\r\n                        messageContainer: this.gridSelector\r\n                    });\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get product by id\r\n         * @param {Integer} productId\r\n         * @returns {*}\r\n         */\r\n        getProductById: function (productId) {\r\n            return _.findWhere(this.productsProvider().data.items, {\r\n                'entity_id': productId\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get product\r\n         * @param {Integer} rowIndex\r\n         * @returns {*}\r\n         */\r\n        getProductByIndex: function (rowIndex) {\r\n            return this.productsProvider().data.items[rowIndex];\r\n        },\r\n\r\n        /**\r\n         * Build grid url\r\n         * @private\r\n         */\r\n        _buildGridUrl: function (filterData) {\r\n            var params = '?' + $.param({\r\n                'filters': filterData.filters,\r\n                'attributes_codes': this._getAttributesCodes(),\r\n                'filters_modifier': filterData['filters_modifier']\r\n            });\r\n\r\n            return this.productsGridUrl + params;\r\n        },\r\n\r\n        /**\r\n         * Show button add manual\r\n         * @param {Array} variations\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _showButtonAddManual: function (variations) {\r\n            return this.button(variations.length);\r\n        },\r\n\r\n        /**\r\n         * @param {Array} variations\r\n         * @private\r\n         */\r\n        _switchProductType: function (variations) {\r\n            $(document).trigger('changeConfigurableTypeProduct', variations.length);\r\n        },\r\n\r\n        /**\r\n         * Get attributes codes used for configurable\r\n         * @private\r\n         */\r\n        _getAttributesCodes: function () {\r\n            return this.variationsComponent().attributes.pluck('code');\r\n        },\r\n\r\n        /**\r\n         * Show data associated grid\r\n         * @private\r\n         */\r\n        _showMessageAssociatedGrid: function (data) {\r\n            this.productsModal.notification('clear');\r\n\r\n            if (data.items.length) {\r\n                this.productsModal.notification('add', {\r\n                    message: $.mage.__('Choose a new product to delete and replace the current product configuration.'),\r\n                    messageContainer: this.gridSelector\r\n                });\r\n            } else {\r\n                this.productsModal.notification('add', {\r\n                    message: $.mage.__('For better results, add attributes and attribute values to your products.'),\r\n                    messageContainer: this.gridSelector\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Show manually grid\r\n         */\r\n        showManuallyGrid: function () {\r\n            var filterModifier = _.mapObject(_.object(this._getAttributesCodes(), []), function () {\r\n                    return {\r\n                        'condition_type': 'notnull'\r\n                    };\r\n                }),\r\n                usedProductIds = _.values(this.variationsComponent().productAttributesMap);\r\n\r\n            if (usedProductIds && usedProductIds.length > 0) {\r\n                filterModifier['entity_id'] = {\r\n                    'condition_type': 'nin', value: usedProductIds\r\n                };\r\n            }\r\n\r\n            this.open(\r\n                {\r\n                    'filters_modifier': filterModifier\r\n                },\r\n                'appendProducts',\r\n                true\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Handle manual grid after opening\r\n         * @private\r\n         */\r\n        _handleManualGridOpening: function (data) {\r\n            if (data.items.length && this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\r\n                this.productsColumns().elems().each(function (rowElement) {\r\n                    rowElement.disableAction = true;\r\n                });\r\n\r\n                this._disableRows(data.items);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable rows in grid for products with the same variation key\r\n         *\r\n         * @param {Array} items\r\n         * @param {Array} selectedVariationKeys\r\n         * @param {Array} selected\r\n         * @private\r\n         */\r\n        _disableRows: function (items, selectedVariationKeys, selected) {\r\n            selectedVariationKeys = selectedVariationKeys === undefined ? [] : selectedVariationKeys;\r\n            selected = selected === undefined ? [] : selected;\r\n            this.productsMassAction(function (massaction) {\r\n                var configurableVariationKeys = _.union(\r\n                        selectedVariationKeys,\r\n                        _.pluck(this.variationsComponent().productMatrix(), 'variationKey')\r\n                    ),\r\n                    variationKeyMap = this._getVariationKeyMap(items),\r\n                    rowsForDisable = _.keys(_.pick(\r\n                        variationKeyMap,\r\n                        function (variationKey) {\r\n                            return configurableVariationKeys.indexOf(variationKey) !== -1;\r\n                        }\r\n                    ));\r\n\r\n                massaction.disabled(_.difference(rowsForDisable, selected));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _handleManualGridSelect: function (selected) {\r\n            var selectedRows, selectedVariationKeys;\r\n\r\n            if (this.callbackName == 'appendProducts') { //eslint-disable-line eqeqeq\r\n                selectedRows = _.filter(this.productsProvider().data.items, function (row) {\r\n                    return selected.indexOf(row['entity_id']) !== -1;\r\n                });\r\n                selectedVariationKeys = _.values(this._getVariationKeyMap(selectedRows));\r\n                this._disableRows(this.productsProvider().data.items, selectedVariationKeys, selected);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get variation key map used in manual grid.\r\n         *\r\n         * @param {Object} items\r\n         * @returns {Array} [{entity_id: variation-key}, ...]\r\n         * @private\r\n         */\r\n        _getVariationKeyMap: function (items) {\r\n            this._variationKeyMap = {};\r\n\r\n            _.each(items, function (row) {\r\n                this._variationKeyMap[row['entity_id']] = _.values(\r\n                    _.pick(row, this._getAttributesCodes())\r\n                ).sort().join('-');\r\n\r\n            }, this);\r\n\r\n            return this._variationKeyMap;\r\n        },\r\n\r\n        /**\r\n         * Set filter\r\n         * @private\r\n         */\r\n        _setFilter: function (filterData) {\r\n            this.productsProvider(function (provider) {\r\n                provider.params['filters_modifier'] = filterData['filters_modifier'];\r\n                provider.params['attributes_codes'] = this._getAttributesCodes();\r\n            }.bind(this));\r\n\r\n            this.productsFilter(function (filter) {\r\n                filter.set('filters', _.extend({\r\n                    'filters_modifier': filterData['filters_modifier']\r\n                }, filterData.filters))\r\n                    .apply();\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/variations.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'uiRegistry',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, alert, registry, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} message\r\n     * @constructor\r\n     */\r\n    function UserException(message) {\r\n        this.message = message;\r\n        this.name = 'UserException';\r\n    }\r\n    UserException.prototype = Object.create(Error.prototype);\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            opened: false,\r\n            attributes: [],\r\n            usedAttributes: [],\r\n            attributeCodes: [],\r\n            attributesData: {},\r\n            productMatrix: [],\r\n            variations: [],\r\n            formSaveParams: [],\r\n            productAttributes: [],\r\n            disabledAttributes: [],\r\n            fullAttributes: [],\r\n            rowIndexToEdit: false,\r\n            productAttributesMap: null,\r\n            value: [],\r\n            modules: {\r\n                associatedProductGrid: '${ $.configurableProductGrid }',\r\n                wizardButtonElement: '${ $.wizardModalButtonName }',\r\n                formElement: '${ $.formName }',\r\n                attributeSetHandlerModal: '${ $.attributeSetHandler }'\r\n            },\r\n            imports: {\r\n                attributeSetName: '${ $.provider }:configurableNewAttributeSetName',\r\n                attributeSetId: '${ $.provider }:configurableExistingAttributeSetId',\r\n                attributeSetSelection: '${ $.provider }:configurableAffectedAttributeSet',\r\n                productPrice: '${ $.provider }:data.product.price'\r\n            },\r\n            links: {\r\n                value: '${ $.provider }:${ $.dataScopeVariations }',\r\n                usedAttributes: '${ $.provider }:${ $.dataScopeAttributes }',\r\n                attributesData: '${ $.provider }:${ $.dataScopeAttributesData }',\r\n                attributeCodes: '${ $.provider }:${ $.dataScopeAttributeCodes }',\r\n                skeletonAttributeSet: '${ $.provider }:data.new-variations-attribute-set-id'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.changeButtonWizard();\r\n            this.initProductAttributesMap();\r\n            this.disableConfigurableAttributes(this.productAttributes);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe(\r\n                'actions opened attributes productMatrix value usedAttributes attributesData attributeCodes'\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} product\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _makeProduct: function (product) {\r\n            var productId = product['entity_id'] || product.productId || null,\r\n                attributes = _.pick(product, this.attributes.pluck('code')),\r\n                options = _.map(attributes, function (option, attribute) {\r\n                    var oldOptions = _.findWhere(this.attributes(), {\r\n                            code: attribute\r\n                        }).options,\r\n                        result;\r\n\r\n                    if (_.isFunction(oldOptions)) {\r\n                        result = oldOptions.findWhere({\r\n                            value: option\r\n                        });\r\n                    } else {\r\n                        result = _.findWhere(oldOptions, {\r\n                            value: option\r\n                        });\r\n                    }\r\n\r\n                    return result;\r\n                }.bind(this));\r\n\r\n            return {\r\n                attribute: JSON.stringify(attributes),\r\n                editable: false,\r\n                images: {\r\n                    preview: product['thumbnail_src']\r\n                },\r\n                name: product.name || product.sku,\r\n                options: options,\r\n                price: parseFloat(Math.round(product.price.replace(/[^\\d.]+/g, '') + 'e+4') + 'e-4').toFixed(4),\r\n                productId: productId,\r\n                productUrl: this.buildProductUrl(productId),\r\n                quantity: product.quantity || null,\r\n                sku: product.sku,\r\n                status: product.status === undefined ? 1 : parseInt(product.status, 10),\r\n                variationKey: this.getVariationKey(options),\r\n                weight: product.weight || null\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {String} name\r\n         * @return {String|Number|Array}\r\n         */\r\n        getProductValue: function (name) {\r\n            var value;\r\n\r\n            name = name.split('/').join('][');\r\n            value = $('[name=\"product[' + name + ']\"]:enabled:not(.ignore-validate)', this.productForm).val();\r\n            if (value === undefined) {\r\n                value = this.source.get('data.product.' + name);\r\n            }\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} data\r\n         * @param {String} field\r\n         * @return {String}\r\n         */\r\n        getRowId: function (data, field) {\r\n            var key = data.variationKey;\r\n\r\n            return 'variations-matrix-' + key + '-' + field;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} variation\r\n         * @param {String} field\r\n         * @return {String}\r\n         */\r\n        getVariationRowName: function (variation, field) {\r\n            var result;\r\n\r\n            if (variation.productId) {\r\n                result = 'configurations[' + variation.productId + '][' + field.split('/').join('][') + ']';\r\n            } else {\r\n                result = 'variations-matrix[' + variation.variationKey + '][' + field.split('/').join('][') + ']';\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * @param {*} variations\r\n         * @param {*} attributes\r\n         */\r\n        render: function (variations, attributes) {\r\n            this.changeButtonWizard();\r\n            this.populateVariationMatrix(variations);\r\n            this.attributes(attributes);\r\n            this.disableConfigurableAttributes(attributes);\r\n            this.handleValue(variations);\r\n            this.handleAttributes();\r\n        },\r\n\r\n        /**\r\n         * Change button wizard.\r\n         */\r\n        changeButtonWizard: function () {\r\n            if (this.variations.length) {\r\n                this.wizardButtonElement().title(this.wizardModalButtonTitle);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} variations\r\n         */\r\n        handleValue: function (variations) {\r\n            var tmpArray = [];\r\n\r\n            _.each(variations, function (variation) {\r\n                var attributes = _.reduce(variation.options, function (memo, option) {\r\n                    var attribute = {};\r\n\r\n                    attribute[option['attribute_code']] = option.value;\r\n\r\n                    return _.extend(memo, attribute);\r\n                }, {}),\r\n                    gallery = {\r\n                        images: {}\r\n                    },\r\n                    types = {};\r\n\r\n                _.each(variation.images.images, function (image) {\r\n                    gallery.images[image['file_id']] = {\r\n                        position: image.position,\r\n                        file: image.file,\r\n                        disabled: image.disabled,\r\n                        label: image.label || ''\r\n                    };\r\n                    _.each(image.galleryTypes, function (type) {\r\n                        types[type] = image.file;\r\n                    });\r\n                }, this);\r\n\r\n                tmpArray.push(_.extend(variation, types, {\r\n                    productId: variation.productId || null,\r\n                    name: variation.name || variation.sku,\r\n                    priceCurrency: this.currencySymbol,\r\n                    weight: variation.weight,\r\n                    attribute: JSON.stringify(attributes),\r\n                    variationKey: this.getVariationKey(variation.options),\r\n                    editable: variation.editable === undefined ? 0 : 1,\r\n                    productUrl: this.buildProductUrl(variation.productId),\r\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10),\r\n                    newProduct: variation.productId ? 0 : 1,\r\n                    'media_gallery': gallery\r\n                }));\r\n            }, this);\r\n\r\n            this.value(tmpArray);\r\n        },\r\n\r\n        /**\r\n         * Handle attributes.\r\n         */\r\n        handleAttributes: function () {\r\n            var tmpArray = [],\r\n                codesArray = [],\r\n                tmpOptions = {},\r\n                option = {},\r\n                position = 0,\r\n                values = {};\r\n\r\n            _.each(this.attributes(), function (attribute) {\r\n                tmpArray.push(attribute.id);\r\n                codesArray.push(attribute.code);\r\n                values = {};\r\n                _.each(attribute.chosen, function (row) {\r\n                    values[row.value] = {\r\n                        'include': '1',\r\n                        'value_index': row.value\r\n                    };\r\n                }, this);\r\n                option = {\r\n                    'attribute_id': attribute.id,\r\n                    'code': attribute.code,\r\n                    'label': attribute.label,\r\n                    'position': position,\r\n                    'values': values\r\n                };\r\n                tmpOptions[attribute.id] = option;\r\n                position++;\r\n            }, this);\r\n\r\n            this.attributesData(tmpOptions);\r\n            this.usedAttributes(tmpArray);\r\n            this.attributeCodes(codesArray);\r\n        },\r\n\r\n        /**\r\n         * Get attributes options\r\n         * @see use in matrix.phtml\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        getAttributesOptions: function () {\r\n            return this.showVariations() ? this.productMatrix()[0].options : [];\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        showVariations: function () {\r\n            return this.productMatrix().length > 0;\r\n        },\r\n\r\n        /**\r\n         * @param {Array} variations\r\n         */\r\n        populateVariationMatrix: function (variations) {\r\n            this.productMatrix([]);\r\n            _.each(variations, function (variation) {\r\n                var attributes = _.reduce(variation.options, function (memo, option) {\r\n                    var attribute = {};\r\n\r\n                    attribute[option['attribute_code']] = option.value;\r\n\r\n                    return _.extend(memo, attribute);\r\n                }, {});\r\n\r\n                this.productMatrix.push(_.extend(variation, {\r\n                    productId: variation.productId || null,\r\n                    name: variation.name || variation.sku,\r\n                    weight: variation.weight,\r\n                    attribute: JSON.stringify(attributes),\r\n                    variationKey: this.getVariationKey(variation.options),\r\n                    editable: variation.editable === undefined ? !variation.productId : variation.editable,\r\n                    productUrl: this.buildProductUrl(variation.productId),\r\n                    status: variation.status === undefined ? 1 : parseInt(variation.status, 10)\r\n                }));\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * @param {*} productId\r\n         */\r\n        buildProductUrl: function (productId) {\r\n            return this.productUrl.replace('%id%', productId);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} options\r\n         * @return {String}\r\n         */\r\n        getVariationKey: function (options) {\r\n            return _.pluck(options, 'value').sort().join('-');\r\n        },\r\n\r\n        /**\r\n         * @param {*} options\r\n         * @return {*|null}\r\n         */\r\n        getProductIdByOptions: function (options) {\r\n            return this.productAttributesMap[this.getVariationKey(options)] || null;\r\n        },\r\n\r\n        /**\r\n         * Init product attributes map\r\n         */\r\n        initProductAttributesMap: function () {\r\n            if (this.productAttributesMap === null) {\r\n                this.productAttributesMap = {};\r\n                _.each(this.variations, function (product) {\r\n                    this.productAttributesMap[this.getVariationKey(product.options)] = product.productId;\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Array} attributes\r\n         */\r\n        disableConfigurableAttributes: function (attributes) {\r\n            var element;\r\n\r\n            _.each(this.disabledAttributes, function (attribute) {\r\n                registry.get('inputName = ' + 'product[' + attribute + ']').disabled(false);\r\n            });\r\n            this.disabledAttributes = [];\r\n\r\n            _.each(attributes, function (attribute) {\r\n                element = registry.get('inputName = ' + 'product[' + attribute.code + ']');\r\n\r\n                if (!_.isUndefined(element)) {\r\n                    element.disabled(true);\r\n                    this.disabledAttributes.push(attribute.code);\r\n                }\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Get currency symbol\r\n         * @returns {String}\r\n         */\r\n        getCurrencySymbol: function () {\r\n            return this.currencySymbol;\r\n        },\r\n\r\n        /**\r\n         * Chose action for the form save button\r\n         */\r\n        saveFormHandler: function () {\r\n            this.formElement().validate();\r\n\r\n            if (this.formElement().source.get('params.invalid') === false) {\r\n                this.serializeData();\r\n            }\r\n\r\n            if (this.checkForNewAttributes()) {\r\n                this.formSaveParams = arguments;\r\n                this.attributeSetHandlerModal().openModal();\r\n            } else {\r\n                if (this.validateForm(this.formElement())) {\r\n                    this.clearOutdatedData();\r\n                }\r\n                this.formElement().save(arguments[0], arguments[1]);\r\n\r\n                if (this.formElement().source.get('params.invalid')) {\r\n                    this.unserializeData();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} formElement\r\n         *\r\n         * Validates each form element and returns true, if all elements are valid.\r\n         */\r\n        validateForm: function (formElement) {\r\n            formElement.validate();\r\n\r\n            return !formElement.additionalInvalid && !formElement.source.get('params.invalid');\r\n        },\r\n\r\n        /**\r\n         * Serialize data for specific form fields\r\n         *\r\n         * Serializes some complex data fields\r\n         *\r\n         * Original fields:\r\n         *   - configurable-matrix;\r\n         *   - associated_product_ids.\r\n         *\r\n         * Serialized fields in request:\r\n         *   - configurable-matrix-serialized;\r\n         *   - associated_product_ids_serialized.\r\n         */\r\n        serializeData: function () {\r\n            if (this.source.data['configurable-matrix']) {\r\n                this.source.data['configurable-matrix-serialized'] =\r\n                    JSON.stringify(this.source.data['configurable-matrix']);\r\n            }\r\n\r\n            if (this.source.data['associated_product_ids']) {\r\n                this.source.data['associated_product_ids_serialized'] =\r\n                    JSON.stringify(this.source.data['associated_product_ids']);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear outdated data for specific form fields\r\n         *\r\n         * Outdated fields:\r\n         *   - configurable-matrix;\r\n         *   - associated_product_ids.\r\n         */\r\n        clearOutdatedData: function () {\r\n            if (this.source.data['configurable-matrix']) {\r\n                delete this.source.data['configurable-matrix'];\r\n            }\r\n\r\n            if (this.source.data['associated_product_ids']) {\r\n                delete this.source.data['associated_product_ids'];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Unserialize data for specific form fields\r\n         *\r\n         * Unserializes some fields that were serialized this.serializeData\r\n         */\r\n        unserializeData: function () {\r\n            if (this.source.data['configurable-matrix-serialized']) {\r\n                this.source.data['configurable-matrix'] =\r\n                    JSON.parse(this.source.data['configurable-matrix-serialized']);\r\n                delete this.source.data['configurable-matrix-serialized'];\r\n            }\r\n\r\n            if (this.source.data['associated_product_ids_serialized']) {\r\n                this.source.data['associated_product_ids'] =\r\n                    JSON.parse(this.source.data['associated_product_ids_serialized']);\r\n                delete this.source.data['associated_product_ids_serialized'];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check for newly added attributes\r\n         * @returns {Boolean}\r\n         */\r\n        checkForNewAttributes: function () {\r\n            var element, newAttributes = false;\r\n\r\n            _.each(this.source.get('data.attribute_codes'), function (attribute) {\r\n                element = registry.get('index = ' + attribute);\r\n\r\n                if (_.isUndefined(element)) {\r\n                    newAttributes = true;\r\n                }\r\n            }, this);\r\n\r\n            return newAttributes;\r\n        },\r\n\r\n        /**\r\n         * New attributes handler\r\n         * @returns {Boolean}\r\n         */\r\n        addNewAttributeSetHandler: function () {\r\n            var chosenAttributeSetOption;\r\n\r\n            this.formElement().validate();\r\n\r\n            if (this.formElement().source.get('params.invalid') === false) {\r\n                chosenAttributeSetOption = this.attributeSetSelection;\r\n\r\n                if (chosenAttributeSetOption === 'new') {\r\n                    this.createNewAttributeSet();\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (chosenAttributeSetOption === 'existing') {\r\n                    this.set(\r\n                        'skeletonAttributeSet',\r\n                        this.attributeSetId\r\n                    );\r\n                }\r\n\r\n                this.closeDialogAndProcessForm();\r\n\r\n                return true;\r\n            }\r\n\r\n            this.unserializeData();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Handles new attribute set creation\r\n         * @returns {Boolean}\r\n         */\r\n        createNewAttributeSet: function () {\r\n            var messageBoxElement = registry.get('index = affectedAttributeSetError');\r\n\r\n            messageBoxElement.visible(false);\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.attributeSetCreationUrl,\r\n                data: {\r\n                    gotoEdit: 1,\r\n                    'attribute_set_name': this.attributeSetName,\r\n                    'skeleton_set': this.skeletonAttributeSet,\r\n                    'return_session_messages_only': 1\r\n                },\r\n                dataType: 'json',\r\n                showLoader: true,\r\n                context: this\r\n            }).done(function (data) {\r\n                if (!data.error) {\r\n                    this.set(\r\n                        'skeletonAttributeSet',\r\n                        data.id\r\n                    );\r\n                    messageBoxElement.content(data.messages);\r\n                    messageBoxElement.visible(true);\r\n                    this.closeDialogAndProcessForm();\r\n                } else {\r\n                    messageBoxElement.content(data.messages);\r\n                    messageBoxElement.visible(true);\r\n                }\r\n\r\n                return false;\r\n            }).fail(function (xhr) {\r\n                if (xhr.statusText === 'abort') {\r\n                    return;\r\n                }\r\n\r\n                alert({\r\n                    content: $t('Something went wrong.')\r\n                });\r\n            });\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Closes attribute set handler modal and process product form\r\n         */\r\n        closeDialogAndProcessForm: function () {\r\n            this.attributeSetHandlerModal().closeModal();\r\n            this.formElement().save(this.formSaveParams[0], this.formSaveParams[1]);\r\n        },\r\n\r\n        /**\r\n         * Retrieves product price\r\n         * @returns {*}\r\n         */\r\n        getProductPrice: function () {\r\n            return this.productPrice;\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/paging/sizes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/paging/sizes'\r\n], function (Sizes) {\r\n    'use strict';\r\n\r\n    return Sizes.extend({\r\n        defaults: {\r\n            options: {\r\n                '20': {\r\n                    value: 20,\r\n                    label: 20\r\n                },\r\n                '30': {\r\n                    value: 30,\r\n                    label: 30\r\n                },\r\n                '50': {\r\n                    value: 50,\r\n                    label: 50\r\n                }\r\n            },\r\n            value: 20\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/attributes_values.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils',\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, utils, Collapsible) {\r\n    'use strict';\r\n\r\n    //connect items with observableArrays\r\n    ko.bindingHandlers.sortableList = {\r\n        /** @inheritdoc */\r\n        init: function (element, valueAccessor) {\r\n            var list = valueAccessor();\r\n\r\n            $(element).sortable({\r\n                axis: 'y',\r\n                handle: '[data-role=\"draggable\"]',\r\n                tolerance: 'pointer',\r\n\r\n                /** @inheritdoc */\r\n                update: function (event, ui) {\r\n                    var item = ko.contextFor(ui.item[0]).$data,\r\n                        position = ko.utils.arrayIndexOf(ui.item.parent().children(), ui.item[0]);\r\n\r\n                    if (ko.contextFor(ui.item[0]).$index() != position) { //eslint-disable-line eqeqeq\r\n                        if (position >= 0) {\r\n                            list.remove(item);\r\n                            list.splice(position, 0, item);\r\n                        }\r\n                        ui.item.remove();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return Collapsible.extend({\r\n        defaults: {\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            },\r\n            createOptionsUrl: null,\r\n            attributes: [],\r\n            stepInitialized: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.createAttribute = _.wrap(this.createAttribute, function () {\r\n                var args = _.toArray(arguments),\r\n                    createAttribute = args.shift();\r\n\r\n                return this.doInitSavedOptions(createAttribute.apply(this, args));\r\n            });\r\n            this.createAttribute = _.memoize(this.createAttribute.bind(this), _.property('id'));\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe(['attributes']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Create option.\r\n         */\r\n        createOption: function () {\r\n            // this - current attribute\r\n            this.options.push({\r\n                value: 0,\r\n                label: '',\r\n                id: utils.uniqueid(),\r\n                'attribute_id': this.id,\r\n                'is_new': true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} option\r\n         */\r\n        saveOption: function (option) {\r\n            if (this.isValidOption(option)) {\r\n                this.options.remove(option);\r\n                this.options.push(option);\r\n                this.chosenOptions.push(option.id);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} newOption\r\n         * @return boolean\r\n         */\r\n        isValidOption: function (newOption) {\r\n            var duplicatedOptions = [],\r\n                errorOption,\r\n                allOptions = [];\r\n\r\n            newOption.label = newOption.label.trim();\r\n\r\n            if (_.isEmpty(newOption.label)) {\r\n                return false;\r\n            }\r\n\r\n            _.each(this.options(), function (option) {\r\n                if (!_.isUndefined(allOptions[option.label]) && newOption.label === option.label) {\r\n                    duplicatedOptions.push(option);\r\n                }\r\n\r\n                allOptions[option.label] = option.label;\r\n            });\r\n\r\n            if (duplicatedOptions.length) {\r\n                _.each(duplicatedOptions, function (duplicatedOption) {\r\n                    errorOption = $('[data-role=\"' + duplicatedOption.id + '\"]');\r\n                    errorOption.addClass('_error');\r\n                });\r\n\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} option\r\n         */\r\n        removeOption: function (option) {\r\n            this.options.remove(option);\r\n        },\r\n\r\n        /**\r\n         * @param {String} attribute\r\n         */\r\n        removeAttribute: function (attribute) {\r\n            this.attributes.remove(attribute);\r\n            this.wizard.setNotificationMessage(\r\n                $.mage.__('An attribute has been removed. This attribute will no longer appear in your configurations.')\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attribute\r\n         * @param {*} index\r\n         * @return {Object}\r\n         */\r\n        createAttribute: function (attribute, index) {\r\n            attribute.chosenOptions = ko.observableArray([]);\r\n            attribute.options = ko.observableArray(_.map(attribute.options, function (option) {\r\n                option.id = utils.uniqueid();\r\n\r\n                return option;\r\n            }));\r\n            attribute.opened = ko.observable(this.initialOpened(index));\r\n            attribute.collapsible = ko.observable(true);\r\n            attribute.isValidOption = this.isValidOption;\r\n\r\n            return attribute;\r\n        },\r\n\r\n        /**\r\n         * First 3 attribute panels must be open.\r\n         *\r\n         * @param {Number} index\r\n         * @return {Boolean}\r\n         */\r\n        initialOpened: function (index) {\r\n            return index < 3;\r\n        },\r\n\r\n        /**\r\n         * Save attribute.\r\n         */\r\n        saveAttribute: function () {\r\n            var errorMessage = $.mage.__('Select options for all attributes or remove unused attributes.');\r\n\r\n            if (!this.attributes().length) {\r\n                throw new Error(errorMessage);\r\n            }\r\n\r\n            _.each(this.attributes(), function (attribute) {\r\n                attribute.chosen = [];\r\n\r\n                if (!attribute.chosenOptions.getLength()) {\r\n                    throw new Error(errorMessage);\r\n                }\r\n                _.each(attribute.chosenOptions(), function (id) {\r\n                    attribute.chosen.push(attribute.options.findWhere({\r\n                        id: id\r\n                    }));\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attribute\r\n         */\r\n        selectAllAttributes: function (attribute) {\r\n            this.chosenOptions(_.pluck(attribute.options(), 'id'));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attribute\r\n         */\r\n        deSelectAllAttributes: function (attribute) {\r\n            attribute.chosenOptions.removeAll();\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        saveOptions: function () {\r\n            var newOptions = [];\r\n\r\n            _.each(this.attributes(), function (attribute) {\r\n                _.each(attribute.options(), function (element) {\r\n                    var option = attribute.options.findWhere({\r\n                        id: element.id\r\n                    });\r\n\r\n                    if (option['is_new'] === true) {\r\n                        if (!attribute.isValidOption(option)) {\r\n                            throw new Error(\r\n                                $.mage.__('The value of attribute \"\"%1\"\" must be unique')\r\n                                    .replace('\"%1\"', attribute.label)\r\n                            );\r\n                        }\r\n\r\n                        newOptions.push(option);\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (!newOptions.length) {\r\n                return false;\r\n            }\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: this.createOptionsUrl,\r\n                data: {\r\n                    options: newOptions\r\n                },\r\n                showLoader: true\r\n            }).done(function (savedOptions) {\r\n                if (savedOptions.error) {\r\n                    this.notificationMessage.error = savedOptions.error;\r\n                    this.notificationMessage.text = savedOptions.message;\r\n\r\n                    return;\r\n                }\r\n\r\n                _.each(this.attributes(), function (attribute) {\r\n                    _.each(savedOptions, function (newOptionId, oldOptionId) {\r\n                        var option = attribute.options.findWhere({\r\n                            id: oldOptionId\r\n                        });\r\n\r\n                        if (option) {\r\n                            attribute.options.remove(option);\r\n                            option['is_new'] = false;\r\n                            option.value = newOptionId;\r\n                            attribute.options.push(option);\r\n                        }\r\n                    });\r\n                });\r\n\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {*} attributeIds\r\n         */\r\n        requestAttributes: function (attributeIds) {\r\n            $.ajax({\r\n                type: 'GET',\r\n                url: this.optionsUrl,\r\n                data: {\r\n                    attributes: attributeIds\r\n                },\r\n                showLoader: true\r\n            }).done(function (attributes) {\r\n                attributes = _.sortBy(attributes, function (attribute) {\r\n                    return this.wizard.data.attributesIds.indexOf(attribute.id);\r\n                }.bind(this));\r\n                this.attributes(_.map(attributes, this.createAttribute));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * @param {*} attribute\r\n         * @return {*}\r\n         */\r\n        doInitSavedOptions: function (attribute) {\r\n            var selectedOptions, selectedOptionsIds, selectedAttribute = _.findWhere(this.initData.attributes, {\r\n                id: attribute.id\r\n            });\r\n\r\n            if (selectedAttribute) {\r\n                selectedOptions = _.pluck(selectedAttribute.chosen, 'value');\r\n                selectedOptionsIds = _.pluck(_.filter(attribute.options(), function (option) {\r\n                    return _.contains(selectedOptions, option.value);\r\n                }), 'id');\r\n                attribute.chosenOptions(selectedOptionsIds);\r\n                this.initData.attributes = _.without(this.initData.attributes, selectedAttribute);\r\n            }\r\n\r\n            return attribute;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.requestAttributes(wizard.data.attributesIds());\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        force: function (wizard) {\r\n            this.saveOptions();\r\n            this.saveAttribute(wizard);\r\n\r\n            wizard.data.attributes = this.attributes;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        back: function (wizard) {\r\n            wizard.data.attributesIds(this.attributes().pluck('id'));\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/bulk.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY, byteConvert */\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/collapsible',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Catalog/js/product-gallery',\r\n    'jquery/file-uploader',\r\n    'mage/translate',\r\n    'Magento_ConfigurableProduct/js/variations/variations'\r\n], function (Component, $, ko, _, Collapsible, mageTemplate, alert) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            modules: {\r\n                variationsComponent: '${ $.variationsComponent }'\r\n            },\r\n            countVariations: 0,\r\n            attributes: [],\r\n            sections: {},\r\n            images: null,\r\n            price: '',\r\n            quantity: '',\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe('countVariations attributes sections');\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            var self = this;\r\n\r\n            this._super();\r\n            this.sections({\r\n                images: {\r\n                    label: 'images',\r\n                    type: ko.observable('none'),\r\n                    value: ko.observable(),\r\n                    attribute: ko.observable()\r\n                },\r\n                price: {\r\n                    label: 'price',\r\n                    type: ko.observable('none'),\r\n                    value: ko.observable(),\r\n                    attribute: ko.observable(),\r\n                    currencySymbol: ''\r\n                },\r\n                quantity: {\r\n                    label: 'quantity',\r\n                    type: ko.observable('none'),\r\n                    value: ko.observable(),\r\n                    attribute: ko.observable()\r\n                }\r\n            });\r\n\r\n            this.variationsComponent(function (variationsComponent) {\r\n                this.sections().price.currencySymbol = variationsComponent.getCurrencySymbol();\r\n            }.bind(this));\r\n\r\n            /**\r\n             * Make options sections.\r\n             */\r\n            this.makeOptionSections = function () {\r\n                return {\r\n                    images: new this.makeImages(null),\r\n                    price: this.price,\r\n                    quantity: this.quantity\r\n                };\r\n            }.bind(this);\r\n\r\n            /**\r\n             * @param {Object} images\r\n             * @param {*} typePreview\r\n             */\r\n            this.makeImages = function (images, typePreview) {\r\n                var preview;\r\n\r\n                if (!images) {\r\n                    this.images = [];\r\n                    this.preview = self.noImage;\r\n                    this.file = null;\r\n                } else {\r\n                    this.images = images;\r\n                    preview = _.find(this.images, function (image) {\r\n                        return _.contains(image.galleryTypes, typePreview);\r\n                    });\r\n\r\n                    if (preview) {\r\n                        this.file = preview.file;\r\n                        this.preview = preview.url;\r\n                    } else {\r\n                        this.file = null;\r\n                        this.preview = self.noImage;\r\n                    }\r\n                }\r\n            };\r\n            this.images = new this.makeImages();\r\n            _.each(this.sections(), function (section) {\r\n                section.type.subscribe(function () {\r\n                    this.setWizardNotifyMessageDependOnSectionType();\r\n                }.bind(this));\r\n            }, this);\r\n        },\r\n        types: ['each', 'single', 'none'],\r\n\r\n        /**\r\n         * Set Wizard notify message depend on section type\r\n         */\r\n        setWizardNotifyMessageDependOnSectionType: function () {\r\n            var flag = false;\r\n\r\n            _.each(this.sections(), function (section) {\r\n                if (section.type() !== 'none') {\r\n                    flag = true;\r\n                }\r\n            }, this);\r\n\r\n            if (flag) {\r\n                this.wizard.setNotificationMessage(\r\n                    $.mage.__('Choose this option to delete and replace extension data for all past configurations.')\r\n                );\r\n            } else {\r\n                this.wizard.cleanNotificationMessage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.attributes(wizard.data.attributes());\r\n\r\n            if (this.mode === 'edit') {\r\n                this.setWizardNotifyMessageDependOnSectionType();\r\n            }\r\n            //fill option section data\r\n            this.attributes.each(function (attribute) {\r\n                attribute.chosen.each(function (option) {\r\n                    option.sections = ko.observable(this.makeOptionSections());\r\n                }, this);\r\n            }, this);\r\n            //reset section.attribute\r\n            _.each(this.sections(), function (section) {\r\n                section.attribute(null);\r\n            });\r\n\r\n            this.initCountVariations();\r\n            this.bindGalleries();\r\n        },\r\n\r\n        /**\r\n         * Init count variations.\r\n         */\r\n        initCountVariations: function () {\r\n            var variations = this.generateVariation(this.attributes()),\r\n                newVariations = _.map(variations, function (options) {\r\n                    return this.variationsComponent().getVariationKey(options);\r\n                }.bind(this)),\r\n                existingVariations = _.keys(this.variationsComponent().productAttributesMap);\r\n\r\n            this.countVariations(_.difference(newVariations, existingVariations).length);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} attributes - example [['b1', 'b2'],['a1', 'a2', 'a3'],['c1', 'c2', 'c3'],['d1']]\r\n         * @returns {*} example [['b1','a1','c1','d1'],['b1','a1','c2','d1']...]\r\n         */\r\n        generateVariation: function (attributes) {\r\n            return _.reduce(attributes, function (matrix, attribute) {\r\n                var tmp = [];\r\n\r\n                _.each(matrix, function (variations) {\r\n                    _.each(attribute.chosen, function (option) {\r\n                        option['attribute_code'] = attribute.code;\r\n                        option['attribute_label'] = attribute.label;\r\n                        tmp.push(_.union(variations, [option]));\r\n                    });\r\n                });\r\n\r\n                if (!tmp.length) {\r\n                    return _.map(attribute.chosen, function (option) {\r\n                        option['attribute_code'] = attribute.code;\r\n                        option['attribute_label'] = attribute.label;\r\n\r\n                        return [option];\r\n                    });\r\n                }\r\n\r\n                return tmp;\r\n            }, []);\r\n        },\r\n\r\n        /**\r\n         * @param {*} section\r\n         * @param {Object} options\r\n         * @return {*}\r\n         */\r\n        getSectionValue: function (section, options) {\r\n            switch (this.sections()[section].type()) {\r\n                case 'each':\r\n                    return _.find(this.sections()[section].attribute().chosen, function (chosen) {\r\n                        return _.find(options, function (option) {\r\n                            return chosen.id == option.id; //eslint-disable-line eqeqeq\r\n                        });\r\n                    }).sections()[section];\r\n\r\n                case 'single':\r\n                    return this.sections()[section].value();\r\n\r\n                case 'none':\r\n                    return this[section];\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} node\r\n         * @return {Promise|*}\r\n         */\r\n        getImageProperty: function (node) {\r\n            var types = node.find('[data-role=gallery]').productGallery('option').types,\r\n                images = _.map(node.find('[data-role=image]'), function (image) {\r\n                    var imageData = $(image).data('imageData'),\r\n                        positionElement;\r\n\r\n                    imageData.galleryTypes = _.pluck(_.filter(types, function (type) {\r\n                        return type.value === imageData.file;\r\n                    }), 'code');\r\n\r\n                    //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                    positionElement =\r\n                        $(image).find('[name=\"product[media_gallery][images][' + imageData.file_id + '][position]\"]');\r\n                    //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n                    if (!_.isEmpty(positionElement.val())) {\r\n                        imageData.position = positionElement.val();\r\n                    }\r\n\r\n                    return imageData;\r\n                });\r\n\r\n            return _.reject(images, function (image) {\r\n                return !!image.isRemoved;\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Fill images section.\r\n         */\r\n        fillImagesSection: function () {\r\n            switch (this.sections().images.type()) {\r\n                case 'each':\r\n                    if (this.sections().images.attribute()) {\r\n                        this.sections().images.attribute().chosen.each(function (option) {\r\n                            option.sections().images = new this.makeImages(\r\n                                this.getImageProperty($('[data-role=step-gallery-option-' + option.id + ']')),\r\n                                'thumbnail'\r\n                            );\r\n                        }, this);\r\n                    }\r\n                    break;\r\n\r\n                case 'single':\r\n                    this.sections().images.value(new this.makeImages(\r\n                        this.getImageProperty($('[data-role=step-gallery-single]')),\r\n                        'thumbnail'\r\n                    ));\r\n                    break;\r\n\r\n                default:\r\n                    this.sections().images.value(new this.makeImages());\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        force: function (wizard) {\r\n            this.fillImagesSection();\r\n            this.validate();\r\n            this.validateImage();\r\n            wizard.data.sections = this.sections;\r\n            wizard.data.sectionHelper = this.getSectionValue.bind(this);\r\n            wizard.data.variations = this.generateVariation(this.attributes());\r\n        },\r\n\r\n        /**\r\n         * Validate.\r\n         */\r\n        validate: function () {\r\n            var formValid;\r\n\r\n            _.each(this.sections(), function (section) {\r\n                switch (section.type()) {\r\n                    case 'each':\r\n                        if (!section.attribute()) {\r\n                            throw new Error($.mage.__('Please select attribute for {section} section.')\r\n                                .replace('{section}', section.label));\r\n                        }\r\n                        break;\r\n\r\n                    case 'single':\r\n                        if (!section.value()) {\r\n                            throw new Error($.mage.__('Please fill in the values for {section} section.')\r\n                                .replace('{section}', section.label));\r\n                        }\r\n                        break;\r\n                }\r\n            }, this);\r\n            formValid = true;\r\n            _.each($('[data-role=attributes-values-form]'), function (form) {\r\n                formValid = $(form).valid() && formValid;\r\n            });\r\n\r\n            if (!formValid) {\r\n                throw new Error($.mage.__('Please fill-in correct values.'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validate image.\r\n         */\r\n        validateImage: function () {\r\n            switch (this.sections().images.type()) {\r\n                case 'each':\r\n                    _.each(this.sections().images.attribute().chosen, function (option) {\r\n                        if (!option.sections().images.images.length) {\r\n                            throw new Error($.mage.__('Please select image(s) for your attribute.'));\r\n                        }\r\n                    });\r\n                    break;\r\n\r\n                case 'single':\r\n                    if (this.sections().images.value().file == null) {\r\n                        throw new Error($.mage.__('Please choose image(s).'));\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Back.\r\n         */\r\n        back: function () {\r\n            this.setWizardNotifyMessageDependOnSectionType();\r\n        },\r\n\r\n        /**\r\n         * Bind galleries.\r\n         */\r\n        bindGalleries: function () {\r\n            $('[data-role=bulk-step] [data-role=gallery]').each(function (index, element) {\r\n                var gallery = $(element),\r\n                    uploadInput = $(gallery.find('[name=image]')),\r\n                    dropZone = $(gallery).find('.image-placeholder');\r\n\r\n                if (!gallery.data('gallery-initialized')) {\r\n                    gallery.mage('productGallery', {\r\n                        template: '[data-template=gallery-content]',\r\n                        dialogTemplate: '.dialog-template',\r\n                        dialogContainerTmpl: '[data-role=img-dialog-container-tmpl]'\r\n                    });\r\n\r\n                    uploadInput.fileupload({\r\n                        dataType: 'json',\r\n                        dropZone: dropZone,\r\n                        process: [{\r\n                            action: 'load',\r\n                            fileTypes: /^image\\/(gif|jpeg|png)$/\r\n                        }, {\r\n                            action: 'resize',\r\n                            maxWidth: 1920,\r\n                            maxHeight: 1200\r\n                        }, {\r\n                            action: 'save'\r\n                        }],\r\n                        formData: {\r\n                            'form_key': FORM_KEY\r\n                        },\r\n                        sequentialUploads: true,\r\n                        acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        add: function (e, data) {\r\n                            var progressTmpl = mageTemplate('[data-template=uploader]'),\r\n                                fileSize,\r\n                                tmpl;\r\n\r\n                            $.each(data.files, function (i, file) {\r\n                                fileSize = typeof file.size == 'undefined' ?\r\n                                    $.mage.__('We could not detect a size.') :\r\n                                    byteConvert(file.size);\r\n\r\n                                data.fileId = Math.random().toString(33).substr(2, 18);\r\n\r\n                                tmpl = progressTmpl({\r\n                                    data: {\r\n                                        name: file.name,\r\n                                        size: fileSize,\r\n                                        id: data.fileId\r\n                                    }\r\n                                });\r\n\r\n                                $(tmpl).appendTo(gallery.find('[data-role=uploader]'));\r\n                            });\r\n\r\n                            $(this).fileupload('process', data).done(function () {\r\n                                data.submit();\r\n                            });\r\n                        },\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        done: function (e, data) {\r\n                            if (data.result && !data.result.error) {\r\n                                gallery.trigger('addItem', data.result);\r\n                            } else {\r\n                                $('#' + data.fileId)\r\n                                    .delay(2000)\r\n                                    .hide('highlight');\r\n                                alert({\r\n                                    content: $.mage.__('We don\\'t recognize or support this file extension type.')\r\n                                });\r\n                            }\r\n                            $('#' + data.fileId).remove();\r\n                        },\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        progress: function (e, data) {\r\n                            var progress = parseInt(data.loaded / data.total * 100, 10),\r\n                                progressSelector = '#' + data.fileId + ' .progressbar-container .progressbar';\r\n\r\n                            $(progressSelector).css('width', progress + '%');\r\n                        },\r\n\r\n                        /**\r\n                         * @param {jQuery.Event} e\r\n                         * @param {Object} data\r\n                         */\r\n                        fail: function (e, data) {\r\n                            var progressSelector = '#' + data.fileId;\r\n\r\n                            $(progressSelector).removeClass('upload-progress').addClass('upload-failure')\r\n                                .delay(2000)\r\n                                .hide('highlight')\r\n                                .remove();\r\n                        }\r\n                    });\r\n                    gallery.data('gallery-initialized', 1);\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/select_attributes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (Component, $, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Function} provider\r\n     */\r\n    var initNewAttributeListener = function (provider) {\r\n        $('[data-role=product-variations-matrix]').on('add', function () {\r\n            provider().reload();\r\n        });\r\n    };\r\n\r\n    return Component.extend({\r\n        attributesLabels: {},\r\n        stepInitialized: false,\r\n        defaults: {\r\n            modules: {\r\n                multiselect: '${ $.multiselectName }',\r\n                attributeProvider: '${ $.providerName }'\r\n            },\r\n            listens: {\r\n                '${ $.multiselectName }:selected': 'doSelectedAttributesLabels',\r\n                '${ $.multiselectName }:rows': 'doSelectSavedAttributes'\r\n            },\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            },\r\n            selectedAttributes: []\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.selected = [];\r\n\r\n            initNewAttributeListener(this.attributeProvider);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            this._super().observe(['selectedAttributes']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.setNotificationMessage();\r\n        },\r\n\r\n        /**\r\n         * Set notification message.\r\n         */\r\n        setNotificationMessage: function () {\r\n            /*eslint-disable max-len*/\r\n            var msg = $.mage.__('When you remove or add an attribute, we automatically update all configurations and you will need to recreate current configurations manually.');\r\n\r\n            /*eslint-enable max-len*/\r\n\r\n            if (this.mode === 'edit') {\r\n                this.wizard.setNotificationMessage(msg);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Do select saved attributes.\r\n         */\r\n        doSelectSavedAttributes: function () {\r\n            if (this.stepInitialized === false) {\r\n                this.stepInitialized = true;\r\n                //cache attributes labels, which can be present on the 2nd page\r\n                _.each(this.initData.attributes, function (attribute) {\r\n                    this.attributesLabels[attribute.id] = attribute.label;\r\n                }.bind(this));\r\n                this.multiselect().selected(_.pluck(this.initData.attributes, 'id'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} selected\r\n         */\r\n        doSelectedAttributesLabels: function (selected) {\r\n            var labels = [];\r\n\r\n            this.selected = selected;\r\n            _.each(selected, function (attributeId) {\r\n                var attribute;\r\n\r\n                if (!this.attributesLabels[attributeId]) {\r\n                    attribute = _.findWhere(this.multiselect().rows(), {\r\n                        'attribute_id': attributeId\r\n                    });\r\n\r\n                    if (attribute) {\r\n                        this.attributesLabels[attribute['attribute_id']] = attribute['frontend_label'];\r\n                    }\r\n                }\r\n                labels.push(this.attributesLabels[attributeId]);\r\n            }.bind(this));\r\n            this.selectedAttributes(labels.join(', '));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        force: function (wizard) {\r\n            wizard.data.attributesIds = this.multiselect().selected;\r\n\r\n            if (!wizard.data.attributesIds() || wizard.data.attributesIds().length === 0) {\r\n                throw new Error($.mage.__('Please select attribute(s).'));\r\n            }\r\n            this.setNotificationMessage();\r\n        },\r\n\r\n        /**\r\n         * Back.\r\n         */\r\n        back: function () {\r\n        }\r\n    });\r\n});\r\n","Magento_ConfigurableProduct/js/variations/steps/summary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/paging/paging',\r\n    'mage/translate'\r\n], function (Component, $, ko, _, paging) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            modules: {\r\n                variationsComponent: '${ $.variationsComponent }',\r\n                modalComponent: '${ $.modalComponent }',\r\n                matrixGridComponent: '${ $.matrixGridComponent }'\r\n            },\r\n            notificationMessage: {\r\n                text: null,\r\n                error: null\r\n            },\r\n            gridExisting: [],\r\n            gridNew: [],\r\n            gridDeleted: [],\r\n            variationsExisting: [],\r\n            variationsNew: [],\r\n            variationsDeleted: [],\r\n            pagingExisting: paging({\r\n                name: 'configurableWizard.pagingExisting',\r\n                sizesConfig: {\r\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\r\n                    name: 'configurableWizard.pagingExisting_sizes'\r\n                }\r\n            }),\r\n            pagingNew: paging({\r\n                name: 'configurableWizard.pagingNew',\r\n                sizesConfig: {\r\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\r\n                    name: 'configurableWizard.pagingNew_sizes'\r\n                }\r\n            }),\r\n            pagingDeleted: paging({\r\n                name: 'configurableWizard.pagingDeleted',\r\n                sizesConfig: {\r\n                    component: 'Magento_ConfigurableProduct/js/variations/paging/sizes',\r\n                    name: 'configurableWizard.pagingDeleted_sizes'\r\n                }\r\n            }),\r\n            attributes: [],\r\n            attributesName: [$.mage.__('Images'), $.mage.__('SKU'), $.mage.__('Quantity'), $.mage.__('Price')],\r\n            sections: [],\r\n            gridTemplate: 'Magento_ConfigurableProduct/variations/steps/summary-grid',\r\n            quantityFieldName: 'quantity'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initObservable: function () {\r\n            var pagingObservables = {\r\n                currentNew: ko.getObservable(this.pagingNew, 'current'),\r\n                currentExisting: ko.getObservable(this.pagingExisting, 'current'),\r\n                currentDeleted: ko.getObservable(this.pagingDeleted, 'current'),\r\n                pageSizeNew: ko.getObservable(this.pagingNew, 'pageSize'),\r\n                pageSizeExisting: ko.getObservable(this.pagingExisting, 'pageSize'),\r\n                pageSizeDeleted: ko.getObservable(this.pagingDeleted, 'pageSize')\r\n            };\r\n\r\n            this._super().observe('gridExisting gridNew gridDeleted attributes sections');\r\n            this.gridExisting.columns = ko.observableArray();\r\n            this.gridNew.columns = ko.observableArray();\r\n            this.gridDeleted.columns = ko.observableArray();\r\n\r\n            _.each(pagingObservables, function (observable) {\r\n                observable.subscribe(function () {\r\n                    this.generateGrid();\r\n                }, this);\r\n            }, this);\r\n\r\n            return this;\r\n        },\r\n        nextLabelText: $.mage.__('Generate Products'),\r\n        variations: [],\r\n\r\n        /**\r\n         * @param {*} variations\r\n         * @param {Function} getSectionValue\r\n         */\r\n        calculate: function (variations, getSectionValue) {\r\n            var productSku = this.variationsComponent().getProductValue('sku'),\r\n                productPrice = this.variationsComponent().getProductPrice(),\r\n                productWeight = this.variationsComponent().getProductValue('weight'),\r\n                productName = this.variationsComponent().getProductValue('name'),\r\n                variationsKeys = [],\r\n                gridExisting = [],\r\n                gridNew = [],\r\n                gridDeleted = [],\r\n                matrixGridData = this.matrixGridComponent() ?\r\n                    _.indexBy(this.matrixGridComponent().getUnionInsertData(), 'variationKey') : {};\r\n\r\n            this.variations = [];\r\n            _.each(variations, function (options) {\r\n                var product, images, sku, name, quantity, price, variation,\r\n                    variationsKey = this.variationsComponent().getVariationKey(options),\r\n                    productDataFromGrid = matrixGridData[variationsKey] || {},\r\n                    productDataFromWizard = {},\r\n                    productId = this.variationsComponent().getProductIdByOptions(options);\r\n\r\n                if (productId) {\r\n                    product = _.findWhere(this.variationsComponent().variations, {\r\n                        productId: productId\r\n                    });\r\n                }\r\n                images = getSectionValue('images', options);\r\n                sku = productSku + _.reduce(options, function (memo, option) {\r\n                    return memo + '-' + option.label;\r\n                }, '');\r\n                name = productName + _.reduce(options, function (memo, option) {\r\n                    return memo + '-' + option.label;\r\n                }, '');\r\n                quantity = getSectionValue(this.quantityFieldName, options);\r\n\r\n                if (quantity) {\r\n                    productDataFromWizard[this.quantityFieldName] = quantity;\r\n                }\r\n                price = getSectionValue('price', options);\r\n\r\n                if (price) {\r\n                    productDataFromWizard.price = price;\r\n                }\r\n\r\n                if (productId && !images.file) {\r\n                    images = product.images;\r\n                }\r\n                productDataFromGrid = _.pick(\r\n                    productDataFromGrid,\r\n                    'sku',\r\n                    'name',\r\n                    'weight',\r\n                    'status',\r\n                    'price',\r\n                    'qty'\r\n                );\r\n\r\n                if (productDataFromGrid.hasOwnProperty('qty')) {\r\n                    productDataFromGrid[this.quantityFieldName] = productDataFromGrid.qty;\r\n                }\r\n                delete productDataFromGrid.qty;\r\n                product = _.pick(\r\n                    product || {},\r\n                    'sku',\r\n                    'name',\r\n                    'weight',\r\n                    'status',\r\n                    'price',\r\n                    this.quantityFieldName\r\n                );\r\n                variation = {\r\n                    options: options,\r\n                    images: images,\r\n                    sku: sku,\r\n                    name: name,\r\n                    price: productPrice,\r\n                    productId: productId,\r\n                    weight: productWeight,\r\n                    editable: true\r\n                };\r\n                variation[this.quantityFieldName] = quantity;\r\n                variation = _.extend(variation, product, productDataFromGrid, productDataFromWizard);\r\n\r\n                if (productId) {\r\n                    gridExisting.push(this.prepareRowForGrid(variation));\r\n                } else {\r\n                    gridNew.push(this.prepareRowForGrid(variation));\r\n                }\r\n                this.variations.push(variation);\r\n                variationsKeys.push(variationsKey);\r\n            }, this);\r\n\r\n            _.each(_.omit(this.variationsComponent().productAttributesMap, variationsKeys), function (productId) {\r\n                gridDeleted.push(this.prepareRowForGrid(\r\n                    _.findWhere(this.variationsComponent().variations, {\r\n                        productId: productId\r\n                    })\r\n                ));\r\n            }.bind(this));\r\n\r\n            this.variationsExisting = gridExisting;\r\n            this.variationsNew = gridNew;\r\n            this.variationsDeleted = gridDeleted;\r\n        },\r\n\r\n        /**\r\n         * Generate grid.\r\n         */\r\n        generateGrid: function () {\r\n            var pageExisting = this.pagingExisting.pageSize * this.pagingExisting.current,\r\n                pageNew = this.pagingNew.pageSize * this.pagingNew.current,\r\n                pageDeleted = this.pagingDeleted.pageSize * this.pagingDeleted.current;\r\n\r\n            this.pagingExisting.totalRecords = this.variationsExisting.length;\r\n            this.gridExisting(this.variationsExisting.slice(pageExisting - this.pagingExisting.pageSize, pageExisting));\r\n\r\n            this.pagingNew.totalRecords = this.variationsNew.length;\r\n            this.gridNew(this.variationsNew.slice(pageNew - this.pagingNew.pageSize, pageNew));\r\n\r\n            this.pagingDeleted.totalRecords = this.variationsDeleted.length;\r\n            this.gridDeleted(this.variationsDeleted.slice(pageDeleted - this.pagingDeleted.pageSize, pageDeleted));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} variation\r\n         * @return {Array}\r\n         */\r\n        prepareRowForGrid: function (variation) {\r\n            var row = [];\r\n\r\n            row.push(_.extend({\r\n                images: []\r\n            }, variation.images));\r\n            row.push(variation.sku);\r\n            row.push(variation[this.quantityFieldName]);\r\n            _.each(variation.options, function (option) {\r\n                row.push(option.label);\r\n            });\r\n            row.push(this.variationsComponent().getCurrencySymbol() +  ' ' + variation.price);\r\n\r\n            return row;\r\n        },\r\n\r\n        /**\r\n         * @return {String|*}\r\n         */\r\n        getGridTemplate: function () {\r\n            return this.gridTemplate;\r\n        },\r\n\r\n        /**\r\n         * @return {*|String}\r\n         */\r\n        getGridId: function () {\r\n            return _.uniqueId('grid_');\r\n        },\r\n\r\n        /**\r\n         * @param {*} attributes\r\n         * @return {Array}\r\n         */\r\n        getColumnsName: function (attributes) {\r\n            var columns = this.attributesName.slice(0);\r\n\r\n            attributes.each(function (attribute, index) {\r\n                columns.splice(3 + index, 0, attribute.label);\r\n            }, this);\r\n\r\n            return columns;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} wizard\r\n         */\r\n        render: function (wizard) {\r\n            this.wizard = wizard;\r\n            this.sections(wizard.data.sections());\r\n            this.attributes(wizard.data.attributes());\r\n            this.gridNew([]);\r\n            this.gridExisting([]);\r\n            this.gridDeleted([]);\r\n            this.gridExisting.columns(this.getColumnsName(this.wizard.data.attributes));\r\n            this.gridNew.columns(this.getColumnsName(this.wizard.data.attributes));\r\n            this.gridDeleted.columns(this.getColumnsName(this.variationsComponent().productAttributes));\r\n            this.calculate(wizard.data.variations, wizard.data.sectionHelper);\r\n            this.generateGrid();\r\n        },\r\n\r\n        /**\r\n         * Force.\r\n         */\r\n        force: function () {\r\n            this.variationsComponent().render(this.variations, this.attributes());\r\n            this.modalComponent().closeModal();\r\n        },\r\n\r\n        /**\r\n         * Back.\r\n         */\r\n        back: function () {\r\n        }\r\n    });\r\n});\r\n","Magento_CurrencySymbol/js/symbols-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        $(element)\r\n            .mage('form')\r\n            .mage('validation');\r\n\r\n        /**\r\n         * Toggle the field to use the default value\r\n         *\r\n         * @param {String} code\r\n         * @param {String} value\r\n         */\r\n        function toggleUseDefault(code, value) {\r\n            var checkbox = $('#custom_currency_symbol_inherit' + code),\r\n                input = $('#custom_currency_symbol' + code);\r\n\r\n            if (checkbox.is(':checked')) {\r\n                input.val(value);\r\n                input.prop('disabled', true);\r\n            } else {\r\n                input.prop('disabled', false);\r\n            }\r\n        }\r\n\r\n        window.toggleUseDefault = toggleUseDefault;\r\n    };\r\n});\r\n","Magento_Customer/edit/post-wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {String} url\r\n     * @returns {Object}\r\n     */\r\n    function getForm(url) {\r\n        return $('<form>', {\r\n            'action': url,\r\n            'method': 'POST'\r\n        }).append($('<input>', {\r\n            'name': 'form_key',\r\n            'value': window.FORM_KEY,\r\n            'type': 'hidden'\r\n        }));\r\n    }\r\n\r\n    $('#customer-edit-delete-button').on('click', function () {\r\n        var msg = $.mage.__('Are you sure you want to do this?'),\r\n            url = $('#customer-edit-delete-button').data('url');\r\n\r\n        confirm({\r\n            'content': msg,\r\n            'actions': {\r\n\r\n                /**\r\n                 * 'Confirm' action handler.\r\n                 */\r\n                confirm: function () {\r\n                    getForm(url).appendTo('body').submit();\r\n                }\r\n            }\r\n        });\r\n\r\n        return false;\r\n    });\r\n});\r\n","Magento_Customer/js/address/default-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/button',\r\n    'underscore'\r\n], function (Button, _) {\r\n    'use strict';\r\n\r\n    return Button.extend({\r\n        defaults: {\r\n            entityId: null,\r\n            parentId: null,\r\n            listens: {\r\n                entity: 'changeVisibility'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Apply action on target component,\r\n         * but previously create this component from template if it is not existed\r\n         *\r\n         * @param {Object} action - action configuration\r\n         */\r\n        applyAction: function (action) {\r\n            if (action.params && action.params[0]) {\r\n                action.params[0]['entity_id'] = this.entityId;\r\n                action.params[0]['parent_id'] = this.parentId;\r\n            } else {\r\n                action.params = [{\r\n                    'entity_id': this.entityId,\r\n                    'parent_id': this.parentId\r\n                }];\r\n            }\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Change visibility of the default address shipping/billing blocks\r\n         *\r\n         * @param {Object} entity - customer address\r\n         */\r\n        changeVisibility: function (entity) {\r\n            this.visible(!_.isEmpty(entity));\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/bootstrap/customer-post-action.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\nrequire([\r\n    'Magento_Customer/edit/post-wrapper'\r\n]);\r\n","Magento_Customer/js/form/components/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/form/form',\r\n    'underscore',\r\n    'mage/translate'\r\n], function ($, uiAlert, uiConfirm, Form, _, $t) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            deleteConfirmationMessage: '',\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                dataType: 'json'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Delete customer address by provided url.\r\n         * Will call confirmation message to be sure that user is really wants to delete this address\r\n         *\r\n         * @param {String} url - ajax url\r\n         */\r\n        deleteAddress: function (url) {\r\n            var that = this;\r\n\r\n            uiConfirm({\r\n                content: this.deleteConfirmationMessage,\r\n                actions: {\r\n                    /** @inheritdoc */\r\n                    confirm: function () {\r\n                        that._delete(url);\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous DELETE request to server.\r\n         * @param {String} url - ajax url\r\n         * @returns {Deferred}\r\n         */\r\n        _delete: function (url) {\r\n            var settings = _.extend({}, this.ajaxSettings, {\r\n                    url: url,\r\n                    data: {\r\n                        'form_key': window.FORM_KEY\r\n                    }\r\n                }),\r\n                that = this;\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (response) {\r\n                    if (response.error) {\r\n                        uiAlert({\r\n                            content: response.message\r\n                        });\r\n                    } else {\r\n                        that.trigger('deleteAddressAction', that.source.get('data.entity_id'));\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    uiAlert({\r\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/components/insert-form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-form'\r\n], function (Insert) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n        defaults: {\r\n            listens: {\r\n                responseData: 'onResponse'\r\n            },\r\n            modules: {\r\n                addressListing: '${ $.addressListingProvider }',\r\n                addressModal: '${ $.addressModalProvider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Close modal, reload customer address listing and save customer address\r\n         *\r\n         * @param {Object} responseData\r\n         */\r\n        onResponse: function (responseData) {\r\n            var data;\r\n\r\n            if (!responseData.error) {\r\n                this.addressModal().closeModal();\r\n                this.addressListing().reload({\r\n                    refresh: true\r\n                });\r\n                data = this.externalSource().get('data');\r\n                this.saveAddress(responseData, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save customer address to customer form data source\r\n         *\r\n         * @param {Object} responseData\r\n         * @param {Object} data - customer address\r\n         */\r\n        saveAddress: function (responseData, data) {\r\n            data['entity_id'] = responseData.data['entity_id'];\r\n\r\n            if (parseFloat(data['default_billing'])) {\r\n                this.source.set('data.default_billing_address', data);\r\n            } else if (\r\n                parseFloat(this.source.get('data.default_billing_address')['entity_id']) === data['entity_id']\r\n            ) {\r\n                this.source.set('data.default_billing_address', []);\r\n            }\r\n\r\n            if (parseFloat(data['default_shipping'])) {\r\n                this.source.set('data.default_shipping_address', data);\r\n            } else if (\r\n                parseFloat(this.source.get('data.default_shipping_address')['entity_id']) === data['entity_id']\r\n            ) {\r\n                this.source.set('data.default_shipping_address', []);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Event method that closes \"Edit customer address\" modal and refreshes grid after customer address\r\n         * was removed through \"Delete\" button on the \"Edit customer address\" modal\r\n         *\r\n         * @param {String} id - customer address ID to delete\r\n         */\r\n        onAddressDelete: function (id) {\r\n            this.addressModal().closeModal();\r\n            this.addressListing().reload({\r\n                refresh: true\r\n            });\r\n            this.addressListing()._delete([parseFloat(id)]);\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/components/insert-listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/insert-listing',\r\n    'underscore'\r\n], function (Insert, _) {\r\n    'use strict';\r\n\r\n    return Insert.extend({\r\n\r\n        /**\r\n         * On action call\r\n         *\r\n         * @param {Object} data - customer address and actions\r\n         */\r\n        onAction: function (data) {\r\n            this[data.action + 'Action'].call(this, data.data);\r\n        },\r\n\r\n        /**\r\n         * On mass action call\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        onMassAction: function (data) {\r\n            this[data.action + 'Massaction'].call(this, data.data);\r\n        },\r\n\r\n        /**\r\n         * Set default billing address\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        setDefaultBillingAction: function (data) {\r\n            this.source.set('data.default_billing_address', data);\r\n        },\r\n\r\n        /**\r\n         * Set default shipping address\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        setDefaultShippingAction: function (data) {\r\n            this.source.set('data.default_shipping_address', data);\r\n        },\r\n\r\n        /**\r\n         * Delete customer address\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        deleteAction: function (data) {\r\n            this._delete([parseFloat(data[data['id_field_name']])]);\r\n        },\r\n\r\n        /**\r\n         * Mass action delete\r\n         *\r\n         * @param {Object} data - customer address\r\n         */\r\n        deleteMassaction: function (data) {\r\n            var ids = data.selected || this.selections().selected();\r\n\r\n            ids = _.map(ids, function (val) {\r\n                return parseFloat(val);\r\n            });\r\n\r\n            this._delete(ids);\r\n        },\r\n\r\n        /**\r\n         * Delete customer address and selections by provided ids.\r\n         *\r\n         * @param {Array} ids\r\n         */\r\n        _delete: function (ids) {\r\n            var defaultShippingId = parseFloat(this.source.get('data.default_shipping_address.entity_id')),\r\n                defaultBillingId = parseFloat(this.source.get('data.default_billing_address.entity_id'));\r\n\r\n            if (ids.indexOf(defaultShippingId) !== -1) {\r\n                this.source.set('data.default_shipping_address', []);\r\n            }\r\n\r\n            if (ids.indexOf(defaultBillingId) !== -1) {\r\n                this.source.set('data.default_billing_address', []);\r\n            }\r\n\r\n            _.each(ids, function (id) {\r\n                this.selections().deselect(id.toString(), false);\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/element/country.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/country'\r\n], function (Country) {\r\n    'use strict';\r\n\r\n    return Country.extend({\r\n        defaults: {\r\n            countryScope: 'data.country'\r\n        },\r\n\r\n        /**\r\n         * Set country to customer address form\r\n         *\r\n         * @param {String} value - country\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this._super();\r\n\r\n            if (value) {\r\n                this.source.set(this.countryScope, this.indexedOptions[value].label);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/element/region.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/region'\r\n], function (Region) {\r\n    'use strict';\r\n\r\n    return Region.extend({\r\n        defaults: {\r\n            regionScope: 'data.region'\r\n        },\r\n\r\n        /**\r\n         * Set region to customer address form\r\n         *\r\n         * @param {String} value - region\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this._super();\r\n\r\n            if (parseFloat(value)) {\r\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/form/element/website.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/website',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Website, registry, _) {\r\n    'use strict';\r\n\r\n    return Website.extend({\r\n        /**\r\n         * On value change handler.\r\n         *\r\n         * @param {String} value\r\n         */\r\n        onUpdate: function (value) {\r\n            var groupIdFieldKey = 'group_id',\r\n                sendEmailStoreIdFieldKey = 'sendemail_store_id',\r\n                groupId = registry.get('index = ' + groupIdFieldKey),\r\n                sendEmailStoreId = registry.get('index = ' + sendEmailStoreIdFieldKey),\r\n                customerAttributes = registry.filter('parentScope = data.customer'),\r\n                option = this.getOption(value);\r\n\r\n            customerAttributes.forEach(element => {\r\n                var requiredWebsites = element.validation['required-entry-website'];\r\n\r\n                if (!_.isArray(requiredWebsites)) {\r\n                    return;\r\n                }\r\n                if (requiredWebsites.includes(parseInt(value, 10))) {\r\n                    element.validation['required-entry'] = true;\r\n                    element.required(true);\r\n                } else {\r\n                    delete element.validation['required-entry'];\r\n                    element.required(false);\r\n                }\r\n            });\r\n\r\n            if (groupId) {\r\n                groupId.value(option[groupIdFieldKey]);\r\n            }\r\n\r\n            if (sendEmailStoreId && option['default_store_view_id']) {\r\n                sendEmailStoreId.value(option['default_store_view_id']);\r\n            }\r\n            return this._super();\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/massactions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/massactions',\r\n    'Magento_Ui/js/modal/alert',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Massactions, uiAlert, _, $, $t) {\r\n    'use strict';\r\n\r\n    return Massactions.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                dataType: 'json'\r\n            },\r\n            listens: {\r\n                massaction: 'onAction'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload customer addresses listing\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        onAction: function (data) {\r\n            if (data.action === 'delete') {\r\n                this.source.reload({\r\n                    refresh: true\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Send selections data\r\n         * via POST request.\r\n         *\r\n         * @param {Object} action - Action data.\r\n         * @param {Object} data - Selections data.\r\n         */\r\n        defaultCallback: function (action, data) {\r\n            var itemsType, selections;\r\n\r\n            if (action.isAjax) {\r\n                itemsType = data.excludeMode ? 'excluded' : 'selected';\r\n                selections = {};\r\n\r\n                selections[itemsType] = data[itemsType];\r\n\r\n                if (!selections[itemsType].length) {\r\n                    selections[itemsType] = false;\r\n                }\r\n\r\n                _.extend(selections, data.params || {});\r\n\r\n                this.request(action.url, selections).done(function (response) {\r\n                    if (!response.error) {\r\n                        this.trigger('massaction', {\r\n                            action: action.type,\r\n                            data: selections\r\n                        });\r\n                    }\r\n                }.bind(this));\r\n            } else {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send customer address listing mass action ajax request\r\n         *\r\n         * @param {String} href\r\n         * @param {Object} data\r\n         */\r\n        request: function (href, data) {\r\n            var settings = _.extend({}, this.ajaxSettings, {\r\n                url: href,\r\n                data: data\r\n            });\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (response) {\r\n                    if (response.error) {\r\n                        uiAlert({\r\n                            content: response.message\r\n                        });\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    uiAlert({\r\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/columns/actions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/actions',\r\n    'Magento_Ui/js/modal/alert',\r\n    'underscore',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Actions, uiAlert, _, $, $t) {\r\n    'use strict';\r\n\r\n    return Actions.extend({\r\n        defaults: {\r\n            ajaxSettings: {\r\n                method: 'POST',\r\n                dataType: 'json'\r\n            },\r\n            listens: {\r\n                action: 'onAction'\r\n            },\r\n            ignoreTmpls: {\r\n                fieldAction: true,\r\n                options: true,\r\n                action: true\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Reload customer address listing data source after customer address delete action\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        onAction: function (data) {\r\n            if (data.action === 'delete') {\r\n                this.source().reload({\r\n                    refresh: true\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Default action callback. Redirects to\r\n         * the specified in action's data url.\r\n         *\r\n         * @param {String} actionIndex - Action's identifier.\r\n         * @param {(Number|String)} recordId - Id of the record associated\r\n         *      with a specified action.\r\n         * @param {Object} action - Action's data.\r\n         */\r\n        defaultCallback: function (actionIndex, recordId, action) {\r\n            if (action.isAjax) {\r\n                this.request(action.href).done(function (response) {\r\n                    var data;\r\n\r\n                    if (!response.error) {\r\n                        data = _.findWhere(this.rows, {\r\n                            _rowIndex: action.rowIndex\r\n                        });\r\n\r\n                        this.trigger('action', {\r\n                            action: actionIndex,\r\n                            data: data\r\n                        });\r\n                    }\r\n                }.bind(this));\r\n\r\n            } else {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Send customer address listing ajax request\r\n         *\r\n         * @param {String} href\r\n         */\r\n        request: function (href) {\r\n            var settings = _.extend({}, this.ajaxSettings, {\r\n                url: href,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                }\r\n            });\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            return $.ajax(settings)\r\n                .done(function (response) {\r\n                    if (response.error) {\r\n                        uiAlert({\r\n                            content: response.message\r\n                        });\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    uiAlert({\r\n                        content: $t('Sorry, there has been an error processing your request. Please try again later.')\r\n                    });\r\n                })\r\n                .always(function () {\r\n                    $('body').trigger('processStop');\r\n                });\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/filters/chips.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/filters/chips'\r\n], function (Chips) {\r\n    'use strict';\r\n\r\n    return Chips.extend({\r\n\r\n        /**\r\n         * Clear previous filters while initializing element to prevent filters sharing between customers\r\n         *\r\n         * @param {Object} elem\r\n         */\r\n        initElement: function (elem) {\r\n            this.clear();\r\n            this._super(elem);\r\n        }\r\n    });\r\n});\r\n","Magento_Customer/js/grid/filters/filters.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/filters/filters'\r\n], function (Filters) {\r\n    'use strict';\r\n\r\n    return Filters.extend({\r\n        defaults: {\r\n            chipsConfig: {\r\n                name: '${ $.name }_chips',\r\n                provider: '${ $.chipsConfig.name }',\r\n                component: 'Magento_Customer/js/grid/filters/chips'\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/downloadable-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/product/weight-handler',\r\n    'Magento_Catalog/catalog/type-events'\r\n], function ($, weight, productType) {\r\n    'use strict';\r\n\r\n    return {\r\n        $checkbox: $('[data-action=change-type-product-downloadable]'),\r\n        $items: $('#product_info_tabs_downloadable_items'),\r\n        $tab: null,\r\n        isDownloadable: false,\r\n\r\n        /**\r\n         * Show\r\n         */\r\n        show: function () {\r\n            this.$checkbox.prop('checked', true);\r\n            this.$items.show();\r\n        },\r\n\r\n        /**\r\n         * Hide\r\n         */\r\n        hide: function () {\r\n            this.$checkbox.prop('checked', false);\r\n            this.$items.hide();\r\n        },\r\n\r\n        /**\r\n         * Constructor component\r\n         * @param {Object} data - this backend data\r\n         */\r\n        'Magento_Downloadable/downloadable-type-handler': function (data) {\r\n            this.$tab = $('[data-tab=' + data.tabId + ']');\r\n            this.isDownloadable = data.isDownloadable;\r\n            this.bindAll();\r\n            this._initType();\r\n        },\r\n\r\n        /**\r\n         * Bind all\r\n         */\r\n        bindAll: function () {\r\n            this.$checkbox.on('change', function (event) {\r\n                $(document).trigger('setTypeProduct', $(event.target).prop('checked') ?\r\n                    'downloadable' :\r\n                    productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\r\n                );\r\n            });\r\n\r\n            $(document).on('changeTypeProduct', this._initType.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Init type\r\n         * @private\r\n         */\r\n        _initType: function () {\r\n            if (productType.type.current === 'downloadable') {\r\n                weight.change(false);\r\n                weight.$weightSwitcher().one('change', function () {\r\n                    $(document).trigger(\r\n                        'setTypeProduct',\r\n                        productType.type.init === 'downloadable' ? 'virtual' : productType.type.init\r\n                    );\r\n                });\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_Downloadable/js/components/file-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/file-uploader'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            fileInputName: ''\r\n        },\r\n\r\n        /**\r\n         * Adds provided file to the files list.\r\n         *\r\n         * @param {Object} file\r\n         * @returns {FileUploder} Chainable.\r\n         */\r\n        addFile: function (file) {\r\n            var processedFile = this.processFile(file),\r\n                tmpFile = [],\r\n                resultFile = {\r\n                'file': processedFile.file,\r\n                'name': processedFile.name,\r\n                'size': processedFile.size,\r\n                'status': processedFile.status ? processedFile.status : 'new'\r\n            };\r\n\r\n            tmpFile[0] = resultFile;\r\n\r\n            this.isMultipleFiles ?\r\n                this.value.push(tmpFile) :\r\n                this.value(tmpFile);\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/is-downloadable-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            listens: {\r\n                disabled: 'changeVisibility'\r\n            },\r\n            modules: {\r\n                samplesFieldset: '${ $.samplesFieldset }',\r\n                linksFieldset: '${ $.linksFieldset}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change visibility for samplesFieldset & linksFieldset based on current statuses of checkbox.\r\n         */\r\n        changeVisibility: function () {\r\n            if (this.samplesFieldset() && this.linksFieldset()) {\r\n                if (this.checked() && !this.disabled()) {\r\n                    this.samplesFieldset().visible(true);\r\n                    this.linksFieldset().visible(true);\r\n                } else {\r\n                    this.samplesFieldset().visible(false);\r\n                    this.linksFieldset().visible(false);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle checked state changes for checkbox / radio button.\r\n         *\r\n         * @param {Boolean} newChecked\r\n         */\r\n        onCheckedChanged: function (newChecked) {\r\n            this.changeVisibility();\r\n            this._super(newChecked);\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/price-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            linksPurchasedSeparately: '0',\r\n            useDefaultPrice: false,\r\n            listens: {\r\n                linksPurchasedSeparately: 'changeDisabledStatus',\r\n                useDefaultPrice: 'changeDisabledStatus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Invokes initialize method of parent class,\r\n         * contains initialization logic\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.changeDisabledStatus();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Disable/enable price field\r\n         */\r\n        changeDisabledStatus: function () {\r\n            if (this.linksPurchasedSeparately === '1') {\r\n                if (this.useDefaultPrice) {\r\n                    this.disabled(true);\r\n                } else {\r\n                    this.disabled(false);\r\n                }\r\n            } else {\r\n                this.disabled(true);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/upload-type-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/select',\r\n    'uiRegistry'\r\n], function (Select, registry) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            listens: {\r\n                value: 'changeTypeUpload'\r\n            },\r\n            typeUrl: 'file',\r\n            typeFile: 'link_url',\r\n            filterPlaceholder: 'ns = ${ $.ns }, parentScope = ${ $.parentScope }'\r\n        },\r\n\r\n        /**\r\n         * Initialize component.\r\n         * @returns {Element}\r\n         */\r\n        initialize: function () {\r\n            return this\r\n                ._super()\r\n                .changeTypeUpload(this.initialValue);\r\n        },\r\n\r\n        /**\r\n         * Callback that fires when 'value' property is updated.\r\n         *\r\n         * @param {String} currentValue\r\n         * @returns {*}\r\n         */\r\n        onUpdate: function (currentValue) {\r\n            this.changeTypeUpload(currentValue);\r\n\r\n            return this._super();\r\n        },\r\n\r\n        /**\r\n         * Change visibility for typeUrl/typeFile based on current value.\r\n         *\r\n         * @param {String} currentValue\r\n         */\r\n        changeTypeUpload: function (currentValue) {\r\n            var componentFile = this.filterPlaceholder + ', index=' + this.typeFile,\r\n                componentUrl = this.filterPlaceholder + ', index=' + this.typeUrl;\r\n\r\n            switch (currentValue) {\r\n\r\n                case 'file':\r\n                    this.changeVisible(componentFile, true);\r\n                    this.changeVisible(componentUrl, false);\r\n                    break;\r\n\r\n                case 'url':\r\n                    this.changeVisible(componentFile, false);\r\n                    this.changeVisible(componentUrl, true);\r\n                    break;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change visible\r\n         *\r\n         * @param {String} filter\r\n         * @param {Boolean} visible\r\n         */\r\n        changeVisible: function (filter, visible) {\r\n            registry.async(filter)(\r\n                function (currentComponent) {\r\n                    currentComponent.visible(visible);\r\n                }\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_Downloadable/js/components/use-price-default-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            linksPurchasedSeparately: '0',\r\n            listens: {\r\n                linksPurchasedSeparately: 'changeVisibleStatus'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Change visibility of checkbox\r\n         */\r\n        changeVisibleStatus: function () {\r\n            if (this.linksPurchasedSeparately === '1') {\r\n                this.visible(true);\r\n            } else {\r\n                this.visible(false);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_Eav/js/input-types.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (config) {\r\n        $('select#frontend_input').each(function () {\r\n            var select = $(this),\r\n                currentValue = select.find('option:selected').val(),\r\n                compatibleTypes = config.inputTypes,\r\n                enabledTypes = [],\r\n                iterator,\r\n                warning = $('<label>')\r\n                    .hide()\r\n                    .text($.mage.__('These changes affect all related products.'))\r\n                    .addClass('mage-error')\r\n                    .attr({\r\n                        generated: true, for: select.attr('id')\r\n                    }),\r\n                hint = $('<p>')\r\n                    .hide()\r\n                    .addClass('note')\r\n                    .attr({\r\n                        generated: true\r\n                    }),\r\n                hints = config.hints,\r\n\r\n            /**\r\n             * Toggle hint about changes types\r\n             */\r\n            toggleWarning = function () {\r\n                if (select.find('option:selected').val() === currentValue) {\r\n                    warning.hide();\r\n                } else {\r\n                    warning.show();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Toggle hint\r\n             */\r\n            toggleHint = function () {\r\n                if (typeof hints[select.find('option:selected').val()] !== 'undefined') {\r\n                    select.after(hint.show().text(hints[select.find('option:selected').val()]));\r\n                } else {\r\n                    hint.hide();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Remove unsupported options\r\n             */\r\n            removeOption = function () {\r\n                if (!~enabledTypes.indexOf($(this).val())) {\r\n                    $(this).remove();\r\n                }\r\n            };\r\n\r\n            // find enabled types for switching dor current input type\r\n            for (iterator = 0; iterator < compatibleTypes.length; iterator++) {\r\n                if (compatibleTypes[iterator].indexOf(currentValue) >= 0) {\r\n                    enabledTypes = compatibleTypes[iterator];\r\n                }\r\n            }\r\n\r\n            // Check current type (allow only compatible types)\r\n            if (~enabledTypes.indexOf(currentValue)) {\r\n                // Enable select and keep only available options (all other will be removed)\r\n                select.prop('disabled', false).find('option').each(removeOption);\r\n                // Add warning on page and event for show/hide it\r\n                select.after(warning).on('change', toggleWarning);\r\n            }\r\n            //bind hint toggling on change event\r\n            select.on('change', toggleHint);\r\n            //show hint for currently selected value\r\n            toggleHint();\r\n        });\r\n    };\r\n});\r\n","Magento_Email/js/variables.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Variables, updateElementAtCursor */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate',\r\n    'Magento_Ui/js/modal/modal',\r\n    'jquery/ui',\r\n    'prototype'\r\n], function (jQuery, $t) {\r\n    'use strict';\r\n\r\n    window.Variables = {\r\n        textareaElementId: null,\r\n        variablesContent: null,\r\n        dialogWindow: null,\r\n        dialogWindowId: 'variables-chooser',\r\n        overlayShowEffectOptions: null,\r\n        overlayHideEffectOptions: null,\r\n        insertFunction: 'Variables.insertVariable',\r\n        variablesValue: [],\r\n\r\n        /**\r\n         * @param {*} textareaElementId\r\n         * @param {Function} insertFunction\r\n         */\r\n        init: function (textareaElementId, insertFunction) {\r\n            if ($(textareaElementId)) {\r\n                this.textareaElementId = textareaElementId;\r\n            }\r\n\r\n            if (insertFunction) {\r\n                this.insertFunction = insertFunction;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * reset data.\r\n         */\r\n        resetData: function () {\r\n            this.variablesContent = null;\r\n            this.dialogWindow = null;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} variables\r\n         */\r\n        openVariableChooser: function (variables) {\r\n            if (this.variablesContent == null && variables) {\r\n                this.variablesContent = '<ul class=\"insert-variable\">';\r\n                variables.each(function (variableGroup) {\r\n                    if (variableGroup.label && variableGroup.value) {\r\n                        this.variablesContent += '<li><b>' + variableGroup.label.escapeHTML() + '</b></li>';\r\n                        variableGroup.value.each(function (variable) {\r\n                            if (variable.value && variable.label) {\r\n                                this.variablesValue.push(variable.value);\r\n                                this.variablesContent += '<li>' +\r\n                                    this.prepareVariableRow(this.variablesValue.length, variable.label) + '</li>';\r\n                            }\r\n                        }.bind(this));\r\n                    }\r\n                }.bind(this));\r\n                this.variablesContent += '</ul>';\r\n            }\r\n\r\n            if (this.variablesContent) {\r\n                this.openDialogWindow(this.variablesContent);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} variablesContent\r\n         */\r\n        openDialogWindow: function (variablesContent) {\r\n            var windowId = this.dialogWindowId;\r\n\r\n            jQuery('<div id=\"' + windowId + '\">' + variablesContent + '</div>').modal({\r\n                title: $t('Insert Variable...'),\r\n                type: 'slide',\r\n                buttons: [],\r\n\r\n                /** @inheritdoc */\r\n                closed: function (e, modal) {\r\n                    modal.modal.remove();\r\n                }\r\n            });\r\n\r\n            jQuery('#' + windowId).modal('openModal');\r\n        },\r\n\r\n        /**\r\n         * Close dialog window.\r\n         */\r\n        closeDialogWindow: function () {\r\n            jQuery('#' + this.dialogWindowId).modal('closeModal');\r\n        },\r\n\r\n        /**\r\n         * @param {Number} index\r\n         * @param {*} varLabel\r\n         * @return {String}\r\n         */\r\n        prepareVariableRow: function (index, varLabel) {\r\n            return '<a href=\"#\" onclick=\"' +\r\n                this.insertFunction +\r\n                '(' +\r\n                index +\r\n                ');return false;\">' +\r\n                varLabel.escapeHTML() +\r\n                '</a>';\r\n        },\r\n\r\n        /**\r\n         * @param {*} variable\r\n         */\r\n        insertVariable: function (variable) {\r\n            var windowId = this.dialogWindowId,\r\n                textareaElm, scrollPos;\r\n\r\n            jQuery('#' + windowId).modal('closeModal');\r\n            textareaElm = $(this.textareaElementId);\r\n\r\n            if (textareaElm) {\r\n                scrollPos = textareaElm.scrollTop;\r\n\r\n                if (!isNaN(variable)) {\r\n                    updateElementAtCursor(textareaElm, Variables.variablesValue[variable - 1]);\r\n                } else {\r\n                    updateElementAtCursor(textareaElm, variable);\r\n                }\r\n                textareaElm.focus();\r\n                textareaElm.scrollTop = scrollPos;\r\n                jQuery(textareaElm).trigger('change');\r\n                textareaElm = null;\r\n            }\r\n        }\r\n    };\r\n\r\n    window.MagentovariablePlugin = {\r\n        editor: null,\r\n        variables: null,\r\n        textareaId: null,\r\n\r\n        /**\r\n         * @param {*} editor\r\n         */\r\n        setEditor: function (editor) {\r\n            this.editor = editor;\r\n        },\r\n\r\n        /**\r\n         * @param {String} url\r\n         * @param {*} textareaId\r\n         */\r\n        loadChooser: function (url, textareaId) {\r\n            this.textareaId = textareaId;\r\n\r\n            if (this.variables == null) {\r\n                new Ajax.Request(url, {\r\n                    parameters: {},\r\n                    onComplete: function (transport) {\r\n                        if (transport.responseText.isJSON()) {\r\n                            Variables.init(null, 'MagentovariablePlugin.insertVariable');\r\n                            this.variables = transport.responseText.evalJSON();\r\n                            this.openChooser(this.variables);\r\n                        }\r\n                    }.bind(this)\r\n                });\r\n            } else {\r\n                this.openChooser(this.variables);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} variables\r\n         */\r\n        openChooser: function (variables) {\r\n            Variables.openVariableChooser(variables);\r\n        },\r\n\r\n        /**\r\n         * @param {*} value\r\n         */\r\n        insertVariable: function (value) {\r\n            if (this.textareaId) {\r\n                Variables.init(this.textareaId);\r\n                Variables.insertVariable(value);\r\n            } else {\r\n                Variables.closeDialogWindow();\r\n                this.editor.execCommand('mceInsertContent', false, value);\r\n            }\r\n        }\r\n    };\r\n});\r\n","Magento_GroupedProduct/js/grouped-product-grid.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid'\r\n], function (_, registry, dynamicRowsGrid) {\r\n    'use strict';\r\n\r\n    return dynamicRowsGrid.extend({\r\n\r\n        /**\r\n         * Set max element position\r\n         *\r\n         * @param {Number} position - element position\r\n         * @param {Object} elem - instance\r\n         */\r\n        setMaxPosition: function (position, elem) {\r\n\r\n            if (position || position === 0) {\r\n                this.checkMaxPosition(position);\r\n                this.sort(position, elem);\r\n\r\n                if (~~position === this.maxPosition && ~~position > this.getDefaultPageBoundary() + 1) {\r\n                    this.shiftNextPagesPositions(position);\r\n                }\r\n            } else {\r\n                this.maxPosition += 1;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Shift positions for next page elements\r\n         *\r\n         * @param {Number} position\r\n         */\r\n        shiftNextPagesPositions: function (position) {\r\n\r\n            var recordData = this.recordData(),\r\n                startIndex = ~~this.currentPage() * this.pageSize,\r\n                offset = position - startIndex + 1,\r\n                index = startIndex;\r\n\r\n            if (~~this.currentPage() === this.pages()) {\r\n                return false;\r\n            }\r\n\r\n            for (index; index < recordData.length; index++) {\r\n                recordData[index].position = index + offset;\r\n            }\r\n            this.recordData(recordData);\r\n        },\r\n\r\n        /**\r\n         * Update position for element after position from another page is entered\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} event\r\n         */\r\n        updateGridPosition: function (data, event) {\r\n            var inputValue = parseInt(event.target.value, 10),\r\n                recordData = this.recordData(),\r\n                record,\r\n                previousValue,\r\n                updatedRecord;\r\n\r\n            record = this.elems().find(function (obj) {\r\n                return obj.dataScope === data.parentScope;\r\n            });\r\n\r\n            previousValue = this.getCalculatedPosition(record);\r\n\r\n            if (isNaN(inputValue) || inputValue < 0 || inputValue === previousValue) {\r\n                return false;\r\n            }\r\n\r\n            this.elems([]);\r\n\r\n            updatedRecord = this.getUpdatedRecordIndex(recordData, record.data().id);\r\n\r\n            if (inputValue >= this.recordData().size() - 1) {\r\n                recordData[updatedRecord].position = this.getGlobalMaxPosition() + 1;\r\n            } else {\r\n                recordData.forEach(function (value, index) {\r\n                    if (~~value.id === ~~record.data().id) {\r\n                        recordData[index].position = inputValue;\r\n                    } else if (inputValue > previousValue && index <= inputValue) {\r\n                        recordData[index].position = index - 1;\r\n                    } else if (inputValue < previousValue && index >= inputValue) {\r\n                        recordData[index].position = index + 1;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.reloadGridData(recordData);\r\n\r\n        },\r\n\r\n        /**\r\n         * Get updated record index\r\n         *\r\n         * @param  {Array} recordData\r\n         * @param {Number} recordId\r\n         * @return {Number}\r\n         */\r\n        getUpdatedRecordIndex: function (recordData, recordId) {\r\n            return recordData.map(function (o) {\r\n                return ~~o.id;\r\n            }).indexOf(~~recordId);\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Array} recordData - to reprocess\r\n         */\r\n        reloadGridData: function (recordData) {\r\n            this.recordData(recordData.sort(function (a, b) {\r\n                return ~~a.position - ~~b.position;\r\n            }));\r\n            this._updateCollection();\r\n            this.reload();\r\n        },\r\n\r\n        /**\r\n         * Event handler for \"Send to bottom\" button\r\n         *\r\n         * @param {Object} positionObj\r\n         * @return {Boolean}\r\n         */\r\n        sendToBottom: function (positionObj) {\r\n\r\n            var objectToUpdate = this.getObjectToUpdate(positionObj),\r\n                recordData = this.recordData(),\r\n                updatedRecord;\r\n\r\n            if (~~this.currentPage() === this.pages) {\r\n                objectToUpdate.position = this.maxPosition;\r\n            } else {\r\n                this.elems([]);\r\n                updatedRecord = this.getUpdatedRecordIndex(recordData, objectToUpdate.data().id);\r\n                recordData[updatedRecord].position = this.getGlobalMaxPosition() + 1;\r\n                this.reloadGridData(recordData);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Event handler for \"Send to top\" button\r\n         *\r\n         * @param {Object} positionObj\r\n         * @return {Boolean}\r\n         */\r\n        sendToTop: function (positionObj) {\r\n            var objectToUpdate = this.getObjectToUpdate(positionObj),\r\n                recordData = this.recordData(),\r\n                updatedRecord;\r\n\r\n            //isFirst\r\n            if (~~this.currentPage() === 1) {\r\n                objectToUpdate.position = 0;\r\n            } else {\r\n                this.elems([]);\r\n                updatedRecord = this.getUpdatedRecordIndex(recordData, objectToUpdate.data().id);\r\n                recordData.forEach(function (value, index) {\r\n                    recordData[index].position = index === updatedRecord ? 0 : value.position + 1;\r\n                });\r\n                this.reloadGridData(recordData);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Get element from grid for update\r\n         *\r\n         * @param {Object} object\r\n         * @return {*}\r\n         */\r\n        getObjectToUpdate: function (object) {\r\n            return this.elems().filter(function (item) {\r\n                return item.name === object.parentName;\r\n            })[0];\r\n        },\r\n\r\n        /**\r\n         * Value function for position input\r\n         *\r\n         * @param {Object} data\r\n         * @return {Number}\r\n         */\r\n        getCalculatedPosition: function (data) {\r\n            return (~~this.currentPage() - 1) * this.pageSize + this.elems().pluck('name').indexOf(data.name);\r\n        },\r\n\r\n        /**\r\n         * Return Page Boundary\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getDefaultPageBoundary: function () {\r\n            return ~~this.currentPage() * this.pageSize - 1;\r\n        },\r\n\r\n        /**\r\n         * Returns position for last element to be moved after\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getGlobalMaxPosition: function () {\r\n            return _.max(this.recordData().map(function (r) {\r\n                return ~~r.position;\r\n            }));\r\n        }\r\n    });\r\n});\r\n","Magento_GroupedProduct/js/grouped-product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery/ui',\r\n    'Magento_Ui/js/modal/modal',\r\n    'mage/translate',\r\n    'mage/adminhtml/grid'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.groupedProduct', {\r\n        /**\r\n         * Create widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.$grid = this.element.find('[data-role=grouped-product-grid]');\r\n            this.$grid.sortable({\r\n                distance: 8,\r\n                items: '[data-role=row]',\r\n                tolerance: 'pointer',\r\n                cancel: ':input',\r\n                update: $.proxy(function () {\r\n                    this.element.trigger('resort');\r\n                }, this)\r\n            });\r\n\r\n            this.productTmpl = mageTemplate('#group-product-template');\r\n\r\n            $.each(\r\n                this.$grid.data('products'),\r\n                $.proxy(function (index, product) {\r\n                    this._add(null, product);\r\n                }, this)\r\n            );\r\n\r\n            this._on({\r\n                'add': '_add',\r\n                'resort': '_resort',\r\n                'click [data-column=actions] [data-role=delete]': '_remove'\r\n            });\r\n\r\n            this._bindDialog();\r\n            this._updateGridVisibility();\r\n        },\r\n\r\n        /**\r\n         * Add product to grouped grid\r\n         * @param {EventObject} event\r\n         * @param {Object} product\r\n         * @private\r\n         */\r\n        _add: function (event, product) {\r\n            var tmpl,\r\n                productExists;\r\n\r\n            productExists = this.$grid.find('[data-role=id]')\r\n                .filter(function (index, element) {\r\n                    return $(element).val() == product.id; //eslint-disable-line eqeqeq\r\n                }).length;\r\n\r\n            if (!productExists) {\r\n                tmpl = this.productTmpl({\r\n                    data: product\r\n                });\r\n\r\n                $(tmpl).appendTo(this.$grid.find('tbody'));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove product\r\n         * @param {EventObject} event\r\n         * @private\r\n         */\r\n        _remove: function (event) {\r\n            $(event.target).closest('[data-role=row]').remove();\r\n            this.element.trigger('resort');\r\n            this._updateGridVisibility();\r\n        },\r\n\r\n        /**\r\n         * Resort products\r\n         * @private\r\n         */\r\n        _resort: function () {\r\n            this.element.find('[data-role=position]').each($.proxy(function (index, element) {\r\n                $(element).val(index + 1);\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Create modal for show product\r\n         *\r\n         * @private\r\n         */\r\n        _bindDialog: function () {\r\n            var widget = this,\r\n                selectedProductList = {},\r\n                popup = $('[data-role=add-product-dialog]'),\r\n                gridPopup;\r\n\r\n            popup.modal({\r\n                type: 'slide',\r\n                innerScroll: true,\r\n                title: $.mage.__('Add Products to Group'),\r\n                modalClass: 'grouped',\r\n\r\n                /** @inheritdoc */\r\n                open: function () {\r\n                    $(this).addClass('admin__scope-old'); // ToDo UI: remove with old styles removal\r\n                },\r\n                buttons: [{\r\n                    id: 'grouped-product-dialog-apply-button',\r\n                    text: $.mage.__('Add Selected Products'),\r\n                    'class': 'action-primary action-add',\r\n\r\n                    /** @inheritdoc */\r\n                    click: function () {\r\n                        $.each(selectedProductList, function (index, product) {\r\n                            widget._add(null, product);\r\n                        });\r\n                        widget._resort();\r\n                        widget._updateGridVisibility();\r\n                        popup.modal('closeModal');\r\n                    }\r\n                }]\r\n            });\r\n\r\n            popup.on('click', '[data-role=row]', function (event) {\r\n                var target = $(event.target);\r\n\r\n                if (!target.is('input')) {\r\n                    target.closest('[data-role=row]')\r\n                        .find('[data-column=entity_ids] input')\r\n                        .prop('checked', function (element, value) {\r\n                            return !value;\r\n                        })\r\n                        .trigger('change');\r\n                }\r\n            });\r\n\r\n            popup.on(\r\n                'change',\r\n                '[data-role=row] [data-column=entity_ids] input',\r\n                $.proxy(function (event) {\r\n                    var element = $(event.target),\r\n                        product = {};\r\n\r\n                    if (element.is(':checked')) {\r\n                        product.id = element.val();\r\n                        product.qty = 0;\r\n                        element.closest('[data-role=row]').find('[data-column]').each(function (index, el) {\r\n                            let text = $(el).text();\r\n\r\n                            product[$(el).data('column')] = text.trim();\r\n                        });\r\n                        selectedProductList[product.id] = product;\r\n                    } else {\r\n                        delete selectedProductList[element.val()];\r\n                    }\r\n                }, this)\r\n            );\r\n\r\n            gridPopup = $(this.options.gridPopup).data('gridObject');\r\n\r\n            $('[data-role=add-product]').on('click', function (event) {\r\n                event.preventDefault();\r\n                popup.modal('openModal');\r\n                gridPopup.reload();\r\n                selectedProductList = {};\r\n            });\r\n\r\n            $('#' + gridPopup.containerId).on('gridajaxsettings', function (event, ajaxSettings) {\r\n                var ids = widget.$grid.find('[data-role=id]').map(function (index, element) {\r\n                    return $(element).val();\r\n                }).toArray();\r\n\r\n                ajaxSettings.data.filter = $.extend(ajaxSettings.data.filter || {}, {\r\n                    'entity_ids': ids\r\n                });\r\n            }).on('gridajax', function (event, ajaxRequest) {\r\n                ajaxRequest.done(function () {\r\n                    popup.find('[data-role=row] [data-column=entity_ids] input').each(function (index, element) {\r\n                        var $element = $(element);\r\n\r\n                        $element.prop('checked', !!selectedProductList[$element.val()]);\r\n                    });\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show or hide message\r\n         * @private\r\n         */\r\n        _updateGridVisibility: function () {\r\n            var showGrid = this.element.find('[data-role=id]').length > 0;\r\n\r\n            this.element.find('.grid-container').toggle(showGrid);\r\n            this.element.find('.no-products-message').toggle(!showGrid);\r\n        }\r\n    });\r\n\r\n    return $.mage.groupedProduct;\r\n});\r\n","Magento_Integration/js/integration.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * jQuery plugin is added.\r\n *\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery/ui',\r\n    'mage/translate',\r\n    'Magento_Ui/js/modal/modal'\r\n], function ($, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.integration', {\r\n        /**\r\n         * Options common to all instances of this widget.\r\n         * @type {Object}\r\n         */\r\n        options: {\r\n            /**\r\n             * URL of the integration grid.\r\n             * @type {String}\r\n             */\r\n            gridUrl: ''\r\n        },\r\n\r\n        /**\r\n         * Bind event handler for the action when admin clicks \"Save & Activate\" button.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if ($('#save-split-button-activate').length) {\r\n                // We're on the \"New integration\" page - bind related handler\r\n                this._form = $('#edit_form');\r\n                this._form.on('saveAndActivate', $.proxy(this._saveAndActivate, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Save new integration, then kick off the activate dialog.\r\n         * @private\r\n         */\r\n        _saveAndActivate: function () {\r\n            if (this._form.validation && !this._form.validation('isValid')) {\r\n                return false;\r\n            }\r\n\r\n            $.ajax({\r\n                url: this._form.prop('action'),\r\n                type: 'post',\r\n                data: this._form.serialize(),\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    $('body').trigger('processStart');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                success: function (data) {\r\n                    var integrationName, that;\r\n\r\n                    if (data._redirect) {\r\n                        window.location.href = data._redirect;\r\n                    } else if (data.integrationId) {\r\n                        integrationName = $('#integration_properties_name').val();\r\n                        window.integration.popup.show($('<span>').attr({\r\n                            'data-row-dialog': 'permissions',\r\n                            'data-row-id': data.integrationId,\r\n                            // We do escaping here instead of the place of actual output because _showPopup()\r\n                            // actually receives dialog window title from couple of places: from here and from the grid.\r\n                            // The issue is we always should escape values in the grid, so that value is already\r\n                            // escaped. To avoid double escaping we do it here instead of the output.\r\n                            'data-row-name': $('<div>').text(integrationName).html(),\r\n                            'data-row-is-reauthorize': '0',\r\n                            'data-row-is-token-exchange': data.isTokenExchange\r\n                        }));\r\n                        that = this;\r\n                        $('#integration-popup-container').on('dialogclose', function () {\r\n                            $('body').trigger('processStart');\r\n                            window.location.href = that.options.gridUrl;\r\n\r\n                            return false;\r\n                        });\r\n                    }\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                error: function (jqXHR, status, error) {\r\n                    alert({\r\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\r\n                    });\r\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n\r\n            return true;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @param {*} permissionsDialogUrl\r\n     * @param {*} tokensDialogUrl\r\n     * @param {*} tokensExchangeUrl\r\n     * @param {*} gridUrl\r\n     * @param {*} successCallbackUrl\r\n     * @return {Object}\r\n     * @constructor\r\n     */\r\n    window.Integration = function (\r\n        permissionsDialogUrl,\r\n        tokensDialogUrl,\r\n        tokensExchangeUrl,\r\n        gridUrl,\r\n        successCallbackUrl\r\n    ) {\r\n        var url = {\r\n            permissions: permissionsDialogUrl,\r\n            tokens: tokensDialogUrl,\r\n            tokensExchange: tokensExchangeUrl,\r\n            grid: gridUrl\r\n        },\r\n        IdentityLogin = {\r\n            win: null,\r\n            strLocation: null,\r\n            checker: null,\r\n            isCalledBack: false,\r\n            //Info popup dialog. Should be hidden when login window is closed\r\n            jqInfoDialog: $('#integration-popup-container'),\r\n            successCallbackUrl: successCallbackUrl,\r\n            Constants: {\r\n                /*\r\n                 This interval is set such that it adjusts to the child window closing timeout of 1000 ms. This will\r\n                 give the checker function enough time to detect if the successCallback has been invoked\r\n                 */\r\n                CHECKER_INTERVAL: 500,\r\n                //Login screen size plus some buffer\r\n                WIDTH: 680,\r\n                HEIGHT: 510,\r\n                // subtract pixels(30) and width(680) from screen width to move popup from extreme left\r\n                LEFT: screen.width - 680 - 30,\r\n                // subtract pixels(300) and height(300) from screen height to move from top\r\n                TOP: screen.height - 510 - 300\r\n            },\r\n\r\n            /**\r\n             * @param {*} identityCallbackUrl\r\n             * @param {*} consumerKey\r\n             * @param {*} jqInfoDialog\r\n             */\r\n            invokePopup: function (identityCallbackUrl, consumerKey, jqInfoDialog) {\r\n                var param;\r\n\r\n                // Callback should be invoked only once. Reset callback flag on subsequent invocations.\r\n                IdentityLogin.isCalledBack = false;\r\n                IdentityLogin.jqInfoDialog = jqInfoDialog;\r\n                param = $.param({\r\n                    'oauth_consumer_key': consumerKey,\r\n                    'success_call_back': IdentityLogin.successCallbackUrl\r\n                });\r\n                IdentityLogin.win = window.open(identityCallbackUrl + '?' + param, '',\r\n                    'top=' + IdentityLogin.Constants.TOP +\r\n                        ', left=' + IdentityLogin.Constants.LEFT +\r\n                        ', width=' + IdentityLogin.Constants.WIDTH +\r\n                        ', height=' + IdentityLogin.Constants.HEIGHT + ',scrollbars=no');\r\n\r\n                if (IdentityLogin.checker != null) {\r\n                    //Clear any previous check\r\n                    clearInterval(IdentityLogin.checker);\r\n                }\r\n                //Polling to detect url of the child window.\r\n                IdentityLogin.checker = setInterval(\r\n                    IdentityLogin.fnCheckLocation, IdentityLogin.Constants.CHECKER_INTERVAL\r\n                );\r\n            },\r\n\r\n            /**\r\n             * Function to check the location of the child popup window.\r\n             * Once detected if the callback is successful, parent window will be reloaded\r\n             */\r\n            fnCheckLocation: function () {\r\n                if (IdentityLogin.win == null) {\r\n                    return;\r\n                }\r\n                // Check to see if the location has changed.\r\n                try {\r\n                    //Is the success callback invoked\r\n                    if (IdentityLogin.win.closed ||\r\n                        IdentityLogin.win.location.href == IdentityLogin.successCallbackUrl //eslint-disable-line eqeqeq\r\n                    ) {\r\n                        //Stop the polling\r\n                        clearInterval(IdentityLogin.checker);\r\n                        $('body').trigger('processStart');\r\n                        //Check for window closed\r\n                        window.location.href = url.grid;\r\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\r\n                    }\r\n                } catch (e) {\r\n                    //squash. In case Window closed without success callback, clear polling\r\n                    if (IdentityLogin.win.closed) {\r\n                        IdentityLogin.jqInfoDialog.modal('closeModal');\r\n                        clearInterval(IdentityLogin.checker);\r\n                    }\r\n\r\n                    return;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} popupWindow\r\n         * @return {Boolean}\r\n         */\r\n        isPopupBlocked = function (popupWindow) {\r\n            try {\r\n                popupWindow.focus();\r\n            } catch (e) {\r\n                alert({\r\n                    content: $.mage.__('Popup Blocker is enabled! Please add this site to your exception list.')\r\n                });\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * @param {*} dialog\r\n         * @param {*} title\r\n         * @param {*} okButton\r\n         * @param {*} ajaxUrl\r\n         * @private\r\n         */\r\n        _showPopup = function (dialog, title, okButton, ajaxUrl) {\r\n            $.ajax({\r\n                url: ajaxUrl,\r\n                cache: false,\r\n                data: {\r\n                    'form_key': window.FORM_KEY\r\n                },\r\n                method: 'GET',\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    // Show the spinner\r\n                    $('body').trigger('processStart');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                success: function (result) {\r\n                    var redirect = result._redirect,\r\n                        identityLinkUrl, consumerKey, popupHtml, popup, resultObj, buttons, dialogProperties;\r\n\r\n                    if (redirect) {\r\n                        window.location.href = redirect;\r\n\r\n                        return;\r\n                    }\r\n\r\n                    identityLinkUrl = null;\r\n                    consumerKey = null;\r\n                    popupHtml = null;\r\n                    popup = $('#integration-popup-container');\r\n\r\n                    try {\r\n                        resultObj = typeof result === 'string' ?\r\n                            JSON.parse(result) :\r\n                            result;\r\n\r\n                        identityLinkUrl = resultObj['identity_link_url'];\r\n                        consumerKey      = resultObj['oauth_consumer_key'];\r\n                        popupHtml       = resultObj['popup_content'];\r\n\r\n                    } catch (e) {\r\n                        //This is expected if result is not json. Do nothing.\r\n                    }\r\n\r\n                    if (identityLinkUrl && consumerKey && popupHtml) {\r\n                        IdentityLogin.invokePopup(identityLinkUrl, consumerKey, popup);\r\n\r\n                        if (isPopupBlocked(IdentityLogin.win)) {\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        popupHtml = result;\r\n                    }\r\n\r\n                    if (popup.length === 0) {\r\n                        popup = $('<div></div>');\r\n                    }\r\n                    popup.html(popupHtml);\r\n\r\n                    buttons = [];\r\n                    dialogProperties = {\r\n                        title: title,\r\n                        type: 'slide',\r\n                        dialogClass: dialog == 'permissions' ? 'integration-dialog' : 'integration-dialog no-close' //eslint-disable-line\r\n                    };\r\n\r\n                    // Add confirmation button to the list of dialog buttons. okButton not set for tokenExchange dialog\r\n                    if (okButton) {\r\n                        buttons.push(okButton);\r\n                    }\r\n                    // Add button only if its not empty\r\n                    if (buttons.length > 0) {\r\n                        dialogProperties.buttons = buttons;\r\n                    }\r\n                    popup.modal(dialogProperties);\r\n                    popup.modal('openModal');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                error: function (jqXHR, status, error) {\r\n                    alert({\r\n                        content: $.mage.__('Sorry, something went wrong. Please try again later.')\r\n                    });\r\n                    window.console && console.log(status + ': ' + error + '\\nResponse text:\\n' + jqXHR.responseText);\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    // Hide the spinner\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            popup: {\r\n                /**\r\n                 * @param {*} ctx\r\n                 */\r\n                show: function (ctx) {\r\n                    var dialog = $(ctx).attr('data-row-dialog'),\r\n                        isReauthorize = $(ctx).attr('data-row-is-reauthorize'),\r\n                        isTokenExchange = $(ctx).attr('data-row-is-token-exchange'),\r\n                        integrationId, ajaxUrl, integrationName, okButton;\r\n\r\n                    if (!url.hasOwnProperty(dialog)) {\r\n                        throw 'Invalid dialog type';\r\n                    }\r\n\r\n                    integrationId = $(ctx).attr('data-row-id');\r\n\r\n                    if (!integrationId) {\r\n                        throw 'Unable to find integration ID';\r\n                    }\r\n\r\n                    // Replace placeholders in URL\r\n                    ajaxUrl = url[dialog].replace(':id', integrationId).replace(':isReauthorize', isReauthorize);\r\n\r\n                    try {\r\n                        // Get integration name either from current element or from neighbor column\r\n                        integrationName = $(ctx).attr('data-row-name') ||\r\n                            $(ctx).parents('tr').find('.col-name').html().trim(); // eslint-disable-line jquery-no-trim\r\n\r\n                        if (integrationName.indexOf('<span') > -1) {\r\n                            // Remove unsecure URL warning from popup window title if it is present\r\n                            integrationName = integrationName.substring(0, integrationName.indexOf('<span'));\r\n                        }\r\n                    } catch (e) {\r\n                        throw 'Unable to find integration name';\r\n                    }\r\n\r\n                    okButton = {\r\n                        permissions: {\r\n                            text: isReauthorize == '1' ? $.mage.__('Reauthorize') : $.mage.__('Allow'), //eslint-disable-line\r\n                            'class': 'action-primary',\r\n                            attr: {\r\n                                'data-row-id': integrationId,\r\n                                'data-row-name': integrationName,\r\n                                'data-row-dialog': isTokenExchange == '1' ? 'tokensExchange' : 'tokens', //eslint-disable-line\r\n                                'data-row-is-reauthorize': isReauthorize,\r\n                                'data-row-is-token-exchange': isTokenExchange\r\n                            },\r\n\r\n                            /**\r\n                             * Click.\r\n                             */\r\n                            click: function () {\r\n                                // Find the 'Allow' button and clone - it has all necessary data, but is going to be\r\n                                // destroyed along with the current dialog\r\n                                var context = this.modal.find('button.action-primary').clone(true);\r\n\r\n                                this.closeModal();\r\n                                this.modal.remove();\r\n                                // Make popup out of data we saved from 'Allow' button\r\n                                window.integration.popup.show(context);\r\n                            }\r\n                        },\r\n                        tokens: {\r\n                            text: $.mage.__('Done'),\r\n                            'class': 'action-primary',\r\n\r\n                            /**\r\n                             * Click.\r\n                             */\r\n                            click: function () {\r\n                                // Integration has been activated at the point of generating tokens\r\n                                window.location.href = url.grid;\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    _showPopup(dialog, integrationName, okButton[dialog], ajaxUrl);\r\n                }\r\n            }\r\n        };\r\n    };\r\n\r\n    return $.mage.integration;\r\n});\r\n","Magento_InventoryAdminUi/js/form/element/region.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/region'\r\n], function (Region) {\r\n    'use strict';\r\n\r\n    return Region.extend({\r\n        defaults: {\r\n            regionScope: 'data.general.region'\r\n        },\r\n\r\n        /**\r\n         * Set region to source form\r\n         *\r\n         * @param {String} value - region\r\n         */\r\n        setDifferedFromDefault: function (value) {\r\n            this._super();\r\n\r\n            if (parseFloat(value)) {\r\n                this.source.set(this.regionScope, this.indexedOptions[value].label);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryAdminUi/js/stock/grid/cell/assigned-sources.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryAdminUi/stock/grid/cell/assigned-sources-cell.html',\r\n            itemsToDisplay: 5\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Array} record\r\n         * @returns {Array}\r\n         */\r\n        getTooltipData: function (record) {\r\n            return record[this.index].map(function (source) {\r\n                return {\r\n                    sourceCode: source.sourceCode,\r\n                    name: source.name\r\n                };\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSourcesAssignedToStockOrderedByPriority: function (record) {\r\n            return this.getTooltipData(record).slice(0, this.itemsToDisplay);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryAdminUi/js/stock/grid/dynamic-rows/assigned-sources.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/dynamic-rows/dynamic-rows-grid'\r\n], function (_, dynamicRowsGrid) {\r\n    'use strict';\r\n\r\n    return dynamicRowsGrid.extend({\r\n        defaults: {\r\n            cacheGridDataIndex: []\r\n        },\r\n\r\n        /**\r\n         * Performance optimization of setting initial property to records data of only first page\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        setInitialProperty: function () {\r\n            var startIndex,\r\n                stopIndex;\r\n\r\n            if (_.isArray(this.recordData())) {\r\n                startIndex = (~~this.currentPage() - 1) * this.pageSize;\r\n                stopIndex = startIndex + parseInt(this.pageSize, 10);\r\n                this.recordData.each(function (data, index) {\r\n                    if (index < stopIndex) {\r\n                        this.source.set(this.dataScope + '.' + this.index + '.' + index + '.initialize', true);\r\n                    }\r\n                }, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Performance optimization of checking changed records\r\n         * skip when checks are not necessary\r\n         *\r\n         * @param {Array} data - array with records data\r\n         * @returns {Array} Changed records\r\n         */\r\n        _checkGridData: function (data) {\r\n            var cacheLength = this.cacheGridData.length,\r\n                curData = data.length,\r\n                changes = [],\r\n                dataIndex = [],\r\n                changesIndex = [];\r\n\r\n            if (cacheLength === curData || cacheLength > curData) {\r\n                return [];\r\n            }\r\n\r\n            if (!cacheLength) {\r\n                return data;\r\n            }\r\n            data.forEach(function (record, index) {\r\n                dataIndex[index] = record[this.map[this.identificationDRProperty]];\r\n            }, this);\r\n            changesIndex = _.difference(dataIndex, this.cacheGridDataIndex);\r\n            changesIndex.forEach(function (changeIndex) {\r\n                data.forEach(function (record, index) {\r\n                    if (changeIndex === record[this.map[this.identificationDRProperty]]) {\r\n                        changes.push(data[index]);\r\n                    }\r\n                }, this);\r\n            }, this);\r\n\r\n            return changes;\r\n        },\r\n\r\n        /**\r\n         * Performance optimization of processing insert data\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processingInsertData: function (data) {\r\n            this._super(data);\r\n            data.forEach(function (record, index) {\r\n                this.cacheGridDataIndex[index] = record[this.map[this.identificationDRProperty]];\r\n            }, this);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryBundleProductAdminUi/js/form/element/grid-column-quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function ($t, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryBundleProductAdminUi/grid/column/quantity-per-source',\r\n            itemsToDisplay: 3,\r\n            showFullListDescription: $t('Show more...')\r\n        },\r\n\r\n        /**\r\n         * Get source items from product data.\r\n         *\r\n         * @param {Object} rowData\r\n         * @returns {Array}\r\n         */\r\n        getSourceItemsData: function (rowData) {\r\n            return rowData['quantity_per_source'];\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryBundleProductAdminUi/js/form/element/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementTmpl: 'Magento_InventoryBundleProductAdminUi/dynamic-rows/cells/cell-source',\r\n            itemsToDisplay: 3,\r\n            isFullList: true,\r\n            showFullListDescription: $t('Show more...'),\r\n            listens: {\r\n                value: 'updateItems'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Observe elements.\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['items', 'isFullList']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Prepare data to use.\r\n         *\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        updateItems: function (data) {\r\n            this.isFullList(data.length > this.itemsToDisplay);\r\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/attribute/edit/inventory/toggle/toggle-editability-all.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $('[data-role=toggle-editability-all]').on('change', function () {\r\n        var toggler = $(this),\r\n            field = toggler.parents('.field'),\r\n            someEditable = $('input[type!=\"checkbox\"], select, textarea', field),\r\n            someEditableCheckboxes = $('input[type=\"checkbox\"]', field).not(toggler);\r\n\r\n        if (someEditableCheckboxes.length) {\r\n            someEditable.prop('disabled', !toggler.prop('checked') || someEditableCheckboxes.prop('checked'));\r\n            someEditableCheckboxes.prop('disabled', !toggler.prop('checked'));\r\n        } else {\r\n            someEditable.prop('disabled', !toggler.prop('checked'));\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/attribute/edit/inventory/toggle/toggle-editability.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $('[data-role=toggle-editability]').on('change', function () {\r\n        var useConfigSettings = $(this),\r\n            field = useConfigSettings.parents('.field'),\r\n            someEditable = $('input[type!=\"checkbox\"], select, textarea', field);\r\n\r\n        someEditable.prop('disabled', useConfigSettings.prop('checked'));\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_CatalogInventory/js/components/qty-validator-changer'\r\n], function (Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            links: {\r\n                value: false\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getInitialValue: function () {\r\n            var values = [this.source.get(this.dataScope), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setDifferedFromDefault: function () {\r\n            var initialValue;\r\n\r\n            this._super();\r\n            initialValue = this.source.data.product['current_product_id'] !== null ? this.initialValue : 0;\r\n\r\n            if (this.value() &&\r\n                parseFloat(initialValue) !== parseFloat(this.value())\r\n            ) {\r\n                this.source.set(this.dataScope, this.value());\r\n            } else {\r\n                this.source.remove(this.dataScope);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/source-items.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'uiRegistry',\r\n    'underscore'\r\n], function (Fieldset, registry, _) {\r\n    'use strict';\r\n\r\n    return Fieldset.extend({\r\n        defaults: {\r\n            advancedInventoryButtonIndex: '',\r\n            imports: {\r\n                onStockChange: '${ $.provider }:data.product.stock_data.manage_stock'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * \"Advanced Inventory\" button should stay active in any case.\r\n         *\r\n         * @param {Integer} canManageStock\r\n         */\r\n        onStockChange: function (canManageStock) {\r\n            var advancedInventoryButton = registry.get('index = ' + this.advancedInventoryButtonIndex);\r\n\r\n            if (canManageStock === 0) {\r\n                if (!_.isUndefined(advancedInventoryButton)) {\r\n                    advancedInventoryButton.disabled(false);\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/stock-status.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/select'\r\n], function (Select) {\r\n    'use strict';\r\n\r\n    return Select.extend({\r\n        defaults: {\r\n            links: {\r\n                linkedValue: false\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getInitialValue: function () {\r\n            var values = [this.source.get(this.dataScope), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                if (v !== null && v !== undefined) {\r\n                    value = v;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        setDifferedFromDefault: function () {\r\n            this._super();\r\n\r\n            if (parseFloat(this.initialValue) !== parseFloat(this.value())) {\r\n                this.source.set(this.dataScope, this.value());\r\n            } else {\r\n                this.source.remove(this.dataScope);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/form/sources/qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_CatalogInventory/js/components/qty-validator-changer'\r\n], function (Validator) {\r\n    'use strict';\r\n\r\n    return Validator.extend({\r\n\r\n        /**\r\n         * Set default value for source quantity, depends on 'Use Decimal\" value.\r\n         *\r\n         * @param {Integer} isDecimal\r\n         * @returns void\r\n         */\r\n        setDefaultValue: function (isDecimal) {\r\n            if (!this.value()) {\r\n                isDecimal ? this.value('0.0') : this.value('0');\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryCatalogAdminUi/js/product/grid/cell/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryCatalogAdminUi/product/grid/cell/source-items.html',\r\n            itemsToDisplay: 5\r\n        },\r\n\r\n        /**\r\n         * Get source items data (source name and qty)\r\n         *\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSourceItemsData: function (record) {\r\n            return record[this.index] ? record[this.index] : [];\r\n        },\r\n\r\n        /**\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSourceItemsDataCut: function (record) {\r\n            return this.getSourceItemsData(record).slice(0, this.itemsToDisplay);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/configurable-quantity-resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiCollection',\r\n    'jquery',\r\n    'ko',\r\n    'uiLayout',\r\n    'mageUtils',\r\n    'underscore',\r\n    'mage/translate'\r\n], function (Collection, $, ko, layout, utils, _, $t) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            attribute: {},\r\n            template: 'Magento_InventoryConfigurableProductAdminUi/container',\r\n            identifier: 'source_code',\r\n            dataScope: '',\r\n            currentAttribute: '',\r\n            insertListingComponent: '',\r\n            dynamicRowsName: 'dynamicRows',\r\n            type: '',\r\n            templateElementNames: {\r\n                button: 'button_template',\r\n                dynamicRows: 'dynamic_rows_template',\r\n                group: 'group_template'\r\n            },\r\n            ignoreTmpls: {\r\n                childTemplate: true\r\n            },\r\n            listens: {\r\n                'attribute': 'handlerAttributeChange',\r\n                'insertListingValue': 'handlerInsertValueChange',\r\n                'type': 'handlerTypeChange'\r\n            },\r\n            dynamicRowsCollection: {},\r\n            imports: {\r\n                insertListingValue: '${$.insertListingComponent}:value'\r\n            },\r\n            modules: {\r\n                insertListing: '${$.insertListingComponent}'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Generates data for dynamic-rows records\r\n         * @param {Array} data\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        generateDynamicRowsData: function (data) {\r\n            var items = [];\r\n\r\n            _.each(data, function (item) {\r\n                items.push({\r\n                    'source': item.name,\r\n                    'source_code': item[this.identifier],\r\n                    'source_status': parseInt(item.enabled, 10) ? $.mage.__('Enabled') : $.mage.__('Disabled')\r\n                });\r\n            }.bind(this));\r\n\r\n            return items;\r\n        },\r\n\r\n        /**\r\n         * Handler for InsertListing value\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        handlerInsertValueChange: function (data) {\r\n            var items,\r\n                path = this.dynamicRowsName + '.' + this.currentDynamicRows;\r\n\r\n            if (!this.currentDynamicRows) {\r\n                return;\r\n            }\r\n\r\n            if (!data.length) {\r\n                return;\r\n            }\r\n\r\n            items = this.generateDynamicRowsData(data);\r\n            this.source.set(path, items);\r\n        },\r\n\r\n        /**\r\n         * Handler for attribute property\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        handlerAttributeChange: function (data) {\r\n            if (data && data !== this.currentAttribute) {\r\n                this.currentAttribute = data;\r\n                this.destroyChildren();\r\n\r\n                _.each(data.chosen, function (item) {\r\n                    this.addChild(item);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler for type property\r\n         *\r\n         * @param {String} data\r\n         */\r\n        handlerTypeChange: function (data) {\r\n            if (data === 'single') {\r\n                this.destroyChildren();\r\n                this.currentAttribute = {};\r\n                this.addChild();\r\n            } else if (data === 'each' && this.attribute) {\r\n                this.handlerAttributeChange(this.attribute);\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        validate: function (elem) {\r\n            if (typeof elem === 'undefined') {\r\n                return;\r\n            }\r\n\r\n            if (typeof elem.validate === 'function') {\r\n                this.valid &= elem.validate().valid;\r\n            } else if (elem.elems) {\r\n                elem.elems().forEach(this.validate, this);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Parses string templates.\r\n         * Skip parse if deferredTmpl property set to \"true\"\r\n         *\r\n         * @param {Object} obj\r\n         *\r\n         * @returns obj\r\n         */\r\n        parseTemplateString: function (obj) {\r\n            var children;\r\n\r\n            if (obj.children) {\r\n                children = utils.copy(obj.children);\r\n                delete obj.children;\r\n            }\r\n\r\n            obj = utils.template(obj, obj);\r\n            obj.children = children;\r\n\r\n            if (children) {\r\n                _.each(children, function (child, name) {\r\n                    obj.children[name] = child.config.deferredTmpl ? child : this.parseTemplateString(child);\r\n                }, this);\r\n            }\r\n\r\n            obj.name = obj.config.name || obj.name;\r\n\r\n            return obj;\r\n        },\r\n\r\n        /**\r\n         * Handler for modal\r\n         *\r\n         * @param {String} id - dynamic-rows name that open modal\r\n         */\r\n        handleToggleSourcesModal: function (id) {\r\n            this.currentDynamicRows = this.type === 'each' ? this.currentAttribute.code + '.' + id : id;\r\n            this.insertListing().value(this.source.get(this.dynamicRowsName + '.' + this.currentDynamicRows));\r\n        },\r\n\r\n        /**\r\n         * Generates dynamic data for child.\r\n         *\r\n         * @param {Object | Undefined} data - optional.\r\n         */\r\n        generateDynamicData: function (data) {\r\n            var key = data ? data.label : this.dynamicRowsName,\r\n                drExportTo = this.name + ':dynamicRowsCollection.',\r\n                drDataScope = 'data.' + this.name + '.',\r\n                drDataProvider = this.dynamicRowsName + '.';\r\n\r\n            if (this.type === 'each') {\r\n                drDataScope += this.currentAttribute.code + '.';\r\n                drExportTo += this.currentAttribute.code + '.';\r\n                drDataProvider += this.currentAttribute.code + '.';\r\n            }\r\n\r\n            drDataScope += key;\r\n            drExportTo += key;\r\n            drDataProvider += key;\r\n\r\n            return {\r\n                group: {\r\n                    name: key\r\n                },\r\n                button: {\r\n                    label: data ? data.label : $t('Quantity'),\r\n                    targetName: this.name,\r\n                    param: key\r\n                },\r\n                dynamicRows: {\r\n                    dataScope: drDataScope,\r\n                    dataProvider: drDataProvider,\r\n                    name: this.dynamicRowsName,\r\n                    exportTo: drExportTo\r\n                }\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {Object | Undefined} data - optional.\r\n         */\r\n        addChild: function (data) {\r\n            var template = utils.copy(this.childTemplate.templates).children,\r\n                dynamicRows = template[this.templateElementNames.dynamicRows],\r\n                button = template[this.templateElementNames.button],\r\n                group = template[this.templateElementNames.group],\r\n                dynamicData = this.generateDynamicData(data);\r\n\r\n            group.dynamicData = dynamicData.group;\r\n            group.parent = this.name;\r\n            group = this.parseTemplateString(group);\r\n\r\n            button.dynamicData = dynamicData.button;\r\n            button.parent = this.name + '.' + group.name;\r\n            button = this.parseTemplateString(button);\r\n\r\n            dynamicRows.dynamicData = dynamicData.dynamicRows;\r\n            dynamicRows.parent = this.name + '.' + group.name;\r\n            dynamicRows = this.parseTemplateString(dynamicRows);\r\n\r\n            layout([group, button, dynamicRows]);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/dynamic-rows-configurable-mixin.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n        'use strict';\r\n\r\n        var mixin = {\r\n\r\n            /**\r\n             * Parsed data\r\n             *\r\n             * @param {Array} data - array with data\r\n             * about selected records\r\n             */\r\n            processingInsertDataFromGrid: function (data) {\r\n                var changes,\r\n                    tmpArray;\r\n\r\n                if (!data.length) {\r\n                    return;\r\n                }\r\n\r\n                tmpArray = this.getUnionInsertData();\r\n\r\n                changes = this._checkGridData(data);\r\n                this.cacheGridData = data;\r\n\r\n                changes.each(function (changedObject) {\r\n                    var mappedData = this.mappingValue(changedObject),\r\n                        sources = [];\r\n\r\n                    mappedData[this.canEditField] = 0;\r\n                    mappedData[this.newProductField] = 0;\r\n                    mappedData.variationKey = this._getVariationKey(changedObject);\r\n                    mappedData['configurable_attribute'] = this._getConfigurableAttribute(changedObject);\r\n\r\n                    if ('quantity_per_source' in changedObject) {\r\n                        changedObject['quantity_per_source'].each(function (source) {\r\n                            sources.push({\r\n                                'quantity_per_source': source.qty,\r\n                                'source': source['source_name'],\r\n                                'source_code': source['source_code']\r\n                            });\r\n                        });\r\n                        mappedData['quantity_per_source'] = sources;\r\n                    }\r\n\r\n                    tmpArray.push(mappedData);\r\n                }, this);\r\n\r\n                // Attributes cannot be changed before regeneration thought wizard\r\n                if (!this.source.get('data.attributes').length) {\r\n                    this.source.set('data.attributes', this.attributesTmp);\r\n                }\r\n                this.unionInsertData(tmpArray);\r\n            }\r\n        };\r\n\r\n        return function (target) {\r\n            return target.extend(mixin);\r\n        };\r\n    }\r\n);\r\n","Magento_InventoryConfigurableProductAdminUi/js/components/dynamic-rows-configurable.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_ConfigurableProduct/js/components/dynamic-rows-configurable'\r\n], function (dynamicRowsConfigurable) {\r\n    'use strict';\r\n\r\n    return dynamicRowsConfigurable.extend({\r\n        defaults: {\r\n            quantityFieldName: 'quantity_per_source'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        getProductData: function (row) {\r\n            var product = this._super(row);\r\n\r\n            product[this.quantityFieldName] = row.quantityPerSource;\r\n\r\n            return product;\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/components/sources-visibility-checker.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'uiComponent'\r\n], function (_, registry, component) {\r\n    'use strict';\r\n\r\n    return component.extend({\r\n        defaults: {\r\n            sourcesIndex: ''\r\n        },\r\n\r\n        /**\r\n         * Hide source tab if convert product to configurable and show it if to simple.\r\n         */\r\n        applySourcesConfiguration: function (visibleMatrix) {\r\n            var source = registry.get('index = ' + this.sourcesIndex);\r\n\r\n            if (!_.isUndefined(source)) {\r\n                source.visible(!visibleMatrix);\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/form/element/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementTmpl: 'Magento_InventoryConfigurableProductAdminUi/dynamic-rows/cells/cell-source',\r\n            itemsToDisplay: 5,\r\n            isFullList: true,\r\n            showFullListDescription: $t('Show more...'),\r\n            listens: {\r\n                value: 'updateItems'\r\n            }\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['items', 'isFullList']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        updateItems: function (data) {\r\n            this.isFullList(data.length > this.itemsToDisplay);\r\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/variations/steps/bulk.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_ConfigurableProduct/js/variations/steps/bulk',\r\n    'jquery',\r\n    'ko',\r\n    'underscore'\r\n], function (Bulk, $, ko, _) {\r\n    'use strict';\r\n\r\n    return Bulk.extend({\r\n        defaults: {\r\n            quantityModuleName: '',\r\n            quantityPerSource: '',\r\n            exports: {\r\n                attribute: '${$.provider}:data.inventoryAttribute',\r\n                type: '${$.provider}:data.inventoryType'\r\n            },\r\n            modules: {\r\n                quantityResolver: '${$.quantityResolver}'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            var sections;\r\n\r\n            this._super();\r\n\r\n            sections = this.sections();\r\n            sections.quantityPerSource = {\r\n                label: 'Quantity Per Source',\r\n                type: ko.observable('none'),\r\n                value: ko.observable(),\r\n                attribute: ko.observable()\r\n            };\r\n            this.sections(sections);\r\n\r\n            /**\r\n             * Make options sections.\r\n             */\r\n            this.makeOptionSections = function () {\r\n                return {\r\n                    images: new this.makeImages(null),\r\n                    price: this.price,\r\n                    quantityPerSource: this.quantityPerSource\r\n                };\r\n            }.bind(this);\r\n\r\n            this.initAttributeListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inits listeners for attribute change.\r\n         */\r\n        initAttributeListener: function () {\r\n            var quantityPerSource = this.sections().quantityPerSource;\r\n\r\n            quantityPerSource.attribute.subscribe(function (data) {\r\n                this.attribute(data);\r\n            }.bind(this));\r\n\r\n            quantityPerSource.type.subscribe(function (data) {\r\n                this.type(data);\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent, initializes 'options' and 'initialOptions'\r\n         *     properties, calls 'setOptions' passing options to it\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'attribute',\r\n                    'type'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        force: function (wizard) {\r\n            if (this.type() === 'each' && this.attribute() || this.type() === 'single') {\r\n                this.prepareDynamicRowsData();\r\n            }\r\n\r\n            this._super(wizard);\r\n        },\r\n\r\n        /**\r\n         * Prepares dynamic rows data for the next step\r\n         */\r\n        prepareDynamicRowsData: function () {\r\n            var data,\r\n                module = this.quantityResolver();\r\n\r\n            if (this.type() === 'each') {\r\n                data = module.dynamicRowsCollection[this.attribute().code];\r\n\r\n                _.each(this.attribute().chosen, function (item) {\r\n                    item.sections().quantityPerSource = data[item.label];\r\n                });\r\n            } else if (this.type() === 'single') {\r\n                data = module.dynamicRowsCollection[module.dynamicRowsName];\r\n                this.sections().quantityPerSource.value(data);\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        validate: function () {\r\n            var valid = true,\r\n                quantityPerSource = this.quantityResolver();\r\n\r\n            this._super();\r\n\r\n            if (this.type() && this.type() !== 'none') {\r\n                quantityPerSource.valid = true;\r\n\r\n                quantityPerSource.elems().forEach(function (item) {\r\n                    quantityPerSource.validate.call(quantityPerSource, item);\r\n                    valid = valid && item.elems()[1].elems().length;\r\n                });\r\n\r\n                if (!quantityPerSource.valid || !valid) {\r\n                    throw new Error($.mage.__('Please fill-in correct values.'));\r\n                }\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryConfigurableProductAdminUi/js/variations/steps/summary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_ConfigurableProduct/js/variations/steps/summary',\r\n    'jquery',\r\n    'mage/translate'\r\n], function (Summary, $) {\r\n    'use strict';\r\n\r\n    return Summary.extend({\r\n        defaults: {\r\n            attributesName: [\r\n                $.mage.__('Images'),\r\n                $.mage.__('SKU'),\r\n                $.mage.__('Quantity Per Source'),\r\n                $.mage.__('Price')\r\n            ],\r\n            quantityFieldName: 'quantityPerSource'\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryGroupedProductAdminUi/js/form/element/grid-column-quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function ($t, Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryGroupedProductAdminUi/grid/column/quantity-per-source',\r\n            itemsToDisplay: 3,\r\n            showFullListDescription: $t('Show more...')\r\n        },\r\n\r\n        /**\r\n         * Get source items from product data.\r\n         *\r\n         * @param {Object} rowData\r\n         * @returns {Array}\r\n         */\r\n        getSourceItemsData: function (rowData) {\r\n            return rowData['quantity_per_source'];\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryGroupedProductAdminUi/js/form/element/quantity-per-source.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'mage/translate',\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function ($t, Abstract) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            elementTmpl: 'Magento_InventoryGroupedProductAdminUi/dynamic-rows/cells/cell-source',\r\n            itemsToDisplay: 3,\r\n            isFullList: true,\r\n            showFullListDescription: $t('Show more...'),\r\n            listens: {\r\n                value: 'updateItems'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Observe elements.\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe(['items', 'isFullList']);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Prepare data to use.\r\n         *\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        updateItems: function (data) {\r\n            this.isFullList(data.length > this.itemsToDisplay);\r\n            this.isFullList() ? this.items(data.slice(0, this.itemsToDisplay)) : this.items(data);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryInStorePickupAdminUi/js/form/components/fieldset.js":"/*\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/components/fieldset',\r\n    'ko'\r\n], function (Fieldset, ko) {\r\n    'use strict';\r\n\r\n    /**\r\n     * TODO Remove when issue is resolved in core.\r\n     * @see Please check issue in core for more details: https://github.com/magento/magento2/issues/22067.\r\n     */\r\n    return Fieldset.extend(ko).extend(\r\n        {\r\n            /**\r\n             * Convert `visible` value from string ('1', '0') to bool (true, false)\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                // eslint-disable-next-line vars-on-top\r\n                var visible = this.visible;\r\n\r\n                this.visible = ko.computed({\r\n                    /**\r\n                     * @returns {Boolean}\r\n                     */\r\n                    read: function () {\r\n                        return visible();\r\n                    },\r\n\r\n                    /**\r\n                     * @param {String} value\r\n                     */\r\n                    write: function (value) {\r\n                        value = Boolean(value) === value ? value : Boolean(parseInt(value, 10));\r\n                        visible(value);\r\n                    },\r\n                    owner: this\r\n                });\r\n                this.visible(visible());\r\n            }\r\n        }\r\n    );\r\n});\r\n","Magento_InventoryInStorePickupAdminUi/js/form/element/conditional-required.js":"/*\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'ko',\r\n    'underscore',\r\n    'mageUtils'\r\n], function (uiElement, ko, _, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Provide possibility to make field required by dependency on other field value.\r\n     */\r\n    return uiElement.extend(\r\n        {\r\n            /**\r\n             * Convert `required` value from string ('1', '0') to bool (true, false)\r\n             */\r\n            initialize: function () {\r\n                this._super();\r\n\r\n                // eslint-disable-next-line vars-on-top\r\n                var required = this.required;\r\n\r\n                this.required = ko.computed({\r\n                    /**\r\n                     * @returns {Boolean}\r\n                     */\r\n                    read: function () {\r\n                        return required();\r\n                    },\r\n\r\n                    /**\r\n                     * @param {String|Boolean} value\r\n                     */\r\n                    write: function (value) {\r\n                        value = Boolean(value) === value ? value : Boolean(parseInt(value, 10));\r\n\r\n                        if (required() !== value) {\r\n                            required(value);\r\n                            this.setValidation('required-entry', required());\r\n                        }\r\n                    },\r\n                    owner: this\r\n                });\r\n                this.required(required());\r\n            },\r\n\r\n            /**\r\n             * @param {(String|Object)} rule\r\n             * @param {(Object|Boolean)} [options]\r\n             * @returns {Abstract} Chainable.\r\n             */\r\n            setValidation: function (rule, options) {\r\n                var rules = utils.copy(this.validation),\r\n                    changed;\r\n\r\n                if (_.isObject(rule)) {\r\n                    _.extend(this.validation, rule);\r\n                } else {\r\n                    this.validation[rule] = options;\r\n                }\r\n\r\n                changed = !utils.compare(rules, this.validation).equal;\r\n\r\n                if (changed) {\r\n                    this.required(!!this.validation['required-entry']);\r\n                    this.validate();\r\n                }\r\n\r\n                return this;\r\n            }\r\n        }\r\n    );\r\n});\r\n","Magento_InventoryInStorePickupSalesAdminUi/order/create/scripts-mixin.js":"/*\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'prototype'\r\n    ],\r\n    function (jQuery) {\r\n        'use strict';\r\n\r\n        return function () {\r\n            var STORE_PICKUP_METHOD = 'instore_pickup',\r\n                SOURCES_FIELD_SELECTOR = '#shipping_form_pickup_location_source',\r\n                SAME_AS_BILLING_SELECTOR = '#order-shipping_same_as_billing',\r\n                CUSTOMER_SHIPPING_ADDRESS_ID_SELECTOR = '#order-shipping_address_customer_address_id',\r\n                CUSTOMER_ADDRESS_SAVE_IN_ADDRESS_BOOK_SELECTOR = '#order-shipping_address_save_in_address_book',\r\n                IN_STORE_PICKUP_CHECKBOX_SELECTOR = '#s_method_instore_pickup';\r\n\r\n            /**\r\n             * Display sources dropdown field;\r\n             * And vice-versa\r\n             *\r\n             * @param {Boolean} isStorePickup\r\n             */\r\n            function setStorePickupMethod(isStorePickup) {\r\n                var sourcesInput = jQuery(SOURCES_FIELD_SELECTOR),\r\n                    shippingAddressSaveInAddressBook = jQuery(CUSTOMER_ADDRESS_SAVE_IN_ADDRESS_BOOK_SELECTOR);\r\n\r\n                if (isStorePickup) {\r\n                    shippingAddressSaveInAddressBook.prop('checked', false);\r\n                    sourcesInput.show();\r\n\r\n                    return;\r\n                }\r\n                window.order.disableShippingAddress(jQuery(SAME_AS_BILLING_SELECTOR).prop('checked'));\r\n                sourcesInput.hide();\r\n            }\r\n\r\n            /**\r\n             * Verify is store pickup delivery method is checked.\r\n             */\r\n            function isStorePickupSelected() {\r\n                var storePickupCheckbox = jQuery(IN_STORE_PICKUP_CHECKBOX_SELECTOR);\r\n\r\n                return storePickupCheckbox.length && storePickupCheckbox.prop('checked');\r\n            }\r\n\r\n            /**\r\n             * Always disable unwanted shipping address fields in case store pickup is selected.\r\n             */\r\n            window.AdminOrder.prototype.disableShippingAddress =\r\n                window.AdminOrder.prototype.disableShippingAddress.wrap(function (proceed, flag) {\r\n                    var shippingAddressId = jQuery(CUSTOMER_SHIPPING_ADDRESS_ID_SELECTOR),\r\n                        theSameAsBillingCheckBox = jQuery(SAME_AS_BILLING_SELECTOR),\r\n                        shippingAddressSaveInAddressBook = jQuery(CUSTOMER_ADDRESS_SAVE_IN_ADDRESS_BOOK_SELECTOR);\r\n\r\n                    proceed(flag);\r\n\r\n                    if (isStorePickupSelected()) {\r\n                        shippingAddressId.prop('disabled', true);\r\n                        theSameAsBillingCheckBox.prop('disabled', true);\r\n                        shippingAddressSaveInAddressBook.prop('disabled', true);\r\n                    }\r\n                });\r\n\r\n            /**\r\n             * Set shipping method override\r\n             *\r\n             * @param {String} method\r\n             */\r\n            window.AdminOrder.prototype.setShippingMethod = function (method) {\r\n                var data = {},\r\n                    areas = [\r\n                        'shipping_method',\r\n                        'totals',\r\n                        'billing_method',\r\n                        'shipping_address'\r\n                    ];\r\n\r\n                data['order[shipping_method]'] = method;\r\n\r\n                if (method === STORE_PICKUP_METHOD) {\r\n                    data = this.serializeData(this.shippingAddressContainer).toObject();\r\n                    data['order[shipping_method]'] = method;\r\n                    data['shipping_as_billing'] = 0;\r\n                    data['save_in_address_book'] = 0;\r\n                    this.shippingAsBilling = 0;\r\n                    this.saveInAddressBook = 0;\r\n                }\r\n\r\n                this.loadArea(areas, true, data).then(\r\n                    function () {\r\n                        setStorePickupMethod(method === STORE_PICKUP_METHOD);\r\n                    }\r\n                );\r\n            };\r\n\r\n            /**\r\n             * Replace shipping method area.\r\n             * Restore store pickup shipping method if it was already selected.\r\n             */\r\n            window.AdminOrder.prototype.resetShippingMethod = function () {\r\n                var storePickupCheckbox = jQuery(IN_STORE_PICKUP_CHECKBOX_SELECTOR);\r\n\r\n                if (!this.isOnlyVirtualProduct) {\r\n                    /* eslint-disable no-undef */\r\n                    $(this.getAreaId('shipping_method')).update(this.shippingTemplate);\r\n\r\n                    if (isStorePickupSelected()) {\r\n                        window.order.setShippingMethod(storePickupCheckbox.val());\r\n                    }\r\n                }\r\n            };\r\n        };\r\n    }\r\n);\r\n","Magento_InventoryInStorePickupSalesAdminUi/order/create/trigger-shipping-method-update.js":"/*\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'Magento_Sales/order/create/form'\r\n    ],\r\n    function ($) {\r\n        'use strict';\r\n\r\n        return function () {\r\n            var storePickupCheckbox = $('#s_method_instore_pickup');\r\n\r\n            if (storePickupCheckbox.length && storePickupCheckbox.prop('checked')) {\r\n                window.order.setShippingMethod(storePickupCheckbox.val());\r\n            }\r\n        };\r\n    }\r\n);\r\n","Magento_InventoryLowQuantityNotificationAdminUi/js/components/notify-stock-qty.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract'\r\n], function (AbstractField) {\r\n    'use strict';\r\n\r\n    return AbstractField.extend({\r\n        defaults: {\r\n            notifyStockQtyUseDefault: '',\r\n            manageStock: '',\r\n            listens: {\r\n                notifyStockQtyUseDefault: 'onChange',\r\n                manageStock: 'onChange'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['notifyStockQtyUseDefault', 'manageStock']);\r\n        },\r\n\r\n        /**\r\n         * Disable input when Manage Stock switched off or Notify Quantity Use Default\r\n         */\r\n        onChange: function () {\r\n            this.disabled(\r\n                this.notifyStockQtyUseDefault() ||\r\n                this.manageStock()\r\n            );\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryLowQuantityNotificationAdminUi/js/components/use-config-settings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/form/element/single-checkbox'\r\n], function (checkbox) {\r\n    'use strict';\r\n\r\n    return checkbox.extend({\r\n        defaults: {\r\n            valueFromConfig: '',\r\n            linkedValue: ''\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initObservable: function () {\r\n            return this\r\n                ._super()\r\n                .observe(['valueFromConfig', 'linkedValue']);\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        'onCheckedChanged': function (newChecked) {\r\n            if (newChecked) {\r\n                this.linkedValue(this.valueFromConfig());\r\n            }\r\n\r\n            this._super(newChecked);\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         */\r\n        getInitialValue: function () {\r\n            var values = [this.value(), this.default],\r\n                value;\r\n\r\n            values.some(function (v) {\r\n                value = v || !!v;\r\n\r\n                return value;\r\n            });\r\n\r\n            return this.normalizeData(value);\r\n        }\r\n    });\r\n});\r\n","Magento_InventorySalesAdminUi/js/product/grid/cell/salable-quantity.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventorySalesAdminUi/product/grid/cell/salable-quantity.html'\r\n        },\r\n\r\n        /**\r\n         * Get salable quantity data (stock name and salable qty)\r\n         *\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSalableQuantityData: function (record) {\r\n            return record[this.index] ? record[this.index] : [];\r\n        }\r\n    });\r\n});\r\n","Magento_InventorySalesAdminUi/js/stock/grid/cell/sales-channels.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'underscore'\r\n], function (Column, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventorySalesAdminUi/stock/grid/cell/sales-channel-cell.html'\r\n        },\r\n\r\n        /**\r\n         * Get sales channels grouped by type\r\n         *\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getSalesChannelsGroupedByType: function (record) {\r\n            var result = [];\r\n\r\n            _.each(record[this.index], function (channels, type) {\r\n                result.push({\r\n                    type: type,\r\n                    channels: channels\r\n                });\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/form/form.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/form/form',\r\n    'underscore',\r\n    'mageUtils'\r\n], function ($, Form, _, utils) {\r\n    'use strict';\r\n\r\n    return Form.extend({\r\n        defaults: {\r\n            sourceSelectionUrl: '${ $.sourceSelectionUrl }'\r\n        },\r\n\r\n        /**\r\n         * Process source selection algorithm\r\n         *\r\n         * @param {String} redirect\r\n         * @param {Object} data\r\n         */\r\n        processAlgorithm: function (redirect, data) {\r\n            var formData = utils.filterFormData(this.source.get('data'));\r\n\r\n            data.requestData = [];\r\n\r\n            _.each(formData.items, function (item) {\r\n                data.requestData.push({\r\n                    orderItem: item.orderItemId,\r\n                    sku: item.sku,\r\n                    qty: item.qtyToShip\r\n                });\r\n            });\r\n\r\n            data.orderId = formData['order_id'];\r\n            data.websiteId = formData.websiteId;\r\n            data = utils.serialize(utils.filterFormData(data));\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            if (!this.sourceSelectionUrl || this.sourceSelectionUrl === 'undefined') {\r\n                return $.Deferred.resolve();\r\n            }\r\n\r\n            $('body').trigger('processStart');\r\n\r\n            $.ajax({\r\n                url: this.sourceSelectionUrl,\r\n                data: data,\r\n\r\n                /**\r\n                 * Success callback.\r\n                 *\r\n                 * @param {Object} response\r\n                 */\r\n                success: function (response) {\r\n                    var dataItems = this.source.get('data.items');\r\n\r\n                    _.each(dataItems, function (item) {\r\n                        if (response[item.orderItemId]) {\r\n                            this.source.set('data.items.' + item['record_id'] + '.sources', response[item.orderItemId]);\r\n                        }\r\n                    }.bind(this));\r\n                    this.source.trigger('reInitSources');\r\n                    this.source.set('data.sourceCodes', response.sourceCodes ? response.sourceCodes : []);\r\n                }.bind(this),\r\n\r\n                /**\r\n                 * Complete callback.\r\n                 */\r\n                complete: function () {\r\n                    $('body').trigger('processStop');\r\n                }\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/form/element/qty_to_deduct.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/form/element/abstract',\r\n    'mageUtils'\r\n], function (Abstract, utils) {\r\n    'use strict';\r\n\r\n    return Abstract.extend({\r\n        defaults: {\r\n            sourceCode: null,\r\n            qtyAvailable: 0\r\n        },\r\n\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        initialize: function () {\r\n            var path,\r\n                qtyToShip,\r\n                isManageStock;\r\n\r\n            this._super();\r\n\r\n            //TODO: Is it right way?\r\n            path = utils.getPart(utils.getPart(this.parentScope, -2), -2);\r\n            qtyToShip = this.source.get(path + '.qtyToShip');\r\n            isManageStock = this.source.get(path + '.isManageStock');\r\n\r\n            this.validation['less-than-equals-to'] = isManageStock ? this.qtyAvailable : qtyToShip;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle disabled state.\r\n         *\r\n         * @param {String} selected\r\n         */\r\n        toggleDisable: function (selected) {\r\n            this.disabled(selected ? selected.toString() !== this.sourceCode : !selected);\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/form/element/source_code.js":"define([\r\n    'underscore',\r\n    'Magento_Ui/js/form/element/select'\r\n], function (_, select) {\r\n    'use strict';\r\n\r\n    return select.extend({\r\n        /**\r\n         * @inheritdoc\r\n         */\r\n        setOptions: function (data) {\r\n            var result = this._super(data);\r\n\r\n            if (data.length === 1) {\r\n                this.value(data[0].value);\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_InventoryShippingAdminUi/js/order/grid/cell/allocated-sources.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column'\r\n], function (Column) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_InventoryShippingAdminUi/order/grid/cell/allocated-sources-cell.html',\r\n            itemsToDisplay: 5\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {Array} record\r\n         * @returns {Array}\r\n         */\r\n        getTooltipData: function (record) {\r\n            return record[this.index];\r\n        },\r\n\r\n        /**\r\n         * @param {Object} record - Record object\r\n         * @returns {Array} Result array\r\n         */\r\n        getAllocatedSources: function (record) {\r\n            return this.getTooltipData(record).slice(0, this.itemsToDisplay);\r\n        }\r\n    });\r\n});\r\n","Magento_LoginAsCustomerAdminUi/js/confirmation-popup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery',\r\n    'ko',\r\n    'mage/translate',\r\n    'mage/template',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'text!Magento_LoginAsCustomerAdminUi/template/confirmation-popup/store-view-ptions.html'\r\n], function (Component, confirm, $, ko, $t, template, _, alert, selectTpl) {\r\n\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        /**\r\n         * Initialize Component\r\n         */\r\n        initialize: function () {\r\n            var self = this,\r\n                content;\r\n\r\n            this._super();\r\n\r\n            content = '<div class=\"message message-warning\">' + self.content + '</div>';\r\n\r\n            if (self.showStoreViewOptions) {\r\n                content = template(\r\n                    selectTpl,\r\n                    {\r\n                        data: {\r\n                            showStoreViewOptions: self.showStoreViewOptions,\r\n                            storeViewOptions: self.storeViewOptions,\r\n                            label: $t('Store')\r\n                        }\r\n                    }) + content;\r\n            }\r\n\r\n            /**\r\n             * Confirmation popup\r\n             *\r\n             * @param {String} url\r\n             * @returns {Boolean}\r\n             */\r\n            window.lacConfirmationPopup = function (url) {\r\n                confirm({\r\n                    title: self.title,\r\n                    content: content,\r\n                    modalClass: 'confirm lac-confirm',\r\n                    actions: {\r\n                        /**\r\n                         * Confirm action.\r\n                         */\r\n                        confirm: function () {\r\n                            var storeId = $('#lac-confirmation-popup-store-id').val(),\r\n                                formKey = $('input[name=\"form_key\"]').val(),\r\n                                params = {};\r\n\r\n                            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n                            if (storeId) {\r\n                                params.store_id = storeId;\r\n                            }\r\n\r\n                            if (formKey) {\r\n                                params.form_key = formKey;\r\n                            }\r\n                            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n\r\n                            $.ajax({\r\n                                url: url,\r\n                                type: 'POST',\r\n                                dataType: 'json',\r\n                                data: params,\r\n                                showLoader: true,\r\n\r\n                                /**\r\n                                 * Open redirect URL in new window, or show messages if they are present\r\n                                 *\r\n                                 * @param {Object} data\r\n                                 */\r\n                                success: function (data) {\r\n                                    var messages = data.messages || [];\r\n\r\n                                    if (data.message) {\r\n                                        messages.push(data.message);\r\n                                    }\r\n\r\n                                    if (data.redirectUrl) {\r\n                                        window.open(data.redirectUrl);\r\n                                    } else if (messages.length) {\r\n                                        messages = messages.map(function (message) {\r\n                                            return _.escape(message);\r\n                                        });\r\n\r\n                                        alert({\r\n                                            content: messages.join('<br>')\r\n                                        });\r\n                                    }\r\n                                },\r\n\r\n                                /**\r\n                                 * Show XHR response text\r\n                                 *\r\n                                 * @param {Object} jqXHR\r\n                                 */\r\n                                error: function (jqXHR) {\r\n                                    alert({\r\n                                        content: _.escape(jqXHR.responseText)\r\n                                    });\r\n                                }\r\n                            });\r\n                        }\r\n                    },\r\n                    buttons: [{\r\n                        text: $t('Cancel'),\r\n                        class: 'action-secondary action-dismiss',\r\n\r\n                        /**\r\n                         * Click handler.\r\n                         */\r\n                        click: function (event) {\r\n                            this.closeModal(event);\r\n                        }\r\n                    }, {\r\n                        text: $t('Login as Customer'),\r\n                        class: 'action-primary action-accept',\r\n\r\n                        /**\r\n                         * Click handler.\r\n                         */\r\n                        click: function (event) {\r\n                            this.closeModal(event, true);\r\n                        }\r\n                    }]\r\n                });\r\n\r\n                return false;\r\n            };\r\n        }\r\n    });\r\n});\r\n","Magento_LoginAsCustomerAssistance/js/not-allowed-popup.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function (Component, confirm, $t) {\r\n\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        /**\r\n         * Initialize Component\r\n         */\r\n        initialize: function () {\r\n            var self = this,\r\n                content;\r\n\r\n            this._super();\r\n\r\n            content = '<div class=\"message message-warning\">' + self.content + '</div>';\r\n\r\n            /**\r\n             * Not Allowed popup\r\n             *\r\n             * @returns {Boolean}\r\n             */\r\n            window.lacNotAllowedPopup = function () {\r\n                confirm({\r\n                    title: self.title,\r\n                    content: content,\r\n                    modalClass: 'confirm lac-confirm',\r\n                    buttons: [\r\n                        {\r\n                            text: $t('Close'),\r\n                            class: 'action-secondary action-dismiss',\r\n\r\n                            /**\r\n                             * Click handler.\r\n                             */\r\n                            click: function (event) {\r\n                                this.closeModal(event);\r\n                            }\r\n                        }\r\n                    ]\r\n                });\r\n\r\n                return false;\r\n            };\r\n        }\r\n    });\r\n});\r\n","Magento_Marketplace/default.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (configFromPage) {\r\n        var url = configFromPage.url;\r\n\r\n        $.ajax({\r\n            method: 'GET',\r\n            url: url\r\n        }).done(function (data) {\r\n            $('div[data-role=partners-block]').html(data);\r\n        });\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/container.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'jquery'\r\n], function (Element, $) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            containerSelector: '.media-gallery-container',\r\n            masonryComponentPath: 'media_gallery_listing.media_gallery_listing.media_gallery_columns',\r\n            modules: {\r\n                masonry: '${ $.masonryComponentPath }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            $(this.containerSelector).applyBindings();\r\n\r\n            return this;\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/image-uploader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_Ui/js/lib/validation/validator',\r\n    'mage/translate',\r\n    'jquery/file-uploader'\r\n], function (Component, $, _, validator, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            imageUploadInputSelector: '#image-uploader-form',\r\n            directoriesPath: 'media_gallery_listing.media_gallery_listing.media_gallery_directories',\r\n            actionsPath: 'media_gallery_listing.media_gallery_listing.media_gallery_columns.thumbnail_url',\r\n            messagesPath: 'media_gallery_listing.media_gallery_listing.messages',\r\n            imageUploadUrl: '',\r\n            acceptFileTypes: '',\r\n            allowedExtensions: '',\r\n            maxFileSize: '',\r\n            maxFileNameLength: 90,\r\n            loader: false,\r\n            modules: {\r\n                directories: '${ $.directoriesPath }',\r\n                actions: '${ $.actionsPath }',\r\n                mediaGridMessages: '${ $.messagesPath }',\r\n                sortBy: '${ $.sortByName }',\r\n                listingPaging: '${ $.listingPagingName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {exports}\r\n         */\r\n        initialize: function () {\r\n            this._super().observe(\r\n                [\r\n                    'loader',\r\n                    'count'\r\n                ]\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes file upload library\r\n         */\r\n        initializeFileUpload: function () {\r\n            $(this.imageUploadInputSelector).fileupload({\r\n                url: this.imageUploadUrl,\r\n                acceptFileTypes: this.acceptFileTypes,\r\n                allowedExtensions: this.allowedExtensions,\r\n                maxFileSize: this.maxFileSize,\r\n\r\n                /**\r\n                 * Extending the form data\r\n                 *\r\n                 * @param {Object} form\r\n                 * @returns {Array}\r\n                 */\r\n                formData: function (form) {\r\n                    return form.serializeArray().concat(\r\n                        [{\r\n                            name: 'isAjax',\r\n                            value: true\r\n                        },\r\n                        {\r\n                            name: 'form_key',\r\n                            value: window.FORM_KEY\r\n                        },\r\n                        {\r\n                            name: 'target_folder',\r\n                            value: this.getTargetFolder()\r\n                        }]\r\n                    );\r\n                }.bind(this),\r\n\r\n                add: function (e, data) {\r\n                    if (!this.isSizeExceeded(data.files[0]).passed) {\r\n                        this.addValidationErrorMessage(\r\n                            $t('Cannot upload \"%1\". File exceeds maximum file size limit.')\r\n                                .replace('%1', data.files[0].name)\r\n                        );\r\n\r\n                        return;\r\n                    } else if (!this.isFileNameLengthExceeded(data.files[0]).passed) {\r\n                        this.addValidationErrorMessage(\r\n                            $t('Cannot upload \"%1\". Filename is too long, must be 90 characters or less.')\r\n                                .replace('%1', data.files[0].name)\r\n                        );\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.showLoader();\r\n                    this.count(1);\r\n                    data.submit();\r\n                }.bind(this),\r\n\r\n                stop: function () {\r\n                    this.openNewestImages();\r\n                    this.mediaGridMessages().scheduleCleanup();\r\n                }.bind(this),\r\n\r\n                start: function () {\r\n                    this.mediaGridMessages().clear();\r\n                }.bind(this),\r\n\r\n                done: function (e, data) {\r\n                    var response = data.jqXHR.responseJSON;\r\n\r\n                    if (!response) {\r\n                        this.showErrorMessage(data, $t('Could not upload the asset.'));\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (!response.success) {\r\n                        this.showErrorMessage(data, response.message);\r\n\r\n                        return;\r\n                    }\r\n                    this.showSuccessMessage(data);\r\n                    this.hideLoader();\r\n                    this.actions().reloadGrid();\r\n                }.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Add error message after validation error.\r\n         *\r\n         * @param {String} message\r\n         */\r\n        addValidationErrorMessage: function (message) {\r\n            this.mediaGridMessages().add('error', message);\r\n\r\n            this.count() < 2 || this.mediaGridMessages().scheduleCleanup();\r\n        },\r\n\r\n        /**\r\n         * Checks if size of provided file exceeds\r\n         * defined in configuration size limits.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isSizeExceeded: function (file) {\r\n            return validator('validate-max-size', file.size, this.maxFileSize);\r\n        },\r\n\r\n        /**\r\n         * Checks if name length of provided file exceeds\r\n         * defined in configuration size limits.\r\n         *\r\n         * @param {Object} file - File to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isFileNameLengthExceeded: function (file) {\r\n            return validator('max_text_length', file.name, this.maxFileNameLength);\r\n        },\r\n\r\n        /**\r\n         * Go to recently uploaded images if at least one uploaded successfully\r\n         */\r\n        openNewestImages: function () {\r\n            this.mediaGridMessages().get().each(function (message) {\r\n                if (message.code === 'success') {\r\n                    this.actions().deselectImage();\r\n                    this.sortBy().selectDefaultOption();\r\n                    this.listingPaging().goFirst();\r\n\r\n                    return false;\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Show error meassages with file name.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} message\r\n         */\r\n        showErrorMessage: function (data, message) {\r\n            data.files.each(function (file) {\r\n                this.mediaGridMessages().add(\r\n                    'error',\r\n                    file.name + ': ' + $t(message)\r\n                );\r\n            }.bind(this));\r\n\r\n            this.hideLoader();\r\n        },\r\n\r\n        /**\r\n         * Show success message, and files counts\r\n         */\r\n        showSuccessMessage: function () {\r\n            this.mediaGridMessages().messages.remove(function (item) {\r\n                return item.code === 'success';\r\n            });\r\n            this.mediaGridMessages().add('success', $t('Assets have been successfully uploaded!'));\r\n            this.count(this.count() + 1);\r\n\r\n        },\r\n\r\n        /**\r\n         * Gets Media Gallery selected folder\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getTargetFolder: function () {\r\n\r\n            if (_.isUndefined(this.directories().activeNode()) ||\r\n                _.isNull(this.directories().activeNode())) {\r\n                return '/';\r\n            }\r\n\r\n            return this.directories().activeNode();\r\n        },\r\n\r\n        /**\r\n         * Shows spinner loader\r\n         */\r\n        showLoader: function () {\r\n            this.loader(true);\r\n        },\r\n\r\n        /**\r\n         * Hides spinner loader\r\n         */\r\n        hideLoader: function () {\r\n            this.loader(false);\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/action/deleteImages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/url',\r\n    'Magento_MediaGalleryUi/js/grid/messages',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'mage/translate'\r\n], function ($, _, urlBuilder, messages, confirmation, $t) {\r\n    'use strict';\r\n\r\n    return function (ids, deleteUrl, confirmationContent) {\r\n        var deferred = $.Deferred(),\r\n               title = $t('Delete assets'),\r\n               cancelText = $t('Cancel'),\r\n               deleteImageText = $t('Delete');\r\n\r\n        /**\r\n         * Send deletion request with redords ids\r\n         *\r\n         * @param {Array} recordIds\r\n         * @param {String} serviceUrl\r\n         */\r\n        function sendRequest(recordIds, serviceUrl) {\r\n\r\n            $.ajax({\r\n                type: 'POST',\r\n                url: serviceUrl,\r\n                dataType: 'json',\r\n                showLoader: true,\r\n                data: {\r\n                    'form_key': window.FORM_KEY,\r\n                    'ids': recordIds\r\n                },\r\n                context: this,\r\n\r\n                /**\r\n                 * Success handler for deleting image\r\n                 *\r\n                 * @param {Object} response\r\n                 */\r\n                success: function (response) {\r\n                    var message = !_.isUndefined(response.message) ? response.message : null;\r\n\r\n                    if (!response.success) {\r\n                        message = message || $t('There was an error on attempt to delete the images.');\r\n                        $(window).trigger('fileDeleted.enhancedMediaGallery', {\r\n                            reload: false,\r\n                            message: message,\r\n                            code: 'error'\r\n                        });\r\n\r\n                        deferred.reject(message);\r\n                    }\r\n\r\n                    message = message || $t('You have successfully removed the images.');\r\n                    $(window).trigger('fileDeleted.enhancedMediaGallery', {\r\n                        reload: true,\r\n                        message: message,\r\n                        code: 'success'\r\n                    });\r\n                    deferred.resolve(message);\r\n                },\r\n\r\n                /**\r\n                 * Error handler for deleting image\r\n                 *\r\n                 * @param {Object} response\r\n                 */\r\n                error: function (response) {\r\n                    var message;\r\n\r\n                    if (typeof response.responseJSON === 'undefined' ||\r\n                        typeof response.responseJSON.message === 'undefined'\r\n                    ) {\r\n                        message = $t('There was an error on attempt to delete the image.');\r\n                    } else {\r\n                        message = response.responseJSON.message;\r\n                    }\r\n\r\n                    $(window).trigger('fileDeleted.enhancedMediaGallery', {\r\n                        reload: false,\r\n                        message: message,\r\n                        code: 'error'\r\n                    });\r\n                    deferred.reject(message);\r\n                }\r\n            });\r\n        }\r\n\r\n        confirmation({\r\n            title: title,\r\n            modalClass: 'media-gallery-delete-image-action',\r\n            content: confirmationContent,\r\n            buttons: [\r\n                {\r\n                    text: cancelText,\r\n                    class: 'action-secondary action-dismiss',\r\n\r\n                    /**\r\n                     * Close modal\r\n                     */\r\n                    click: function () {\r\n                        this.closeModal();\r\n                        deferred.resolve({\r\n                            status: 'canceled'\r\n                        });\r\n                    }\r\n                },\r\n                {\r\n                    text: deleteImageText,\r\n                    class: 'action-primary action-accept',\r\n\r\n                    /**\r\n                     * Delete Image and close modal\r\n                     */\r\n                    click: function () {\r\n                        sendRequest(ids, deleteUrl);\r\n                        this.closeModal();\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'Magento_MediaGalleryUi/js/action/getDetails',\r\n    'Magento_MediaGalleryUi/js/action/deleteImages',\r\n    'mage/translate'\r\n], function ($, _, getDetails, deleteImages, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Get information about image use\r\n         *\r\n         * @param {Array} recordsIds\r\n         * @param {String} imageDetailsUrl\r\n         * @param {String} deleteImageUrl\r\n         */\r\n        deleteImageAction: function (recordsIds, imageDetailsUrl, deleteImageUrl) {\r\n            var confirmationContent = $t('%1Are you sure you want to delete \"%2\" image(s)?')\r\n                .replace('%2', Object.keys(recordsIds).length),\r\n                deferred = $.Deferred();\r\n\r\n            getDetails(imageDetailsUrl, recordsIds).then(function (images) {\r\n                        confirmationContent = confirmationContent.replace(\r\n                            '%1',\r\n                            this.getRecordRelatedContentMessage(images) + ' '\r\n                        );\r\n                    }.bind(this)).fail(function () {\r\n                        confirmationContent = confirmationContent.replace('%1', '');\r\n                    }).always(function () {\r\n                        deleteImages(recordsIds, deleteImageUrl, confirmationContent).then(function (status) {\r\n                            deferred.resolve(status);\r\n                        }).fail(function (error) {\r\n                            deferred.reject(error);\r\n                        });\r\n                    });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Get information about image use\r\n         *\r\n         * @param {Object|String} images\r\n         * @return {String}\r\n         */\r\n        getRecordRelatedContentMessage: function (images) {\r\n            var usedInMessage = $t('The selected assets are used in the content of the following entities: '),\r\n                usedIn = {};\r\n\r\n            $.each(images, function (key, image) {\r\n                $.each(image.details, function (sectionIndex, section) {\r\n                    if (section.title === 'Used In' && _.isObject(section) && !_.isEmpty(section.value)) {\r\n                        $.each(section.value, function (entityTypeIndex, entityTypeData) {\r\n                            usedIn[entityTypeData.name] = entityTypeData.name in usedIn ?\r\n                                usedIn[entityTypeData.name] + entityTypeData.number :\r\n                                entityTypeData.number;\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (_.isEmpty(usedIn)) {\r\n                return '';\r\n            }\r\n\r\n            return usedInMessage + this.usedInObjectToString(usedIn);\r\n        },\r\n\r\n        /**\r\n         * Fromats usedIn object to string\r\n         *\r\n         * @param {Object} usedIn\r\n         * @return {String}\r\n         */\r\n        usedInObjectToString: function (usedIn) {\r\n            var entities = [];\r\n\r\n            $.each(usedIn, function (entityName, number) {\r\n                entities.push(entityName + '(' + number + ')');\r\n            });\r\n\r\n            return entities.join(', ') + '.';\r\n        }\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/action/getDetails.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    return function (imageDetailsUrl, imageIds) {\r\n        var deferred = $.Deferred(),\r\n            message;\r\n\r\n        $.ajax({\r\n            type: 'GET',\r\n            url: imageDetailsUrl,\r\n            dataType: 'json',\r\n            showLoader: true,\r\n            data: {\r\n                'ids': imageIds\r\n            },\r\n            context: this,\r\n\r\n            /**\r\n             * Resolve with image details if success, reject with response message othervise\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            success: function (response) {\r\n                if (response.success) {\r\n                    deferred.resolve(response.imageDetails);\r\n\r\n                    return;\r\n                }\r\n\r\n                deferred.reject(response.message);\r\n            },\r\n\r\n            /**\r\n             * Extract the message and reject\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n\r\n                if (typeof response.responseJSON === 'undefined' ||\r\n                    typeof response.responseJSON.message === 'undefined'\r\n                ) {\r\n                    message = $t('Could not retrieve image details.');\r\n                } else {\r\n                    message = response.responseJSON.message;\r\n                }\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/action/saveDetails.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    return function (saveImageDetailsUrl, data) {\r\n        var deferred = $.Deferred(),\r\n            message;\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: saveImageDetailsUrl,\r\n            dataType: 'json',\r\n            showLoader: true,\r\n            data: data,\r\n\r\n            /**\r\n             * Resolve with image details if success, reject with response message otherwise\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            success: function (response) {\r\n                if (response.success) {\r\n                    deferred.resolve(response.message);\r\n\r\n                    return;\r\n                }\r\n\r\n                deferred.reject(response.message);\r\n            },\r\n\r\n            /**\r\n             * Extract the message and reject\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n                if (typeof response.responseJSON === 'undefined' ||\r\n                    typeof response.responseJSON.message === 'undefined'\r\n                ) {\r\n                    message = $t('Could not save image details.');\r\n                } else {\r\n                    message = response.responseJSON.message;\r\n                }\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/directory/directories.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.g\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'Magento_Ui/js/modal/alert',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/prompt',\r\n    'Magento_MediaGalleryUi/js/directory/actions/createDirectory',\r\n    'Magento_MediaGalleryUi/js/directory/actions/deleteDirectory',\r\n    'mage/translate',\r\n    'validation'\r\n], function ($, Component, confirm, uiAlert, _, prompt, createDirectory, deleteDirectory, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            allowedActions: [],\r\n            directoryTreeSelector: '#media-gallery-directory-tree',\r\n            deleteButtonSelector: '#delete_folder',\r\n            createFolderButtonSelector: '#create_folder',\r\n            messageDelay: 5,\r\n            selectedFolder: null,\r\n            messagesName: 'media_gallery_listing.media_gallery_listing.messages',\r\n            modules: {\r\n                directoryTree: '${ $.parentName }.media_gallery_directories',\r\n                messages: '${ $.messagesName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes media gallery directories component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super().observe(['selectedFolder']);\r\n            this._addValidation();\r\n            this.initEvents();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n          * Initialize directories events\r\n          */\r\n        initEvents: function () {\r\n            $(this.deleteButtonSelector).on('delete_folder', function () {\r\n                this.deleteFolder();\r\n            }.bind(this));\r\n\r\n            $(this.createFolderButtonSelector).on('create_folder', function () {\r\n                this.createFolder();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Show confirmation popup and create folder based on user input\r\n         */\r\n        createFolder: function () {\r\n            this.getPrompt({\r\n                title: $t('New Folder Name:'),\r\n                content: '',\r\n                actions: {\r\n                    /**\r\n                     * Confirm action\r\n                     */\r\n                    confirm: function (folderName) {\r\n                        createDirectory(\r\n                            this.directoryTree().createDirectoryUrl,\r\n                            [this.getNewFolderPath(folderName)]\r\n                        ).then(function () {\r\n                            this.directoryTree().reloadJsTree().then(function () {\r\n                                this.directoryTree().locateNode(this.getNewFolderPath(folderName));\r\n                            }.bind(this));\r\n                        }.bind(this)).fail(function (error) {\r\n                            uiAlert({\r\n                                content: error\r\n                            });\r\n                        });\r\n                    }.bind(this)\r\n                },\r\n                buttons: [{\r\n                    text: $t('Cancel'),\r\n                    class: 'action-secondary action-dismiss',\r\n\r\n                    /**\r\n                     * Close modal\r\n                     */\r\n                    click: function () {\r\n                        this.closeModal();\r\n                    }\r\n                }, {\r\n                    text: $t('Confirm'),\r\n                    class: 'action-primary action-accept'\r\n                }]\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Return configured path for folder creation.\r\n         *\r\n         * @param {String} folderName\r\n         * @returns {String}\r\n         */\r\n        getNewFolderPath: function (folderName) {\r\n            if (_.isUndefined(this.selectedFolder()) || _.isNull(this.selectedFolder())) {\r\n                return folderName;\r\n            }\r\n\r\n            return this.selectedFolder() + '/' + folderName;\r\n        },\r\n\r\n        /**\r\n          * Return configured prompt with input field\r\n          */\r\n        getPrompt: function (data) {\r\n                prompt({\r\n                    title: $t(data.title),\r\n                    content:  $t(data.content),\r\n                    modalClass: 'media-gallery-folder-prompt',\r\n                    validation: true,\r\n                    validationRules: ['required-entry', 'validate-filename'],\r\n                    attributesField: {\r\n                        name: 'folder_name',\r\n                        'data-validate': '{required:true, validate-filename}',\r\n                        maxlength: '128'\r\n                    },\r\n                    attributesForm: {\r\n                        novalidate: 'novalidate',\r\n                        action: ''\r\n                    },\r\n                    context: this,\r\n                    actions: data.actions,\r\n                    buttons: data.buttons\r\n                });\r\n            },\r\n\r\n        /**\r\n          * Confirmation popup for delete folder action.\r\n          */\r\n        deleteFolder: function () {\r\n            confirm({\r\n                title: $t('Are you sure you want to delete this folder?'),\r\n                modalClass: 'delete-folder-confirmation-popup',\r\n                content: $t('The following folder is going to be deleted: %1')\r\n                    .replace('%1', this.selectedFolder()),\r\n                actions: {\r\n\r\n                    /**\r\n                      * Delete folder on button click\r\n                      */\r\n                    confirm: function () {\r\n                        deleteDirectory(\r\n                            this.directoryTree().deleteDirectoryUrl,\r\n                            this.selectedFolder()\r\n                        ).then(function () {\r\n                            this.directoryTree().removeNode();\r\n                            this.directoryTree().selectStorageRoot();\r\n                            $(window).trigger('folderDeleted.enhancedMediaGallery');\r\n                        }.bind(this)).fail(function (error) {\r\n                            uiAlert({\r\n                                content: error\r\n                            });\r\n                        });\r\n                    }.bind(this)\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set inactive all nodes, adds disable state to Delete Folder Button\r\n         */\r\n        setInActive: function () {\r\n            this.selectedFolder(null);\r\n            $(this.deleteButtonSelector).attr('disabled', true).addClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * Set active node, remove disable state from Delete Forlder button\r\n         *\r\n         * @param {String} folderId\r\n         */\r\n        setActive: function (folderId) {\r\n            if (!this.allowedActions.includes('delete_folder')) {\r\n                return;\r\n            }\r\n\r\n            this.selectedFolder(folderId);\r\n            $(this.deleteButtonSelector).prop('disabled', false).removeClass('disabled');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _addValidation: function () {\r\n            $.validator.addMethod(\r\n                'validate-filename', function (value) {\r\n                    return $.mage.isEmptyNoTrim(value) || /^[a-z0-9\\-\\_]+$/si.test(value);\r\n                },\r\n                $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), underscore (_) or hyphen (-) in this field. No spaces or other characters are allowed.')); //eslint-disable-line max-len\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/directory/directoryTree.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global Base64 */\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'uiLayout',\r\n    'underscore',\r\n    'Magento_MediaGalleryUi/js/directory/actions/createDirectory',\r\n    'jquery/jstree/jquery.jstree',\r\n    'Magento_Ui/js/lib/view/utils/async',\r\n    'Magento_MediaGalleryUi/js/directory/directories'\r\n], function ($, Component, layout, _, createDirectory) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            allowedActions: [],\r\n            filterChipsProvider: 'componentType = filters, ns = ${ $.ns }',\r\n            bookmarkProvider: 'componentType = bookmark, ns = ${ $.ns }',\r\n            directoryTreeSelector: '#media-gallery-directory-tree',\r\n            getDirectoryTreeUrl: 'media_gallery/directories/gettree',\r\n            createDirectoryUrl: 'media_gallery/directories/create',\r\n            deleteDirectoryUrl: 'media_gallery/directories/delete',\r\n            jsTreeReloaded: null,\r\n            modules: {\r\n                bookmarks: '${ $.bookmarkProvider }',\r\n                directories: '${ $.name }_directories',\r\n                filterChips: '${ $.filterChipsProvider }'\r\n            },\r\n            listens: {\r\n                '${ $.provider }:params.filters.path': 'updateSelectedDirectory'\r\n            },\r\n            viewConfig: [{\r\n                component: 'Magento_MediaGalleryUi/js/directory/directories',\r\n                name: '${ $.name }_directories',\r\n                allowedActions: '${ $.allowedActions }'\r\n            }]\r\n        },\r\n\r\n        /**\r\n         * Initializes media gallery directories component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super().observe(['activeNode']).initView();\r\n\r\n            $.async(\r\n                this.directoryTreeSelector,\r\n                this,\r\n                function () {\r\n                    this.initJsTreeEvents();\r\n                    this.renderDirectoryTree().then(function () {\r\n                        this.initEvents();\r\n                    }.bind(this));\r\n                }.bind(this)\r\n            );\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Render directory tree component.\r\n         */\r\n        renderDirectoryTree: function () {\r\n            return this.getJsonTree().then(function (data) {\r\n                this.createFolderIfNotExists(data).then(function (isFolderCreated) {\r\n                    if (isFolderCreated) {\r\n                        this.getJsonTree().then(function (newData) {\r\n                            this.createTree(newData);\r\n                        }.bind(this));\r\n                    } else {\r\n                        this.createTree(data);\r\n                    }\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Set jstree reloaded\r\n         *\r\n         * @param {Boolean} value\r\n         */\r\n        setJsTreeReloaded: function (value) {\r\n            this.jsTreeReloaded = value;\r\n        },\r\n\r\n        /**\r\n         * Create folder by provided current_tree_path param\r\n         *\r\n         * @param {Array} directories\r\n         */\r\n        createFolderIfNotExists: function (directories) {\r\n            var requestedDirectory = this.getRequestedDirectory(),\r\n                deferred = $.Deferred(),\r\n                pathArray;\r\n\r\n            if (_.isNull(requestedDirectory)) {\r\n                deferred.resolve(false);\r\n\r\n                return deferred.promise();\r\n            }\r\n\r\n            if (this.isDirectoryExist(directories, requestedDirectory)) {\r\n                deferred.resolve(false);\r\n\r\n                return deferred.promise();\r\n            }\r\n\r\n            pathArray = this.convertPathToPathsArray(requestedDirectory);\r\n\r\n            $.each(pathArray, function (i, val) {\r\n                if (this.isDirectoryExist(directories, val)) {\r\n                    pathArray.splice(i, 1);\r\n                }\r\n            }.bind(this));\r\n\r\n            createDirectory(\r\n                this.createDirectoryUrl,\r\n                pathArray\r\n            ).then(function () {\r\n                deferred.resolve(true);\r\n            });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Verify if directory exists in array\r\n         *\r\n         * @param {Array} directories\r\n         * @param {String} directoryId\r\n         */\r\n        isDirectoryExist: function (directories, directoryId) {\r\n            var found = false;\r\n\r\n            /**\r\n             * Recursive search in array\r\n             *\r\n             * @param {Array} data\r\n             * @param {String} id\r\n             */\r\n            function recurse(data, id) {\r\n                var i;\r\n\r\n                for (i = 0; i < data.length; i++) {\r\n                    if (data[i].id === id) {\r\n                        found = data[i];\r\n                        break;\r\n                    } else if (data[i].children && data[i].children.length) {\r\n                        recurse(data[i].children, id);\r\n                    }\r\n                }\r\n            }\r\n\r\n            recurse(directories, directoryId);\r\n\r\n            return found;\r\n        },\r\n\r\n        /**\r\n         * Convert path string to path array e.g 'path1/path2' -> ['path1', 'path1/path2']\r\n         *\r\n         * @param {String} path\r\n         */\r\n        convertPathToPathsArray: function (path) {\r\n            var pathsArray = [],\r\n                pathString = '',\r\n                paths = path.split('/');\r\n\r\n            $.each(paths, function (i, val) {\r\n                pathString += i >= 1 ? val : val + '/';\r\n                pathsArray.push(i >= 1 ? pathString : val);\r\n            });\r\n\r\n            return pathsArray;\r\n        },\r\n\r\n        /**\r\n         * Initialize child components\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initView: function () {\r\n            layout(this.viewConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Wait for condition then call provided callback\r\n         */\r\n        waitForCondition: function (condition, callback) {\r\n            if (condition()) {\r\n                setTimeout(function () {\r\n                    this.waitForCondition(condition, callback);\r\n                }.bind(this), 100);\r\n            } else {\r\n                callback();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove ability to multiple select on nodes\r\n         */\r\n        disableMultiselectBehavior: function () {\r\n            $.jstree.defaults.core.multiple = false;\r\n        },\r\n\r\n        /**\r\n         *  Handle jstree events\r\n         */\r\n        initEvents: function () {\r\n            this.disableMultiselectBehavior();\r\n\r\n            $(window).on('reload.MediaGallery', function () {\r\n                this.getJsonTree().then(function (data) {\r\n                    this.createFolderIfNotExists(data).then(function (isCreated) {\r\n                        if (isCreated) {\r\n                            this.renderDirectoryTree().then(function () {\r\n                                this.setJsTreeReloaded(true);\r\n                                this.initJsTreeEvents();\r\n                            }.bind(this));\r\n                        } else {\r\n                            this.updateSelectedDirectory();\r\n                        }\r\n                    }.bind(this));\r\n                }.bind(this));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Fire event for jstree component\r\n         */\r\n        initJsTreeEvents: function () {\r\n            $(this.directoryTreeSelector).on('select_node.jstree', function (element, data) {\r\n                this.setActiveNodeFilter(data.node.id);\r\n                this.setJsTreeReloaded(false);\r\n            }.bind(this));\r\n\r\n            $(this.directoryTreeSelector).on('loaded.jstree', function () {\r\n                this.updateSelectedDirectory();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Verify directory filter on init event, select folder per directory filter state\r\n         */\r\n        updateSelectedDirectory: function () {\r\n            var currentFilterPath = this.filterChips().filters.path,\r\n                requestedDirectory = this.getRequestedDirectory(),\r\n                currentTreePath;\r\n\r\n            if (_.isUndefined(currentFilterPath)) {\r\n                this.clearFiltersHandle();\r\n\r\n                return;\r\n            }\r\n\r\n            if (!_.isUndefined(this.bookmarks())) {\r\n                if (!_.size(this.bookmarks().getViewData(this.bookmarks().defaultIndex))) {\r\n                    setTimeout(function () {\r\n                        this.updateSelectedDirectory();\r\n                    }.bind(this), 500);\r\n\r\n                    return;\r\n                }\r\n            }\r\n            currentTreePath = this.isFilterApplied(currentFilterPath) || _.isNull(requestedDirectory) ?\r\n                currentFilterPath : requestedDirectory;\r\n\r\n            if (this.folderExistsInTree(currentTreePath)) {\r\n                this.locateNode(currentTreePath);\r\n            } else {\r\n                this.selectStorageRoot();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Verify if directory exists in folder tree\r\n         *\r\n         * @param {String} path\r\n         */\r\n        folderExistsInTree: function (path) {\r\n            if (!_.isUndefined(path)) {\r\n                return $(this.directoryTreeSelector).jstree('get_node', path);\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Get requested directory from MediabrowserUtility\r\n         *\r\n         * @returns {String|null}\r\n         */\r\n        getRequestedDirectory: function () {\r\n            return !_.isUndefined(window.MediabrowserUtility) && window.MediabrowserUtility.pathId !== '' ?\r\n                Base64.idDecode(window.MediabrowserUtility.pathId) : null;\r\n        },\r\n\r\n        /**\r\n         * Check if need to select directory by filters state\r\n         *\r\n         * @param {String} currentFilterPath\r\n         */\r\n        isFilterApplied: function (currentFilterPath) {\r\n            return !_.isUndefined(currentFilterPath) && currentFilterPath !== '';\r\n        },\r\n\r\n        /**\r\n         * Locate and higlight node in jstree by path id.\r\n         *\r\n         * @param {String} path\r\n         */\r\n        locateNode: function (path) {\r\n            if ($(this.directoryTreeSelector).jstree('is_selected', path)) {\r\n                return;\r\n            }\r\n            $(this.directoryTreeSelector).jstree('deselect_node',\r\n                $(this.directoryTreeSelector).jstree('get_selected')\r\n            );\r\n            $(this.directoryTreeSelector).jstree('open_node', path);\r\n            $(this.directoryTreeSelector).jstree('select_node', path, true);\r\n\r\n        },\r\n\r\n        /**\r\n         * Clear filters\r\n         */\r\n        clearFiltersHandle: function () {\r\n            $(this.directoryTreeSelector).jstree('deselect_all');\r\n            this.activeNode(null);\r\n            this.directories().setInActive();\r\n        },\r\n\r\n        /**\r\n         * Set active node filter, or deselect if the same node clicked\r\n         *\r\n         * @param {String} nodePath\r\n         */\r\n        setActiveNodeFilter: function (nodePath) {\r\n            if (this.activeNode() === nodePath && !this.jsTreeReloaded) {\r\n                this.selectStorageRoot();\r\n            } else {\r\n                this.selectFolder(nodePath);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove folders selection -> select storage root\r\n         */\r\n        selectStorageRoot: function () {\r\n            var filters = {},\r\n                applied = this.filterChips().get('applied');\r\n\r\n            $(this.directoryTreeSelector).jstree('deselect_all');\r\n\r\n            filters = $.extend(true, filters, applied);\r\n            delete filters.path;\r\n            this.filterChips().set('applied', filters);\r\n            this.activeNode(null);\r\n            this.waitForCondition(\r\n                function () {\r\n                    return _.isUndefined(this.directories());\r\n                }.bind(this),\r\n                function () {\r\n                    this.directories().setInActive();\r\n                }.bind(this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Set selected folder\r\n         *\r\n         * @param {String} path\r\n         */\r\n        selectFolder: function (path) {\r\n            this.activeNode(path);\r\n\r\n            this.waitForCondition(\r\n                function () {\r\n                    return _.isUndefined(this.directories());\r\n                }.bind(this),\r\n                function () {\r\n                    this.directories().setActive(path);\r\n                }.bind(this)\r\n            );\r\n\r\n            this.applyFilter(path);\r\n        },\r\n\r\n        /**\r\n         * Remove active node from directory tree, and select next\r\n         */\r\n        removeNode: function () {\r\n            $(this.directoryTreeSelector).jstree('delete_node',\r\n                $(this.directoryTreeSelector).jstree('get_selected')\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Apply folder filter by path\r\n         *\r\n         * @param {String} path\r\n         */\r\n        applyFilter: function (path) {\r\n            var filters = {},\r\n                applied = this.filterChips().get('applied');\r\n\r\n            filters = $.extend(true, filters, applied);\r\n            filters.path = path;\r\n            this.filterChips().set('applied', filters);\r\n        },\r\n\r\n        /**\r\n         * Reload jstree and update jstree events\r\n         */\r\n        reloadJsTree: function () {\r\n            var deferred = $.Deferred();\r\n\r\n            this.getJsonTree().then(function (data) {\r\n                $(this.directoryTreeSelector).jstree(true).settings.core.data = data;\r\n                $(this.directoryTreeSelector).jstree(true).refresh(false, true);\r\n                this.setJsTreeReloaded(true);\r\n                deferred.resolve();\r\n            }.bind(this));\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Get json data for jstree\r\n         */\r\n        getJsonTree: function () {\r\n            var deferred = $.Deferred();\r\n\r\n            $.ajax({\r\n                url: this.getDirectoryTreeUrl,\r\n                type: 'GET',\r\n                dataType: 'json',\r\n\r\n                /**\r\n                 * Success handler for request\r\n                 *\r\n                 * @param {Object} data\r\n                 */\r\n                success: function (data) {\r\n                    deferred.resolve(data);\r\n                },\r\n\r\n                /**\r\n                 * Error handler for request\r\n                 *\r\n                 * @param {Object} jqXHR\r\n                 * @param {String} textStatus\r\n                 */\r\n                error: function (jqXHR, textStatus) {\r\n                    deferred.reject();\r\n                    throw textStatus;\r\n                }\r\n            });\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Initialize directory tree\r\n         *\r\n         * @param {Array} data\r\n         */\r\n        createTree: function (data) {\r\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            $(this.directoryTreeSelector).jstree({\r\n                plugins: [],\r\n                checkbox: {\r\n                    three_state: false,\r\n                    cascade: ''\r\n                },\r\n                core: {\r\n                    data: data,\r\n                    check_callback: true,\r\n                    themes: {\r\n                        dots: false\r\n                    }\r\n                }\r\n            });\r\n            // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/directory/actions/createDirectory.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    return function (createFolderUrl, paths) {\r\n        var deferred = $.Deferred(),\r\n            message,\r\n            data = {\r\n                paths: paths\r\n            };\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: createFolderUrl,\r\n            dataType: 'json',\r\n            showLoader: true,\r\n            data: data,\r\n            context: this,\r\n\r\n            /**\r\n             * Resolve  if success, reject with response message othervise\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            success: function (response) {\r\n                if (response.success) {\r\n                    deferred.resolve(response.message);\r\n\r\n                    return;\r\n                }\r\n\r\n                deferred.reject(response.message);\r\n            },\r\n\r\n            /**\r\n             * Extract the message and reject\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n\r\n                if (typeof response.responseJSON === 'undefined' ||\r\n                    typeof response.responseJSON.message === 'undefined'\r\n                ) {\r\n                    message = $t('Could not create the directory.');\r\n                } else {\r\n                    message = response.responseJSON.message;\r\n                }\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/directory/actions/deleteDirectory.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    return function (deleteFolderUrl, path) {\r\n        var deferred = $.Deferred(),\r\n            message;\r\n\r\n        $.ajax({\r\n            type: 'POST',\r\n            url: deleteFolderUrl,\r\n            dataType: 'json',\r\n            showLoader: true,\r\n            data: {\r\n                path: path\r\n            },\r\n            context: this,\r\n\r\n            /**\r\n             * Resolve  if delete folder success, reject with response message othervise\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            success: function (response) {\r\n                if (response.success) {\r\n                    deferred.resolve(response.message);\r\n\r\n                    return;\r\n                }\r\n\r\n                deferred.reject(response.message);\r\n            },\r\n\r\n            /**\r\n             * Extract the message and reject\r\n             *\r\n             * @param {Object} response\r\n             */\r\n            error: function (response) {\r\n\r\n                if (typeof response.responseJSON === 'undefined' ||\r\n                    typeof response.responseJSON.message === 'undefined'\r\n                ) {\r\n                    message = $t('Could not delete the directory.');\r\n                } else {\r\n                    message = response.responseJSON.message;\r\n                }\r\n                deferred.reject(message);\r\n            }\r\n        });\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/grid/masonry.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/masonry',\r\n    'jquery'\r\n], function (Masonry, $) {\r\n    'use strict';\r\n\r\n    return Masonry.extend({\r\n        defaults: {\r\n            modules: {\r\n                provider: '${ $.provider }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init component\r\n         *\r\n         * @return {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.initEvents();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize events\r\n         */\r\n        initEvents: function () {\r\n            $(window).on('folderDeleted.enhancedMediaGallery', this.reloadGrid.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Reload grid\r\n         */\r\n        reloadGrid: function () {\r\n            var provider = this.provider(),\r\n                dataStorage = provider.storage();\r\n\r\n            dataStorage.clearRequests();\r\n            provider.reload();\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/grid/messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiElement',\r\n    'escaper'\r\n], function (Element, escaper) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            template: 'Magento_MediaGalleryUi/grid/messages',\r\n            messageDelay: 5,\r\n            messages: [],\r\n            allowedTags: ['div', 'span', 'b', 'strong', 'i', 'em', 'u', 'a']\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'messages'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Get messages\r\n         *\r\n         * @returns {Array}\r\n         */\r\n        get: function () {\r\n            return this.messages();\r\n        },\r\n\r\n        /**\r\n         * Add message\r\n         *\r\n         * @param {String} type\r\n         * @param {String} message\r\n         */\r\n        add: function (type, message) {\r\n            this.messages.push({\r\n                code: type,\r\n                message: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Clear messages\r\n         */\r\n        clear: function () {\r\n            this.messages.removeAll();\r\n        },\r\n\r\n        /**\r\n         * Schedule message cleanup\r\n         *\r\n         * @param {Number} delay\r\n         */\r\n        scheduleCleanup: function (delay) {\r\n            // eslint-disable-next-line no-unused-vars\r\n            var timerId;\r\n\r\n            delay = delay || this.messageDelay;\r\n\r\n            // eslint-disable-next-line no-unused-vars\r\n            timerId = setTimeout(function () {\r\n                clearTimeout(timerId);\r\n                this.clear();\r\n            }.bind(this), Number(delay) * 1000);\r\n        },\r\n\r\n        /**\r\n         * Prepare the given message to be rendered as HTML\r\n         *\r\n         * @param {String} message\r\n         * @return {String}\r\n         */\r\n        prepareMessageUnsanitizedHtml: function (message) {\r\n            return escaper.escapeHtml(message, this.allowedTags);\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/grid/sortBy.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/sortBy'\r\n], function (Element) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            columnIndexMap: {}\r\n        },\r\n\r\n        /**\r\n         * Prepared sort order options\r\n         */\r\n        preparedOptions: function (columns) {\r\n            var index = 0,\r\n                sortBy;\r\n\r\n            if (columns && columns.length > 0) {\r\n                columns.map(function (column) {\r\n                    if (column.sortable === true) {\r\n                        sortBy = column['sort_by'] || {};\r\n\r\n                        if (sortBy.excluded) {\r\n                            return;\r\n                        }\r\n\r\n                        this.options.push({\r\n                            value: column.index,\r\n                            label: column.label,\r\n                            sortByField: sortBy.field,\r\n                            sortDirection: sortBy.direction\r\n                        });\r\n\r\n                        this.columnIndexMap[column.index] = index++;\r\n\r\n                        this.isVisible(true);\r\n                    } else {\r\n                        this.isVisible(false);\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Apply changes\r\n         */\r\n        applyChanges: function () {\r\n            var column = this.getColumn(this.selectedOption());\r\n\r\n            this.applied({\r\n                field: column.sortByField || this.selectedOption(),\r\n                direction: column.sortDirection || this.sorting\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Get column by index\r\n         *\r\n         * @param {String} optionIndex\r\n         * @returns {Object}\r\n         */\r\n        getColumn: function (optionIndex) {\r\n            return this.options[this.columnIndexMap[optionIndex]];\r\n        },\r\n\r\n        /**\r\n         * Select default option\r\n         */\r\n        selectDefaultOption: function () {\r\n            this.selectedOption(this.options[0].value);\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/grid/columns/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'uiLayout',\r\n    'underscore'\r\n], function ($, Column, layout, _) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_MediaGalleryUi/grid/columns/image',\r\n            messageContentSelector: 'ul.messages',\r\n            mediaGalleryContainerSelector: '.media-gallery-container',\r\n            deleteImageUrl: 'media_gallery/image/delete',\r\n            addSelectedBtnSelector: '#add_selected',\r\n            deleteSelectedBtnSelector: '#delete_selected',\r\n            gridSelector: '[data-id=\"media-gallery-masonry-grid\"]',\r\n            selected: null,\r\n            allowedActions: [],\r\n            fields: {\r\n                id: 'id',\r\n                url: 'url',\r\n                alt: 'name'\r\n            },\r\n            modules: {\r\n                actions: '${ $.name }_actions',\r\n                provider: '${ $.provider }',\r\n                messages: '${ $.messagesName }',\r\n                massaction: '${ $.massactionComponentName }'\r\n            },\r\n            imports: {\r\n                activeDirectory: '${ $.mediaGalleryDirectoryComponent }:activeNode'\r\n            },\r\n            listens: {\r\n                activeDirectory: 'selectDirectoryHandle',\r\n                '${ $.massactionComponentName }:massActionMode': 'updateSelected'\r\n            },\r\n            viewConfig: [\r\n                {\r\n                    component: 'Magento_MediaGalleryUi/js/grid/columns/image/actions',\r\n                    name: '${ $.name }_actions',\r\n                    imageModelName: '${ $.name }',\r\n                    allowedActions: '${ $.allowedActions }'\r\n                }\r\n            ]\r\n        },\r\n\r\n        /**\r\n         * Initialize the component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.initView();\r\n            $(window).on('fileDeleted.enhancedMediaGallery', this.reloadMediaGrid.bind(this));\r\n            $(window).on('reload.MediaGallery', this.reloadGrid.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init observable variables\r\n         * @return {Object}\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .observe([\r\n                    'selected'\r\n                ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Is massaction mode active.\r\n         */\r\n        isMassActionMode: function () {\r\n            return this.massaction().massActionMode();\r\n        },\r\n\r\n        /**\r\n         * Returns url to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getUrl: function (record) {\r\n            return record[this.fields.url];\r\n        },\r\n\r\n        /**\r\n         * Returns id to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Number}\r\n         */\r\n        getId: function (record) {\r\n            return record[this.fields.id];\r\n        },\r\n\r\n        /**\r\n         * Update selected items per massaction mode.\r\n         */\r\n        updateSelected: function () {\r\n            this.selected({});\r\n            this.hideAddSelectedAndDeleteButon();\r\n        },\r\n\r\n        /**\r\n         * Returns name to given record.\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {String}\r\n         */\r\n        getImageAlt: function (record) {\r\n            return record[this.fields.alt];\r\n        },\r\n\r\n        /**\r\n         * Check if the record is currently selected\r\n         *\r\n         * @param {Object} record - Data to be preprocessed.\r\n         * @returns {Boolean}\r\n         */\r\n        isSelected: function (record) {\r\n            if (_.isNull(this.selected())) {\r\n                return false;\r\n            }\r\n\r\n            if (this.massaction().massActionMode()) {\r\n                return this.selected()[record.id];\r\n            }\r\n\r\n            return this.getId(this.selected()) === this.getId(record);\r\n        },\r\n\r\n        /**\r\n         * Click on image\r\n         *\r\n         * @param {Object} record\r\n         * @param {Boolean} collapsibleOpened\r\n         */\r\n        clickOnImage: function (record, collapsibleOpened) {\r\n            if (!collapsibleOpened) {\r\n                this.select(record);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Click on three-dots\r\n         *\r\n         * @param {Object} record\r\n         * @param {Boolean} collapsibleOpened\r\n         */\r\n        clickOnThreeDots: function (record, collapsibleOpened) {\r\n            if (!this.isSelected(record) || collapsibleOpened) {\r\n                this.select(record);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle checkbox click.\r\n         */\r\n        checkboxClick: function (record) {\r\n            var items = this.selected();\r\n\r\n            if (this.selected()[record.id])  {\r\n                delete items[record.id];\r\n                this.selected(items);\r\n            } else {\r\n                items[record.id] = record.id;\r\n                this.selected(items);\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Set the record as selected\r\n         */\r\n        select: function (record) {\r\n            if (this.massaction().massActionMode()) {\r\n                return this.checkboxClick(record);\r\n            }\r\n\r\n            this.isSelected(record) ? this.selected(null) : this.selected(record);\r\n            this.toggleAddSelectedButton();\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Deselect the record\r\n         */\r\n        deselectImage: function () {\r\n            this.selected(null);\r\n            this.toggleAddSelectedButton();\r\n        },\r\n\r\n        /**\r\n         * Get the selected record\r\n         * @returns {Object}\r\n         */\r\n        getSelected: function () {\r\n            return this.selected();\r\n        },\r\n\r\n        /**\r\n         * Initialize child components\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initView: function () {\r\n            layout(this.viewConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Toggle add selected button\r\n         */\r\n        toggleAddSelectedButton: function () {\r\n            if (this.selected() === null) {\r\n                this.hideAddSelectedAndDeleteButon();\r\n\r\n                return;\r\n            }\r\n\r\n            if (this.allowedActions.includes('insert')) {\r\n                $(this.addSelectedBtnSelector).removeClass('no-display');\r\n            }\r\n\r\n            if (this.allowedActions.includes('delete')) {\r\n                $(this.deleteSelectedBtnSelector).removeClass('no-display');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hide add selected and Delete button\r\n         */\r\n        hideAddSelectedAndDeleteButon: function () {\r\n            $(this.addSelectedBtnSelector).addClass('no-display');\r\n            $(this.deleteSelectedBtnSelector).addClass('no-display');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.event} e\r\n         * @param {Object} data\r\n         */\r\n        reloadMediaGrid: function (e, data) {\r\n            if (data.reload) {\r\n                this.reloadGrid();\r\n            }\r\n\r\n            if (data.message && data.code) {\r\n                this.addMessage(data.code, data.message);\r\n            }\r\n            this.hideAddSelectedAndDeleteButon();\r\n        },\r\n\r\n        /**\r\n         * Reload grid\r\n         */\r\n        reloadGrid: function () {\r\n            var provider = this.provider(),\r\n                dataStorage = provider.storage();\r\n\r\n            dataStorage.clearRequests();\r\n            provider.reload();\r\n        },\r\n\r\n        /**\r\n         * Add message\r\n         *\r\n         * @param {String} code\r\n         * @param {String} message\r\n         */\r\n        addMessage: function (code, message) {\r\n            this.messages().add(code, message);\r\n            this.closeContextMenu();\r\n            this.scrollToMessageContent();\r\n            this.messages().scheduleCleanup();\r\n        },\r\n\r\n        /**\r\n         * Listener to select directory event\r\n         *\r\n         * @param {String} path\r\n         */\r\n        selectDirectoryHandle: function (path) {\r\n            if (this.selected() &&\r\n                this.selected().directory !== path  &&\r\n                !this.massaction().massActionMode()) {\r\n                this.deselectImage();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Action to close the context menu in media gallery.\r\n         */\r\n        closeContextMenu: function () {\r\n            $(this.gridSelector).trigger('click');\r\n        },\r\n\r\n        /**\r\n         * Scroll to the top of media gallery page\r\n         */\r\n        scrollToMessageContent: function () {\r\n            var scrollTargetElement = $(this.messageContentSelector),\r\n                scrollTargetContainer = $(this.mediaGalleryContainerSelector);\r\n\r\n            scrollTargetContainer.find(scrollTargetElement).get(0).scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'center',\r\n                inline: 'nearest'\r\n            });\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/grid/columns/image/actions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'uiComponent',\r\n    'Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation',\r\n    'Magento_MediaGalleryUi/js/grid/columns/image/insertImageAction',\r\n    'mage/translate',\r\n    'Magento_Ui/js/lib/view/utils/async'\r\n], function ($, _, Component, deleteImageWithDetailConfirmation, image, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_MediaGalleryUi/grid/columns/image/actions',\r\n            mediaGalleryImageDetailsName: 'mediaGalleryImageDetails',\r\n            mediaGalleryEditDetailsName: 'mediaGalleryEditDetails',\r\n            allowedActions: [],\r\n            actionsList: [\r\n                {\r\n                    name: 'image-details',\r\n                    title: $t('View Details'),\r\n                    classes: 'action-menu-item',\r\n                    handler: 'viewImageDetails'\r\n                },\r\n                {\r\n                    name: 'edit',\r\n                    title: $t('Edit'),\r\n                    classes: 'action-menu-item',\r\n                    handler: 'editImageDetails'\r\n                },\r\n                {\r\n                    name: 'delete',\r\n                    title: $t('Delete'),\r\n                    classes: 'action-menu-item media-gallery-delete-assets',\r\n                    handler: 'deleteImageAction'\r\n                }\r\n            ],\r\n            modules: {\r\n                imageModel: '${ $.imageModelName }',\r\n                mediaGalleryImageDetails: '${ $.mediaGalleryImageDetailsName }',\r\n                mediaGalleryEditDetails: '${ $.mediaGalleryEditDetailsName }'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize the component\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n            this.initEvents();\r\n\r\n            this.actionsList = this.actionsList.filter(function (item) {\r\n                return this.allowedActions.includes(item.name);\r\n            }.bind(this));\r\n\r\n            if (!this.allowedActions.includes('delete')) {\r\n                $.async('.media-gallery-delete-assets', function () {\r\n                    $('.media-gallery-delete-assets').off('click').addClass('action-disabled');\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize image action events\r\n         */\r\n        initEvents: function () {\r\n            $(this.imageModel().addSelectedBtnSelector).on('click', function () {\r\n                image.insertImage(\r\n                    this.imageModel().getSelected(),\r\n                    {\r\n                        onInsertUrl: this.imageModel().onInsertUrl,\r\n                        storeId: this.imageModel().storeId\r\n                    }\r\n                );\r\n            }.bind(this));\r\n            $(this.imageModel().deleteSelectedBtnSelector).on('click', function () {\r\n                this.deleteImageAction(this.imageModel().selected());\r\n            }.bind(this));\r\n\r\n        },\r\n\r\n        /**\r\n         * Delete image action\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        deleteImageAction: function (record) {\r\n            var imageDetailsUrl = this.mediaGalleryImageDetails().imageDetailsUrl,\r\n                deleteImageUrl = this.imageModel().deleteImageUrl;\r\n\r\n            deleteImageWithDetailConfirmation.deleteImageAction([record.id], imageDetailsUrl, deleteImageUrl);\r\n        },\r\n\r\n        /**\r\n         * View image details\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        viewImageDetails: function (record) {\r\n            var recordId = this.imageModel().getId(record);\r\n\r\n            this.mediaGalleryImageDetails().showImageDetailsById(recordId);\r\n        },\r\n\r\n        /**\r\n         * Edit image details\r\n         *\r\n         * @param {Object} record\r\n         */\r\n        editImageDetails: function (record) {\r\n            var recordId = this.imageModel().getId(record);\r\n\r\n            this.mediaGalleryEditDetails().showEditDetailsPanel(recordId);\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/grid/columns/image/insertImageAction.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* global FORM_KEY, tinyMceEditors */\r\ndefine([\r\n    'jquery',\r\n    'wysiwygAdapter',\r\n    'underscore',\r\n    'mage/translate'\r\n], function ($, wysiwyg, _, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Insert provided image in wysiwyg if enabled, or widget\r\n         *\r\n         * @param {Object} record\r\n         * @param {Object} config\r\n         * @returns {Boolean}\r\n         */\r\n        insertImage: function (record, config) {\r\n            var targetElement, forceStaticPath;\r\n\r\n            if (record === null) {\r\n                return false;\r\n            }\r\n            targetElement = this.getTargetElement(window.MediabrowserUtility.targetElementId);\r\n\r\n            if (!targetElement.length) {\r\n                window.MediabrowserUtility.closeDialog();\r\n                throw $t('Target element not found for content update');\r\n            }\r\n\r\n            forceStaticPath = typeof targetElement !== 'function' && targetElement.data('force_static_path') ? 1 : 0;\r\n\r\n            $.ajax({\r\n                url: config.onInsertUrl,\r\n                data: {\r\n                    filename: record['encoded_id'],\r\n                    'store_id': config.storeId,\r\n                    'as_is': typeof targetElement !== 'function' && targetElement.is('textarea') ? 1 : 0,\r\n                    'force_static_path': forceStaticPath,\r\n                    'form_key': FORM_KEY\r\n                },\r\n                context: this,\r\n                showLoader: true\r\n            }).done($.proxy(function (data) {\r\n                if (typeof targetElement === 'function') {\r\n                    targetElement(data.content, {text: record['title']});\r\n                } else if (targetElement.is('textarea')) {\r\n                    this.insertAtCursor(targetElement.get(0), data.content);\r\n                    targetElement.focus();\r\n                    $(targetElement).trigger('change');\r\n                } else {\r\n                    targetElement.val(data.content)\r\n                        .data('size', data.size)\r\n                        .data('mime-type', data.type)\r\n                        .trigger('change');\r\n                }\r\n            }, this));\r\n            window.MediabrowserUtility.closeDialog();\r\n\r\n            if (typeof targetElement !== 'function') {\r\n                targetElement.focus();\r\n                $(targetElement).trigger('change');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Insert image to target instance.\r\n         *\r\n         * @param {Object} element\r\n         * @param {*} value\r\n         */\r\n        insertAtCursor: function (element, value) {\r\n            var sel, startPos, endPos, scrollTop;\r\n\r\n            if ('selection' in document) {\r\n                //For browsers like Internet Explorer\r\n                element.focus();\r\n                sel = document.selection.createRange();\r\n                sel.text = value;\r\n                element.focus();\r\n            } else if (element.selectionStart || element.selectionStart == '0') { //eslint-disable-line eqeqeq\r\n                //For browsers like Firefox and Webkit based\r\n                startPos = element.selectionStart;\r\n                endPos = element.selectionEnd;\r\n                scrollTop = element.scrollTop;\r\n                element.value = element.value.substring(0, startPos) + value +\r\n                    element.value.substring(startPos, endPos) + element.value.substring(endPos, element.value.length);\r\n                element.focus();\r\n                element.selectionStart = startPos + value.length;\r\n                element.selectionEnd = startPos + value.length + element.value.substring(startPos, endPos).length;\r\n                element.scrollTop = scrollTop;\r\n            } else {\r\n                element.value += value;\r\n                element.focus();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Return opener Window object if it exists, not closed and editor is active\r\n         *\r\n         * @param {String} targetElementId\r\n         * return {Object|null}\r\n         */\r\n        getMediaBrowserOpener: function (targetElementId) {\r\n            if (!_.isUndefined(wysiwyg) && wysiwyg.get(targetElementId) && !_.isUndefined(tinyMceEditors)) {\r\n                return tinyMceEditors.get(targetElementId).getMediaBrowserOpener();\r\n            }\r\n\r\n            return null;\r\n        },\r\n\r\n        /**\r\n         * Get target element\r\n         *\r\n         * @param {String} targetElementId\r\n         * @returns {*|n.fn.init|jQuery|HTMLElement}\r\n         */\r\n        getTargetElement: function (targetElementId) {\r\n\r\n            if (!_.isUndefined(wysiwyg) && wysiwyg.get(targetElementId)) {\r\n                return this.getMediaBrowserOpener(targetElementId) || window;\r\n            }\r\n\r\n            return $('#' + targetElementId);\r\n        }\r\n    };\r\n});\r\n","Magento_MediaGalleryUi/js/grid/massaction/massactions.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_MediaGalleryUi/js/action/deleteImageWithDetailConfirmation',\r\n    'uiLayout',\r\n    'underscore',\r\n    'Magento_Ui/js/modal/alert',\r\n    'mage/translate'\r\n], function ($, Component, DeleteImages, Layout, _, uiAlert, $t) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            allowedActions: [],\r\n            deleteButtonSelector: '#delete_selected_massaction',\r\n            deleteImagesSelector: '#delete_massaction',\r\n            mediaGalleryImageDetailsName: 'mediaGalleryImageDetails',\r\n            modules: {\r\n                massactionView: '${ $.name }_view',\r\n                imageModel: '${ $.imageModelName }',\r\n                mediaGalleryImageDetails: '${ $.mediaGalleryImageDetailsName }'\r\n            },\r\n            viewConfig: [\r\n                {\r\n                    component: 'Magento_MediaGalleryUi/js/grid/massaction/massactionView',\r\n                    name: '${ $.name }_view'\r\n                }\r\n            ],\r\n            imports: {\r\n                imageItems: '${ $.mediaGalleryProvider }:data.items'\r\n            },\r\n            listens: {\r\n                imageItems: 'checkButtonVisibility'\r\n            },\r\n            exports: {\r\n                massActionMode: '${ $.name }_view:massActionMode'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes media gallery massaction component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super().observe([\r\n                'massActionMode'\r\n            ]);\r\n            this.initView();\r\n            this.initEvents();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize child components\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        initView: function () {\r\n            Layout(this.viewConfig);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initilize massactions events for media gallery grid.\r\n         */\r\n        initEvents: function () {\r\n            $(window).on('massAction.MediaGallery', function () {\r\n                if (this.massActionMode()) {\r\n                    return;\r\n                }\r\n                this.imageModel().selected(null);\r\n                this.massActionMode(true);\r\n                this.switchMode();\r\n            }.bind(this));\r\n\r\n            $(window).on('terminateMassAction.MediaGallery', function () {\r\n                if (!this.massActionMode()) {\r\n                    return;\r\n                }\r\n\r\n                this.massActionMode(false);\r\n                this.switchMode();\r\n                this.imageModel().updateSelected();\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Return total selected items.\r\n         */\r\n        getSelectedCount: function () {\r\n            if (this.massActionMode() && !_.isNull(this.imageModel().selected())) {\r\n                return Object.keys(this.imageModel().selected()).length;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        /**\r\n         * If images records less than one, disable \"delete images\" button\r\n         */\r\n        checkButtonVisibility: function () {\r\n            if (!this.allowedActions.includes('delete_assets')) {\r\n                return;\r\n            }\r\n\r\n            if (this.imageItems.length < 1) {\r\n                $(this.deleteImagesSelector).addClass('disabled');\r\n            } else {\r\n                $(this.deleteImagesSelector).removeClass('disabled');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Switch massaction per current event.\r\n         */\r\n        switchMode: function () {\r\n            this.massactionView().switchView();\r\n            this.handleDeleteAction();\r\n        },\r\n\r\n        /**\r\n         * Change Default  behavior of delete image to bulk deletion.\r\n         */\r\n        handleDeleteAction: function () {\r\n            if (this.massActionMode()) {\r\n                $(this.deleteButtonSelector).on('massDelete.MediaGallery', function () {\r\n                    if (this.getSelectedCount() < 1) {\r\n                        uiAlert({\r\n                            content: $t('You need to select at least one image')\r\n                        });\r\n\r\n                    } else {\r\n                        DeleteImages.deleteImageAction(\r\n                            this.imageModel().selected(),\r\n                            this.mediaGalleryImageDetails().imageDetailsUrl,\r\n                            this.imageModel().deleteImageUrl\r\n                        ).then(function (response) {\r\n                            if (response.status === 'canceled') {\r\n                                return;\r\n                            }\r\n                            $(window).trigger('terminateMassAction.MediaGallery');\r\n                        });\r\n                    }\r\n                }.bind(this));\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_MediaGalleryUi/js/grid/massaction/massactionView.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'mage/translate',\r\n    'text!Magento_MediaGalleryUi/template/grid/massactions/massactionButtons.html'\r\n], function ($, Component, $t, massactionButtons) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            gridSelector: '[data-id=\"media-gallery-masonry-grid\"]',\r\n            standAloneTitle: 'Manage Gallery',\r\n            slidePanelTitle: 'Media Gallery',\r\n            defaultTitle: null,\r\n            are: null,\r\n            standAloneArea: 'standalone',\r\n            slidepanelArea: 'slidepanel',\r\n            massactionButtonsSelector: '.massaction-buttons',\r\n            buttonsSelectorStandalone: '.page-actions-buttons',\r\n            buttonsSelectorSlidePanel: '.page-actions.floating-header',\r\n            buttons: '.page-main-actions :button',\r\n            massactionModeTitle: $t('Select Images to Delete')\r\n        },\r\n\r\n        /**\r\n         * Initializes media gallery massaction component.\r\n         *\r\n         * @returns {Sticky} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super().observe([\r\n                'massActionMode'\r\n            ]);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Switch massaction view state per active mode.\r\n         */\r\n        switchView: function () {\r\n            this.changePageTitle();\r\n            this.switchButtons();\r\n        },\r\n\r\n        /**\r\n         * Hide or show buttons per active mode.\r\n         */\r\n        switchButtons: function () {\r\n            if (this.massActionMode()) {\r\n                this.activateMassactionButtonView();\r\n            } else {\r\n                this.revertButtonsToDefaultView();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets buttons to default regular -mode view.\r\n         */\r\n        revertButtonsToDefaultView: function () {\r\n            $(this.buttons).removeClass('no-display');\r\n            $(this.massactionButtonsSelector).remove();\r\n        },\r\n\r\n        /**\r\n          * Activate mass action buttons view\r\n          */\r\n        activateMassactionButtonView: function () {\r\n            var buttonsContainer;\r\n\r\n            $(this.buttons).addClass('no-display');\r\n\r\n            buttonsContainer =  this.area === this.standAloneArea ?\r\n                this.buttonsSelectorStandalone :\r\n                this.buttonsSelectorSlidePanel;\r\n\r\n            $(buttonsContainer).append(massactionButtons);\r\n            $(this.massactionButtonsSelector).applyBindings();\r\n        },\r\n\r\n        /**\r\n         * Change page title per active mode.\r\n         */\r\n        changePageTitle: function () {\r\n            var title = $('h1:contains(' + this.standAloneTitle + ')'),\r\n                titleSelector;\r\n\r\n            if (title.length === 1)  {\r\n                titleSelector = title;\r\n                this.area = this.standAloneArea;\r\n            } else {\r\n                titleSelector = $('h1:contains(' + this.slidePanelTitle + ')');\r\n                this.area = this.slidepanelArea;\r\n            }\r\n\r\n            if (this.massActionMode()) {\r\n                this.defaultTitle = titleSelector.text();\r\n                titleSelector.text(this.massactionModeTitle);\r\n            } else {\r\n                titleSelector = $('h1:contains(' + this.massactionModeTitle + ')');\r\n                titleSelector.text(this.defaultTitle);\r\n            }\r\n        }\r\n    });\r\n});\r\n"}
}});
