require.config({"config": {
        "jsbuild":{"knockoutjs/knockout.js":"/*!\r\n * Knockout JavaScript library v3.5.1\r\n * (c) The Knockout.js team - http://knockoutjs.com/\r\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n */\r\n\r\n(function(){\r\n    var DEBUG=true;\r\n    (function(undefined){\r\n        // (0, eval)('this') is a robust way of getting a reference to the global object\r\n        // For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023\r\n        var window = this || (0, eval)('this'),\r\n            document = window['document'],\r\n            navigator = window['navigator'],\r\n            jQueryInstance = window[\"jQuery\"],\r\n            JSON = window[\"JSON\"];\r\n\r\n        if (!jQueryInstance && typeof jQuery !== \"undefined\") {\r\n            jQueryInstance = jQuery;\r\n        }\r\n        (function(factory) {\r\n            // Support three module loading scenarios\r\n            if (typeof define === 'function' && define['amd']) {\r\n                // [1] AMD anonymous module\r\n                define(['exports', 'require'], factory);\r\n            } else if (typeof exports === 'object' && typeof module === 'object') {\r\n                // [2] CommonJS/Node.js\r\n                factory(module['exports'] || exports);  // module.exports is for Node.js\r\n            } else {\r\n                // [3] No module loader (plain <script> tag) - put directly in global namespace\r\n                factory(window['ko'] = {});\r\n            }\r\n        }(function(koExports, amdRequire){\r\n// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n// In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\n            var ko = typeof koExports !== 'undefined' ? koExports : {};\r\n// Google Closure Compiler helpers (used only to make the minified file smaller)\r\n            ko.exportSymbol = function(koPath, object) {\r\n                var tokens = koPath.split(\".\");\r\n\r\n                // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n                // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n                var target = ko;\r\n\r\n                for (var i = 0; i < tokens.length - 1; i++)\r\n                    target = target[tokens[i]];\r\n                target[tokens[tokens.length - 1]] = object;\r\n            };\r\n            ko.exportProperty = function(owner, publicName, object) {\r\n                owner[publicName] = object;\r\n            };\r\n            ko.version = \"3.5.1\";\r\n\r\n            ko.exportSymbol('version', ko.version);\r\n// For any options that may affect various areas of Knockout and aren't directly associated with data binding.\r\n            ko.options = {\r\n                'deferUpdates': false,\r\n                'useOnlyNativeEvents': false,\r\n                'foreachHidesDestroyed': false\r\n            };\r\n\r\n//ko.exportSymbol('options', ko.options);   // 'options' isn't minified\r\n            ko.utils = (function () {\r\n                var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n                function objectForEach(obj, action) {\r\n                    for (var prop in obj) {\r\n                        if (hasOwnProperty.call(obj, prop)) {\r\n                            action(prop, obj[prop]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function extend(target, source) {\r\n                    if (source) {\r\n                        for(var prop in source) {\r\n                            if(hasOwnProperty.call(source, prop)) {\r\n                                target[prop] = source[prop];\r\n                            }\r\n                        }\r\n                    }\r\n                    return target;\r\n                }\r\n\r\n                function setPrototypeOf(obj, proto) {\r\n                    obj.__proto__ = proto;\r\n                    return obj;\r\n                }\r\n\r\n                var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n                var canUseSymbols = !DEBUG && typeof Symbol === 'function';\r\n\r\n                // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n                var knownEvents = {}, knownEventTypesByEventName = {};\r\n                var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\r\n                knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\r\n                knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\r\n                objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n                    if (knownEventsForType.length) {\r\n                        for (var i = 0, j = knownEventsForType.length; i < j; i++)\r\n                            knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n                    }\r\n                });\r\n                var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n                // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n                // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\r\n                // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n                // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n                var ieVersion = document && (function() {\r\n                    var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n                    // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n                    while (\r\n                        div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n                            iElems[0]\r\n                        ) {}\r\n                    return version > 4 ? version : undefined;\r\n                }());\r\n                var isIe6 = ieVersion === 6,\r\n                    isIe7 = ieVersion === 7;\r\n\r\n                function isClickOnCheckableElement(element, eventType) {\r\n                    if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n                    if (eventType.toLowerCase() != \"click\") return false;\r\n                    var inputType = element.type;\r\n                    return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n                }\r\n\r\n                // For details on the pattern for changing node classes\r\n                // see: https://github.com/knockout/knockout/issues/1597\r\n                var cssClassNameRegex = /\\S+/g;\r\n\r\n                var jQueryEventAttachName;\r\n\r\n                function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\r\n                    var addOrRemoveFn;\r\n                    if (classNames) {\r\n                        if (typeof node.classList === 'object') {\r\n                            addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\r\n                            ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                                addOrRemoveFn.call(node.classList, className);\r\n                            });\r\n                        } else if (typeof node.className['baseVal'] === 'string') {\r\n                            // SVG tag .classNames is an SVGAnimatedString instance\r\n                            toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\r\n                        } else {\r\n                            // node.className ought to be a string.\r\n                            toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\r\n                    // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\r\n                    var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\r\n                    ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                        ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n                    });\r\n                    obj[prop] = currentClassNames.join(\" \");\r\n                }\r\n\r\n                return {\r\n                    fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\r\n\r\n                    arrayForEach: function (array, action, actionOwner) {\r\n                        for (var i = 0, j = array.length; i < j; i++) {\r\n                            action.call(actionOwner, array[i], i, array);\r\n                        }\r\n                    },\r\n\r\n                    arrayIndexOf: typeof Array.prototype.indexOf == \"function\"\r\n                        ? function (array, item) {\r\n                            return Array.prototype.indexOf.call(array, item);\r\n                        }\r\n                        : function (array, item) {\r\n                            for (var i = 0, j = array.length; i < j; i++) {\r\n                                if (array[i] === item)\r\n                                    return i;\r\n                            }\r\n                            return -1;\r\n                        },\r\n\r\n                    arrayFirst: function (array, predicate, predicateOwner) {\r\n                        for (var i = 0, j = array.length; i < j; i++) {\r\n                            if (predicate.call(predicateOwner, array[i], i, array))\r\n                                return array[i];\r\n                        }\r\n                        return undefined;\r\n                    },\r\n\r\n                    arrayRemoveItem: function (array, itemToRemove) {\r\n                        var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n                        if (index > 0) {\r\n                            array.splice(index, 1);\r\n                        }\r\n                        else if (index === 0) {\r\n                            array.shift();\r\n                        }\r\n                    },\r\n\r\n                    arrayGetDistinctValues: function (array) {\r\n                        var result = [];\r\n                        if (array) {\r\n                            ko.utils.arrayForEach(array, function(item) {\r\n                                if (ko.utils.arrayIndexOf(result, item) < 0)\r\n                                    result.push(item);\r\n                            });\r\n                        }\r\n                        return result;\r\n                    },\r\n\r\n                    arrayMap: function (array, mapping, mappingOwner) {\r\n                        var result = [];\r\n                        if (array) {\r\n                            for (var i = 0, j = array.length; i < j; i++)\r\n                                result.push(mapping.call(mappingOwner, array[i], i));\r\n                        }\r\n                        return result;\r\n                    },\r\n\r\n                    arrayFilter: function (array, predicate, predicateOwner) {\r\n                        var result = [];\r\n                        if (array) {\r\n                            for (var i = 0, j = array.length; i < j; i++)\r\n                                if (predicate.call(predicateOwner, array[i], i))\r\n                                    result.push(array[i]);\r\n                        }\r\n                        return result;\r\n                    },\r\n\r\n                    arrayPushAll: function (array, valuesToPush) {\r\n                        if (valuesToPush instanceof Array)\r\n                            array.push.apply(array, valuesToPush);\r\n                        else\r\n                            for (var i = 0, j = valuesToPush.length; i < j; i++)\r\n                                array.push(valuesToPush[i]);\r\n                        return array;\r\n                    },\r\n\r\n                    addOrRemoveItem: function(array, value, included) {\r\n                        var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n                        if (existingEntryIndex < 0) {\r\n                            if (included)\r\n                                array.push(value);\r\n                        } else {\r\n                            if (!included)\r\n                                array.splice(existingEntryIndex, 1);\r\n                        }\r\n                    },\r\n\r\n                    canSetPrototype: canSetPrototype,\r\n\r\n                    extend: extend,\r\n\r\n                    setPrototypeOf: setPrototypeOf,\r\n\r\n                    setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n                    objectForEach: objectForEach,\r\n\r\n                    objectMap: function(source, mapping, mappingOwner) {\r\n                        if (!source)\r\n                            return source;\r\n                        var target = {};\r\n                        for (var prop in source) {\r\n                            if (hasOwnProperty.call(source, prop)) {\r\n                                target[prop] = mapping.call(mappingOwner, source[prop], prop, source);\r\n                            }\r\n                        }\r\n                        return target;\r\n                    },\r\n\r\n                    emptyDomNode: function (domNode) {\r\n                        while (domNode.firstChild) {\r\n                            ko.removeNode(domNode.firstChild);\r\n                        }\r\n                    },\r\n\r\n                    moveCleanedNodesToContainerElement: function(nodes) {\r\n                        // Ensure it's a real array, as we're about to reparent the nodes and\r\n                        // we don't want the underlying collection to change while we're doing that.\r\n                        var nodesArray = ko.utils.makeArray(nodes);\r\n                        var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\r\n\r\n                        var container = templateDocument.createElement('div');\r\n                        for (var i = 0, j = nodesArray.length; i < j; i++) {\r\n                            container.appendChild(ko.cleanNode(nodesArray[i]));\r\n                        }\r\n                        return container;\r\n                    },\r\n\r\n                    cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n                        for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n                            var clonedNode = nodesArray[i].cloneNode(true);\r\n                            newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n                        }\r\n                        return newNodesArray;\r\n                    },\r\n\r\n                    setDomNodeChildren: function (domNode, childNodes) {\r\n                        ko.utils.emptyDomNode(domNode);\r\n                        if (childNodes) {\r\n                            for (var i = 0, j = childNodes.length; i < j; i++)\r\n                                domNode.appendChild(childNodes[i]);\r\n                        }\r\n                    },\r\n\r\n                    replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n                        var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n                        if (nodesToReplaceArray.length > 0) {\r\n                            var insertionPoint = nodesToReplaceArray[0];\r\n                            var parent = insertionPoint.parentNode;\r\n                            for (var i = 0, j = newNodesArray.length; i < j; i++)\r\n                                parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                            for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\r\n                                ko.removeNode(nodesToReplaceArray[i]);\r\n                            }\r\n                        }\r\n                    },\r\n\r\n                    fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n                        // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n                        // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n                        // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n                        // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n                        // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n                        //\r\n                        // Rules:\r\n                        //   [A] Any leading nodes that have been removed should be ignored\r\n                        //       These most likely correspond to memoization nodes that were already removed during binding\r\n                        //       See https://github.com/knockout/knockout/pull/440\r\n                        //   [B] Any trailing nodes that have been remove should be ignored\r\n                        //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\r\n                        //       See https://github.com/knockout/knockout/pull/1903\r\n                        //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n                        //       and include any nodes that have been inserted among the previous collection\r\n\r\n                        if (continuousNodeArray.length) {\r\n                            // The parent node can be a virtual element; so get the real parent node\r\n                            parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\r\n\r\n                            // Rule [A]\r\n                            while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\r\n                                continuousNodeArray.splice(0, 1);\r\n\r\n                            // Rule [B]\r\n                            while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)\r\n                                continuousNodeArray.length--;\r\n\r\n                            // Rule [C]\r\n                            if (continuousNodeArray.length > 1) {\r\n                                var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                                // Replace with the actual new continuous node set\r\n                                continuousNodeArray.length = 0;\r\n                                while (current !== last) {\r\n                                    continuousNodeArray.push(current);\r\n                                    current = current.nextSibling;\r\n                                }\r\n                                continuousNodeArray.push(last);\r\n                            }\r\n                        }\r\n                        return continuousNodeArray;\r\n                    },\r\n\r\n                    setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n                        // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n                        if (ieVersion < 7)\r\n                            optionNode.setAttribute(\"selected\", isSelected);\r\n                        else\r\n                            optionNode.selected = isSelected;\r\n                    },\r\n\r\n                    stringTrim: function (string) {\r\n                        return string === null || string === undefined ? '' :\r\n                            string.trim ?\r\n                                string.trim() :\r\n                                string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\r\n                    },\r\n\r\n                    stringStartsWith: function (string, startsWith) {\r\n                        string = string || \"\";\r\n                        if (startsWith.length > string.length)\r\n                            return false;\r\n                        return string.substring(0, startsWith.length) === startsWith;\r\n                    },\r\n\r\n                    domNodeIsContainedBy: function (node, containedByNode) {\r\n                        if (node === containedByNode)\r\n                            return true;\r\n                        if (node.nodeType === 11)\r\n                            return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\r\n                        if (containedByNode.contains)\r\n                            return containedByNode.contains(node.nodeType !== 1 ? node.parentNode : node);\r\n                        if (containedByNode.compareDocumentPosition)\r\n                            return (containedByNode.compareDocumentPosition(node) & 16) == 16;\r\n                        while (node && node != containedByNode) {\r\n                            node = node.parentNode;\r\n                        }\r\n                        return !!node;\r\n                    },\r\n\r\n                    domNodeIsAttachedToDocument: function (node) {\r\n                        return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n                    },\r\n\r\n                    anyDomNodeIsAttachedToDocument: function(nodes) {\r\n                        return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n                    },\r\n\r\n                    tagNameLower: function(element) {\r\n                        // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\r\n                        // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\r\n                        // we don't need to do the .toLowerCase() as it will always be lower case anyway.\r\n                        return element && element.tagName && element.tagName.toLowerCase();\r\n                    },\r\n\r\n                    catchFunctionErrors: function (delegate) {\r\n                        return ko['onError'] ? function () {\r\n                            try {\r\n                                return delegate.apply(this, arguments);\r\n                            } catch (e) {\r\n                                ko['onError'] && ko['onError'](e);\r\n                                throw e;\r\n                            }\r\n                        } : delegate;\r\n                    },\r\n\r\n                    setTimeout: function (handler, timeout) {\r\n                        return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\r\n                    },\r\n\r\n                    deferError: function (error) {\r\n                        setTimeout(function () {\r\n                            ko['onError'] && ko['onError'](error);\r\n                            throw error;\r\n                        }, 0);\r\n                    },\r\n\r\n                    registerEventHandler: function (element, eventType, handler) {\r\n                        var wrappedHandler = ko.utils.catchFunctionErrors(handler);\r\n\r\n                        var mustUseAttachEvent = eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n                        if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\r\n                            if (!jQueryEventAttachName) {\r\n                                jQueryEventAttachName = (typeof jQueryInstance(element)['on'] == 'function') ? 'on' : 'bind';\r\n                            }\r\n                            jQueryInstance(element)[jQueryEventAttachName](eventType, wrappedHandler);\r\n                        } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\r\n                            element.addEventListener(eventType, wrappedHandler, false);\r\n                        else if (typeof element.attachEvent != \"undefined\") {\r\n                            var attachEventHandler = function (event) { wrappedHandler.call(element, event); },\r\n                                attachEventName = \"on\" + eventType;\r\n                            element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                            // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                            // so to avoid leaks, we have to remove them manually. See bug #856\r\n                            ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                                element.detachEvent(attachEventName, attachEventHandler);\r\n                            });\r\n                        } else\r\n                            throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\r\n                    },\r\n\r\n                    triggerEvent: function (element, eventType) {\r\n                        if (!(element && element.nodeType))\r\n                            throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n                        // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n                        // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n                        // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\r\n                        // In both cases, we'll use the click method instead.\r\n                        var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n                        if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\r\n                            jQueryInstance(element)['trigger'](eventType);\r\n                        } else if (typeof document.createEvent == \"function\") {\r\n                            if (typeof element.dispatchEvent == \"function\") {\r\n                                var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                                var event = document.createEvent(eventCategory);\r\n                                event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                                element.dispatchEvent(event);\r\n                            }\r\n                            else\r\n                                throw new Error(\"The supplied element doesn't support dispatchEvent\");\r\n                        } else if (useClickWorkaround && element.click) {\r\n                            element.click();\r\n                        } else if (typeof element.fireEvent != \"undefined\") {\r\n                            element.fireEvent(\"on\" + eventType);\r\n                        } else {\r\n                            throw new Error(\"Browser doesn't support triggering events\");\r\n                        }\r\n                    },\r\n\r\n                    unwrapObservable: function (value) {\r\n                        return ko.isObservable(value) ? value() : value;\r\n                    },\r\n\r\n                    peekObservable: function (value) {\r\n                        return ko.isObservable(value) ? value.peek() : value;\r\n                    },\r\n\r\n                    toggleDomNodeCssClass: toggleDomNodeCssClass,\r\n\r\n                    setTextContent: function(element, textContent) {\r\n                        var value = ko.utils.unwrapObservable(textContent);\r\n                        if ((value === null) || (value === undefined))\r\n                            value = \"\";\r\n\r\n                        // We need there to be exactly one child: a text node.\r\n                        // If there are no children, more than one, or if it's not a text node,\r\n                        // we'll clear everything and create a single text node.\r\n                        var innerTextNode = ko.virtualElements.firstChild(element);\r\n                        if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                            ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n                        } else {\r\n                            innerTextNode.data = value;\r\n                        }\r\n\r\n                        ko.utils.forceRefresh(element);\r\n                    },\r\n\r\n                    setElementName: function(element, name) {\r\n                        element.name = name;\r\n\r\n                        // Workaround IE 6/7 issue\r\n                        // - https://github.com/SteveSanderson/knockout/issues/197\r\n                        // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\r\n                        if (ieVersion <= 7) {\r\n                            try {\r\n                                var escapedName = element.name.replace(/[&<>'\"]/g, function(r){ return \"&#\" + r.charCodeAt(0) + \";\"; });\r\n                                element.mergeAttributes(document.createElement(\"<input name='\" + escapedName + \"'/>\"), false);\r\n                            }\r\n                            catch(e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\r\n                        }\r\n                    },\r\n\r\n                    forceRefresh: function(node) {\r\n                        // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n                        if (ieVersion >= 9) {\r\n                            // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                            var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                            if (elem.style)\r\n                                elem.style.zoom = elem.style.zoom;\r\n                        }\r\n                    },\r\n\r\n                    ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n                        // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n                        // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n                        // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\r\n                        if (ieVersion) {\r\n                            var originalWidth = selectElement.style.width;\r\n                            selectElement.style.width = 0;\r\n                            selectElement.style.width = originalWidth;\r\n                        }\r\n                    },\r\n\r\n                    range: function (min, max) {\r\n                        min = ko.utils.unwrapObservable(min);\r\n                        max = ko.utils.unwrapObservable(max);\r\n                        var result = [];\r\n                        for (var i = min; i <= max; i++)\r\n                            result.push(i);\r\n                        return result;\r\n                    },\r\n\r\n                    makeArray: function(arrayLikeObject) {\r\n                        var result = [];\r\n                        for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\r\n                            result.push(arrayLikeObject[i]);\r\n                        };\r\n                        return result;\r\n                    },\r\n\r\n                    createSymbolOrString: function(identifier) {\r\n                        return canUseSymbols ? Symbol(identifier) : identifier;\r\n                    },\r\n\r\n                    isIe6 : isIe6,\r\n                    isIe7 : isIe7,\r\n                    ieVersion : ieVersion,\r\n\r\n                    getFormFields: function(form, fieldName) {\r\n                        var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n                        var isMatchingField = (typeof fieldName == 'string')\r\n                            ? function(field) { return field.name === fieldName }\r\n                            : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n                        var matches = [];\r\n                        for (var i = fields.length - 1; i >= 0; i--) {\r\n                            if (isMatchingField(fields[i]))\r\n                                matches.push(fields[i]);\r\n                        };\r\n                        return matches;\r\n                    },\r\n\r\n                    parseJson: function (jsonString) {\r\n                        if (typeof jsonString == \"string\") {\r\n                            jsonString = ko.utils.stringTrim(jsonString);\r\n                            if (jsonString) {\r\n                                if (JSON && JSON.parse) // Use native parsing where available\r\n                                    return JSON.parse(jsonString);\r\n                                return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n\r\n                    stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n                        if (!JSON || !JSON.stringify)\r\n                            throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n                        return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n                    },\r\n\r\n                    postJson: function (urlOrForm, data, options) {\r\n                        options = options || {};\r\n                        var params = options['params'] || {};\r\n                        var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\r\n                        var url = urlOrForm;\r\n\r\n                        // If we were given a form, use its 'action' URL and pick out any requested field values\r\n                        if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                            var originalForm = urlOrForm;\r\n                            url = originalForm.action;\r\n                            for (var i = includeFields.length - 1; i >= 0; i--) {\r\n                                var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                                for (var j = fields.length - 1; j >= 0; j--)\r\n                                    params[fields[j].name] = fields[j].value;\r\n                            }\r\n                        }\r\n\r\n                        data = ko.utils.unwrapObservable(data);\r\n                        var form = document.createElement(\"form\");\r\n                        form.style.display = \"none\";\r\n                        form.action = url;\r\n                        form.method = \"post\";\r\n                        for (var key in data) {\r\n                            // Since 'data' this is a model object, we include all properties including those inherited from its prototype\r\n                            var input = document.createElement(\"input\");\r\n                            input.type = \"hidden\";\r\n                            input.name = key;\r\n                            input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                            form.appendChild(input);\r\n                        }\r\n                        objectForEach(params, function(key, value) {\r\n                            var input = document.createElement(\"input\");\r\n                            input.type = \"hidden\";\r\n                            input.name = key;\r\n                            input.value = value;\r\n                            form.appendChild(input);\r\n                        });\r\n                        document.body.appendChild(form);\r\n                        options['submitter'] ? options['submitter'](form) : form.submit();\r\n                        setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n                    }\r\n                }\r\n            }());\r\n\r\n            ko.exportSymbol('utils', ko.utils);\r\n            ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\r\n            ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\r\n            ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\r\n            ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\r\n            ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\r\n            ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\r\n            ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\r\n            ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\r\n            ko.exportSymbol('utils.cloneNodes', ko.utils.cloneNodes);\r\n            ko.exportSymbol('utils.createSymbolOrString', ko.utils.createSymbolOrString);\r\n            ko.exportSymbol('utils.extend', ko.utils.extend);\r\n            ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\r\n            ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\r\n            ko.exportSymbol('utils.objectMap', ko.utils.objectMap);\r\n            ko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\r\n            ko.exportSymbol('utils.postJson', ko.utils.postJson);\r\n            ko.exportSymbol('utils.parseJson', ko.utils.parseJson);\r\n            ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\r\n            ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\r\n            ko.exportSymbol('utils.range', ko.utils.range);\r\n            ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\r\n            ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\r\n            ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\r\n            ko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\r\n            ko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\r\n            ko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\r\n            ko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\n            if (!Function.prototype['bind']) {\r\n                // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n                // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n                Function.prototype['bind'] = function (object) {\r\n                    var originalFunction = this;\r\n                    if (arguments.length === 1) {\r\n                        return function () {\r\n                            return originalFunction.apply(object, arguments);\r\n                        };\r\n                    } else {\r\n                        var partialArgs = Array.prototype.slice.call(arguments, 1);\r\n                        return function () {\r\n                            var args = partialArgs.slice(0);\r\n                            args.push.apply(args, arguments);\r\n                            return originalFunction.apply(object, args);\r\n                        };\r\n                    }\r\n                };\r\n            }\r\n\r\n            ko.utils.domData = new (function () {\r\n                var uniqueId = 0;\r\n                var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n                var dataStore = {};\r\n\r\n                var getDataForNode, clear;\r\n                if (!ko.utils.ieVersion) {\r\n                    // We considered using WeakMap, but it has a problem in IE 11 and Edge that prevents using\r\n                    // it cross-window, so instead we just store the data directly on the node.\r\n                    // See https://github.com/knockout/knockout/issues/2141\r\n                    getDataForNode = function (node, createIfNotFound) {\r\n                        var dataForNode = node[dataStoreKeyExpandoPropertyName];\r\n                        if (!dataForNode && createIfNotFound) {\r\n                            dataForNode = node[dataStoreKeyExpandoPropertyName] = {};\r\n                        }\r\n                        return dataForNode;\r\n                    };\r\n                    clear = function (node) {\r\n                        if (node[dataStoreKeyExpandoPropertyName]) {\r\n                            delete node[dataStoreKeyExpandoPropertyName];\r\n                            return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n                        }\r\n                        return false;\r\n                    };\r\n                } else {\r\n                    // Old IE versions have memory issues if you store objects on the node, so we use a\r\n                    // separate data storage and link to it from the node using a string key.\r\n                    getDataForNode = function (node, createIfNotFound) {\r\n                        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n                        var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\r\n                        if (!hasExistingDataStore) {\r\n                            if (!createIfNotFound)\r\n                                return undefined;\r\n                            dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n                            dataStore[dataStoreKey] = {};\r\n                        }\r\n                        return dataStore[dataStoreKey];\r\n                    };\r\n                    clear = function (node) {\r\n                        var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n                        if (dataStoreKey) {\r\n                            delete dataStore[dataStoreKey];\r\n                            node[dataStoreKeyExpandoPropertyName] = null;\r\n                            return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n                        }\r\n                        return false;\r\n                    };\r\n                }\r\n\r\n                return {\r\n                    get: function (node, key) {\r\n                        var dataForNode = getDataForNode(node, false);\r\n                        return dataForNode && dataForNode[key];\r\n                    },\r\n                    set: function (node, key, value) {\r\n                        // Make sure we don't actually create a new domData key if we are actually deleting a value\r\n                        var dataForNode = getDataForNode(node, value !== undefined /* createIfNotFound */);\r\n                        dataForNode && (dataForNode[key] = value);\r\n                    },\r\n                    getOrSet: function (node, key, value) {\r\n                        var dataForNode = getDataForNode(node, true /* createIfNotFound */);\r\n                        return dataForNode[key] || (dataForNode[key] = value);\r\n                    },\r\n                    clear: clear,\r\n\r\n                    nextKey: function () {\r\n                        return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('utils.domData', ko.utils.domData);\r\n            ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\n            ko.utils.domNodeDisposal = new (function () {\r\n                var domDataKey = ko.utils.domData.nextKey();\r\n                var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n                var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n                function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n                    var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n                    if ((allDisposeCallbacks === undefined) && createIfNotFound) {\r\n                        allDisposeCallbacks = [];\r\n                        ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n                    }\r\n                    return allDisposeCallbacks;\r\n                }\r\n                function destroyCallbacksCollection(node) {\r\n                    ko.utils.domData.set(node, domDataKey, undefined);\r\n                }\r\n\r\n                function cleanSingleNode(node) {\r\n                    // Run all the dispose callbacks\r\n                    var callbacks = getDisposeCallbacksCollection(node, false);\r\n                    if (callbacks) {\r\n                        callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n                        for (var i = 0; i < callbacks.length; i++)\r\n                            callbacks[i](node);\r\n                    }\r\n\r\n                    // Erase the DOM data\r\n                    ko.utils.domData.clear(node);\r\n\r\n                    // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n                    ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n                    // Clear any immediate-child comment nodes, as these wouldn't have been found by\r\n                    // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\r\n                    if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                        cleanNodesInList(node.childNodes, true/*onlyComments*/);\r\n                    }\r\n                }\r\n\r\n                function cleanNodesInList(nodeList, onlyComments) {\r\n                    var cleanedNodes = [], lastCleanedNode;\r\n                    for (var i = 0; i < nodeList.length; i++) {\r\n                        if (!onlyComments || nodeList[i].nodeType === 8) {\r\n                            cleanSingleNode(cleanedNodes[cleanedNodes.length] = lastCleanedNode = nodeList[i]);\r\n                            if (nodeList[i] !== lastCleanedNode) {\r\n                                while (i-- && ko.utils.arrayIndexOf(cleanedNodes, nodeList[i]) == -1) {}\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    addDisposeCallback : function(node, callback) {\r\n                        if (typeof callback != \"function\")\r\n                            throw new Error(\"Callback must be a function\");\r\n                        getDisposeCallbacksCollection(node, true).push(callback);\r\n                    },\r\n\r\n                    removeDisposeCallback : function(node, callback) {\r\n                        var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n                        if (callbacksCollection) {\r\n                            ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                            if (callbacksCollection.length == 0)\r\n                                destroyCallbacksCollection(node);\r\n                        }\r\n                    },\r\n\r\n                    cleanNode : function(node) {\r\n                        ko.dependencyDetection.ignore(function () {\r\n                            // First clean this node, where applicable\r\n                            if (cleanableNodeTypes[node.nodeType]) {\r\n                                cleanSingleNode(node);\r\n\r\n                                // ... then its descendants, where applicable\r\n                                if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                                    cleanNodesInList(node.getElementsByTagName(\"*\"));\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        return node;\r\n                    },\r\n\r\n                    removeNode : function(node) {\r\n                        ko.cleanNode(node);\r\n                        if (node.parentNode)\r\n                            node.parentNode.removeChild(node);\r\n                    },\r\n\r\n                    \"cleanExternalData\" : function (node) {\r\n                        // Special support for jQuery here because it's so commonly used.\r\n                        // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\r\n                        // so notify it to tear down any resources associated with the node & descendants here.\r\n                        if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\r\n                            jQueryInstance['cleanData']([node]);\r\n                    }\r\n                };\r\n            })();\r\n            ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\n            ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\n            ko.exportSymbol('cleanNode', ko.cleanNode);\r\n            ko.exportSymbol('removeNode', ko.removeNode);\r\n            ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\r\n            ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\r\n            ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\r\n            (function () {\r\n                var none = [0, \"\", \"\"],\r\n                    table = [1, \"<table>\", \"</table>\"],\r\n                    tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\r\n                    tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\r\n                    select = [1, \"<select multiple='multiple'>\", \"</select>\"],\r\n                    lookup = {\r\n                        'thead': table,\r\n                        'tbody': table,\r\n                        'tfoot': table,\r\n                        'tr': tbody,\r\n                        'td': tr,\r\n                        'th': tr,\r\n                        'option': select,\r\n                        'optgroup': select\r\n                    },\r\n\r\n                    // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\r\n                    mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\r\n\r\n                function getWrap(tags) {\r\n                    var m = tags.match(/^(?:<!--.*?-->\\s*?)*?<([a-z]+)[\\s>]/);\r\n                    return (m && lookup[m[1]]) || none;\r\n                }\r\n\r\n                function simpleHtmlParse(html, documentContext) {\r\n                    documentContext || (documentContext = document);\r\n                    var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\r\n\r\n                    // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\r\n                    // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\r\n\r\n                    // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\r\n                    // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\r\n                    // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\r\n                    // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n                    // Trim whitespace, otherwise indexOf won't work as expected\r\n                    var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\"),\r\n                        wrap = getWrap(tags),\r\n                        depth = wrap[0];\r\n\r\n                    // Go to html and back, then peel off extra wrappers\r\n                    // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\r\n                    var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\r\n                    if (typeof windowContext['innerShiv'] == \"function\") {\r\n                        // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\r\n                        // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\r\n                        // somehow shims the native APIs so it just works anyway)\r\n                        div.appendChild(windowContext['innerShiv'](markup));\r\n                    } else {\r\n                        if (mayRequireCreateElementHack) {\r\n                            // The document.createElement('my-element') trick to enable custom elements in IE6-8\r\n                            // only works if we assign innerHTML on an element associated with that document.\r\n                            documentContext.body.appendChild(div);\r\n                        }\r\n\r\n                        div.innerHTML = markup;\r\n\r\n                        if (mayRequireCreateElementHack) {\r\n                            div.parentNode.removeChild(div);\r\n                        }\r\n                    }\r\n\r\n                    // Move to the right depth\r\n                    while (depth--)\r\n                        div = div.lastChild;\r\n\r\n                    return ko.utils.makeArray(div.lastChild.childNodes);\r\n                }\r\n\r\n                function jQueryHtmlParse(html, documentContext) {\r\n                    // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n                    if (jQueryInstance['parseHTML']) {\r\n                        return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\r\n                    } else {\r\n                        // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n                        var elems = jQueryInstance['clean']([html], documentContext);\r\n\r\n                        // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n                        // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n                        // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n                        if (elems && elems[0]) {\r\n                            // Find the top-most parent element that's a direct child of a document fragment\r\n                            var elem = elems[0];\r\n                            while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                                elem = elem.parentNode;\r\n                            // ... then detach it\r\n                            if (elem.parentNode)\r\n                                elem.parentNode.removeChild(elem);\r\n                        }\r\n\r\n                        return elems;\r\n                    }\r\n                }\r\n\r\n                ko.utils.parseHtmlFragment = function(html, documentContext) {\r\n                    return jQueryInstance ?\r\n                        jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible\r\n                        simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\r\n                };\r\n\r\n                ko.utils.parseHtmlForTemplateNodes = function(html, documentContext) {\r\n                    var nodes = ko.utils.parseHtmlFragment(html, documentContext);\r\n                    return (nodes.length && nodes[0].parentElement) || ko.utils.moveCleanedNodesToContainerElement(nodes);\r\n                };\r\n\r\n                ko.utils.setHtml = function(node, html) {\r\n                    ko.utils.emptyDomNode(node);\r\n\r\n                    // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\r\n                    html = ko.utils.unwrapObservable(html);\r\n\r\n                    if ((html !== null) && (html !== undefined)) {\r\n                        if (typeof html != 'string')\r\n                            html = html.toString();\r\n\r\n                        // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n                        // for example <tr> elements which are not normally allowed to exist on their own.\r\n                        // If you've referenced jQuery we'll use that rather than duplicating its code.\r\n                        if (jQueryInstance) {\r\n                            jQueryInstance(node)['html'](html);\r\n                        } else {\r\n                            // ... otherwise, use KO's own parsing logic.\r\n                            var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\r\n                            for (var i = 0; i < parsedNodes.length; i++)\r\n                                node.appendChild(parsedNodes[i]);\r\n                        }\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\r\n            ko.exportSymbol('utils.setHtml', ko.utils.setHtml);\r\n\r\n            ko.memoization = (function () {\r\n                var memos = {};\r\n\r\n                function randomMax8HexChars() {\r\n                    return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n                }\r\n                function generateRandomId() {\r\n                    return randomMax8HexChars() + randomMax8HexChars();\r\n                }\r\n                function findMemoNodes(rootNode, appendToArray) {\r\n                    if (!rootNode)\r\n                        return;\r\n                    if (rootNode.nodeType == 8) {\r\n                        var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n                        if (memoId != null)\r\n                            appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n                    } else if (rootNode.nodeType == 1) {\r\n                        for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\r\n                            findMemoNodes(childNodes[i], appendToArray);\r\n                    }\r\n                }\r\n\r\n                return {\r\n                    memoize: function (callback) {\r\n                        if (typeof callback != \"function\")\r\n                            throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n                        var memoId = generateRandomId();\r\n                        memos[memoId] = callback;\r\n                        return \"<!--[ko_memo:\" + memoId + \"]-->\";\r\n                    },\r\n\r\n                    unmemoize: function (memoId, callbackParams) {\r\n                        var callback = memos[memoId];\r\n                        if (callback === undefined)\r\n                            throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\r\n                        try {\r\n                            callback.apply(null, callbackParams || []);\r\n                            return true;\r\n                        }\r\n                        finally { delete memos[memoId]; }\r\n                    },\r\n\r\n                    unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n                        var memos = [];\r\n                        findMemoNodes(domNode, memos);\r\n                        for (var i = 0, j = memos.length; i < j; i++) {\r\n                            var node = memos[i].domNode;\r\n                            var combinedParams = [node];\r\n                            if (extraCallbackParamsArray)\r\n                                ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                            ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                            node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\r\n                            if (node.parentNode)\r\n                                node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n                        }\r\n                    },\r\n\r\n                    parseMemoText: function (memoText) {\r\n                        var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n                        return match ? match[1] : null;\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('memoization', ko.memoization);\r\n            ko.exportSymbol('memoization.memoize', ko.memoization.memoize);\r\n            ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\r\n            ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\r\n            ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\r\n            ko.tasks = (function () {\r\n                var scheduler,\r\n                    taskQueue = [],\r\n                    taskQueueLength = 0,\r\n                    nextHandle = 1,\r\n                    nextIndexToProcess = 0;\r\n\r\n                if (window['MutationObserver']) {\r\n                    // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\r\n                    // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\r\n                    scheduler = (function (callback) {\r\n                        var div = document.createElement(\"div\");\r\n                        new MutationObserver(callback).observe(div, {attributes: true});\r\n                        return function () { div.classList.toggle(\"foo\"); };\r\n                    })(scheduledProcess);\r\n                } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\r\n                    // IE 6-10\r\n                    // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\r\n                    scheduler = function (callback) {\r\n                        var script = document.createElement(\"script\");\r\n                        script.onreadystatechange = function () {\r\n                            script.onreadystatechange = null;\r\n                            document.documentElement.removeChild(script);\r\n                            script = null;\r\n                            callback();\r\n                        };\r\n                        document.documentElement.appendChild(script);\r\n                    };\r\n                } else {\r\n                    scheduler = function (callback) {\r\n                        setTimeout(callback, 0);\r\n                    };\r\n                }\r\n\r\n                function processTasks() {\r\n                    if (taskQueueLength) {\r\n                        // Each mark represents the end of a logical group of tasks and the number of these groups is\r\n                        // limited to prevent unchecked recursion.\r\n                        var mark = taskQueueLength, countMarks = 0;\r\n\r\n                        // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\r\n                        for (var task; nextIndexToProcess < taskQueueLength; ) {\r\n                            if (task = taskQueue[nextIndexToProcess++]) {\r\n                                if (nextIndexToProcess > mark) {\r\n                                    if (++countMarks >= 5000) {\r\n                                        nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion\r\n                                        ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\r\n                                        break;\r\n                                    }\r\n                                    mark = taskQueueLength;\r\n                                }\r\n                                try {\r\n                                    task();\r\n                                } catch (ex) {\r\n                                    ko.utils.deferError(ex);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function scheduledProcess() {\r\n                    processTasks();\r\n\r\n                    // Reset the queue\r\n                    nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n                }\r\n\r\n                function scheduleTaskProcessing() {\r\n                    ko.tasks['scheduler'](scheduledProcess);\r\n                }\r\n\r\n                var tasks = {\r\n                    'scheduler': scheduler,     // Allow overriding the scheduler\r\n\r\n                    schedule: function (func) {\r\n                        if (!taskQueueLength) {\r\n                            scheduleTaskProcessing();\r\n                        }\r\n\r\n                        taskQueue[taskQueueLength++] = func;\r\n                        return nextHandle++;\r\n                    },\r\n\r\n                    cancel: function (handle) {\r\n                        var index = handle - (nextHandle - taskQueueLength);\r\n                        if (index >= nextIndexToProcess && index < taskQueueLength) {\r\n                            taskQueue[index] = null;\r\n                        }\r\n                    },\r\n\r\n                    // For testing only: reset the queue and return the previous queue length\r\n                    'resetForTesting': function () {\r\n                        var length = taskQueueLength - nextIndexToProcess;\r\n                        nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n                        return length;\r\n                    },\r\n\r\n                    runEarly: processTasks\r\n                };\r\n\r\n                return tasks;\r\n            })();\r\n\r\n            ko.exportSymbol('tasks', ko.tasks);\r\n            ko.exportSymbol('tasks.schedule', ko.tasks.schedule);\r\n//ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\r\n            ko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\r\n            ko.extenders = {\r\n                'throttle': function(target, timeout) {\r\n                    // Throttling means two things:\r\n\r\n                    // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n                    //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\r\n                    target['throttleEvaluation'] = timeout;\r\n\r\n                    // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n                    //     so the target cannot change value synchronously or faster than a certain rate\r\n                    var writeTimeoutInstance = null;\r\n                    return ko.dependentObservable({\r\n                        'read': target,\r\n                        'write': function(value) {\r\n                            clearTimeout(writeTimeoutInstance);\r\n                            writeTimeoutInstance = ko.utils.setTimeout(function() {\r\n                                target(value);\r\n                            }, timeout);\r\n                        }\r\n                    });\r\n                },\r\n\r\n                'rateLimit': function(target, options) {\r\n                    var timeout, method, limitFunction;\r\n\r\n                    if (typeof options == 'number') {\r\n                        timeout = options;\r\n                    } else {\r\n                        timeout = options['timeout'];\r\n                        method = options['method'];\r\n                    }\r\n\r\n                    // rateLimit supersedes deferred updates\r\n                    target._deferUpdates = false;\r\n\r\n                    limitFunction = typeof method == 'function' ? method : method == 'notifyWhenChangesStop' ?  debounce : throttle;\r\n                    target.limit(function(callback) {\r\n                        return limitFunction(callback, timeout, options);\r\n                    });\r\n                },\r\n\r\n                'deferred': function(target, options) {\r\n                    if (options !== true) {\r\n                        throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.')\r\n                    }\r\n\r\n                    if (!target._deferUpdates) {\r\n                        target._deferUpdates = true;\r\n                        target.limit(function (callback) {\r\n                            var handle,\r\n                                ignoreUpdates = false;\r\n                            return function () {\r\n                                if (!ignoreUpdates) {\r\n                                    ko.tasks.cancel(handle);\r\n                                    handle = ko.tasks.schedule(callback);\r\n\r\n                                    try {\r\n                                        ignoreUpdates = true;\r\n                                        target['notifySubscribers'](undefined, 'dirty');\r\n                                    } finally {\r\n                                        ignoreUpdates = false;\r\n                                    }\r\n                                }\r\n                            };\r\n                        });\r\n                    }\r\n                },\r\n\r\n                'notify': function(target, notifyWhen) {\r\n                    target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n                        null :  // null equalityComparer means to always notify\r\n                        valuesArePrimitiveAndEqual;\r\n                }\r\n            };\r\n\r\n            var primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\r\n            function valuesArePrimitiveAndEqual(a, b) {\r\n                var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n                return oldValueIsPrimitive ? (a === b) : false;\r\n            }\r\n\r\n            function throttle(callback, timeout) {\r\n                var timeoutInstance;\r\n                return function () {\r\n                    if (!timeoutInstance) {\r\n                        timeoutInstance = ko.utils.setTimeout(function () {\r\n                            timeoutInstance = undefined;\r\n                            callback();\r\n                        }, timeout);\r\n                    }\r\n                };\r\n            }\r\n\r\n            function debounce(callback, timeout) {\r\n                var timeoutInstance;\r\n                return function () {\r\n                    clearTimeout(timeoutInstance);\r\n                    timeoutInstance = ko.utils.setTimeout(callback, timeout);\r\n                };\r\n            }\r\n\r\n            function applyExtenders(requestedExtenders) {\r\n                var target = this;\r\n                if (requestedExtenders) {\r\n                    ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n                        var extenderHandler = ko.extenders[key];\r\n                        if (typeof extenderHandler == 'function') {\r\n                            target = extenderHandler(target, value) || target;\r\n                        }\r\n                    });\r\n                }\r\n                return target;\r\n            }\r\n\r\n            ko.exportSymbol('extenders', ko.extenders);\r\n\r\n            ko.subscription = function (target, callback, disposeCallback) {\r\n                this._target = target;\r\n                this._callback = callback;\r\n                this._disposeCallback = disposeCallback;\r\n                this._isDisposed = false;\r\n                this._node = null;\r\n                this._domNodeDisposalCallback = null;\r\n                ko.exportProperty(this, 'dispose', this.dispose);\r\n                ko.exportProperty(this, 'disposeWhenNodeIsRemoved', this.disposeWhenNodeIsRemoved);\r\n            };\r\n            ko.subscription.prototype.dispose = function () {\r\n                var self = this;\r\n                if (!self._isDisposed) {\r\n                    if (self._domNodeDisposalCallback) {\r\n                        ko.utils.domNodeDisposal.removeDisposeCallback(self._node, self._domNodeDisposalCallback);\r\n                    }\r\n                    self._isDisposed = true;\r\n                    self._disposeCallback();\r\n\r\n                    self._target = self._callback = self._disposeCallback = self._node = self._domNodeDisposalCallback = null;\r\n                }\r\n            };\r\n            ko.subscription.prototype.disposeWhenNodeIsRemoved = function (node) {\r\n                this._node = node;\r\n                ko.utils.domNodeDisposal.addDisposeCallback(node, this._domNodeDisposalCallback = this.dispose.bind(this));\r\n            };\r\n\r\n            ko.subscribable = function () {\r\n                ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\r\n                ko_subscribable_fn.init(this);\r\n            }\r\n\r\n            var defaultEvent = \"change\";\r\n\r\n// Moved out of \"limit\" to avoid the extra closure\r\n            function limitNotifySubscribers(value, event) {\r\n                if (!event || event === defaultEvent) {\r\n                    this._limitChange(value);\r\n                } else if (event === 'beforeChange') {\r\n                    this._limitBeforeChange(value);\r\n                } else {\r\n                    this._origNotifySubscribers(value, event);\r\n                }\r\n            }\r\n\r\n            var ko_subscribable_fn = {\r\n                init: function(instance) {\r\n                    instance._subscriptions = { \"change\": [] };\r\n                    instance._versionNumber = 1;\r\n                },\r\n\r\n                subscribe: function (callback, callbackTarget, event) {\r\n                    var self = this;\r\n\r\n                    event = event || defaultEvent;\r\n                    var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n                    var subscription = new ko.subscription(self, boundCallback, function () {\r\n                        ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n                        if (self.afterSubscriptionRemove)\r\n                            self.afterSubscriptionRemove(event);\r\n                    });\r\n\r\n                    if (self.beforeSubscriptionAdd)\r\n                        self.beforeSubscriptionAdd(event);\r\n\r\n                    if (!self._subscriptions[event])\r\n                        self._subscriptions[event] = [];\r\n                    self._subscriptions[event].push(subscription);\r\n\r\n                    return subscription;\r\n                },\r\n\r\n                \"notifySubscribers\": function (valueToNotify, event) {\r\n                    event = event || defaultEvent;\r\n                    if (event === defaultEvent) {\r\n                        this.updateVersion();\r\n                    }\r\n                    if (this.hasSubscriptionsForEvent(event)) {\r\n                        var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);\r\n                        try {\r\n                            ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                            for (var i = 0, subscription; subscription = subs[i]; ++i) {\r\n                                // In case a subscription was disposed during the arrayForEach cycle, check\r\n                                // for isDisposed on each subscription before invoking its callback\r\n                                if (!subscription._isDisposed)\r\n                                    subscription._callback(valueToNotify);\r\n                            }\r\n                        } finally {\r\n                            ko.dependencyDetection.end(); // End suppressing dependency detection\r\n                        }\r\n                    }\r\n                },\r\n\r\n                getVersion: function () {\r\n                    return this._versionNumber;\r\n                },\r\n\r\n                hasChanged: function (versionToCheck) {\r\n                    return this.getVersion() !== versionToCheck;\r\n                },\r\n\r\n                updateVersion: function () {\r\n                    ++this._versionNumber;\r\n                },\r\n\r\n                limit: function(limitFunction) {\r\n                    var self = this, selfIsObservable = ko.isObservable(self),\r\n                        ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, didUpdate,\r\n                        beforeChange = 'beforeChange';\r\n\r\n                    if (!self._origNotifySubscribers) {\r\n                        self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n                        self[\"notifySubscribers\"] = limitNotifySubscribers;\r\n                    }\r\n\r\n                    var finish = limitFunction(function() {\r\n                        self._notificationIsPending = false;\r\n\r\n                        // If an observable provided a reference to itself, access it to get the latest value.\r\n                        // This allows computed observables to delay calculating their value until needed.\r\n                        if (selfIsObservable && pendingValue === self) {\r\n                            pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();\r\n                        }\r\n                        var shouldNotify = notifyNextChange || (didUpdate && self.isDifferent(previousValue, pendingValue));\r\n\r\n                        didUpdate = notifyNextChange = ignoreBeforeChange = false;\r\n\r\n                        if (shouldNotify) {\r\n                            self._origNotifySubscribers(previousValue = pendingValue);\r\n                        }\r\n                    });\r\n\r\n                    self._limitChange = function(value, isDirty) {\r\n                        if (!isDirty || !self._notificationIsPending) {\r\n                            didUpdate = !isDirty;\r\n                        }\r\n                        self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);\r\n                        self._notificationIsPending = ignoreBeforeChange = true;\r\n                        pendingValue = value;\r\n                        finish();\r\n                    };\r\n                    self._limitBeforeChange = function(value) {\r\n                        if (!ignoreBeforeChange) {\r\n                            previousValue = value;\r\n                            self._origNotifySubscribers(value, beforeChange);\r\n                        }\r\n                    };\r\n                    self._recordUpdate = function() {\r\n                        didUpdate = true;\r\n                    };\r\n                    self._notifyNextChangeIfValueIsDifferent = function() {\r\n                        if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {\r\n                            notifyNextChange = true;\r\n                        }\r\n                    };\r\n                },\r\n\r\n                hasSubscriptionsForEvent: function(event) {\r\n                    return this._subscriptions[event] && this._subscriptions[event].length;\r\n                },\r\n\r\n                getSubscriptionsCount: function (event) {\r\n                    if (event) {\r\n                        return this._subscriptions[event] && this._subscriptions[event].length || 0;\r\n                    } else {\r\n                        var total = 0;\r\n                        ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n                            if (eventName !== 'dirty')\r\n                                total += subscriptions.length;\r\n                        });\r\n                        return total;\r\n                    }\r\n                },\r\n\r\n                isDifferent: function(oldValue, newValue) {\r\n                    return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\r\n                },\r\n\r\n                toString: function() {\r\n                    return '[object Object]'\r\n                },\r\n\r\n                extend: applyExtenders\r\n            };\r\n\r\n            ko.exportProperty(ko_subscribable_fn, 'init', ko_subscribable_fn.init);\r\n            ko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\r\n            ko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\r\n            ko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n// For browsers that support proto assignment, we overwrite the prototype of each\r\n// observable instance. Since observables are functions, we need Function.prototype\r\n// to still be in the prototype chain.\r\n            if (ko.utils.canSetPrototype) {\r\n                ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n            }\r\n\r\n            ko.subscribable['fn'] = ko_subscribable_fn;\r\n\r\n\r\n            ko.isSubscribable = function (instance) {\r\n                return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\r\n            };\r\n\r\n            ko.exportSymbol('subscribable', ko.subscribable);\r\n            ko.exportSymbol('isSubscribable', ko.isSubscribable);\r\n\r\n            ko.computedContext = ko.dependencyDetection = (function () {\r\n                var outerFrames = [],\r\n                    currentFrame,\r\n                    lastId = 0;\r\n\r\n                // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n                // Theoretically, you could eventually overflow the number storage size, resulting\r\n                // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n                // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n                // take over 285 years to reach that number.\r\n                // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n                function getId() {\r\n                    return ++lastId;\r\n                }\r\n\r\n                function begin(options) {\r\n                    outerFrames.push(currentFrame);\r\n                    currentFrame = options;\r\n                }\r\n\r\n                function end() {\r\n                    currentFrame = outerFrames.pop();\r\n                }\r\n\r\n                return {\r\n                    begin: begin,\r\n\r\n                    end: end,\r\n\r\n                    registerDependency: function (subscribable) {\r\n                        if (currentFrame) {\r\n                            if (!ko.isSubscribable(subscribable))\r\n                                throw new Error(\"Only subscribable things can act as dependencies\");\r\n                            currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\r\n                        }\r\n                    },\r\n\r\n                    ignore: function (callback, callbackTarget, callbackArgs) {\r\n                        try {\r\n                            begin();\r\n                            return callback.apply(callbackTarget, callbackArgs || []);\r\n                        } finally {\r\n                            end();\r\n                        }\r\n                    },\r\n\r\n                    getDependenciesCount: function () {\r\n                        if (currentFrame)\r\n                            return currentFrame.computed.getDependenciesCount();\r\n                    },\r\n\r\n                    getDependencies: function () {\r\n                        if (currentFrame)\r\n                            return currentFrame.computed.getDependencies();\r\n                    },\r\n\r\n                    isInitial: function() {\r\n                        if (currentFrame)\r\n                            return currentFrame.isInitial;\r\n                    },\r\n\r\n                    computed: function() {\r\n                        if (currentFrame)\r\n                            return currentFrame.computed;\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('computedContext', ko.computedContext);\r\n            ko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\r\n            ko.exportSymbol('computedContext.getDependencies', ko.computedContext.getDependencies);\r\n            ko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\r\n            ko.exportSymbol('computedContext.registerDependency', ko.computedContext.registerDependency);\r\n\r\n            ko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\r\n            var observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\r\n\r\n            ko.observable = function (initialValue) {\r\n                function observable() {\r\n                    if (arguments.length > 0) {\r\n                        // Write\r\n\r\n                        // Ignore writes if the value hasn't changed\r\n                        if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\r\n                            observable.valueWillMutate();\r\n                            observable[observableLatestValue] = arguments[0];\r\n                            observable.valueHasMutated();\r\n                        }\r\n                        return this; // Permits chained assignments\r\n                    }\r\n                    else {\r\n                        // Read\r\n                        ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n                        return observable[observableLatestValue];\r\n                    }\r\n                }\r\n\r\n                observable[observableLatestValue] = initialValue;\r\n\r\n                // Inherit from 'subscribable'\r\n                if (!ko.utils.canSetPrototype) {\r\n                    // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n                    ko.utils.extend(observable, ko.subscribable['fn']);\r\n                }\r\n                ko.subscribable['fn'].init(observable);\r\n\r\n                // Inherit from 'observable'\r\n                ko.utils.setPrototypeOfOrExtend(observable, observableFn);\r\n\r\n                if (ko.options['deferUpdates']) {\r\n                    ko.extenders['deferred'](observable, true);\r\n                }\r\n\r\n                return observable;\r\n            }\r\n\r\n// Define prototype for observables\r\n            var observableFn = {\r\n                'equalityComparer': valuesArePrimitiveAndEqual,\r\n                peek: function() { return this[observableLatestValue]; },\r\n                valueHasMutated: function () {\r\n                    this['notifySubscribers'](this[observableLatestValue], 'spectate');\r\n                    this['notifySubscribers'](this[observableLatestValue]);\r\n                },\r\n                valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }\r\n            };\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observable constructor\r\n            if (ko.utils.canSetPrototype) {\r\n                ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\r\n            }\r\n\r\n            var protoProperty = ko.observable.protoProperty = '__ko_proto__';\r\n            observableFn[protoProperty] = ko.observable;\r\n\r\n            ko.isObservable = function (instance) {\r\n                var proto = typeof instance == 'function' && instance[protoProperty];\r\n                if (proto && proto !== observableFn[protoProperty] && proto !== ko.computed['fn'][protoProperty]) {\r\n                    throw Error(\"Invalid object that looks like an observable; possibly from another Knockout instance\");\r\n                }\r\n                return !!proto;\r\n            };\r\n\r\n            ko.isWriteableObservable = function (instance) {\r\n                return (typeof instance == 'function' && (\r\n                    (instance[protoProperty] === observableFn[protoProperty]) ||  // Observable\r\n                    (instance[protoProperty] === ko.computed['fn'][protoProperty] && instance.hasWriteFunction)));   // Writable computed observable\r\n            };\r\n\r\n            ko.exportSymbol('observable', ko.observable);\r\n            ko.exportSymbol('isObservable', ko.isObservable);\r\n            ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\r\n            ko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\r\n            ko.exportSymbol('observable.fn', observableFn);\r\n            ko.exportProperty(observableFn, 'peek', observableFn.peek);\r\n            ko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\r\n            ko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\r\n            ko.observableArray = function (initialValues) {\r\n                initialValues = initialValues || [];\r\n\r\n                if (typeof initialValues != 'object' || !('length' in initialValues))\r\n                    throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n                var result = ko.observable(initialValues);\r\n                ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\r\n                return result.extend({'trackArrayChanges':true});\r\n            };\r\n\r\n            ko.observableArray['fn'] = {\r\n                'remove': function (valueOrPredicate) {\r\n                    var underlyingArray = this.peek();\r\n                    var removedValues = [];\r\n                    var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n                    for (var i = 0; i < underlyingArray.length; i++) {\r\n                        var value = underlyingArray[i];\r\n                        if (predicate(value)) {\r\n                            if (removedValues.length === 0) {\r\n                                this.valueWillMutate();\r\n                            }\r\n                            if (underlyingArray[i] !== value) {\r\n                                throw Error(\"Array modified during remove; cannot remove item\");\r\n                            }\r\n                            removedValues.push(value);\r\n                            underlyingArray.splice(i, 1);\r\n                            i--;\r\n                        }\r\n                    }\r\n                    if (removedValues.length) {\r\n                        this.valueHasMutated();\r\n                    }\r\n                    return removedValues;\r\n                },\r\n\r\n                'removeAll': function (arrayOfValues) {\r\n                    // If you passed zero args, we remove everything\r\n                    if (arrayOfValues === undefined) {\r\n                        var underlyingArray = this.peek();\r\n                        var allValues = underlyingArray.slice(0);\r\n                        this.valueWillMutate();\r\n                        underlyingArray.splice(0, underlyingArray.length);\r\n                        this.valueHasMutated();\r\n                        return allValues;\r\n                    }\r\n                    // If you passed an arg, we interpret it as an array of entries to remove\r\n                    if (!arrayOfValues)\r\n                        return [];\r\n                    return this['remove'](function (value) {\r\n                        return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n                    });\r\n                },\r\n\r\n                'destroy': function (valueOrPredicate) {\r\n                    var underlyingArray = this.peek();\r\n                    var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n                    this.valueWillMutate();\r\n                    for (var i = underlyingArray.length - 1; i >= 0; i--) {\r\n                        var value = underlyingArray[i];\r\n                        if (predicate(value))\r\n                            value[\"_destroy\"] = true;\r\n                    }\r\n                    this.valueHasMutated();\r\n                },\r\n\r\n                'destroyAll': function (arrayOfValues) {\r\n                    // If you passed zero args, we destroy everything\r\n                    if (arrayOfValues === undefined)\r\n                        return this['destroy'](function() { return true });\r\n\r\n                    // If you passed an arg, we interpret it as an array of entries to destroy\r\n                    if (!arrayOfValues)\r\n                        return [];\r\n                    return this['destroy'](function (value) {\r\n                        return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n                    });\r\n                },\r\n\r\n                'indexOf': function (item) {\r\n                    var underlyingArray = this();\r\n                    return ko.utils.arrayIndexOf(underlyingArray, item);\r\n                },\r\n\r\n                'replace': function(oldItem, newItem) {\r\n                    var index = this['indexOf'](oldItem);\r\n                    if (index >= 0) {\r\n                        this.valueWillMutate();\r\n                        this.peek()[index] = newItem;\r\n                        this.valueHasMutated();\r\n                    }\r\n                },\r\n\r\n                'sorted': function (compareFunction) {\r\n                    var arrayCopy = this().slice(0);\r\n                    return compareFunction ? arrayCopy.sort(compareFunction) : arrayCopy.sort();\r\n                },\r\n\r\n                'reversed': function () {\r\n                    return this().slice(0).reverse();\r\n                }\r\n            };\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.observableArray constructor\r\n            if (ko.utils.canSetPrototype) {\r\n                ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\r\n            }\r\n\r\n// Populate ko.observableArray.fn with read/write functions from native arrays\r\n// Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n// because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\n            ko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n                ko.observableArray['fn'][methodName] = function () {\r\n                    // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\r\n                    // (for consistency with mutating regular observables)\r\n                    var underlyingArray = this.peek();\r\n                    this.valueWillMutate();\r\n                    this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n                    var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n                    this.valueHasMutated();\r\n                    // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\r\n                    return methodCallResult === underlyingArray ? this : methodCallResult;\r\n                };\r\n            });\r\n\r\n// Populate ko.observableArray.fn with read-only functions from native arrays\r\n            ko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n                ko.observableArray['fn'][methodName] = function () {\r\n                    var underlyingArray = this();\r\n                    return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n                };\r\n            });\r\n\r\n            ko.isObservableArray = function (instance) {\r\n                return ko.isObservable(instance)\r\n                    && typeof instance[\"remove\"] == \"function\"\r\n                    && typeof instance[\"push\"] == \"function\";\r\n            };\r\n\r\n            ko.exportSymbol('observableArray', ko.observableArray);\r\n            ko.exportSymbol('isObservableArray', ko.isObservableArray);\r\n            var arrayChangeEventName = 'arrayChange';\r\n            ko.extenders['trackArrayChanges'] = function(target, options) {\r\n                // Use the provided options--each call to trackArrayChanges overwrites the previously set options\r\n                target.compareArrayOptions = {};\r\n                if (options && typeof options == \"object\") {\r\n                    ko.utils.extend(target.compareArrayOptions, options);\r\n                }\r\n                target.compareArrayOptions['sparse'] = true;\r\n\r\n                // Only modify the target observable once\r\n                if (target.cacheDiffForKnownOperation) {\r\n                    return;\r\n                }\r\n                var trackingChanges = false,\r\n                    cachedDiff = null,\r\n                    changeSubscription,\r\n                    spectateSubscription,\r\n                    pendingChanges = 0,\r\n                    previousContents,\r\n                    underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\r\n                    underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\r\n\r\n                // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n                target.beforeSubscriptionAdd = function (event) {\r\n                    if (underlyingBeforeSubscriptionAddFunction) {\r\n                        underlyingBeforeSubscriptionAddFunction.call(target, event);\r\n                    }\r\n                    if (event === arrayChangeEventName) {\r\n                        trackChanges();\r\n                    }\r\n                };\r\n                // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\r\n                target.afterSubscriptionRemove = function (event) {\r\n                    if (underlyingAfterSubscriptionRemoveFunction) {\r\n                        underlyingAfterSubscriptionRemoveFunction.call(target, event);\r\n                    }\r\n                    if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                        if (changeSubscription) {\r\n                            changeSubscription.dispose();\r\n                        }\r\n                        if (spectateSubscription) {\r\n                            spectateSubscription.dispose();\r\n                        }\r\n                        spectateSubscription = changeSubscription = null;\r\n                        trackingChanges = false;\r\n                        previousContents = undefined;\r\n                    }\r\n                };\r\n\r\n                function trackChanges() {\r\n                    if (trackingChanges) {\r\n                        // Whenever there's a new subscription and there are pending notifications, make sure all previous\r\n                        // subscriptions are notified of the change so that all subscriptions are in sync.\r\n                        notifyChanges();\r\n                        return;\r\n                    }\r\n\r\n                    trackingChanges = true;\r\n\r\n                    // Track how many times the array actually changed value\r\n                    spectateSubscription = target.subscribe(function () {\r\n                        ++pendingChanges;\r\n                    }, null, \"spectate\");\r\n\r\n                    // Each time the array changes value, capture a clone so that on the next\r\n                    // change it's possible to produce a diff\r\n                    previousContents = [].concat(target.peek() || []);\r\n                    cachedDiff = null;\r\n                    changeSubscription = target.subscribe(notifyChanges);\r\n\r\n                    function notifyChanges() {\r\n                        if (pendingChanges) {\r\n                            // Make a copy of the current contents and ensure it's an array\r\n                            var currentContents = [].concat(target.peek() || []), changes;\r\n\r\n                            // Compute the diff and issue notifications, but only if someone is listening\r\n                            if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                                changes = getChanges(previousContents, currentContents);\r\n                            }\r\n\r\n                            // Eliminate references to the old, removed items, so they can be GCed\r\n                            previousContents = currentContents;\r\n                            cachedDiff = null;\r\n                            pendingChanges = 0;\r\n\r\n                            if (changes && changes.length) {\r\n                                target['notifySubscribers'](changes, arrayChangeEventName);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function getChanges(previousContents, currentContents) {\r\n                    // We try to re-use cached diffs.\r\n                    // The scenarios where pendingChanges > 1 are when using rate limiting or deferred updates,\r\n                    // which without this check would not be compatible with arrayChange notifications. Normally,\r\n                    // notifications are issued immediately so we wouldn't be queueing up more than one.\r\n                    if (!cachedDiff || pendingChanges > 1) {\r\n                        cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\r\n                    }\r\n\r\n                    return cachedDiff;\r\n                }\r\n\r\n                target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n                    // Only run if we're currently tracking changes for this observable array\r\n                    // and there aren't any pending deferred notifications.\r\n                    if (!trackingChanges || pendingChanges) {\r\n                        return;\r\n                    }\r\n                    var diff = [],\r\n                        arrayLength = rawArray.length,\r\n                        argsLength = args.length,\r\n                        offset = 0;\r\n\r\n                    function pushDiff(status, value, index) {\r\n                        return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\r\n                    }\r\n                    switch (operationName) {\r\n                        case 'push':\r\n                            offset = arrayLength;\r\n                        case 'unshift':\r\n                            for (var index = 0; index < argsLength; index++) {\r\n                                pushDiff('added', args[index], offset + index);\r\n                            }\r\n                            break;\r\n\r\n                        case 'pop':\r\n                            offset = arrayLength - 1;\r\n                        case 'shift':\r\n                            if (arrayLength) {\r\n                                pushDiff('deleted', rawArray[offset], offset);\r\n                            }\r\n                            break;\r\n\r\n                        case 'splice':\r\n                            // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\r\n                            // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                            var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                                endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                                endAddIndex = startIndex + argsLength - 2,\r\n                                endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                                additions = [], deletions = [];\r\n                            for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\r\n                                if (index < endDeleteIndex)\r\n                                    deletions.push(pushDiff('deleted', rawArray[index], index));\r\n                                if (index < endAddIndex)\r\n                                    additions.push(pushDiff('added', args[argsIndex], index));\r\n                            }\r\n                            ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                            break;\r\n\r\n                        default:\r\n                            return;\r\n                    }\r\n                    cachedDiff = diff;\r\n                };\r\n            };\r\n            var computedState = ko.utils.createSymbolOrString('_state');\r\n\r\n            ko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n                if (typeof evaluatorFunctionOrOptions === \"object\") {\r\n                    // Single-parameter syntax - everything is on this \"options\" param\r\n                    options = evaluatorFunctionOrOptions;\r\n                } else {\r\n                    // Multi-parameter syntax - construct the options according to the params passed\r\n                    options = options || {};\r\n                    if (evaluatorFunctionOrOptions) {\r\n                        options[\"read\"] = evaluatorFunctionOrOptions;\r\n                    }\r\n                }\r\n                if (typeof options[\"read\"] != \"function\")\r\n                    throw Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n                var writeFunction = options[\"write\"];\r\n                var state = {\r\n                    latestValue: undefined,\r\n                    isStale: true,\r\n                    isDirty: true,\r\n                    isBeingEvaluated: false,\r\n                    suppressDisposalUntilDisposeWhenReturnsFalse: false,\r\n                    isDisposed: false,\r\n                    pure: false,\r\n                    isSleeping: false,\r\n                    readFunction: options[\"read\"],\r\n                    evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\r\n                    disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n                    disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\r\n                    domNodeDisposalCallback: null,\r\n                    dependencyTracking: {},\r\n                    dependenciesCount: 0,\r\n                    evaluationTimeoutInstance: null\r\n                };\r\n\r\n                function computedObservable() {\r\n                    if (arguments.length > 0) {\r\n                        if (typeof writeFunction === \"function\") {\r\n                            // Writing a value\r\n                            writeFunction.apply(state.evaluatorFunctionTarget, arguments);\r\n                        } else {\r\n                            throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\r\n                        }\r\n                        return this; // Permits chained assignments\r\n                    } else {\r\n                        // Reading the value\r\n                        if (!state.isDisposed) {\r\n                            ko.dependencyDetection.registerDependency(computedObservable);\r\n                        }\r\n                        if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {\r\n                            computedObservable.evaluateImmediate();\r\n                        }\r\n                        return state.latestValue;\r\n                    }\r\n                }\r\n\r\n                computedObservable[computedState] = state;\r\n                computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\r\n\r\n                // Inherit from 'subscribable'\r\n                if (!ko.utils.canSetPrototype) {\r\n                    // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n                    ko.utils.extend(computedObservable, ko.subscribable['fn']);\r\n                }\r\n                ko.subscribable['fn'].init(computedObservable);\r\n\r\n                // Inherit from 'computed'\r\n                ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\r\n\r\n                if (options['pure']) {\r\n                    state.pure = true;\r\n                    state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n                    ko.utils.extend(computedObservable, pureComputedOverrides);\r\n                } else if (options['deferEvaluation']) {\r\n                    ko.utils.extend(computedObservable, deferEvaluationOverrides);\r\n                }\r\n\r\n                if (ko.options['deferUpdates']) {\r\n                    ko.extenders['deferred'](computedObservable, true);\r\n                }\r\n\r\n                if (DEBUG) {\r\n                    // #1731 - Aid debugging by exposing the computed's options\r\n                    computedObservable[\"_options\"] = options;\r\n                }\r\n\r\n                if (state.disposeWhenNodeIsRemoved) {\r\n                    // Since this computed is associated with a DOM node, and we don't want to dispose the computed\r\n                    // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n                    // we'll prevent disposal until \"disposeWhen\" first returns false.\r\n                    state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n                    // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\r\n                    // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\r\n                    // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\r\n                    // be documented or used by application code, as it's likely to change in a future version of KO.\r\n                    if (!state.disposeWhenNodeIsRemoved.nodeType) {\r\n                        state.disposeWhenNodeIsRemoved = null;\r\n                    }\r\n                }\r\n\r\n                // Evaluate, unless sleeping or deferEvaluation is true\r\n                if (!state.isSleeping && !options['deferEvaluation']) {\r\n                    computedObservable.evaluateImmediate();\r\n                }\r\n\r\n                // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n                // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n                if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\r\n                    ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\r\n                        computedObservable.dispose();\r\n                    });\r\n                }\r\n\r\n                return computedObservable;\r\n            };\r\n\r\n// Utility function that disposes a given dependencyTracking entry\r\n            function computedDisposeDependencyCallback(id, entryToDispose) {\r\n                if (entryToDispose !== null && entryToDispose.dispose) {\r\n                    entryToDispose.dispose();\r\n                }\r\n            }\r\n\r\n// This function gets called each time a dependency is detected while evaluating a computed.\r\n// It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\r\n            function computedBeginDependencyDetectionCallback(subscribable, id) {\r\n                var computedObservable = this.computedObservable,\r\n                    state = computedObservable[computedState];\r\n                if (!state.isDisposed) {\r\n                    if (this.disposalCount && this.disposalCandidates[id]) {\r\n                        // Don't want to dispose this subscription, as it's still being used\r\n                        computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\r\n                        this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\r\n                        --this.disposalCount;\r\n                    } else if (!state.dependencyTracking[id]) {\r\n                        // Brand new subscription - add it\r\n                        computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\r\n                    }\r\n                    // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)\r\n                    if (subscribable._notificationIsPending) {\r\n                        subscribable._notifyNextChangeIfValueIsDifferent();\r\n                    }\r\n                }\r\n            }\r\n\r\n            var computedFn = {\r\n                \"equalityComparer\": valuesArePrimitiveAndEqual,\r\n                getDependenciesCount: function () {\r\n                    return this[computedState].dependenciesCount;\r\n                },\r\n                getDependencies: function () {\r\n                    var dependencyTracking = this[computedState].dependencyTracking, dependentObservables = [];\r\n\r\n                    ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                        dependentObservables[dependency._order] = dependency._target;\r\n                    });\r\n\r\n                    return dependentObservables;\r\n                },\r\n                hasAncestorDependency: function (obs) {\r\n                    if (!this[computedState].dependenciesCount) {\r\n                        return false;\r\n                    }\r\n                    var dependencies = this.getDependencies();\r\n                    if (ko.utils.arrayIndexOf(dependencies, obs) !== -1) {\r\n                        return true;\r\n                    }\r\n                    return !!ko.utils.arrayFirst(dependencies, function (dep) {\r\n                        return dep.hasAncestorDependency && dep.hasAncestorDependency(obs);\r\n                    });\r\n                },\r\n                addDependencyTracking: function (id, target, trackingObj) {\r\n                    if (this[computedState].pure && target === this) {\r\n                        throw Error(\"A 'pure' computed must not be called recursively\");\r\n                    }\r\n\r\n                    this[computedState].dependencyTracking[id] = trackingObj;\r\n                    trackingObj._order = this[computedState].dependenciesCount++;\r\n                    trackingObj._version = target.getVersion();\r\n                },\r\n                haveDependenciesChanged: function () {\r\n                    var id, dependency, dependencyTracking = this[computedState].dependencyTracking;\r\n                    for (id in dependencyTracking) {\r\n                        if (Object.prototype.hasOwnProperty.call(dependencyTracking, id)) {\r\n                            dependency = dependencyTracking[id];\r\n                            if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                markDirty: function () {\r\n                    // Process \"dirty\" events if we can handle delayed notifications\r\n                    if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\r\n                        this._evalDelayed(false /*isChange*/);\r\n                    }\r\n                },\r\n                isActive: function () {\r\n                    var state = this[computedState];\r\n                    return state.isDirty || state.dependenciesCount > 0;\r\n                },\r\n                respondToChange: function () {\r\n                    // Ignore \"change\" events if we've already scheduled a delayed notification\r\n                    if (!this._notificationIsPending) {\r\n                        this.evaluatePossiblyAsync();\r\n                    } else if (this[computedState].isDirty) {\r\n                        this[computedState].isStale = true;\r\n                    }\r\n                },\r\n                subscribeToDependency: function (target) {\r\n                    if (target._deferUpdates) {\r\n                        var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\r\n                            changeSub = target.subscribe(this.respondToChange, this);\r\n                        return {\r\n                            _target: target,\r\n                            dispose: function () {\r\n                                dirtySub.dispose();\r\n                                changeSub.dispose();\r\n                            }\r\n                        };\r\n                    } else {\r\n                        return target.subscribe(this.evaluatePossiblyAsync, this);\r\n                    }\r\n                },\r\n                evaluatePossiblyAsync: function () {\r\n                    var computedObservable = this,\r\n                        throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\r\n                    if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\r\n                        clearTimeout(this[computedState].evaluationTimeoutInstance);\r\n                        this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\r\n                            computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n                        }, throttleEvaluationTimeout);\r\n                    } else if (computedObservable._evalDelayed) {\r\n                        computedObservable._evalDelayed(true /*isChange*/);\r\n                    } else {\r\n                        computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n                    }\r\n                },\r\n                evaluateImmediate: function (notifyChange) {\r\n                    var computedObservable = this,\r\n                        state = computedObservable[computedState],\r\n                        disposeWhen = state.disposeWhen,\r\n                        changed = false;\r\n\r\n                    if (state.isBeingEvaluated) {\r\n                        // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\r\n                        // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n                        // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n                        // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n                        return;\r\n                    }\r\n\r\n                    // Do not evaluate (and possibly capture new dependencies) if disposed\r\n                    if (state.isDisposed) {\r\n                        return;\r\n                    }\r\n\r\n                    if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\r\n                        // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\r\n                        if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                            computedObservable.dispose();\r\n                            return;\r\n                        }\r\n                    } else {\r\n                        // It just did return false, so we can stop suppressing now\r\n                        state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n                    }\r\n\r\n                    state.isBeingEvaluated = true;\r\n                    try {\r\n                        changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\r\n                    } finally {\r\n                        state.isBeingEvaluated = false;\r\n                    }\r\n\r\n                    return changed;\r\n                },\r\n                evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {\r\n                    // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\r\n                    // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\r\n                    // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\r\n\r\n                    var computedObservable = this,\r\n                        state = computedObservable[computedState],\r\n                        changed = false;\r\n\r\n                    // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n                    // Then, during evaluation, we cross off any that are in fact still being used.\r\n                    var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time\r\n                        dependencyDetectionContext = {\r\n                            computedObservable: computedObservable,\r\n                            disposalCandidates: state.dependencyTracking,\r\n                            disposalCount: state.dependenciesCount\r\n                        };\r\n\r\n                    ko.dependencyDetection.begin({\r\n                        callbackTarget: dependencyDetectionContext,\r\n                        callback: computedBeginDependencyDetectionCallback,\r\n                        computed: computedObservable,\r\n                        isInitial: isInitial\r\n                    });\r\n\r\n                    state.dependencyTracking = {};\r\n                    state.dependenciesCount = 0;\r\n\r\n                    var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\r\n\r\n                    if (!state.dependenciesCount) {\r\n                        computedObservable.dispose();\r\n                        changed = true; // When evaluation causes a disposal, make sure all dependent computeds get notified so they'll see the new state\r\n                    } else {\r\n                        changed = computedObservable.isDifferent(state.latestValue, newValue);\r\n                    }\r\n\r\n                    if (changed) {\r\n                        if (!state.isSleeping) {\r\n                            computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\r\n                        } else {\r\n                            computedObservable.updateVersion();\r\n                        }\r\n\r\n                        state.latestValue = newValue;\r\n                        if (DEBUG) computedObservable._latestValue = newValue;\r\n\r\n                        computedObservable[\"notifySubscribers\"](state.latestValue, \"spectate\");\r\n\r\n                        if (!state.isSleeping && notifyChange) {\r\n                            computedObservable[\"notifySubscribers\"](state.latestValue);\r\n                        }\r\n                        if (computedObservable._recordUpdate) {\r\n                            computedObservable._recordUpdate();\r\n                        }\r\n                    }\r\n\r\n                    if (isInitial) {\r\n                        computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n                    }\r\n\r\n                    return changed;\r\n                },\r\n                evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {\r\n                    // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\r\n                    // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\r\n                    // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\r\n                    // overhead of computed evaluation (on V8 at least).\r\n\r\n                    try {\r\n                        var readFunction = state.readFunction;\r\n                        return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\r\n                    } finally {\r\n                        ko.dependencyDetection.end();\r\n\r\n                        // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n                        if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\r\n                            ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\r\n                        }\r\n\r\n                        state.isStale = state.isDirty = false;\r\n                    }\r\n                },\r\n                peek: function (evaluate) {\r\n                    // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\r\n                    // Pass in true to evaluate if needed.\r\n                    var state = this[computedState];\r\n                    if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {\r\n                        this.evaluateImmediate();\r\n                    }\r\n                    return state.latestValue;\r\n                },\r\n                limit: function (limitFunction) {\r\n                    // Override the limit function with one that delays evaluation as well\r\n                    ko.subscribable['fn'].limit.call(this, limitFunction);\r\n                    this._evalIfChanged = function () {\r\n                        if (!this[computedState].isSleeping) {\r\n                            if (this[computedState].isStale) {\r\n                                this.evaluateImmediate();\r\n                            } else {\r\n                                this[computedState].isDirty = false;\r\n                            }\r\n                        }\r\n                        return this[computedState].latestValue;\r\n                    };\r\n                    this._evalDelayed = function (isChange) {\r\n                        this._limitBeforeChange(this[computedState].latestValue);\r\n\r\n                        // Mark as dirty\r\n                        this[computedState].isDirty = true;\r\n                        if (isChange) {\r\n                            this[computedState].isStale = true;\r\n                        }\r\n\r\n                        // Pass the observable to the \"limit\" code, which will evaluate it when\r\n                        // it's time to do the notification.\r\n                        this._limitChange(this, !isChange /* isDirty */);\r\n                    };\r\n                },\r\n                dispose: function () {\r\n                    var state = this[computedState];\r\n                    if (!state.isSleeping && state.dependencyTracking) {\r\n                        ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                            if (dependency.dispose)\r\n                                dependency.dispose();\r\n                        });\r\n                    }\r\n                    if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\r\n                        ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\r\n                    }\r\n                    state.dependencyTracking = undefined;\r\n                    state.dependenciesCount = 0;\r\n                    state.isDisposed = true;\r\n                    state.isStale = false;\r\n                    state.isDirty = false;\r\n                    state.isSleeping = false;\r\n                    state.disposeWhenNodeIsRemoved = undefined;\r\n                    state.disposeWhen = undefined;\r\n                    state.readFunction = undefined;\r\n                    if (!this.hasWriteFunction) {\r\n                        state.evaluatorFunctionTarget = undefined;\r\n                    }\r\n                }\r\n            };\r\n\r\n            var pureComputedOverrides = {\r\n                beforeSubscriptionAdd: function (event) {\r\n                    // If asleep, wake up the computed by subscribing to any dependencies.\r\n                    var computedObservable = this,\r\n                        state = computedObservable[computedState];\r\n                    if (!state.isDisposed && state.isSleeping && event == 'change') {\r\n                        state.isSleeping = false;\r\n                        if (state.isStale || computedObservable.haveDependenciesChanged()) {\r\n                            state.dependencyTracking = null;\r\n                            state.dependenciesCount = 0;\r\n                            if (computedObservable.evaluateImmediate()) {\r\n                                computedObservable.updateVersion();\r\n                            }\r\n                        } else {\r\n                            // First put the dependencies in order\r\n                            var dependenciesOrder = [];\r\n                            ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                                dependenciesOrder[dependency._order] = id;\r\n                            });\r\n                            // Next, subscribe to each one\r\n                            ko.utils.arrayForEach(dependenciesOrder, function (id, order) {\r\n                                var dependency = state.dependencyTracking[id],\r\n                                    subscription = computedObservable.subscribeToDependency(dependency._target);\r\n                                subscription._order = order;\r\n                                subscription._version = dependency._version;\r\n                                state.dependencyTracking[id] = subscription;\r\n                            });\r\n                            // Waking dependencies may have triggered effects\r\n                            if (computedObservable.haveDependenciesChanged()) {\r\n                                if (computedObservable.evaluateImmediate()) {\r\n                                    computedObservable.updateVersion();\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (!state.isDisposed) {     // test since evaluating could trigger disposal\r\n                            computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n                        }\r\n                    }\r\n                },\r\n                afterSubscriptionRemove: function (event) {\r\n                    var state = this[computedState];\r\n                    if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\r\n                        ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                            if (dependency.dispose) {\r\n                                state.dependencyTracking[id] = {\r\n                                    _target: dependency._target,\r\n                                    _order: dependency._order,\r\n                                    _version: dependency._version\r\n                                };\r\n                                dependency.dispose();\r\n                            }\r\n                        });\r\n                        state.isSleeping = true;\r\n                        this[\"notifySubscribers\"](undefined, \"asleep\");\r\n                    }\r\n                },\r\n                getVersion: function () {\r\n                    // Because a pure computed is not automatically updated while it is sleeping, we can't\r\n                    // simply return the version number. Instead, we check if any of the dependencies have\r\n                    // changed and conditionally re-evaluate the computed observable.\r\n                    var state = this[computedState];\r\n                    if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\r\n                        this.evaluateImmediate();\r\n                    }\r\n                    return ko.subscribable['fn'].getVersion.call(this);\r\n                }\r\n            };\r\n\r\n            var deferEvaluationOverrides = {\r\n                beforeSubscriptionAdd: function (event) {\r\n                    // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\r\n                    if (event == 'change' || event == 'beforeChange') {\r\n                        this.peek();\r\n                    }\r\n                }\r\n            };\r\n\r\n// Note that for browsers that don't support proto assignment, the\r\n// inheritance chain is created manually in the ko.computed constructor\r\n            if (ko.utils.canSetPrototype) {\r\n                ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\r\n            }\r\n\r\n// Set the proto values for ko.computed\r\n            var protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\n            computedFn[protoProp] = ko.computed;\r\n\r\n            ko.isComputed = function (instance) {\r\n                return (typeof instance == 'function' && instance[protoProp] === computedFn[protoProp]);\r\n            };\r\n\r\n            ko.isPureComputed = function (instance) {\r\n                return ko.isComputed(instance) && instance[computedState] && instance[computedState].pure;\r\n            };\r\n\r\n            ko.exportSymbol('computed', ko.computed);\r\n            ko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)\r\n            ko.exportSymbol('isComputed', ko.isComputed);\r\n            ko.exportSymbol('isPureComputed', ko.isPureComputed);\r\n            ko.exportSymbol('computed.fn', computedFn);\r\n            ko.exportProperty(computedFn, 'peek', computedFn.peek);\r\n            ko.exportProperty(computedFn, 'dispose', computedFn.dispose);\r\n            ko.exportProperty(computedFn, 'isActive', computedFn.isActive);\r\n            ko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\r\n            ko.exportProperty(computedFn, 'getDependencies', computedFn.getDependencies);\r\n\r\n            ko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n                if (typeof evaluatorFunctionOrOptions === 'function') {\r\n                    return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\r\n                } else {\r\n                    evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n                    evaluatorFunctionOrOptions['pure'] = true;\r\n                    return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n                }\r\n            }\r\n            ko.exportSymbol('pureComputed', ko.pureComputed);\r\n\r\n            (function() {\r\n                var maxNestedObservableDepth = 10; // Escape the (unlikely) pathological case where an observable's current value is itself (or similar reference cycle)\r\n\r\n                ko.toJS = function(rootObject) {\r\n                    if (arguments.length == 0)\r\n                        throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n                    // We just unwrap everything at every level in the object graph\r\n                    return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n                        // Loop because an observable's value might in turn be another observable wrapper\r\n                        for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\r\n                            valueToMap = valueToMap();\r\n                        return valueToMap;\r\n                    });\r\n                };\r\n\r\n                ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n                    var plainJavaScriptObject = ko.toJS(rootObject);\r\n                    return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n                };\r\n\r\n                function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n                    visitedObjects = visitedObjects || new objectLookup();\r\n\r\n                    rootObject = mapInputCallback(rootObject);\r\n                    var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\r\n                    if (!canHaveProperties)\r\n                        return rootObject;\r\n\r\n                    var outputProperties = rootObject instanceof Array ? [] : {};\r\n                    visitedObjects.save(rootObject, outputProperties);\r\n\r\n                    visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n                        var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n                        switch (typeof propertyValue) {\r\n                            case \"boolean\":\r\n                            case \"number\":\r\n                            case \"string\":\r\n                            case \"function\":\r\n                                outputProperties[indexer] = propertyValue;\r\n                                break;\r\n                            case \"object\":\r\n                            case \"undefined\":\r\n                                var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                                outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                                    ? previouslyMappedValue\r\n                                    : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                                break;\r\n                        }\r\n                    });\r\n\r\n                    return outputProperties;\r\n                }\r\n\r\n                function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n                    if (rootObject instanceof Array) {\r\n                        for (var i = 0; i < rootObject.length; i++)\r\n                            visitorCallback(i);\r\n\r\n                        // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n                        if (typeof rootObject['toJSON'] == 'function')\r\n                            visitorCallback('toJSON');\r\n                    } else {\r\n                        for (var propertyName in rootObject) {\r\n                            visitorCallback(propertyName);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                function objectLookup() {\r\n                    this.keys = [];\r\n                    this.values = [];\r\n                };\r\n\r\n                objectLookup.prototype = {\r\n                    constructor: objectLookup,\r\n                    save: function(key, value) {\r\n                        var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n                        if (existingIndex >= 0)\r\n                            this.values[existingIndex] = value;\r\n                        else {\r\n                            this.keys.push(key);\r\n                            this.values.push(value);\r\n                        }\r\n                    },\r\n                    get: function(key) {\r\n                        var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n                        return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('toJS', ko.toJS);\r\n            ko.exportSymbol('toJSON', ko.toJSON);\r\n            ko.when = function(predicate, callback, context) {\r\n                function kowhen (resolve) {\r\n                    var observable = ko.pureComputed(predicate, context).extend({notify:'always'});\r\n                    var subscription = observable.subscribe(function(value) {\r\n                        if (value) {\r\n                            subscription.dispose();\r\n                            resolve(value);\r\n                        }\r\n                    });\r\n                    // In case the initial value is true, process it right away\r\n                    observable['notifySubscribers'](observable.peek());\r\n\r\n                    return subscription;\r\n                }\r\n                if (typeof Promise === \"function\" && !callback) {\r\n                    return new Promise(kowhen);\r\n                } else {\r\n                    return kowhen(callback.bind(context));\r\n                }\r\n            };\r\n\r\n            ko.exportSymbol('when', ko.when);\r\n            (function () {\r\n                var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\r\n\r\n                // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\r\n                // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n                // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n                ko.selectExtensions = {\r\n                    readValue : function(element) {\r\n                        switch (ko.utils.tagNameLower(element)) {\r\n                            case 'option':\r\n                                if (element[hasDomDataExpandoProperty] === true)\r\n                                    return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                                return ko.utils.ieVersion <= 7\r\n                                    ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\r\n                                    : element.value;\r\n                            case 'select':\r\n                                return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                            default:\r\n                                return element.value;\r\n                        }\r\n                    },\r\n\r\n                    writeValue: function(element, value, allowUnset) {\r\n                        switch (ko.utils.tagNameLower(element)) {\r\n                            case 'option':\r\n                                if (typeof value === \"string\") {\r\n                                    ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                                    if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                        delete element[hasDomDataExpandoProperty];\r\n                                    }\r\n                                    element.value = value;\r\n                                }\r\n                                else {\r\n                                    // Store arbitrary object using DomData\r\n                                    ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                                    element[hasDomDataExpandoProperty] = true;\r\n\r\n                                    // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                                    element.value = typeof value === \"number\" ? value : \"\";\r\n                                }\r\n                                break;\r\n                            case 'select':\r\n                                if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                                    value = undefined;\r\n                                var selection = -1;\r\n                                for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\r\n                                    optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                                    // Include special check to handle selecting a caption with a blank string value\r\n                                    if (optionValue == value || (optionValue === \"\" && value === undefined)) {\r\n                                        selection = i;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\r\n                                    element.selectedIndex = selection;\r\n                                    if (ko.utils.ieVersion === 6) {\r\n                                        // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\r\n                                        // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\r\n                                        // to apply the value as well.\r\n                                        ko.utils.setTimeout(function () {\r\n                                            element.selectedIndex = selection;\r\n                                        }, 0);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                if ((value === null) || (value === undefined))\r\n                                    value = \"\";\r\n                                element.value = value;\r\n                                break;\r\n                        }\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('selectExtensions', ko.selectExtensions);\r\n            ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\r\n            ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\r\n            ko.expressionRewriting = (function () {\r\n                var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n                // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n                // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n                // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\r\n                var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n                function getWriteableValue(expression) {\r\n                    if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\r\n                        return false;\r\n                    var match = expression.match(javaScriptAssignmentTarget);\r\n                    return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\r\n                }\r\n\r\n                // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n                var specials = ',\"\\'`{}()/:[\\\\]',    // These characters have special meaning to the parser and must not appear in the middle of a token, except as part of a string.\r\n                    // Create the actual regular expression by or-ing the following regex strings. The order is important.\r\n                    bindingToken = RegExp([\r\n                        // These match strings, either with double quotes, single quotes, or backticks\r\n                        '\"(?:\\\\\\\\.|[^\"])*\"',\r\n                        \"'(?:\\\\\\\\.|[^'])*'\",\r\n                        \"`(?:\\\\\\\\.|[^`])*`\",\r\n                        // Match C style comments\r\n                        \"/\\\\*(?:[^*]|\\\\*+[^*/])*\\\\*+/\",\r\n                        // Match C++ style comments\r\n                        \"//.*\\n\",\r\n                        // Match a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n                        // as a regular expression (this is handled by the parsing loop below).\r\n                        '/(?:\\\\\\\\.|[^/])+/\\w*',\r\n                        // Match text (at least two characters) that does not contain any of the above special characters,\r\n                        // although some of the special characters are allowed to start it (all but the colon and comma).\r\n                        // The text can contain spaces, but leading or trailing spaces are skipped.\r\n                        '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\r\n                        // Match any non-space character not matched already. This will match colons and commas, since they're\r\n                        // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\r\n                        // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n                        '[^\\\\s]'\r\n                    ].join('|'), 'g'),\r\n\r\n                    // Match end of previous token to determine whether a slash is a division or regex.\r\n                    divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\r\n                    keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\r\n\r\n                function parseObjectLiteral(objectLiteralString) {\r\n                    // Trim leading and trailing spaces from the string\r\n                    var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n                    // Trim braces '{' surrounding the whole object literal\r\n                    if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n                    // Add a newline to correctly match a C++ style comment at the end of the string and\r\n                    // add a comma so that we don't need a separate code block to deal with the last item\r\n                    str += \"\\n,\";\r\n\r\n                    // Split into tokens\r\n                    var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\r\n\r\n                    if (toks.length > 1) {\r\n                        for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                            var c = tok.charCodeAt(0);\r\n                            // A comma signals the end of a key/value pair if depth is zero\r\n                            if (c === 44) { // \",\"\r\n                                if (depth <= 0) {\r\n                                    result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\r\n                                    key = depth = 0;\r\n                                    values = [];\r\n                                    continue;\r\n                                }\r\n                                // Simply skip the colon that separates the name and value\r\n                            } else if (c === 58) { // \":\"\r\n                                if (!depth && !key && values.length === 1) {\r\n                                    key = values.pop();\r\n                                    continue;\r\n                                }\r\n                                // Comments: skip them\r\n                            } else if (c === 47 && tok.length > 1 && (tok.charCodeAt(1) === 47 || tok.charCodeAt(1) === 42)) {  // \"//\" or \"/*\"\r\n                                continue;\r\n                                // A set of slashes is initially matched as a regular expression, but could be division\r\n                            } else if (c === 47 && i && tok.length > 1) {  // \"/\"\r\n                                // Look at the end of the previous token to determine if the slash is actually division\r\n                                var match = toks[i-1].match(divisionLookBehind);\r\n                                if (match && !keywordRegexLookBehind[match[0]]) {\r\n                                    // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                                    str = str.substr(str.indexOf(tok) + 1);\r\n                                    toks = str.match(bindingToken);\r\n                                    i = -1;\r\n                                    // Continue with just the slash\r\n                                    tok = '/';\r\n                                }\r\n                                // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                            } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\r\n                                ++depth;\r\n                            } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\r\n                                --depth;\r\n                                // The key will be the first token; if it's a string, trim the quotes\r\n                            } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\r\n                                tok = tok.slice(1, -1);\r\n                            }\r\n                            values.push(tok);\r\n                        }\r\n                        if (depth > 0) {\r\n                            throw Error(\"Unbalanced parentheses, braces, or brackets\");\r\n                        }\r\n                    }\r\n                    return result;\r\n                }\r\n\r\n                // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\r\n                var twoWayBindings = {};\r\n\r\n                function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n                    bindingOptions = bindingOptions || {};\r\n\r\n                    function processKeyValue(key, val) {\r\n                        var writableVal;\r\n                        function callPreprocessHook(obj) {\r\n                            return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\r\n                        }\r\n                        if (!bindingParams) {\r\n                            if (!callPreprocessHook(ko['getBindingHandler'](key)))\r\n                                return;\r\n\r\n                            if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\r\n                                // For two-way bindings, provide a write method in case the value\r\n                                // isn't a writable observable.\r\n                                var writeKey = typeof twoWayBindings[key] == 'string' ? twoWayBindings[key] : key;\r\n                                propertyAccessorResultStrings.push(\"'\" + writeKey + \"':function(_z){\" + writableVal + \"=_z}\");\r\n                            }\r\n                        }\r\n                        // Values are wrapped in a function so that each value can be accessed independently\r\n                        if (makeValueAccessors) {\r\n                            val = 'function(){return ' + val + ' }';\r\n                        }\r\n                        resultStrings.push(\"'\" + key + \"':\" + val);\r\n                    }\r\n\r\n                    var resultStrings = [],\r\n                        propertyAccessorResultStrings = [],\r\n                        makeValueAccessors = bindingOptions['valueAccessors'],\r\n                        bindingParams = bindingOptions['bindingParams'],\r\n                        keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                            parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n                    ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n                        processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\r\n                    });\r\n\r\n                    if (propertyAccessorResultStrings.length)\r\n                        processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n                    return resultStrings.join(\",\");\r\n                }\r\n\r\n                return {\r\n                    bindingRewriteValidators: [],\r\n\r\n                    twoWayBindings: twoWayBindings,\r\n\r\n                    parseObjectLiteral: parseObjectLiteral,\r\n\r\n                    preProcessBindings: preProcessBindings,\r\n\r\n                    keyValueArrayContainsKey: function(keyValueArray, key) {\r\n                        for (var i = 0; i < keyValueArray.length; i++)\r\n                            if (keyValueArray[i]['key'] == key)\r\n                                return true;\r\n                        return false;\r\n                    },\r\n\r\n                    // Internal, private KO utility for updating model properties from within bindings\r\n                    // property:            If the property being updated is (or might be) an observable, pass it here\r\n                    //                      If it turns out to be a writable observable, it will be written to directly\r\n                    // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n                    //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\r\n                    // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\r\n                    // value:               The value to be written\r\n                    // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n                    //                      it is !== existing value on that writable observable\r\n                    writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n                        if (!property || !ko.isObservable(property)) {\r\n                            var propWriters = allBindings.get('_ko_property_writers');\r\n                            if (propWriters && propWriters[key])\r\n                                propWriters[key](value);\r\n                        } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\r\n                            property(value);\r\n                        }\r\n                    }\r\n                };\r\n            })();\r\n\r\n            ko.exportSymbol('expressionRewriting', ko.expressionRewriting);\r\n            ko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\r\n            ko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\r\n            ko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\r\n\r\n// Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\r\n// all bindings could use an official 'property writer' API without needing to declare that they might). However,\r\n// since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\r\n// as an internal implementation detail in the short term.\r\n// For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n// undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n// public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\n            ko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\r\n\r\n// For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n// they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\n            ko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\r\n            ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\r\n            (function() {\r\n                // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n                // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\r\n                // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n                // of that virtual hierarchy\r\n                //\r\n                // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\r\n                // without having to scatter special cases all over the binding and templating code.\r\n\r\n                // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n                // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\r\n                // So, use node.text where available, and node.nodeValue elsewhere\r\n                var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\n\r\n                var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n                var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\r\n                var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\r\n\r\n                function isStartComment(node) {\r\n                    return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n                }\r\n\r\n                function isEndComment(node) {\r\n                    return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n                }\r\n\r\n                function isUnmatchedEndComment(node) {\r\n                    return isEndComment(node) && !(ko.utils.domData.get(node, matchedEndCommentDataKey));\r\n                }\r\n\r\n                var matchedEndCommentDataKey = \"__ko_matchedEndComment__\"\r\n\r\n                function getVirtualChildren(startComment, allowUnbalanced) {\r\n                    var currentNode = startComment;\r\n                    var depth = 1;\r\n                    var children = [];\r\n                    while (currentNode = currentNode.nextSibling) {\r\n                        if (isEndComment(currentNode)) {\r\n                            ko.utils.domData.set(currentNode, matchedEndCommentDataKey, true);\r\n                            depth--;\r\n                            if (depth === 0)\r\n                                return children;\r\n                        }\r\n\r\n                        children.push(currentNode);\r\n\r\n                        if (isStartComment(currentNode))\r\n                            depth++;\r\n                    }\r\n                    if (!allowUnbalanced)\r\n                        throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n                    return null;\r\n                }\r\n\r\n                function getMatchingEndComment(startComment, allowUnbalanced) {\r\n                    var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n                    if (allVirtualChildren) {\r\n                        if (allVirtualChildren.length > 0)\r\n                            return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n                        return startComment.nextSibling;\r\n                    } else\r\n                        return null; // Must have no matching end comment, and allowUnbalanced is true\r\n                }\r\n\r\n                function getUnbalancedChildTags(node) {\r\n                    // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\r\n                    //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\r\n                    var childNode = node.firstChild, captureRemaining = null;\r\n                    if (childNode) {\r\n                        do {\r\n                            if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                                captureRemaining.push(childNode);\r\n                            else if (isStartComment(childNode)) {\r\n                                var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                                if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\r\n                                    childNode = matchingEndComment;\r\n                                else\r\n                                    captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\r\n                            } else if (isEndComment(childNode)) {\r\n                                captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\r\n                            }\r\n                        } while (childNode = childNode.nextSibling);\r\n                    }\r\n                    return captureRemaining;\r\n                }\r\n\r\n                ko.virtualElements = {\r\n                    allowedBindings: {},\r\n\r\n                    childNodes: function(node) {\r\n                        return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n                    },\r\n\r\n                    emptyNode: function(node) {\r\n                        if (!isStartComment(node))\r\n                            ko.utils.emptyDomNode(node);\r\n                        else {\r\n                            var virtualChildren = ko.virtualElements.childNodes(node);\r\n                            for (var i = 0, j = virtualChildren.length; i < j; i++)\r\n                                ko.removeNode(virtualChildren[i]);\r\n                        }\r\n                    },\r\n\r\n                    setDomNodeChildren: function(node, childNodes) {\r\n                        if (!isStartComment(node))\r\n                            ko.utils.setDomNodeChildren(node, childNodes);\r\n                        else {\r\n                            ko.virtualElements.emptyNode(node);\r\n                            var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                            for (var i = 0, j = childNodes.length; i < j; i++)\r\n                                endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n                        }\r\n                    },\r\n\r\n                    prepend: function(containerNode, nodeToPrepend) {\r\n                        var insertBeforeNode;\r\n\r\n                        if (isStartComment(containerNode)) {\r\n                            // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                            insertBeforeNode = containerNode.nextSibling;\r\n                            containerNode = containerNode.parentNode;\r\n                        } else {\r\n                            insertBeforeNode = containerNode.firstChild;\r\n                        }\r\n\r\n                        if (!insertBeforeNode) {\r\n                            containerNode.appendChild(nodeToPrepend);\r\n                        } else if (nodeToPrepend !== insertBeforeNode) {       // IE will sometimes crash if you try to insert a node before itself\r\n                            containerNode.insertBefore(nodeToPrepend, insertBeforeNode);\r\n                        }\r\n                    },\r\n\r\n                    insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n                        if (!insertAfterNode) {\r\n                            ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n                        } else {\r\n                            // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                            var insertBeforeNode = insertAfterNode.nextSibling;\r\n\r\n                            if (isStartComment(containerNode)) {\r\n                                containerNode = containerNode.parentNode;\r\n                            }\r\n\r\n                            if (!insertBeforeNode) {\r\n                                containerNode.appendChild(nodeToInsert);\r\n                            } else if (nodeToInsert !== insertBeforeNode) {       // IE will sometimes crash if you try to insert a node before itself\r\n                                containerNode.insertBefore(nodeToInsert, insertBeforeNode);\r\n                            }\r\n                        }\r\n                    },\r\n\r\n                    firstChild: function(node) {\r\n                        if (!isStartComment(node)) {\r\n                            if (node.firstChild && isEndComment(node.firstChild)) {\r\n                                throw new Error(\"Found invalid end comment, as the first child of \" + node);\r\n                            }\r\n                            return node.firstChild;\r\n                        } else if (!node.nextSibling || isEndComment(node.nextSibling)) {\r\n                            return null;\r\n                        } else {\r\n                            return node.nextSibling;\r\n                        }\r\n                    },\r\n\r\n                    nextSibling: function(node) {\r\n                        if (isStartComment(node)) {\r\n                            node = getMatchingEndComment(node);\r\n                        }\r\n\r\n                        if (node.nextSibling && isEndComment(node.nextSibling)) {\r\n                            if (isUnmatchedEndComment(node.nextSibling)) {\r\n                                throw Error(\"Found end comment without a matching opening comment, as child of \" + node);\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        } else {\r\n                            return node.nextSibling;\r\n                        }\r\n                    },\r\n\r\n                    hasBindingValue: isStartComment,\r\n\r\n                    virtualNodeBindingValue: function(node) {\r\n                        var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n                        return regexMatch ? regexMatch[1] : null;\r\n                    },\r\n\r\n                    normaliseVirtualElementDomStructure: function(elementVerified) {\r\n                        // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n                        // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\r\n                        // that are direct descendants of <ul> into the preceding <li>)\r\n                        if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                            return;\r\n\r\n                        // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n                        // must be intended to appear *after* that child, so move them there.\r\n                        var childNode = elementVerified.firstChild;\r\n                        if (childNode) {\r\n                            do {\r\n                                if (childNode.nodeType === 1) {\r\n                                    var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                                    if (unbalancedTags) {\r\n                                        // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                                        var nodeToInsertBefore = childNode.nextSibling;\r\n                                        for (var i = 0; i < unbalancedTags.length; i++) {\r\n                                            if (nodeToInsertBefore)\r\n                                                elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                            else\r\n                                                elementVerified.appendChild(unbalancedTags[i]);\r\n                                        }\r\n                                    }\r\n                                }\r\n                            } while (childNode = childNode.nextSibling);\r\n                        }\r\n                    }\r\n                };\r\n            })();\r\n            ko.exportSymbol('virtualElements', ko.virtualElements);\r\n            ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\r\n            ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\r\n//ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\r\n            ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\r\n//ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\r\n            ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\r\n            ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\r\n            (function() {\r\n                var defaultBindingAttributeName = \"data-bind\";\r\n\r\n                ko.bindingProvider = function() {\r\n                    this.bindingCache = {};\r\n                };\r\n\r\n                ko.utils.extend(ko.bindingProvider.prototype, {\r\n                    'nodeHasBindings': function(node) {\r\n                        switch (node.nodeType) {\r\n                            case 1: // Element\r\n                                return node.getAttribute(defaultBindingAttributeName) != null\r\n                                    || ko.components['getComponentNameForNode'](node);\r\n                            case 8: // Comment node\r\n                                return ko.virtualElements.hasBindingValue(node);\r\n                            default: return false;\r\n                        }\r\n                    },\r\n\r\n                    'getBindings': function(node, bindingContext) {\r\n                        var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                            parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\r\n                        return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n                    },\r\n\r\n                    'getBindingAccessors': function(node, bindingContext) {\r\n                        var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                            parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\r\n                        return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n                    },\r\n\r\n                    // The following function is only used internally by this default provider.\r\n                    // It's not part of the interface definition for a general binding provider.\r\n                    'getBindingsString': function(node, bindingContext) {\r\n                        switch (node.nodeType) {\r\n                            case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                            case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                            default: return null;\r\n                        }\r\n                    },\r\n\r\n                    // The following function is only used internally by this default provider.\r\n                    // It's not part of the interface definition for a general binding provider.\r\n                    'parseBindingsString': function(bindingsString, bindingContext, node, options) {\r\n                        try {\r\n                            var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                            return bindingFunction(bindingContext, node);\r\n                        } catch (ex) {\r\n                            ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                            throw ex;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                ko.bindingProvider['instance'] = new ko.bindingProvider();\r\n\r\n                function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n                    var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\r\n                    return cache[cacheKey]\r\n                        || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n                }\r\n\r\n                function createBindingsStringEvaluator(bindingsString, options) {\r\n                    // Build the source for a function that evaluates \"expression\"\r\n                    // For each scope variable, add an extra level of \"with\" nesting\r\n                    // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n                    var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n                        functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n                    return new Function(\"$context\", \"$element\", functionBody);\r\n                }\r\n            })();\r\n\r\n            ko.exportSymbol('bindingProvider', ko.bindingProvider);\r\n            (function () {\r\n                // Hide or don't minify context properties, see https://github.com/knockout/knockout/issues/2294\r\n                var contextSubscribable = ko.utils.createSymbolOrString('_subscribable');\r\n                var contextAncestorBindingInfo = ko.utils.createSymbolOrString('_ancestorBindingInfo');\r\n                var contextDataDependency = ko.utils.createSymbolOrString('_dataDependency');\r\n\r\n                ko.bindingHandlers = {};\r\n\r\n                // The following element types will not be recursed into during binding.\r\n                var bindingDoesNotRecurseIntoElementTypes = {\r\n                    // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\r\n                    // because it's unexpected and a potential XSS issue.\r\n                    // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\r\n                    // and because such elements' contents are always intended to be bound in a different context\r\n                    // from where they appear in the document.\r\n                    'script': true,\r\n                    'textarea': true,\r\n                    'template': true\r\n                };\r\n\r\n                // Use an overridable method for retrieving binding handlers so that plugins may support dynamically created handlers\r\n                ko['getBindingHandler'] = function(bindingKey) {\r\n                    return ko.bindingHandlers[bindingKey];\r\n                };\r\n\r\n                var inheritParentVm = {};\r\n\r\n                // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n                // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n                ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {\r\n\r\n                    // The binding context object includes static properties for the current, parent, and root view models.\r\n                    // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n                    // any child contexts, must be updated when the view model is changed.\r\n                    function updateContext() {\r\n                        // Most of the time, the context will directly get a view model object, but if a function is given,\r\n                        // we call the function to retrieve the view model. If the function accesses any observables or returns\r\n                        // an observable, the dependency is tracked, and those observables can later cause the binding\r\n                        // context to be updated.\r\n                        var dataItemOrObservable = isFunc ? realDataItemOrAccessor() : realDataItemOrAccessor,\r\n                            dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n                        if (parentContext) {\r\n                            // Copy $root and any custom properties from the parent context\r\n                            ko.utils.extend(self, parentContext);\r\n\r\n                            // Copy Symbol properties\r\n                            if (contextAncestorBindingInfo in parentContext) {\r\n                                self[contextAncestorBindingInfo] = parentContext[contextAncestorBindingInfo];\r\n                            }\r\n                        } else {\r\n                            self['$parents'] = [];\r\n                            self['$root'] = dataItem;\r\n\r\n                            // Export 'ko' in the binding context so it will be available in bindings and templates\r\n                            // even if 'ko' isn't exported as a global, such as when using an AMD loader.\r\n                            // See https://github.com/SteveSanderson/knockout/issues/490\r\n                            self['ko'] = ko;\r\n                        }\r\n\r\n                        self[contextSubscribable] = subscribable;\r\n\r\n                        if (shouldInheritData) {\r\n                            dataItem = self['$data'];\r\n                        } else {\r\n                            self['$rawData'] = dataItemOrObservable;\r\n                            self['$data'] = dataItem;\r\n                        }\r\n\r\n                        if (dataItemAlias)\r\n                            self[dataItemAlias] = dataItem;\r\n\r\n                        // The extendCallback function is provided when creating a child context or extending a context.\r\n                        // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n                        // function could also add dependencies to this binding context.\r\n                        if (extendCallback)\r\n                            extendCallback(self, parentContext, dataItem);\r\n\r\n                        // When a \"parent\" context is given and we don't already have a dependency on its context, register a dependency on it.\r\n                        // Thus whenever the parent context is updated, this context will also be updated.\r\n                        if (parentContext && parentContext[contextSubscribable] && !ko.computedContext.computed().hasAncestorDependency(parentContext[contextSubscribable])) {\r\n                            parentContext[contextSubscribable]();\r\n                        }\r\n\r\n                        if (dataDependency) {\r\n                            self[contextDataDependency] = dataDependency;\r\n                        }\r\n\r\n                        return self['$data'];\r\n                    }\r\n\r\n                    var self = this,\r\n                        shouldInheritData = dataItemOrAccessor === inheritParentVm,\r\n                        realDataItemOrAccessor = shouldInheritData ? undefined : dataItemOrAccessor,\r\n                        isFunc = typeof(realDataItemOrAccessor) == \"function\" && !ko.isObservable(realDataItemOrAccessor),\r\n                        nodes,\r\n                        subscribable,\r\n                        dataDependency = options && options['dataDependency'];\r\n\r\n                    if (options && options['exportDependencies']) {\r\n                        // The \"exportDependencies\" option means that the calling code will track any dependencies and re-create\r\n                        // the binding context when they change.\r\n                        updateContext();\r\n                    } else {\r\n                        subscribable = ko.pureComputed(updateContext);\r\n                        subscribable.peek();\r\n\r\n                        // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n                        // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n                        // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\r\n                        // the context object.\r\n                        if (subscribable.isActive()) {\r\n                            // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\r\n                            subscribable['equalityComparer'] = null;\r\n                        } else {\r\n                            self[contextSubscribable] = undefined;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n                // any observables, the new child context will automatically get a dependency on the parent context.\r\n                // But this does not mean that the $data value of the child context will also get updated. If the child\r\n                // view model also depends on the parent view model, you must provide a function that returns the correct\r\n                // view model on each update.\r\n                ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {\r\n                    if (!options && dataItemAlias && typeof dataItemAlias == \"object\") {\r\n                        options = dataItemAlias;\r\n                        dataItemAlias = options['as'];\r\n                        extendCallback = options['extend'];\r\n                    }\r\n\r\n                    if (dataItemAlias && options && options['noChildContext']) {\r\n                        var isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor);\r\n                        return new ko.bindingContext(inheritParentVm, this, null, function (self) {\r\n                            if (extendCallback)\r\n                                extendCallback(self);\r\n                            self[dataItemAlias] = isFunc ? dataItemOrAccessor() : dataItemOrAccessor;\r\n                        }, options);\r\n                    }\r\n\r\n                    return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function (self, parentContext) {\r\n                        // Extend the context hierarchy by setting the appropriate pointers\r\n                        self['$parentContext'] = parentContext;\r\n                        self['$parent'] = parentContext['$data'];\r\n                        self['$parents'] = (parentContext['$parents'] || []).slice(0);\r\n                        self['$parents'].unshift(self['$parent']);\r\n                        if (extendCallback)\r\n                            extendCallback(self);\r\n                    }, options);\r\n                };\r\n\r\n                // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\r\n                // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n                // when an observable view model is updated.\r\n                ko.bindingContext.prototype['extend'] = function(properties, options) {\r\n                    return new ko.bindingContext(inheritParentVm, this, null, function(self, parentContext) {\r\n                        ko.utils.extend(self, typeof(properties) == \"function\" ? properties(self) : properties);\r\n                    }, options);\r\n                };\r\n\r\n                var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n                function asyncContextDispose(node) {\r\n                    var bindingInfo = ko.utils.domData.get(node, boundElementDomDataKey),\r\n                        asyncContext = bindingInfo && bindingInfo.asyncContext;\r\n                    if (asyncContext) {\r\n                        bindingInfo.asyncContext = null;\r\n                        asyncContext.notifyAncestor();\r\n                    }\r\n                }\r\n                function AsyncCompleteContext(node, bindingInfo, ancestorBindingInfo) {\r\n                    this.node = node;\r\n                    this.bindingInfo = bindingInfo;\r\n                    this.asyncDescendants = [];\r\n                    this.childrenComplete = false;\r\n\r\n                    if (!bindingInfo.asyncContext) {\r\n                        ko.utils.domNodeDisposal.addDisposeCallback(node, asyncContextDispose);\r\n                    }\r\n\r\n                    if (ancestorBindingInfo && ancestorBindingInfo.asyncContext) {\r\n                        ancestorBindingInfo.asyncContext.asyncDescendants.push(node);\r\n                        this.ancestorBindingInfo = ancestorBindingInfo;\r\n                    }\r\n                }\r\n                AsyncCompleteContext.prototype.notifyAncestor = function () {\r\n                    if (this.ancestorBindingInfo && this.ancestorBindingInfo.asyncContext) {\r\n                        this.ancestorBindingInfo.asyncContext.descendantComplete(this.node);\r\n                    }\r\n                };\r\n                AsyncCompleteContext.prototype.descendantComplete = function (node) {\r\n                    ko.utils.arrayRemoveItem(this.asyncDescendants, node);\r\n                    if (!this.asyncDescendants.length && this.childrenComplete) {\r\n                        this.completeChildren();\r\n                    }\r\n                };\r\n                AsyncCompleteContext.prototype.completeChildren = function () {\r\n                    this.childrenComplete = true;\r\n                    if (this.bindingInfo.asyncContext && !this.asyncDescendants.length) {\r\n                        this.bindingInfo.asyncContext = null;\r\n                        ko.utils.domNodeDisposal.removeDisposeCallback(this.node, asyncContextDispose);\r\n                        ko.bindingEvent.notify(this.node, ko.bindingEvent.descendantsComplete);\r\n                        this.notifyAncestor();\r\n                    }\r\n                };\r\n\r\n                ko.bindingEvent = {\r\n                    childrenComplete: \"childrenComplete\",\r\n                    descendantsComplete : \"descendantsComplete\",\r\n\r\n                    subscribe: function (node, event, callback, context, options) {\r\n                        var bindingInfo = ko.utils.domData.getOrSet(node, boundElementDomDataKey, {});\r\n                        if (!bindingInfo.eventSubscribable) {\r\n                            bindingInfo.eventSubscribable = new ko.subscribable;\r\n                        }\r\n                        if (options && options['notifyImmediately'] && bindingInfo.notifiedEvents[event]) {\r\n                            ko.dependencyDetection.ignore(callback, context, [node]);\r\n                        }\r\n                        return bindingInfo.eventSubscribable.subscribe(callback, context, event);\r\n                    },\r\n\r\n                    notify: function (node, event) {\r\n                        var bindingInfo = ko.utils.domData.get(node, boundElementDomDataKey);\r\n                        if (bindingInfo) {\r\n                            bindingInfo.notifiedEvents[event] = true;\r\n                            if (bindingInfo.eventSubscribable) {\r\n                                bindingInfo.eventSubscribable['notifySubscribers'](node, event);\r\n                            }\r\n                            if (event == ko.bindingEvent.childrenComplete) {\r\n                                if (bindingInfo.asyncContext) {\r\n                                    bindingInfo.asyncContext.completeChildren();\r\n                                } else if (bindingInfo.asyncContext === undefined && bindingInfo.eventSubscribable && bindingInfo.eventSubscribable.hasSubscriptionsForEvent(ko.bindingEvent.descendantsComplete)) {\r\n                                    // It's currently an error to register a descendantsComplete handler for a node that was never registered as completing asynchronously.\r\n                                    // That's because without the asyncContext, we don't have a way to know that all descendants have completed.\r\n                                    throw new Error(\"descendantsComplete event not supported for bindings on this node\");\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n\r\n                    startPossiblyAsyncContentBinding: function (node, bindingContext) {\r\n                        var bindingInfo = ko.utils.domData.getOrSet(node, boundElementDomDataKey, {});\r\n\r\n                        if (!bindingInfo.asyncContext) {\r\n                            bindingInfo.asyncContext = new AsyncCompleteContext(node, bindingInfo, bindingContext[contextAncestorBindingInfo]);\r\n                        }\r\n\r\n                        // If the provided context was already extended with this node's binding info, just return the extended context\r\n                        if (bindingContext[contextAncestorBindingInfo] == bindingInfo) {\r\n                            return bindingContext;\r\n                        }\r\n\r\n                        return bindingContext['extend'](function (ctx) {\r\n                            ctx[contextAncestorBindingInfo] = bindingInfo;\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // Returns the valueAccessor function for a binding value\r\n                function makeValueAccessor(value) {\r\n                    return function() {\r\n                        return value;\r\n                    };\r\n                }\r\n\r\n                // Returns the value of a valueAccessor function\r\n                function evaluateValueAccessor(valueAccessor) {\r\n                    return valueAccessor();\r\n                }\r\n\r\n                // Given a function that returns bindings, create and return a new object that contains\r\n                // binding value-accessors functions. Each accessor function calls the original function\r\n                // so that it always gets the latest value and all dependencies are captured. This is used\r\n                // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n                function makeAccessorsFromFunction(callback) {\r\n                    return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n                        return function() {\r\n                            return callback()[key];\r\n                        };\r\n                    });\r\n                }\r\n\r\n                // Given a bindings function or object, create and return a new object that contains\r\n                // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n                function makeBindingAccessors(bindings, context, node) {\r\n                    if (typeof bindings === 'function') {\r\n                        return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n                    } else {\r\n                        return ko.utils.objectMap(bindings, makeValueAccessor);\r\n                    }\r\n                }\r\n\r\n                // This function is used if the binding provider doesn't include a getBindingAccessors function.\r\n                // It must be called with 'this' set to the provider instance.\r\n                function getBindingsAndMakeAccessors(node, context) {\r\n                    return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\r\n                }\r\n\r\n                function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n                    var validator = ko.virtualElements.allowedBindings[bindingName];\r\n                    if (!validator)\r\n                        throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\r\n                }\r\n\r\n                function applyBindingsToDescendantsInternal(bindingContext, elementOrVirtualElement) {\r\n                    var nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n\r\n                    if (nextInQueue) {\r\n                        var currentChild,\r\n                            provider = ko.bindingProvider['instance'],\r\n                            preprocessNode = provider['preprocessNode'];\r\n\r\n                        // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\r\n                        // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n                        // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n                        // trigger insertion of <template> contents at that point in the document.\r\n                        if (preprocessNode) {\r\n                            while (currentChild = nextInQueue) {\r\n                                nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                                preprocessNode.call(provider, currentChild);\r\n                            }\r\n                            // Reset nextInQueue for the next loop\r\n                            nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n                        }\r\n\r\n                        while (currentChild = nextInQueue) {\r\n                            // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n                            nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                            applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild);\r\n                        }\r\n                    }\r\n                    ko.bindingEvent.notify(elementOrVirtualElement, ko.bindingEvent.childrenComplete);\r\n                }\r\n\r\n                function applyBindingsToNodeAndDescendantsInternal(bindingContext, nodeVerified) {\r\n                    var bindingContextForDescendants = bindingContext;\r\n\r\n                    var isElement = (nodeVerified.nodeType === 1);\r\n                    if (isElement) // Workaround IE <= 8 HTML parsing weirdness\r\n                        ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n                    // Perf optimisation: Apply bindings only if...\r\n                    // (1) We need to store the binding info for the node (all element nodes)\r\n                    // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\r\n                    var shouldApplyBindings = isElement || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);\r\n                    if (shouldApplyBindings)\r\n                        bindingContextForDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext)['bindingContextForDescendants'];\r\n\r\n                    if (bindingContextForDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n                        applyBindingsToDescendantsInternal(bindingContextForDescendants, nodeVerified);\r\n                    }\r\n                }\r\n\r\n                function topologicalSortBindings(bindings) {\r\n                    // Depth-first sort\r\n                    var result = [],                // The list of key/handler pairs that we will return\r\n                        bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\r\n                        cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\r\n                    ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n                        if (!bindingsConsidered[bindingKey]) {\r\n                            var binding = ko['getBindingHandler'](bindingKey);\r\n                            if (binding) {\r\n                                // First add dependencies (if any) of the current binding\r\n                                if (binding['after']) {\r\n                                    cyclicDependencyStack.push(bindingKey);\r\n                                    ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\r\n                                        if (bindings[bindingDependencyKey]) {\r\n                                            if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                                throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                            } else {\r\n                                                pushBinding(bindingDependencyKey);\r\n                                            }\r\n                                        }\r\n                                    });\r\n                                    cyclicDependencyStack.length--;\r\n                                }\r\n                                // Next add the current binding\r\n                                result.push({ key: bindingKey, handler: binding });\r\n                            }\r\n                            bindingsConsidered[bindingKey] = true;\r\n                        }\r\n                    });\r\n\r\n                    return result;\r\n                }\r\n\r\n                function applyBindingsToNodeInternal(node, sourceBindings, bindingContext) {\r\n                    var bindingInfo = ko.utils.domData.getOrSet(node, boundElementDomDataKey, {});\r\n\r\n                    // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n                    var alreadyBound = bindingInfo.alreadyBound;\r\n                    if (!sourceBindings) {\r\n                        if (alreadyBound) {\r\n                            throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n                        }\r\n                        bindingInfo.alreadyBound = true;\r\n                    }\r\n                    if (!alreadyBound) {\r\n                        bindingInfo.context = bindingContext;\r\n                    }\r\n                    if (!bindingInfo.notifiedEvents) {\r\n                        bindingInfo.notifiedEvents = {};\r\n                    }\r\n\r\n                    // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n                    var bindings;\r\n                    if (sourceBindings && typeof sourceBindings !== 'function') {\r\n                        bindings = sourceBindings;\r\n                    } else {\r\n                        var provider = ko.bindingProvider['instance'],\r\n                            getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\r\n\r\n                        // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n                        // the binding context is updated or if the binding provider accesses observables.\r\n                        var bindingsUpdater = ko.dependentObservable(\r\n                            function() {\r\n                                bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                                // Register a dependency on the binding context to support observable view models.\r\n                                if (bindings) {\r\n                                    if (bindingContext[contextSubscribable]) {\r\n                                        bindingContext[contextSubscribable]();\r\n                                    }\r\n                                    if (bindingContext[contextDataDependency]) {\r\n                                        bindingContext[contextDataDependency]();\r\n                                    }\r\n                                }\r\n                                return bindings;\r\n                            },\r\n                            null, { disposeWhenNodeIsRemoved: node }\r\n                        );\r\n\r\n                        if (!bindings || !bindingsUpdater.isActive())\r\n                            bindingsUpdater = null;\r\n                    }\r\n\r\n                    var contextToExtend = bindingContext;\r\n                    var bindingHandlerThatControlsDescendantBindings;\r\n                    if (bindings) {\r\n                        // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\r\n                        // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n                        // the latest binding value and registers a dependency on the binding updater.\r\n                        var getValueAccessor = bindingsUpdater\r\n                            ? function(bindingKey) {\r\n                                return function() {\r\n                                    return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                                };\r\n                            } : function(bindingKey) {\r\n                                return bindings[bindingKey];\r\n                            };\r\n\r\n                        // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n                        function allBindings() {\r\n                            return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n                        }\r\n                        // The following is the 3.x allBindings API\r\n                        allBindings['get'] = function(key) {\r\n                            return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\r\n                        };\r\n                        allBindings['has'] = function(key) {\r\n                            return key in bindings;\r\n                        };\r\n\r\n                        if (ko.bindingEvent.childrenComplete in bindings) {\r\n                            ko.bindingEvent.subscribe(node, ko.bindingEvent.childrenComplete, function () {\r\n                                var callback = evaluateValueAccessor(bindings[ko.bindingEvent.childrenComplete]);\r\n                                if (callback) {\r\n                                    var nodes = ko.virtualElements.childNodes(node);\r\n                                    if (nodes.length) {\r\n                                        callback(nodes, ko.dataFor(nodes[0]));\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        if (ko.bindingEvent.descendantsComplete in bindings) {\r\n                            contextToExtend = ko.bindingEvent.startPossiblyAsyncContentBinding(node, bindingContext);\r\n                            ko.bindingEvent.subscribe(node, ko.bindingEvent.descendantsComplete, function () {\r\n                                var callback = evaluateValueAccessor(bindings[ko.bindingEvent.descendantsComplete]);\r\n                                if (callback && ko.virtualElements.firstChild(node)) {\r\n                                    callback(node);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        // First put the bindings into the right order\r\n                        var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n                        // Go through the sorted bindings, calling init and update for each\r\n                        ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                            // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                            // so bindingKeyAndHandler.handler will always be nonnull.\r\n                            var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                                handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                                bindingKey = bindingKeyAndHandler.key;\r\n\r\n                            if (node.nodeType === 8) {\r\n                                validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                            }\r\n\r\n                            try {\r\n                                // Run init, ignoring any dependencies\r\n                                if (typeof handlerInitFn == \"function\") {\r\n                                    ko.dependencyDetection.ignore(function() {\r\n                                        var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, contextToExtend['$data'], contextToExtend);\r\n\r\n                                        // If this binding handler claims to control descendant bindings, make a note of this\r\n                                        if (initResult && initResult['controlsDescendantBindings']) {\r\n                                            if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                                throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                            bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                // Run update in its own computed wrapper\r\n                                if (typeof handlerUpdateFn == \"function\") {\r\n                                    ko.dependentObservable(\r\n                                        function() {\r\n                                            handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, contextToExtend['$data'], contextToExtend);\r\n                                        },\r\n                                        null,\r\n                                        { disposeWhenNodeIsRemoved: node }\r\n                                    );\r\n                                }\r\n                            } catch (ex) {\r\n                                ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                                throw ex;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    var shouldBindDescendants = bindingHandlerThatControlsDescendantBindings === undefined;\r\n                    return {\r\n                        'shouldBindDescendants': shouldBindDescendants,\r\n                        'bindingContextForDescendants': shouldBindDescendants && contextToExtend\r\n                    };\r\n                };\r\n\r\n                ko.storedBindingContextForNode = function (node) {\r\n                    var bindingInfo = ko.utils.domData.get(node, boundElementDomDataKey);\r\n                    return bindingInfo && bindingInfo.context;\r\n                }\r\n\r\n                function getBindingContext(viewModelOrBindingContext, extendContextCallback) {\r\n                    return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\r\n                        ? viewModelOrBindingContext\r\n                        : new ko.bindingContext(viewModelOrBindingContext, undefined, undefined, extendContextCallback);\r\n                }\r\n\r\n                ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n                    if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\r\n                        ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n                    return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext));\r\n                };\r\n\r\n                ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n                    var context = getBindingContext(viewModelOrBindingContext);\r\n                    return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n                };\r\n\r\n                ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n                    if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n                        applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode);\r\n                };\r\n\r\n                ko.applyBindings = function (viewModelOrBindingContext, rootNode, extendContextCallback) {\r\n                    // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\r\n                    if (!jQueryInstance && window['jQuery']) {\r\n                        jQueryInstance = window['jQuery'];\r\n                    }\r\n\r\n                    if (arguments.length < 2) {\r\n                        rootNode = document.body;\r\n                        if (!rootNode) {\r\n                            throw Error(\"ko.applyBindings: could not find document.body; has the document been loaded?\");\r\n                        }\r\n                    } else if (!rootNode || (rootNode.nodeType !== 1 && rootNode.nodeType !== 8)) {\r\n                        throw Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n                    }\r\n\r\n                    applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext, extendContextCallback), rootNode);\r\n                };\r\n\r\n                // Retrieving binding context from arbitrary nodes\r\n                ko.contextFor = function(node) {\r\n                    // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\r\n                    if (node && (node.nodeType === 1 || node.nodeType === 8)) {\r\n                        return ko.storedBindingContextForNode(node);\r\n                    }\r\n                    return undefined;\r\n                };\r\n                ko.dataFor = function(node) {\r\n                    var context = ko.contextFor(node);\r\n                    return context ? context['$data'] : undefined;\r\n                };\r\n\r\n                ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\r\n                ko.exportSymbol('bindingEvent', ko.bindingEvent);\r\n                ko.exportSymbol('bindingEvent.subscribe', ko.bindingEvent.subscribe);\r\n                ko.exportSymbol('bindingEvent.startPossiblyAsyncContentBinding', ko.bindingEvent.startPossiblyAsyncContentBinding);\r\n                ko.exportSymbol('applyBindings', ko.applyBindings);\r\n                ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\r\n                ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\r\n                ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\r\n                ko.exportSymbol('contextFor', ko.contextFor);\r\n                ko.exportSymbol('dataFor', ko.dataFor);\r\n            })();\r\n            (function(undefined) {\r\n                var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n                    loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n                ko.components = {\r\n                    get: function(componentName, callback) {\r\n                        var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n                        if (cachedDefinition) {\r\n                            // It's already loaded and cached. Reuse the same definition object.\r\n                            // Note that for API consistency, even cache hits complete asynchronously by default.\r\n                            // You can bypass this by putting synchronous:true on your component config.\r\n                            if (cachedDefinition.isSynchronousComponent) {\r\n                                ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\r\n                                    callback(cachedDefinition.definition);\r\n                                });\r\n                            } else {\r\n                                ko.tasks.schedule(function() { callback(cachedDefinition.definition); });\r\n                            }\r\n                        } else {\r\n                            // Join the loading process that is already underway, or start a new one.\r\n                            loadComponentAndNotify(componentName, callback);\r\n                        }\r\n                    },\r\n\r\n                    clearCachedDefinition: function(componentName) {\r\n                        delete loadedDefinitionsCache[componentName];\r\n                    },\r\n\r\n                    _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n                };\r\n\r\n                function getObjectOwnProperty(obj, propName) {\r\n                    return Object.prototype.hasOwnProperty.call(obj, propName) ? obj[propName] : undefined;\r\n                }\r\n\r\n                function loadComponentAndNotify(componentName, callback) {\r\n                    var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n                        completedAsync;\r\n                    if (!subscribable) {\r\n                        // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\r\n                        subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n                        subscribable.subscribe(callback);\r\n\r\n                        beginLoadingComponent(componentName, function(definition, config) {\r\n                            var isSynchronousComponent = !!(config && config['synchronous']);\r\n                            loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\r\n                            delete loadingSubscribablesCache[componentName];\r\n\r\n                            // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                            // adding an extra task schedule if it's unnecessary (i.e., the completion is already\r\n                            // async).\r\n                            //\r\n                            // You can bypass the 'always asynchronous' feature by putting the synchronous:true\r\n                            // flag on your component configuration when you register it.\r\n                            if (completedAsync || isSynchronousComponent) {\r\n                                // Note that notifySubscribers ignores any dependencies read within the callback.\r\n                                // See comment in loaderRegistryBehaviors.js for reasoning\r\n                                subscribable['notifySubscribers'](definition);\r\n                            } else {\r\n                                ko.tasks.schedule(function() {\r\n                                    subscribable['notifySubscribers'](definition);\r\n                                });\r\n                            }\r\n                        });\r\n                        completedAsync = true;\r\n                    } else {\r\n                        subscribable.subscribe(callback);\r\n                    }\r\n                }\r\n\r\n                function beginLoadingComponent(componentName, callback) {\r\n                    getFirstResultFromLoaders('getConfig', [componentName], function(config) {\r\n                        if (config) {\r\n                            // We have a config, so now load its definition\r\n                            getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\r\n                                callback(definition, config);\r\n                            });\r\n                        } else {\r\n                            // The component has no config - it's unknown to all the loaders.\r\n                            // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                            // process and this callback would not run. For this callback to run, all loaders must\r\n                            // have confirmed they don't know about this component.\r\n                            callback(null, null);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n                    // On the first call in the stack, start with the full set of loaders\r\n                    if (!candidateLoaders) {\r\n                        candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\r\n                    }\r\n\r\n                    // Try the next candidate\r\n                    var currentCandidateLoader = candidateLoaders.shift();\r\n                    if (currentCandidateLoader) {\r\n                        var methodInstance = currentCandidateLoader[methodName];\r\n                        if (methodInstance) {\r\n                            var wasAborted = false,\r\n                                synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                                    if (wasAborted) {\r\n                                        callback(null);\r\n                                    } else if (result !== null) {\r\n                                        // This candidate returned a value. Use it.\r\n                                        callback(result);\r\n                                    } else {\r\n                                        // Try the next candidate\r\n                                        getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                                    }\r\n                                }));\r\n\r\n                            // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                            // that we'll extend the API to support synchronous return values in the future. It won't be\r\n                            // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                            if (synchronousReturnValue !== undefined) {\r\n                                wasAborted = true;\r\n\r\n                                // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                                // KO's specs running tidily, since we can observe the loading got aborted without\r\n                                // having exceptions cluttering up the console too.\r\n                                if (!currentCandidateLoader['suppressLoaderExceptions']) {\r\n                                    throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\r\n                            getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                        }\r\n                    } else {\r\n                        // No candidates returned a value\r\n                        callback(null);\r\n                    }\r\n                }\r\n\r\n                // Reference the loaders via string name so it's possible for developers\r\n                // to replace the whole array by assigning to ko.components.loaders\r\n                ko.components['loaders'] = [];\r\n\r\n                ko.exportSymbol('components', ko.components);\r\n                ko.exportSymbol('components.get', ko.components.get);\r\n                ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\r\n            })();\r\n            (function(undefined) {\r\n\r\n                // The default loader is responsible for two things:\r\n                // 1. Maintaining the default in-memory registry of component configuration objects\r\n                //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\r\n                // 2. Answering requests for components by fetching configuration objects\r\n                //    from that default in-memory registry and resolving them into standard\r\n                //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n                // Custom loaders may override either of these facilities, i.e.,\r\n                // 1. To supply configuration objects from some other source (e.g., conventions)\r\n                // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n                var defaultConfigRegistry = {};\r\n\r\n                ko.components.register = function(componentName, config) {\r\n                    if (!config) {\r\n                        throw new Error('Invalid configuration for ' + componentName);\r\n                    }\r\n\r\n                    if (ko.components.isRegistered(componentName)) {\r\n                        throw new Error('Component ' + componentName + ' is already registered');\r\n                    }\r\n\r\n                    defaultConfigRegistry[componentName] = config;\r\n                };\r\n\r\n                ko.components.isRegistered = function(componentName) {\r\n                    return Object.prototype.hasOwnProperty.call(defaultConfigRegistry, componentName);\r\n                };\r\n\r\n                ko.components.unregister = function(componentName) {\r\n                    delete defaultConfigRegistry[componentName];\r\n                    ko.components.clearCachedDefinition(componentName);\r\n                };\r\n\r\n                ko.components.defaultLoader = {\r\n                    'getConfig': function(componentName, callback) {\r\n                        var result = ko.components.isRegistered(componentName)\r\n                            ? defaultConfigRegistry[componentName]\r\n                            : null;\r\n                        callback(result);\r\n                    },\r\n\r\n                    'loadComponent': function(componentName, config, callback) {\r\n                        var errorCallback = makeErrorCallback(componentName);\r\n                        possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                            resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n                        });\r\n                    },\r\n\r\n                    'loadTemplate': function(componentName, templateConfig, callback) {\r\n                        resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n                    },\r\n\r\n                    'loadViewModel': function(componentName, viewModelConfig, callback) {\r\n                        resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n                    }\r\n                };\r\n\r\n                var createViewModelKey = 'createViewModel';\r\n\r\n                // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n                // into the standard component definition format:\r\n                //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\r\n                // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n                // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\r\n                // so this is implemented manually below.\r\n                function resolveConfig(componentName, errorCallback, config, callback) {\r\n                    var result = {},\r\n                        makeCallBackWhenZero = 2,\r\n                        tryIssueCallback = function() {\r\n                            if (--makeCallBackWhenZero === 0) {\r\n                                callback(result);\r\n                            }\r\n                        },\r\n                        templateConfig = config['template'],\r\n                        viewModelConfig = config['viewModel'];\r\n\r\n                    if (templateConfig) {\r\n                        possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                            ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\r\n                                result['template'] = resolvedTemplate;\r\n                                tryIssueCallback();\r\n                            });\r\n                        });\r\n                    } else {\r\n                        tryIssueCallback();\r\n                    }\r\n\r\n                    if (viewModelConfig) {\r\n                        possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                            ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\r\n                                result[createViewModelKey] = resolvedViewModel;\r\n                                tryIssueCallback();\r\n                            });\r\n                        });\r\n                    } else {\r\n                        tryIssueCallback();\r\n                    }\r\n                }\r\n\r\n                function resolveTemplate(errorCallback, templateConfig, callback) {\r\n                    if (typeof templateConfig === 'string') {\r\n                        // Markup - parse it\r\n                        callback(ko.utils.parseHtmlFragment(templateConfig));\r\n                    } else if (templateConfig instanceof Array) {\r\n                        // Assume already an array of DOM nodes - pass through unchanged\r\n                        callback(templateConfig);\r\n                    } else if (isDocumentFragment(templateConfig)) {\r\n                        // Document fragment - use its child nodes\r\n                        callback(ko.utils.makeArray(templateConfig.childNodes));\r\n                    } else if (templateConfig['element']) {\r\n                        var element = templateConfig['element'];\r\n                        if (isDomElement(element)) {\r\n                            // Element instance - copy its child nodes\r\n                            callback(cloneNodesFromTemplateSourceElement(element));\r\n                        } else if (typeof element === 'string') {\r\n                            // Element ID - find it, then copy its child nodes\r\n                            var elemInstance = document.getElementById(element);\r\n                            if (elemInstance) {\r\n                                callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                            } else {\r\n                                errorCallback('Cannot find element with ID ' + element);\r\n                            }\r\n                        } else {\r\n                            errorCallback('Unknown element type: ' + element);\r\n                        }\r\n                    } else {\r\n                        errorCallback('Unknown template value: ' + templateConfig);\r\n                    }\r\n                }\r\n\r\n                function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n                    if (typeof viewModelConfig === 'function') {\r\n                        // Constructor - convert to standard factory function format\r\n                        // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n                        // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\r\n                        // be used in factory functions, not viewmodel constructors.\r\n                        callback(function (params /*, componentInfo */) {\r\n                            return new viewModelConfig(params);\r\n                        });\r\n                    } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\r\n                        // Already a factory function - use it as-is\r\n                        callback(viewModelConfig[createViewModelKey]);\r\n                    } else if ('instance' in viewModelConfig) {\r\n                        // Fixed object instance - promote to createViewModel format for API consistency\r\n                        var fixedInstance = viewModelConfig['instance'];\r\n                        callback(function (params, componentInfo) {\r\n                            return fixedInstance;\r\n                        });\r\n                    } else if ('viewModel' in viewModelConfig) {\r\n                        // Resolved AMD module whose value is of the form { viewModel: ... }\r\n                        resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\r\n                    } else {\r\n                        errorCallback('Unknown viewModel value: ' + viewModelConfig);\r\n                    }\r\n                }\r\n\r\n                function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n                    switch (ko.utils.tagNameLower(elemInstance)) {\r\n                        case 'script':\r\n                            return ko.utils.parseHtmlFragment(elemInstance.text);\r\n                        case 'textarea':\r\n                            return ko.utils.parseHtmlFragment(elemInstance.value);\r\n                        case 'template':\r\n                            // For browsers with proper <template> element support (i.e., where the .content property\r\n                            // gives a document fragment), use that document fragment.\r\n                            if (isDocumentFragment(elemInstance.content)) {\r\n                                return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                            }\r\n                    }\r\n\r\n                    // Regular elements such as <div>, and <template> elements on old browsers that don't really\r\n                    // understand <template> and just treat it as a regular container\r\n                    return ko.utils.cloneNodes(elemInstance.childNodes);\r\n                }\r\n\r\n                function isDomElement(obj) {\r\n                    if (window['HTMLElement']) {\r\n                        return obj instanceof HTMLElement;\r\n                    } else {\r\n                        return obj && obj.tagName && obj.nodeType === 1;\r\n                    }\r\n                }\r\n\r\n                function isDocumentFragment(obj) {\r\n                    if (window['DocumentFragment']) {\r\n                        return obj instanceof DocumentFragment;\r\n                    } else {\r\n                        return obj && obj.nodeType === 11;\r\n                    }\r\n                }\r\n\r\n                function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n                    if (typeof config['require'] === 'string') {\r\n                        // The config is the value of an AMD module\r\n                        if (amdRequire || window['require']) {\r\n                            (amdRequire || window['require'])([config['require']], function (module) {\r\n                                if (module && typeof module === 'object' && module.__esModule && module.default) {\r\n                                    module = module.default;\r\n                                }\r\n                                callback(module);\r\n                            });\r\n                        } else {\r\n                            errorCallback('Uses require, but no AMD loader is present');\r\n                        }\r\n                    } else {\r\n                        callback(config);\r\n                    }\r\n                }\r\n\r\n                function makeErrorCallback(componentName) {\r\n                    return function (message) {\r\n                        throw new Error('Component \\'' + componentName + '\\': ' + message);\r\n                    };\r\n                }\r\n\r\n                ko.exportSymbol('components.register', ko.components.register);\r\n                ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\r\n                ko.exportSymbol('components.unregister', ko.components.unregister);\r\n\r\n                // Expose the default loader so that developers can directly ask it for configuration\r\n                // or to resolve configuration\r\n                ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\r\n\r\n                // By default, the default loader is the only registered component loader\r\n                ko.components['loaders'].push(ko.components.defaultLoader);\r\n\r\n                // Privately expose the underlying config registry for use in old-IE shim\r\n                ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n            })();\r\n            (function (undefined) {\r\n                // Overridable API for determining which component name applies to a given node. By overriding this,\r\n                // you can for example map specific tagNames to components that are not preregistered.\r\n                ko.components['getComponentNameForNode'] = function(node) {\r\n                    var tagNameLower = ko.utils.tagNameLower(node);\r\n                    if (ko.components.isRegistered(tagNameLower)) {\r\n                        // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\r\n                        if (tagNameLower.indexOf('-') != -1 || ('' + node) == \"[object HTMLUnknownElement]\" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {\r\n                            return tagNameLower;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n                    // Determine if it's really a custom element matching a component\r\n                    if (node.nodeType === 1) {\r\n                        var componentName = ko.components['getComponentNameForNode'](node);\r\n                        if (componentName) {\r\n                            // It does represent a component, so add a component binding for it\r\n                            allBindings = allBindings || {};\r\n\r\n                            if (allBindings['component']) {\r\n                                // Avoid silently overwriting some other 'component' binding that may already be on the element\r\n                                throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\r\n                            }\r\n\r\n                            var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                            allBindings['component'] = valueAccessors\r\n                                ? function() { return componentBindingValue; }\r\n                                : componentBindingValue;\r\n                        }\r\n                    }\r\n\r\n                    return allBindings;\r\n                }\r\n\r\n                var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n                function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n                    var paramsAttribute = elem.getAttribute('params');\r\n\r\n                    if (paramsAttribute) {\r\n                        var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\r\n                            rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                                return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                            }),\r\n                            result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                                var paramValue = paramValueComputed.peek();\r\n                                // Does the evaluation of the parameter value unwrap any observables?\r\n                                if (!paramValueComputed.isActive()) {\r\n                                    // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\r\n                                    // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                                    return paramValue;\r\n                                } else {\r\n                                    // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                                    // level of observability, and any inner (resulting model value) level of observability.\r\n                                    // This means the component doesn't have to worry about multiple unwrapping. If the value is a\r\n                                    // writable observable, the computed will also be writable and pass the value on to the observable.\r\n                                    return ko.computed({\r\n                                        'read': function() {\r\n                                            return ko.utils.unwrapObservable(paramValueComputed());\r\n                                        },\r\n                                        'write': ko.isWriteableObservable(paramValue) && function(value) {\r\n                                            paramValueComputed()(value);\r\n                                        },\r\n                                        disposeWhenNodeIsRemoved: elem\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\r\n                        // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n                        // (model value) observability, or in case the model value observable has subobservables.\r\n                        if (!Object.prototype.hasOwnProperty.call(result, '$raw')) {\r\n                            result['$raw'] = rawParamComputedValues;\r\n                        }\r\n\r\n                        return result;\r\n                    } else {\r\n                        // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n                        // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n                        // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\r\n                        return { '$raw': {} };\r\n                    }\r\n                }\r\n\r\n                // --------------------------------------------------------------------------------\r\n                // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n                if (ko.utils.ieVersion < 9) {\r\n                    // Whenever you preregister a component, enable it as a custom element in the current document\r\n                    ko.components['register'] = (function(originalFunction) {\r\n                        return function(componentName) {\r\n                            document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\r\n                            return originalFunction.apply(this, arguments);\r\n                        }\r\n                    })(ko.components['register']);\r\n\r\n                    // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n                    // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n                    document.createDocumentFragment = (function(originalFunction) {\r\n                        return function() {\r\n                            var newDocFrag = originalFunction(),\r\n                                allComponents = ko.components._allRegisteredComponents;\r\n                            for (var componentName in allComponents) {\r\n                                if (Object.prototype.hasOwnProperty.call(allComponents, componentName)) {\r\n                                    newDocFrag.createElement(componentName);\r\n                                }\r\n                            }\r\n                            return newDocFrag;\r\n                        };\r\n                    })(document.createDocumentFragment);\r\n                }\r\n            })();(function(undefined) {\r\n                var componentLoadingOperationUniqueId = 0;\r\n\r\n                ko.bindingHandlers['component'] = {\r\n                    'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n                        var currentViewModel,\r\n                            currentLoadingOperationId,\r\n                            afterRenderSub,\r\n                            disposeAssociatedComponentViewModel = function () {\r\n                                var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\r\n                                if (typeof currentViewModelDispose === 'function') {\r\n                                    currentViewModelDispose.call(currentViewModel);\r\n                                }\r\n                                if (afterRenderSub) {\r\n                                    afterRenderSub.dispose();\r\n                                }\r\n                                afterRenderSub = null;\r\n                                currentViewModel = null;\r\n                                // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                                currentLoadingOperationId = null;\r\n                            },\r\n                            originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\r\n\r\n                        ko.virtualElements.emptyNode(element);\r\n                        ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n                        ko.computed(function () {\r\n                            var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                                componentName, componentParams;\r\n\r\n                            if (typeof value === 'string') {\r\n                                componentName = value;\r\n                            } else {\r\n                                componentName = ko.utils.unwrapObservable(value['name']);\r\n                                componentParams = ko.utils.unwrapObservable(value['params']);\r\n                            }\r\n\r\n                            if (!componentName) {\r\n                                throw new Error('No component name specified');\r\n                            }\r\n\r\n                            var asyncContext = ko.bindingEvent.startPossiblyAsyncContentBinding(element, bindingContext);\r\n\r\n                            var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                            ko.components.get(componentName, function(componentDefinition) {\r\n                                // If this is not the current load operation for this element, ignore it.\r\n                                if (currentLoadingOperationId !== loadingOperationId) {\r\n                                    return;\r\n                                }\r\n\r\n                                // Clean up previous state\r\n                                disposeAssociatedComponentViewModel();\r\n\r\n                                // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                                if (!componentDefinition) {\r\n                                    throw new Error('Unknown component \\'' + componentName + '\\'');\r\n                                }\r\n                                cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n\r\n                                var componentInfo = {\r\n                                    'element': element,\r\n                                    'templateNodes': originalChildNodes\r\n                                };\r\n\r\n                                var componentViewModel = createViewModel(componentDefinition, componentParams, componentInfo),\r\n                                    childBindingContext = asyncContext['createChildContext'](componentViewModel, {\r\n                                        'extend': function(ctx) {\r\n                                            ctx['$component'] = componentViewModel;\r\n                                            ctx['$componentTemplateNodes'] = originalChildNodes;\r\n                                        }\r\n                                    });\r\n\r\n                                if (componentViewModel && componentViewModel['koDescendantsComplete']) {\r\n                                    afterRenderSub = ko.bindingEvent.subscribe(element, ko.bindingEvent.descendantsComplete, componentViewModel['koDescendantsComplete'], componentViewModel);\r\n                                }\r\n\r\n                                currentViewModel = componentViewModel;\r\n                                ko.applyBindingsToDescendants(childBindingContext, element);\r\n                            });\r\n                        }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n                        return { 'controlsDescendantBindings': true };\r\n                    }\r\n                };\r\n\r\n                ko.virtualElements.allowedBindings['component'] = true;\r\n\r\n                function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n                    var template = componentDefinition['template'];\r\n                    if (!template) {\r\n                        throw new Error('Component \\'' + componentName + '\\' has no template');\r\n                    }\r\n\r\n                    var clonedNodesArray = ko.utils.cloneNodes(template);\r\n                    ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n                }\r\n\r\n                function createViewModel(componentDefinition, componentParams, componentInfo) {\r\n                    var componentViewModelFactory = componentDefinition['createViewModel'];\r\n                    return componentViewModelFactory\r\n                        ? componentViewModelFactory.call(componentDefinition, componentParams, componentInfo)\r\n                        : componentParams; // Template-only component\r\n                }\r\n\r\n            })();\r\n            var attrHtmlToJavaScriptMap = { 'class': 'className', 'for': 'htmlFor' };\r\n            ko.bindingHandlers['attr'] = {\r\n                'update': function(element, valueAccessor, allBindings) {\r\n                    var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n                    ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n                        attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n                        // Find the namespace of this attribute, if any.\r\n                        var prefixLen = attrName.indexOf(':');\r\n                        var namespace = \"lookupNamespaceURI\" in element && prefixLen > 0 && element.lookupNamespaceURI(attrName.substr(0, prefixLen));\r\n\r\n                        // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n                        // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n                        // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n                        var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n                        if (toRemove) {\r\n                            namespace ? element.removeAttributeNS(namespace, attrName) : element.removeAttribute(attrName);\r\n                        } else {\r\n                            attrValue = attrValue.toString();\r\n                        }\r\n\r\n                        // In IE <= 7 and IE8 Quirks Mode, you have to use the JavaScript property name instead of the\r\n                        // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n                        // but instead of figuring out the mode, we'll just set the attribute through the JavaScript\r\n                        // property for IE <= 8.\r\n                        if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavaScriptMap) {\r\n                            attrName = attrHtmlToJavaScriptMap[attrName];\r\n                            if (toRemove)\r\n                                element.removeAttribute(attrName);\r\n                            else\r\n                                element[attrName] = attrValue;\r\n                        } else if (!toRemove) {\r\n                            namespace ? element.setAttributeNS(namespace, attrName, attrValue) : element.setAttribute(attrName, attrValue);\r\n                        }\r\n\r\n                        // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n                        // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n                        // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n                        // entirely, and there's no strong reason to allow for such casing in HTML.\r\n                        if (attrName === \"name\") {\r\n                            ko.utils.setElementName(element, toRemove ? \"\" : attrValue);\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            (function() {\r\n\r\n                ko.bindingHandlers['checked'] = {\r\n                    'after': ['value', 'attr'],\r\n                    'init': function (element, valueAccessor, allBindings) {\r\n                        var checkedValue = ko.pureComputed(function() {\r\n                            // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n                            if (allBindings['has']('checkedValue')) {\r\n                                return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n                            } else if (useElementValue) {\r\n                                if (allBindings['has']('value')) {\r\n                                    return ko.utils.unwrapObservable(allBindings.get('value'));\r\n                                } else {\r\n                                    return element.value;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        function updateModel() {\r\n                            // This updates the model value from the view value.\r\n                            // It runs in response to DOM events (click) and changes in checkedValue.\r\n                            var isChecked = element.checked,\r\n                                elemValue = checkedValue();\r\n\r\n                            // When we're first setting up this computed, don't change any model state.\r\n                            if (ko.computedContext.isInitial()) {\r\n                                return;\r\n                            }\r\n\r\n                            // We can ignore unchecked radio buttons, because some other radio\r\n                            // button will be checked, and that one can take care of updating state.\r\n                            // Also ignore value changes to an already unchecked checkbox.\r\n                            if (!isChecked && (isRadio || ko.computedContext.getDependenciesCount())) {\r\n                                return;\r\n                            }\r\n\r\n                            var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n                            if (valueIsArray) {\r\n                                var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue,\r\n                                    saveOldValue = oldElemValue;\r\n                                oldElemValue = elemValue;\r\n\r\n                                if (saveOldValue !== elemValue) {\r\n                                    // When we're responding to the checkedValue changing, and the element is\r\n                                    // currently checked, replace the old elem value with the new elem value\r\n                                    // in the model array.\r\n                                    if (isChecked) {\r\n                                        ko.utils.addOrRemoveItem(writableValue, elemValue, true);\r\n                                        ko.utils.addOrRemoveItem(writableValue, saveOldValue, false);\r\n                                    }\r\n                                } else {\r\n                                    // When we're responding to the user having checked/unchecked a checkbox,\r\n                                    // add/remove the element value to the model array.\r\n                                    ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\r\n                                }\r\n\r\n                                if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\r\n                                    modelValue(writableValue);\r\n                                }\r\n                            } else {\r\n                                if (isCheckbox) {\r\n                                    if (elemValue === undefined) {\r\n                                        elemValue = isChecked;\r\n                                    } else if (!isChecked) {\r\n                                        elemValue = undefined;\r\n                                    }\r\n                                }\r\n                                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n                            }\r\n                        };\r\n\r\n                        function updateView() {\r\n                            // This updates the view value from the model value.\r\n                            // It runs in response to changes in the bound (checked) value.\r\n                            var modelValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                                elemValue = checkedValue();\r\n\r\n                            if (valueIsArray) {\r\n                                // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                                element.checked = ko.utils.arrayIndexOf(modelValue, elemValue) >= 0;\r\n                                oldElemValue = elemValue;\r\n                            } else if (isCheckbox && elemValue === undefined) {\r\n                                // When a checkbox is bound to any other value (not an array) and \"checkedValue\" is not defined,\r\n                                // being checked represents the value being trueish\r\n                                element.checked = !!modelValue;\r\n                            } else {\r\n                                // Otherwise, being checked means that the checkbox or radio button's value corresponds to the model value\r\n                                element.checked = (checkedValue() === modelValue);\r\n                            }\r\n                        };\r\n\r\n                        var isCheckbox = element.type == \"checkbox\",\r\n                            isRadio = element.type == \"radio\";\r\n\r\n                        // Only bind to check boxes and radio buttons\r\n                        if (!isCheckbox && !isRadio) {\r\n                            return;\r\n                        }\r\n\r\n                        var rawValue = valueAccessor(),\r\n                            valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\r\n                            rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\r\n                            useElementValue = isRadio || valueIsArray,\r\n                            oldElemValue = valueIsArray ? checkedValue() : undefined;\r\n\r\n                        // IE 6 won't allow radio buttons to be selected unless they have a name\r\n                        if (isRadio && !element.name)\r\n                            ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\r\n\r\n                        // Set up two computeds to update the binding:\r\n\r\n                        // The first responds to changes in the checkedValue value and to element clicks\r\n                        ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n                        ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n                        // The second responds to changes in the model value (the one associated with the checked binding)\r\n                        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n                        rawValue = undefined;\r\n                    }\r\n                };\r\n                ko.expressionRewriting.twoWayBindings['checked'] = true;\r\n\r\n                ko.bindingHandlers['checkedValue'] = {\r\n                    'update': function (element, valueAccessor) {\r\n                        element.value = ko.utils.unwrapObservable(valueAccessor());\r\n                    }\r\n                };\r\n\r\n            })();var classesWrittenByBindingKey = '__ko__cssValue';\r\n            ko.bindingHandlers['class'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    var value = ko.utils.stringTrim(ko.utils.unwrapObservable(valueAccessor()));\r\n                    ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n                    element[classesWrittenByBindingKey] = value;\r\n                    ko.utils.toggleDomNodeCssClass(element, value, true);\r\n                }\r\n            };\r\n\r\n            ko.bindingHandlers['css'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    var value = ko.utils.unwrapObservable(valueAccessor());\r\n                    if (value !== null && typeof value == \"object\") {\r\n                        ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                            shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                            ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n                        });\r\n                    } else {\r\n                        ko.bindingHandlers['class']['update'](element, valueAccessor);\r\n                    }\r\n                }\r\n            };\r\n            ko.bindingHandlers['enable'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    var value = ko.utils.unwrapObservable(valueAccessor());\r\n                    if (value && element.disabled)\r\n                        element.removeAttribute(\"disabled\");\r\n                    else if ((!value) && (!element.disabled))\r\n                        element.disabled = true;\r\n                }\r\n            };\r\n\r\n            ko.bindingHandlers['disable'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n                }\r\n            };\r\n// For certain common events (currently just 'click'), allow a simplified data-binding syntax\r\n// e.g. click:handler instead of the usual full-length event:{click:handler}\r\n            function makeEventHandlerShortcut(eventName) {\r\n                ko.bindingHandlers[eventName] = {\r\n                    'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                        var newValueAccessor = function () {\r\n                            var result = {};\r\n                            result[eventName] = valueAccessor();\r\n                            return result;\r\n                        };\r\n                        return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n                    }\r\n                }\r\n            }\r\n\r\n            ko.bindingHandlers['event'] = {\r\n                'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                    var eventsToHandle = valueAccessor() || {};\r\n                    ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n                        if (typeof eventName == \"string\") {\r\n                            ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                                var handlerReturnValue;\r\n                                var handlerFunction = valueAccessor()[eventName];\r\n                                if (!handlerFunction)\r\n                                    return;\r\n\r\n                                try {\r\n                                    // Take all the event args, and prefix with the viewmodel\r\n                                    var argsForHandler = ko.utils.makeArray(arguments);\r\n                                    viewModel = bindingContext['$data'];\r\n                                    argsForHandler.unshift(viewModel);\r\n                                    handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                                } finally {\r\n                                    if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                                        if (event.preventDefault)\r\n                                            event.preventDefault();\r\n                                        else\r\n                                            event.returnValue = false;\r\n                                    }\r\n                                }\r\n\r\n                                var bubble = allBindings.get(eventName + 'Bubble') !== false;\r\n                                if (!bubble) {\r\n                                    event.cancelBubble = true;\r\n                                    if (event.stopPropagation)\r\n                                        event.stopPropagation();\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n// \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n// \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\n            ko.bindingHandlers['foreach'] = {\r\n                makeTemplateValueAccessor: function(valueAccessor) {\r\n                    return function() {\r\n                        var modelValue = valueAccessor(),\r\n                            unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n                        // If unwrappedValue is the array, pass in the wrapped value on its own\r\n                        // The value will be unwrapped and tracked within the template binding\r\n                        // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n                        if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                            return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\r\n\r\n                        // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n                        ko.utils.unwrapObservable(modelValue);\r\n                        return {\r\n                            'foreach': unwrappedValue['data'],\r\n                            'as': unwrappedValue['as'],\r\n                            'noChildContext': unwrappedValue['noChildContext'],\r\n                            'includeDestroyed': unwrappedValue['includeDestroyed'],\r\n                            'afterAdd': unwrappedValue['afterAdd'],\r\n                            'beforeRemove': unwrappedValue['beforeRemove'],\r\n                            'afterRender': unwrappedValue['afterRender'],\r\n                            'beforeMove': unwrappedValue['beforeMove'],\r\n                            'afterMove': unwrappedValue['afterMove'],\r\n                            'templateEngine': ko.nativeTemplateEngine.instance\r\n                        };\r\n                    };\r\n                },\r\n                'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                    return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\r\n                },\r\n                'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                    return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n                }\r\n            };\r\n            ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\r\n            ko.virtualElements.allowedBindings['foreach'] = true;\r\n            var hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\r\n            var hasfocusLastValue = '__ko_hasfocusLastValue';\r\n            ko.bindingHandlers['hasfocus'] = {\r\n                'init': function(element, valueAccessor, allBindings) {\r\n                    var handleElementFocusChange = function(isFocused) {\r\n                        // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n                        // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n                        // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n                        // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n                        // from calling 'blur()' on the element when it loses focus.\r\n                        // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n                        element[hasfocusUpdatingProperty] = true;\r\n                        var ownerDoc = element.ownerDocument;\r\n                        if (\"activeElement\" in ownerDoc) {\r\n                            var active;\r\n                            try {\r\n                                active = ownerDoc.activeElement;\r\n                            } catch(e) {\r\n                                // IE9 throws if you access activeElement during page load (see issue #703)\r\n                                active = ownerDoc.body;\r\n                            }\r\n                            isFocused = (active === element);\r\n                        }\r\n                        var modelValue = valueAccessor();\r\n                        ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\r\n\r\n                        //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n                        element[hasfocusLastValue] = isFocused;\r\n                        element[hasfocusUpdatingProperty] = false;\r\n                    };\r\n                    var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n                    var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n                    ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n                    ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n                    ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n                    ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n\r\n                    // Assume element is not focused (prevents \"blur\" being called initially)\r\n                    element[hasfocusLastValue] = false;\r\n                },\r\n                'update': function(element, valueAccessor) {\r\n                    var value = !!ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                    if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\r\n                        value ? element.focus() : element.blur();\r\n\r\n                        // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\r\n                        // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\r\n                        // element was focused already.\r\n                        if (!value && element[hasfocusLastValue]) {\r\n                            element.ownerDocument.body.focus();\r\n                        }\r\n\r\n                        // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\r\n                    }\r\n                }\r\n            };\r\n            ko.expressionRewriting.twoWayBindings['hasfocus'] = true;\r\n\r\n            ko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\r\n            ko.expressionRewriting.twoWayBindings['hasFocus'] = 'hasfocus';\r\n            ko.bindingHandlers['html'] = {\r\n                'init': function() {\r\n                    // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n                    return { 'controlsDescendantBindings': true };\r\n                },\r\n                'update': function (element, valueAccessor) {\r\n                    // setHtml will unwrap the value if needed\r\n                    ko.utils.setHtml(element, valueAccessor());\r\n                }\r\n            };\r\n            (function () {\r\n\r\n// Makes a binding like with or if\r\n                function makeWithIfBinding(bindingKey, isWith, isNot) {\r\n                    ko.bindingHandlers[bindingKey] = {\r\n                        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                            var didDisplayOnLastUpdate, savedNodes, contextOptions = {}, completeOnRender, needAsyncContext, renderOnEveryChange;\r\n\r\n                            if (isWith) {\r\n                                var as = allBindings.get('as'), noChildContext = allBindings.get('noChildContext');\r\n                                renderOnEveryChange = !(as && noChildContext);\r\n                                contextOptions = { 'as': as, 'noChildContext': noChildContext, 'exportDependencies': renderOnEveryChange };\r\n                            }\r\n\r\n                            completeOnRender = allBindings.get(\"completeOn\") == \"render\";\r\n                            needAsyncContext = completeOnRender || allBindings['has'](ko.bindingEvent.descendantsComplete);\r\n\r\n                            ko.computed(function() {\r\n                                var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                                    shouldDisplay = !isNot !== !value, // equivalent to isNot ? !value : !!value,\r\n                                    isInitial = !savedNodes,\r\n                                    childContext;\r\n\r\n                                if (!renderOnEveryChange && shouldDisplay === didDisplayOnLastUpdate) {\r\n                                    return;\r\n                                }\r\n\r\n                                if (needAsyncContext) {\r\n                                    bindingContext = ko.bindingEvent.startPossiblyAsyncContentBinding(element, bindingContext);\r\n                                }\r\n\r\n                                if (shouldDisplay) {\r\n                                    if (!isWith || renderOnEveryChange) {\r\n                                        contextOptions['dataDependency'] = ko.computedContext.computed();\r\n                                    }\r\n\r\n                                    if (isWith) {\r\n                                        childContext = bindingContext['createChildContext'](typeof value == \"function\" ? value : valueAccessor, contextOptions);\r\n                                    } else if (ko.computedContext.getDependenciesCount()) {\r\n                                        childContext = bindingContext['extend'](null, contextOptions);\r\n                                    } else {\r\n                                        childContext = bindingContext;\r\n                                    }\r\n                                }\r\n\r\n                                // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                                if (isInitial && ko.computedContext.getDependenciesCount()) {\r\n                                    savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                                }\r\n\r\n                                if (shouldDisplay) {\r\n                                    if (!isInitial) {\r\n                                        ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                                    }\r\n\r\n                                    ko.applyBindingsToDescendants(childContext, element);\r\n                                } else {\r\n                                    ko.virtualElements.emptyNode(element);\r\n\r\n                                    if (!completeOnRender) {\r\n                                        ko.bindingEvent.notify(element, ko.bindingEvent.childrenComplete);\r\n                                    }\r\n                                }\r\n\r\n                                didDisplayOnLastUpdate = shouldDisplay;\r\n\r\n                            }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n                            return { 'controlsDescendantBindings': true };\r\n                        }\r\n                    };\r\n                    ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\r\n                    ko.virtualElements.allowedBindings[bindingKey] = true;\r\n                }\r\n\r\n// Construct the actual binding handlers\r\n                makeWithIfBinding('if');\r\n                makeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\r\n                makeWithIfBinding('with', true /* isWith */);\r\n\r\n            })();ko.bindingHandlers['let'] = {\r\n                'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                    // Make a modified binding context, with extra properties, and apply it to descendant elements\r\n                    var innerContext = bindingContext['extend'](valueAccessor);\r\n                    ko.applyBindingsToDescendants(innerContext, element);\r\n\r\n                    return { 'controlsDescendantBindings': true };\r\n                }\r\n            };\r\n            ko.virtualElements.allowedBindings['let'] = true;\r\n            var captionPlaceholder = {};\r\n            ko.bindingHandlers['options'] = {\r\n                'init': function(element) {\r\n                    if (ko.utils.tagNameLower(element) !== \"select\")\r\n                        throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n                    // Remove all existing <option>s.\r\n                    while (element.length > 0) {\r\n                        element.remove(0);\r\n                    }\r\n\r\n                    // Ensures that the binding processor doesn't try to bind the options\r\n                    return { 'controlsDescendantBindings': true };\r\n                },\r\n                'update': function (element, valueAccessor, allBindings) {\r\n                    function selectedOptions() {\r\n                        return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n                    }\r\n\r\n                    var selectWasPreviouslyEmpty = element.length == 0,\r\n                        multiple = element.multiple,\r\n                        previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\r\n                        unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n                        valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\r\n                        includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n                        arrayToDomNodeChildrenOptions = {},\r\n                        captionValue,\r\n                        filteredArray,\r\n                        previousSelectedValues = [];\r\n\r\n                    if (!valueAllowUnset) {\r\n                        if (multiple) {\r\n                            previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n                        } else if (element.selectedIndex >= 0) {\r\n                            previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\r\n                        }\r\n                    }\r\n\r\n                    if (unwrappedArray) {\r\n                        if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                            unwrappedArray = [unwrappedArray];\r\n\r\n                        // Filter out any entries marked as destroyed\r\n                        filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                            return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n                        });\r\n\r\n                        // If caption is included, add it to the array\r\n                        if (allBindings['has']('optionsCaption')) {\r\n                            captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                            // If caption value is null or undefined, don't show a caption\r\n                            if (captionValue !== null && captionValue !== undefined) {\r\n                                filteredArray.unshift(captionPlaceholder);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        // If a falsy value is provided (e.g. null), we'll simply empty the select element\r\n                    }\r\n\r\n                    function applyToObject(object, predicate, defaultValue) {\r\n                        var predicateType = typeof predicate;\r\n                        if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                            return predicate(object);\r\n                        else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                            return object[predicate];\r\n                        else                                // Given no optionsText arg; use the data value itself\r\n                            return defaultValue;\r\n                    }\r\n\r\n                    // The following functions can run at two different times:\r\n                    // The first is when the whole array is being updated directly from this binding handler.\r\n                    // The second is when an observable value for a specific array entry is updated.\r\n                    // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n                    var itemUpdate = false;\r\n                    function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n                        if (oldOptions.length) {\r\n                            previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                            itemUpdate = true;\r\n                        }\r\n                        var option = element.ownerDocument.createElement(\"option\");\r\n                        if (arrayEntry === captionPlaceholder) {\r\n                            ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                            ko.selectExtensions.writeValue(option, undefined);\r\n                        } else {\r\n                            // Apply a value to the option element\r\n                            var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\r\n                            ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                            // Apply some text to the option element\r\n                            var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\r\n                            ko.utils.setTextContent(option, optionText);\r\n                        }\r\n                        return [option];\r\n                    }\r\n\r\n                    // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n                    // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n                    arrayToDomNodeChildrenOptions['beforeRemove'] =\r\n                        function (option) {\r\n                            element.removeChild(option);\r\n                        };\r\n\r\n                    function setSelectionCallback(arrayEntry, newOptions) {\r\n                        if (itemUpdate && valueAllowUnset) {\r\n                            // The model value is authoritative, so make sure its value is the one selected\r\n                            ko.bindingEvent.notify(element, ko.bindingEvent.childrenComplete);\r\n                        } else if (previousSelectedValues.length) {\r\n                            // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                            // That's why we first added them without selection. Now it's time to set the selection.\r\n                            var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\r\n                            ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                            // If this option was changed from being selected during a single-item update, notify the change\r\n                            if (itemUpdate && !isSelected) {\r\n                                ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var callback = setSelectionCallback;\r\n                    if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\r\n                        callback = function(arrayEntry, newOptions) {\r\n                            setSelectionCallback(arrayEntry, newOptions);\r\n                            ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n                        }\r\n                    }\r\n\r\n                    ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n                    if (!valueAllowUnset) {\r\n                        // Determine if the selection has changed as a result of updating the options list\r\n                        var selectionChanged;\r\n                        if (multiple) {\r\n                            // For a multiple-select box, compare the new selection count to the previous one\r\n                            // But if nothing was selected before, the selection can't have changed\r\n                            selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                        } else {\r\n                            // For a single-select box, compare the current value to the previous value\r\n                            // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                            selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\r\n                                ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                                : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                        }\r\n\r\n                        // Ensure consistency between model value and selected option.\r\n                        // If the dropdown was changed so that selection is no longer the same,\r\n                        // notify the value or selectedOptions binding.\r\n                        if (selectionChanged) {\r\n                            ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                        }\r\n                    }\r\n\r\n                    if (valueAllowUnset || ko.computedContext.isInitial()) {\r\n                        ko.bindingEvent.notify(element, ko.bindingEvent.childrenComplete);\r\n                    }\r\n\r\n                    // Workaround for IE bug\r\n                    ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n                    if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\r\n                        element.scrollTop = previousScrollTop;\r\n                }\r\n            };\r\n            ko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\r\n            ko.bindingHandlers['selectedOptions'] = {\r\n                'init': function (element, valueAccessor, allBindings) {\r\n                    function updateFromView() {\r\n                        var value = valueAccessor(), valueToWrite = [];\r\n                        ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                            if (node.selected)\r\n                                valueToWrite.push(ko.selectExtensions.readValue(node));\r\n                        });\r\n                        ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\r\n                    }\r\n\r\n                    function updateFromModel() {\r\n                        var newValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                            previousScrollTop = element.scrollTop;\r\n\r\n                        if (newValue && typeof newValue.length == \"number\") {\r\n                            ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                                var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\r\n                                if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE\r\n                                    ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        element.scrollTop = previousScrollTop;\r\n                    }\r\n\r\n                    if (ko.utils.tagNameLower(element) != \"select\") {\r\n                        throw new Error(\"selectedOptions binding applies only to SELECT elements\");\r\n                    }\r\n\r\n                    var updateFromModelComputed;\r\n                    ko.bindingEvent.subscribe(element, ko.bindingEvent.childrenComplete, function () {\r\n                        if (!updateFromModelComputed) {\r\n                            ko.utils.registerEventHandler(element, \"change\", updateFromView);\r\n                            updateFromModelComputed = ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n                        } else {\r\n                            updateFromView();\r\n                        }\r\n                    }, null, { 'notifyImmediately': true });\r\n                },\r\n                'update': function() {} // Keep for backwards compatibility with code that may have wrapped binding\r\n            };\r\n            ko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\r\n            ko.bindingHandlers['style'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n                    ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n                        styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n                        if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                            // Empty string removes the value, whereas null/undefined have no effect\r\n                            styleValue = \"\";\r\n                        }\r\n\r\n                        if (jQueryInstance) {\r\n                            jQueryInstance(element)['css'](styleName, styleValue);\r\n                        } else if (/^--/.test(styleName)) {\r\n                            // Is styleName a custom CSS property?\r\n                            element.style.setProperty(styleName, styleValue);\r\n                        } else {\r\n                            styleName = styleName.replace(/-(\\w)/g, function (all, letter) {\r\n                                return letter.toUpperCase();\r\n                            });\r\n\r\n                            var previousStyle = element.style[styleName];\r\n                            element.style[styleName] = styleValue;\r\n\r\n                            if (styleValue !== previousStyle && element.style[styleName] == previousStyle && !isNaN(styleValue)) {\r\n                                element.style[styleName] = styleValue + \"px\";\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            ko.bindingHandlers['submit'] = {\r\n                'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                    if (typeof valueAccessor() != \"function\")\r\n                        throw new Error(\"The value for a submit binding must be a function\");\r\n                    ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n                        var handlerReturnValue;\r\n                        var value = valueAccessor();\r\n                        try { handlerReturnValue = value.call(bindingContext['$data'], element); }\r\n                        finally {\r\n                            if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                                if (event.preventDefault)\r\n                                    event.preventDefault();\r\n                                else\r\n                                    event.returnValue = false;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            };\r\n            ko.bindingHandlers['text'] = {\r\n                'init': function() {\r\n                    // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n                    // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n                    return { 'controlsDescendantBindings': true };\r\n                },\r\n                'update': function (element, valueAccessor) {\r\n                    ko.utils.setTextContent(element, valueAccessor());\r\n                }\r\n            };\r\n            ko.virtualElements.allowedBindings['text'] = true;\r\n            (function () {\r\n\r\n                if (window && window.navigator) {\r\n                    var parseVersion = function (matches) {\r\n                        if (matches) {\r\n                            return parseFloat(matches[1]);\r\n                        }\r\n                    };\r\n\r\n                    // Detect various browser versions because some old versions don't fully support the 'input' event\r\n                    var userAgent = window.navigator.userAgent,\r\n                        operaVersion, chromeVersion, safariVersion, firefoxVersion, ieVersion, edgeVersion;\r\n\r\n                    (operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()))\r\n                    || (edgeVersion = parseVersion(userAgent.match(/Edge\\/([^ ]+)$/)))\r\n                    || (chromeVersion = parseVersion(userAgent.match(/Chrome\\/([^ ]+)/)))\r\n                    || (safariVersion = parseVersion(userAgent.match(/Version\\/([^ ]+) Safari/)))\r\n                    || (firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]+)/)))\r\n                    || (ieVersion = ko.utils.ieVersion || parseVersion(userAgent.match(/MSIE ([^ ]+)/)))      // Detects up to IE 10\r\n                    || (ieVersion = parseVersion(userAgent.match(/rv:([^ )]+)/)));      // Detects IE 11\r\n                }\r\n\r\n// IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n// But it does fire the 'selectionchange' event on many of those, presumably because the\r\n// cursor is moving and that counts as the selection changing. The 'selectionchange' event is\r\n// fired at the document level only and doesn't directly indicate which element changed. We\r\n// set up just one event handler for the document and use 'activeElement' to determine which\r\n// element was changed.\r\n                if (ieVersion >= 8 && ieVersion < 10) {\r\n                    var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n                        selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n                    var selectionChangeHandler = function(event) {\r\n                        var target = this.activeElement,\r\n                            handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\r\n                        if (handler) {\r\n                            handler(event);\r\n                        }\r\n                    };\r\n                    var registerForSelectionChangeEvent = function (element, handler) {\r\n                        var ownerDoc = element.ownerDocument;\r\n                        if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n                            ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n                            ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\r\n                        }\r\n                        ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n                    };\r\n                }\r\n\r\n                ko.bindingHandlers['textInput'] = {\r\n                    'init': function (element, valueAccessor, allBindings) {\r\n\r\n                        var previousElementValue = element.value,\r\n                            timeoutHandle,\r\n                            elementValueBeforeEvent;\r\n\r\n                        var updateModel = function (event) {\r\n                            clearTimeout(timeoutHandle);\r\n                            elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n                            var elementValue = element.value;\r\n                            if (previousElementValue !== elementValue) {\r\n                                // Provide a way for tests to know exactly which event was processed\r\n                                if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\r\n                                previousElementValue = elementValue;\r\n                                ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\r\n                            }\r\n                        };\r\n\r\n                        var deferUpdateModel = function (event) {\r\n                            if (!timeoutHandle) {\r\n                                // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                                // event firing and the updateModel function running. This allows us to ignore model\r\n                                // updates that are from the previous state of the element, usually due to techniques\r\n                                // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                                elementValueBeforeEvent = element.value;\r\n                                var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                                timeoutHandle = ko.utils.setTimeout(handler, 4);\r\n                            }\r\n                        };\r\n\r\n                        // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\r\n                        // so we'll make sure all updates are asynchronous\r\n                        var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel,\r\n                            ourUpdate = false;\r\n\r\n                        var updateView = function () {\r\n                            var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                            if (modelValue === null || modelValue === undefined) {\r\n                                modelValue = '';\r\n                            }\r\n\r\n                            if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\r\n                                ko.utils.setTimeout(updateView, 4);\r\n                                return;\r\n                            }\r\n\r\n                            // Update the element only if the element and model are different. On some browsers, updating the value\r\n                            // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n                            if (element.value !== modelValue) {\r\n                                ourUpdate = true;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                                element.value = modelValue;\r\n                                ourUpdate = false;\r\n                                previousElementValue = element.value; // In case the browser changes the value (see #2281)\r\n                            }\r\n                        };\r\n\r\n                        var onEvent = function (event, handler) {\r\n                            ko.utils.registerEventHandler(element, event, handler);\r\n                        };\r\n\r\n                        if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\r\n                            // Provide a way for tests to specify exactly which events are bound\r\n                            ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\r\n                                if (eventName.slice(0,5) == 'after') {\r\n                                    onEvent(eventName.slice(5), deferUpdateModel);\r\n                                } else {\r\n                                    onEvent(eventName, updateModel);\r\n                                }\r\n                            });\r\n                        } else {\r\n                            if (ieVersion) {\r\n                                // All versions (including 11) of Internet Explorer have a bug that they don't generate an input or propertychange event when ESC is pressed\r\n                                onEvent('keypress', updateModel);\r\n                            }\r\n                            if (ieVersion < 11) {\r\n                                // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\r\n                                // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\r\n                                // but that's an acceptable compromise for this binding. IE 9 and 10 support 'input', but since they don't always\r\n                                // fire it when using autocomplete, we'll use 'propertychange' for them also.\r\n                                onEvent('propertychange', function(event) {\r\n                                    if (!ourUpdate && event.propertyName === 'value') {\r\n                                        ieUpdateModel(event);\r\n                                    }\r\n                                });\r\n                            }\r\n                            if (ieVersion == 8) {\r\n                                // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\r\n                                // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\r\n                                // events too.\r\n                                onEvent('keyup', updateModel);      // A single keystoke\r\n                                onEvent('keydown', updateModel);    // The first character when a key is held down\r\n                            }\r\n                            if (registerForSelectionChangeEvent) {\r\n                                // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\r\n                                // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\r\n                                // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\r\n                                // can detect all of those except dragging text out of the field, for which we use 'dragend'.\r\n                                // These are also needed in IE8 because of the bug described above.\r\n                                registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\r\n                                onEvent('dragend', deferUpdateModel);\r\n                            }\r\n\r\n                            if (!ieVersion || ieVersion >= 9) {\r\n                                // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\r\n                                // through the user interface.\r\n                                onEvent('input', ieUpdateModel);\r\n                            }\r\n\r\n                            if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\r\n                                // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\r\n                                // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\r\n                                onEvent('keydown', deferUpdateModel);\r\n                                onEvent('paste', deferUpdateModel);\r\n                                onEvent('cut', deferUpdateModel);\r\n                            } else if (operaVersion < 11) {\r\n                                // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\r\n                                // We can try to catch some of those using 'keydown'.\r\n                                onEvent('keydown', deferUpdateModel);\r\n                            } else if (firefoxVersion < 4.0) {\r\n                                // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\r\n                                onEvent('DOMAutoComplete', updateModel);\r\n\r\n                                // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\r\n                                onEvent('dragdrop', updateModel);       // <3.5\r\n                                onEvent('drop', updateModel);           // 3.5\r\n                            } else if (edgeVersion && element.type === \"number\") {\r\n                                // Microsoft Edge doesn't fire 'input' or 'change' events for number inputs when\r\n                                // the value is changed via the up / down arrow keys\r\n                                onEvent('keydown', deferUpdateModel);\r\n                            }\r\n                        }\r\n\r\n                        // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n                        onEvent('change', updateModel);\r\n\r\n                        // To deal with browsers that don't notify any kind of event for some changes (IE, Safari, etc.)\r\n                        onEvent('blur', updateModel);\r\n\r\n                        ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n                    }\r\n                };\r\n                ko.expressionRewriting.twoWayBindings['textInput'] = true;\r\n\r\n// textinput is an alias for textInput\r\n                ko.bindingHandlers['textinput'] = {\r\n                    // preprocess is the only way to set up a full alias\r\n                    'preprocess': function (value, name, addBinding) {\r\n                        addBinding('textInput', value);\r\n                    }\r\n                };\r\n\r\n            })();ko.bindingHandlers['uniqueName'] = {\r\n                'init': function (element, valueAccessor) {\r\n                    if (valueAccessor()) {\r\n                        var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\r\n                        ko.utils.setElementName(element, name);\r\n                    }\r\n                }\r\n            };\r\n            ko.bindingHandlers['uniqueName'].currentIndex = 0;\r\n            ko.bindingHandlers['using'] = {\r\n                'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                    var options;\r\n\r\n                    if (allBindings['has']('as')) {\r\n                        options = { 'as': allBindings.get('as'), 'noChildContext': allBindings.get('noChildContext') };\r\n                    }\r\n\r\n                    var innerContext = bindingContext['createChildContext'](valueAccessor, options);\r\n                    ko.applyBindingsToDescendants(innerContext, element);\r\n\r\n                    return { 'controlsDescendantBindings': true };\r\n                }\r\n            };\r\n            ko.virtualElements.allowedBindings['using'] = true;\r\n            ko.bindingHandlers['value'] = {\r\n                'init': function (element, valueAccessor, allBindings) {\r\n                    var tagName = ko.utils.tagNameLower(element),\r\n                        isInputElement = tagName == \"input\";\r\n\r\n                    // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n                    if (isInputElement && (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n                        ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\r\n                        return;\r\n                    }\r\n\r\n                    var eventsToCatch = [];\r\n                    var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n                    var propertyChangedFired = false;\r\n                    var elementValueBeforeEvent = null;\r\n\r\n                    if (requestedEventsToCatch) {\r\n                        // Allow both individual event names, and arrays of event names\r\n                        if (typeof requestedEventsToCatch == \"string\") {\r\n                            eventsToCatch = [requestedEventsToCatch];\r\n                        } else {\r\n                            eventsToCatch = ko.utils.arrayGetDistinctValues(requestedEventsToCatch);\r\n                        }\r\n                        ko.utils.arrayRemoveItem(eventsToCatch, \"change\");  // We'll subscribe to \"change\" events later\r\n                    }\r\n\r\n                    var valueUpdateHandler = function() {\r\n                        elementValueBeforeEvent = null;\r\n                        propertyChangedFired = false;\r\n                        var modelValue = valueAccessor();\r\n                        var elementValue = ko.selectExtensions.readValue(element);\r\n                        ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\r\n                    }\r\n\r\n                    // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n                    // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n                    var ieAutoCompleteHackNeeded = ko.utils.ieVersion && isInputElement && element.type == \"text\"\r\n                        && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\r\n                    if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n                        ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n                        ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n                        ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                            if (propertyChangedFired) {\r\n                                valueUpdateHandler();\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n                        // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\r\n                        // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n                        // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\r\n                        var handler = valueUpdateHandler;\r\n                        if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                            handler = function() {\r\n                                // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                                // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                                // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                                // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                                // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                                // techniques like rateLimit can trigger model changes at critical moments that will\r\n                                // override the user's inputs, causing keystrokes to be lost.\r\n                                elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                                ko.utils.setTimeout(valueUpdateHandler, 0);\r\n                            };\r\n                            eventName = eventName.substring(\"after\".length);\r\n                        }\r\n                        ko.utils.registerEventHandler(element, eventName, handler);\r\n                    });\r\n\r\n                    var updateFromModel;\r\n\r\n                    if (isInputElement && element.type == \"file\") {\r\n                        // For file input elements, can only write the empty string\r\n                        updateFromModel = function () {\r\n                            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n                            if (newValue === null || newValue === undefined || newValue === \"\") {\r\n                                element.value = \"\";\r\n                            } else {\r\n                                ko.dependencyDetection.ignore(valueUpdateHandler);  // reset the model to match the element\r\n                            }\r\n                        }\r\n                    } else {\r\n                        updateFromModel = function () {\r\n                            var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n                            var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n                            if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\r\n                                ko.utils.setTimeout(updateFromModel, 0);\r\n                                return;\r\n                            }\r\n\r\n                            var valueHasChanged = newValue !== elementValue;\r\n\r\n                            if (valueHasChanged || elementValue === undefined) {\r\n                                if (tagName === \"select\") {\r\n                                    var allowUnset = allBindings.get('valueAllowUnset');\r\n                                    ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                                    if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\r\n                                        // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\r\n                                        // because you're not allowed to have a model value that disagrees with a visible UI selection.\r\n                                        ko.dependencyDetection.ignore(valueUpdateHandler);\r\n                                    }\r\n                                } else {\r\n                                    ko.selectExtensions.writeValue(element, newValue);\r\n                                }\r\n                            }\r\n                        };\r\n                    }\r\n\r\n                    if (tagName === \"select\") {\r\n                        var updateFromModelComputed;\r\n                        ko.bindingEvent.subscribe(element, ko.bindingEvent.childrenComplete, function () {\r\n                            if (!updateFromModelComputed) {\r\n                                ko.utils.registerEventHandler(element, \"change\", valueUpdateHandler);\r\n                                updateFromModelComputed = ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n                            } else if (allBindings.get('valueAllowUnset')) {\r\n                                updateFromModel();\r\n                            } else {\r\n                                valueUpdateHandler();\r\n                            }\r\n                        }, null, { 'notifyImmediately': true });\r\n                    } else {\r\n                        ko.utils.registerEventHandler(element, \"change\", valueUpdateHandler);\r\n                        ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n                    }\r\n                },\r\n                'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n            };\r\n            ko.expressionRewriting.twoWayBindings['value'] = true;\r\n            ko.bindingHandlers['visible'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    var value = ko.utils.unwrapObservable(valueAccessor());\r\n                    var isCurrentlyVisible = !(element.style.display == \"none\");\r\n                    if (value && !isCurrentlyVisible)\r\n                        element.style.display = \"\";\r\n                    else if ((!value) && isCurrentlyVisible)\r\n                        element.style.display = \"none\";\r\n                }\r\n            };\r\n\r\n            ko.bindingHandlers['hidden'] = {\r\n                'update': function (element, valueAccessor) {\r\n                    ko.bindingHandlers['visible']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n                }\r\n            };\r\n// 'click' is just a shorthand for the usual full-length event:{click:handler}\r\n            makeEventHandlerShortcut('click');\r\n// If you want to make a custom template engine,\r\n//\r\n// [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n// [2] Override 'renderTemplateSource', supplying a function with this signature:\r\n//\r\n//        function (templateSource, bindingContext, options) {\r\n//            // - templateSource.text() is the text of the template you should render\r\n//            // - bindingContext.$data is the data you should pass into the template\r\n//            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n//            //     and bindingContext.$root available in the template too\r\n//            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n//            // - templateDocument is the document object of the template\r\n//            //\r\n//            // Return value: an array of DOM nodes\r\n//        }\r\n//\r\n// [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\r\n//\r\n//        function (script) {\r\n//            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\r\n//            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\r\n//        }\r\n//\r\n//     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n//     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\r\n//     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\r\n\r\n            ko.templateEngine = function () { };\r\n\r\n            ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n                throw new Error(\"Override renderTemplateSource\");\r\n            };\r\n\r\n            ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\r\n                throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n            };\r\n\r\n            ko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\r\n                // Named template\r\n                if (typeof template == \"string\") {\r\n                    templateDocument = templateDocument || document;\r\n                    var elem = templateDocument.getElementById(template);\r\n                    if (!elem)\r\n                        throw new Error(\"Cannot find template with ID \" + template);\r\n                    return new ko.templateSources.domElement(elem);\r\n                } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n                    // Anonymous template\r\n                    return new ko.templateSources.anonymousTemplate(template);\r\n                } else\r\n                    throw new Error(\"Unknown template type: \" + template);\r\n            };\r\n\r\n            ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\r\n                var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n                return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\r\n            };\r\n\r\n            ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\r\n                // Skip rewriting if requested\r\n                if (this['allowTemplateRewriting'] === false)\r\n                    return true;\r\n                return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\r\n            };\r\n\r\n            ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\r\n                var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n                var rewritten = rewriterCallback(templateSource['text']());\r\n                templateSource['text'](rewritten);\r\n                templateSource['data'](\"isRewritten\", true);\r\n            };\r\n\r\n            ko.exportSymbol('templateEngine', ko.templateEngine);\r\n\r\n            ko.templateRewriting = (function () {\r\n                var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\r\n                var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\r\n\r\n                function validateDataBindValuesForRewriting(keyValueArray) {\r\n                    var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n                    for (var i = 0; i < keyValueArray.length; i++) {\r\n                        var key = keyValueArray[i]['key'];\r\n                        if (Object.prototype.hasOwnProperty.call(allValidators, key)) {\r\n                            var validator = allValidators[key];\r\n\r\n                            if (typeof validator === \"function\") {\r\n                                var possibleErrorMessage = validator(keyValueArray[i]['value']);\r\n                                if (possibleErrorMessage)\r\n                                    throw new Error(possibleErrorMessage);\r\n                            } else if (!validator) {\r\n                                throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n                    var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n                    validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n                    var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\r\n\r\n                    // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\r\n                    // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\r\n                    // extra indirection.\r\n                    var applyBindingsToNextSiblingScript =\r\n                        \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\r\n                    return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\r\n                }\r\n\r\n                return {\r\n                    ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n                        if (!templateEngine['isTemplateRewritten'](template, templateDocument))\r\n                            templateEngine['rewriteTemplate'](template, function (htmlString) {\r\n                                return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                            }, templateDocument);\r\n                    },\r\n\r\n                    memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n                        return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                            return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n                        }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                            return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\r\n                        });\r\n                    },\r\n\r\n                    applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n                        return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                            var nodeToBind = domNode.nextSibling;\r\n                            if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                                ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            })();\r\n\r\n\r\n// Exported only because it has to be referenced by string lookup from within rewritten template\r\n            ko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n            (function() {\r\n                // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n                // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n                //\r\n                // Two are provided by default:\r\n                //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n                //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n                //                                           without reading/writing the actual element text content, since it will be overwritten\r\n                //                                           with the rendered template output.\r\n                // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n                // Template sources need to have the following functions:\r\n                //   text() \t\t\t- returns the template text from your storage location\r\n                //   text(value)\t\t- writes the supplied template text to your storage location\r\n                //   data(key)\t\t\t- reads values stored using data(key, value) - see below\r\n                //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n                //\r\n                // Optionally, template sources can also have the following functions:\r\n                //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n                //   nodes(value)       - writes the given DOM element to your storage location\r\n                // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n                // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\r\n                //\r\n                // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n                // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n                ko.templateSources = {};\r\n\r\n                // ---- ko.templateSources.domElement -----\r\n\r\n                // template types\r\n                var templateScript = 1,\r\n                    templateTextArea = 2,\r\n                    templateTemplate = 3,\r\n                    templateElement = 4;\r\n\r\n                ko.templateSources.domElement = function(element) {\r\n                    this.domElement = element;\r\n\r\n                    if (element) {\r\n                        var tagNameLower = ko.utils.tagNameLower(element);\r\n                        this.templateType =\r\n                            tagNameLower === \"script\" ? templateScript :\r\n                                tagNameLower === \"textarea\" ? templateTextArea :\r\n                                    // For browsers with proper <template> element support, where the .content property gives a document fragment\r\n                                    tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\r\n                                        templateElement;\r\n                    }\r\n                }\r\n\r\n                ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\r\n                    var elemContentsProperty = this.templateType === templateScript ? \"text\"\r\n                        : this.templateType === templateTextArea ? \"value\"\r\n                            : \"innerHTML\";\r\n\r\n                    if (arguments.length == 0) {\r\n                        return this.domElement[elemContentsProperty];\r\n                    } else {\r\n                        var valueToWrite = arguments[0];\r\n                        if (elemContentsProperty === \"innerHTML\")\r\n                            ko.utils.setHtml(this.domElement, valueToWrite);\r\n                        else\r\n                            this.domElement[elemContentsProperty] = valueToWrite;\r\n                    }\r\n                };\r\n\r\n                var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n                ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\r\n                    if (arguments.length === 1) {\r\n                        return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n                    } else {\r\n                        ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n                    }\r\n                };\r\n\r\n                var templatesDomDataKey = ko.utils.domData.nextKey();\r\n                function getTemplateDomData(element) {\r\n                    return ko.utils.domData.get(element, templatesDomDataKey) || {};\r\n                }\r\n                function setTemplateDomData(element, data) {\r\n                    ko.utils.domData.set(element, templatesDomDataKey, data);\r\n                }\r\n\r\n                ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\r\n                    var element = this.domElement;\r\n                    if (arguments.length == 0) {\r\n                        var templateData = getTemplateDomData(element),\r\n                            nodes = templateData.containerData || (\r\n                                this.templateType === templateTemplate ? element.content :\r\n                                    this.templateType === templateElement ? element :\r\n                                        undefined);\r\n                        if (!nodes || templateData.alwaysCheckText) {\r\n                            // If the template is associated with an element that stores the template as text,\r\n                            // parse and cache the nodes whenever there's new text content available. This allows\r\n                            // the user to update the template content by updating the text of template node.\r\n                            var text = this['text']();\r\n                            if (text && text !== templateData.textData) {\r\n                                nodes = ko.utils.parseHtmlForTemplateNodes(text, element.ownerDocument);\r\n                                setTemplateDomData(element, {containerData: nodes, textData: text, alwaysCheckText: true});\r\n                            }\r\n                        }\r\n                        return nodes;\r\n                    } else {\r\n                        var valueToWrite = arguments[0];\r\n                        if (this.templateType !== undefined) {\r\n                            this['text'](\"\");   // clear the text from the node\r\n                        }\r\n                        setTemplateDomData(element, {containerData: valueToWrite});\r\n                    }\r\n                };\r\n\r\n                // ---- ko.templateSources.anonymousTemplate -----\r\n                // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n                // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n                // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n                ko.templateSources.anonymousTemplate = function(element) {\r\n                    this.domElement = element;\r\n                }\r\n                ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n                ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n                ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\r\n                    if (arguments.length == 0) {\r\n                        var templateData = getTemplateDomData(this.domElement);\r\n                        if (templateData.textData === undefined && templateData.containerData)\r\n                            templateData.textData = templateData.containerData.innerHTML;\r\n                        return templateData.textData;\r\n                    } else {\r\n                        var valueToWrite = arguments[0];\r\n                        setTemplateDomData(this.domElement, {textData: valueToWrite});\r\n                    }\r\n                };\r\n\r\n                ko.exportSymbol('templateSources', ko.templateSources);\r\n                ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\r\n                ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\r\n            })();\r\n            (function () {\r\n                var _templateEngine;\r\n                ko.setTemplateEngine = function (templateEngine) {\r\n                    if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\r\n                        throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n                    _templateEngine = templateEngine;\r\n                }\r\n\r\n                function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n                    var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n                    while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n                        nextInQueue = ko.virtualElements.nextSibling(node);\r\n                        action(node, nextInQueue);\r\n                    }\r\n                }\r\n\r\n                function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n                    // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n                    // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n                    // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n                    // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n                    // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n                    if (continuousNodeArray.length) {\r\n                        var firstNode = continuousNodeArray[0],\r\n                            lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                            parentNode = firstNode.parentNode,\r\n                            provider = ko.bindingProvider['instance'],\r\n                            preprocessNode = provider['preprocessNode'];\r\n\r\n                        if (preprocessNode) {\r\n                            invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                                var nodePreviousSibling = node.previousSibling;\r\n                                var newNodes = preprocessNode.call(provider, node);\r\n                                if (newNodes) {\r\n                                    if (node === firstNode)\r\n                                        firstNode = newNodes[0] || nextNodeInRange;\r\n                                    if (node === lastNode)\r\n                                        lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                                }\r\n                            });\r\n\r\n                            // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                            // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                            // first node needs to be in the array).\r\n                            continuousNodeArray.length = 0;\r\n                            if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\r\n                                return;\r\n                            }\r\n                            if (firstNode === lastNode) {\r\n                                continuousNodeArray.push(firstNode);\r\n                            } else {\r\n                                continuousNodeArray.push(firstNode, lastNode);\r\n                                ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                            }\r\n                        }\r\n\r\n                        // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\r\n                        // whereas a regular applyBindings won't introduce new memoized nodes\r\n                        invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                            if (node.nodeType === 1 || node.nodeType === 8)\r\n                                ko.applyBindings(bindingContext, node);\r\n                        });\r\n                        invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                            if (node.nodeType === 1 || node.nodeType === 8)\r\n                                ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n                        });\r\n\r\n                        // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n                        ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                    }\r\n                }\r\n\r\n                function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n                    return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                        : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\r\n                            : null;\r\n                }\r\n\r\n                function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n                    options = options || {};\r\n                    var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                    var templateDocument = (firstTargetNode || template || {}).ownerDocument;\r\n                    var templateEngineToUse = (options['templateEngine'] || _templateEngine);\r\n                    ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n                    var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\r\n\r\n                    // Loosely check result is an array of DOM nodes\r\n                    if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\r\n                        throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n                    var haveAddedNodesToParent = false;\r\n                    switch (renderMode) {\r\n                        case \"replaceChildren\":\r\n                            ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                            haveAddedNodesToParent = true;\r\n                            break;\r\n                        case \"replaceNode\":\r\n                            ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                            haveAddedNodesToParent = true;\r\n                            break;\r\n                        case \"ignoreTargetNode\": break;\r\n                        default:\r\n                            throw new Error(\"Unknown renderMode: \" + renderMode);\r\n                    }\r\n\r\n                    if (haveAddedNodesToParent) {\r\n                        activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n                        if (options['afterRender']) {\r\n                            ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext[options['as'] || '$data']]);\r\n                        }\r\n                        if (renderMode == \"replaceChildren\") {\r\n                            ko.bindingEvent.notify(targetNodeOrNodeArray, ko.bindingEvent.childrenComplete);\r\n                        }\r\n                    }\r\n\r\n                    return renderedNodesArray;\r\n                }\r\n\r\n                function resolveTemplateName(template, data, context) {\r\n                    // The template can be specified as:\r\n                    if (ko.isObservable(template)) {\r\n                        // 1. An observable, with string value\r\n                        return template();\r\n                    } else if (typeof template === 'function') {\r\n                        // 2. A function of (data, context) returning a string\r\n                        return template(data, context);\r\n                    } else {\r\n                        // 3. A string\r\n                        return template;\r\n                    }\r\n                }\r\n\r\n                ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n                    options = options || {};\r\n                    if ((options['templateEngine'] || _templateEngine) == undefined)\r\n                        throw new Error(\"Set a template engine before calling renderTemplate\");\r\n                    renderMode = renderMode || \"replaceChildren\";\r\n\r\n                    if (targetNodeOrNodeArray) {\r\n                        var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n                        var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n                        var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n                        return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                            function () {\r\n                                // Ensure we've got a proper binding context to work with\r\n                                var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\r\n                                    ? dataOrBindingContext\r\n                                    : new ko.bindingContext(dataOrBindingContext, null, null, null, { \"exportDependencies\": true });\r\n\r\n                                var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\r\n                                    renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                                if (renderMode == \"replaceNode\") {\r\n                                    targetNodeOrNodeArray = renderedNodesArray;\r\n                                    firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                                }\r\n                            },\r\n                            null,\r\n                            { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n                        );\r\n                    } else {\r\n                        // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n                        return ko.memoization.memoize(function (domNode) {\r\n                            ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n                        });\r\n                    }\r\n                };\r\n\r\n                ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n                    // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n                    // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n                    var arrayItemContext, asName = options['as'];\r\n\r\n                    // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n                    var executeTemplateForArrayItem = function (arrayValue, index) {\r\n                        // Support selecting template as a function of the data being rendered\r\n                        arrayItemContext = parentBindingContext['createChildContext'](arrayValue, {\r\n                            'as': asName,\r\n                            'noChildContext': options['noChildContext'],\r\n                            'extend': function(context) {\r\n                                context['$index'] = index;\r\n                                if (asName) {\r\n                                    context[asName + \"Index\"] = index;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n                        return executeTemplate(targetNode, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n                    };\r\n\r\n                    // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n                    var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n                        activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n                        if (options['afterRender'])\r\n                            options['afterRender'](addedNodesArray, arrayValue);\r\n\r\n                        // release the \"cache\" variable, so that it can be collected by\r\n                        // the GC when its value isn't used from within the bindings anymore.\r\n                        arrayItemContext = null;\r\n                    };\r\n\r\n                    var setDomNodeChildrenFromArrayMapping = function (newArray, changeList) {\r\n                        // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n                        // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n                        ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, newArray, executeTemplateForArrayItem, options, activateBindingsCallback, changeList]);\r\n                        ko.bindingEvent.notify(targetNode, ko.bindingEvent.childrenComplete);\r\n                    };\r\n\r\n                    var shouldHideDestroyed = (options['includeDestroyed'] === false) || (ko.options['foreachHidesDestroyed'] && !options['includeDestroyed']);\r\n\r\n                    if (!shouldHideDestroyed && !options['beforeRemove'] && ko.isObservableArray(arrayOrObservableArray)) {\r\n                        setDomNodeChildrenFromArrayMapping(arrayOrObservableArray.peek());\r\n\r\n                        var subscription = arrayOrObservableArray.subscribe(function (changeList) {\r\n                            setDomNodeChildrenFromArrayMapping(arrayOrObservableArray(), changeList);\r\n                        }, null, \"arrayChange\");\r\n                        subscription.disposeWhenNodeIsRemoved(targetNode);\r\n\r\n                        return subscription;\r\n                    } else {\r\n                        return ko.dependentObservable(function () {\r\n                            var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n                            if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                                unwrappedArray = [unwrappedArray];\r\n\r\n                            if (shouldHideDestroyed) {\r\n                                // Filter out any entries marked as destroyed\r\n                                unwrappedArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                                    return item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n                                });\r\n                            }\r\n                            setDomNodeChildrenFromArrayMapping(unwrappedArray);\r\n\r\n                        }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n                    }\r\n                };\r\n\r\n                var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n                function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n                    var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n                    if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\r\n                        oldComputed.dispose();\r\n                    ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && (!newComputed.isActive || newComputed.isActive())) ? newComputed : undefined);\r\n                }\r\n\r\n                var cleanContainerDomDataKey = ko.utils.domData.nextKey();\r\n                ko.bindingHandlers['template'] = {\r\n                    'init': function(element, valueAccessor) {\r\n                        // Support anonymous templates\r\n                        var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n                        if (typeof bindingValue == \"string\" || 'name' in bindingValue) {\r\n                            // It's a named template - clear the element\r\n                            ko.virtualElements.emptyNode(element);\r\n                        } else if ('nodes' in bindingValue) {\r\n                            // We've been given an array of DOM nodes. Save them as the template source.\r\n                            // There is no known use case for the node array being an observable array (if the output\r\n                            // varies, put that behavior *into* your template - that's what templates are for), and\r\n                            // the implementation would be a mess, so assert that it's not observable.\r\n                            var nodes = bindingValue['nodes'] || [];\r\n                            if (ko.isObservable(nodes)) {\r\n                                throw new Error('The \"nodes\" option must be a plain, non-observable array.');\r\n                            }\r\n\r\n                            // If the nodes are already attached to a KO-generated container, we reuse that container without moving the\r\n                            // elements to a new one (we check only the first node, as the nodes are always moved together)\r\n                            var container = nodes[0] && nodes[0].parentNode;\r\n                            if (!container || !ko.utils.domData.get(container, cleanContainerDomDataKey)) {\r\n                                container = ko.utils.moveCleanedNodesToContainerElement(nodes);\r\n                                ko.utils.domData.set(container, cleanContainerDomDataKey, true);\r\n                            }\r\n\r\n                            new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n                        } else {\r\n                            // It's an anonymous template - store the element contents, then clear the element\r\n                            var templateNodes = ko.virtualElements.childNodes(element);\r\n                            if (templateNodes.length > 0) {\r\n                                var container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                                new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n                            } else {\r\n                                throw new Error(\"Anonymous template defined, but no template content was provided\");\r\n                            }\r\n                        }\r\n                        return { 'controlsDescendantBindings': true };\r\n                    },\r\n                    'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                        var value = valueAccessor(),\r\n                            options = ko.utils.unwrapObservable(value),\r\n                            shouldDisplay = true,\r\n                            templateComputed = null,\r\n                            template;\r\n\r\n                        if (typeof options == \"string\") {\r\n                            template = value;\r\n                            options = {};\r\n                        } else {\r\n                            template = 'name' in options ? options['name'] : element;\r\n\r\n                            // Support \"if\"/\"ifnot\" conditions\r\n                            if ('if' in options)\r\n                                shouldDisplay = ko.utils.unwrapObservable(options['if']);\r\n                            if (shouldDisplay && 'ifnot' in options)\r\n                                shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\r\n\r\n                            // Don't show anything if an empty name is given (see #2446)\r\n                            if (shouldDisplay && !template) {\r\n                                shouldDisplay = false;\r\n                            }\r\n                        }\r\n\r\n                        if ('foreach' in options) {\r\n                            // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                            var dataArray = (shouldDisplay && options['foreach']) || [];\r\n                            templateComputed = ko.renderTemplateForEach(template, dataArray, options, element, bindingContext);\r\n                        } else if (!shouldDisplay) {\r\n                            ko.virtualElements.emptyNode(element);\r\n                        } else {\r\n                            // Render once for this single data point (or use the viewModel if no data was provided)\r\n                            var innerBindingContext = bindingContext;\r\n                            if ('data' in options) {\r\n                                innerBindingContext = bindingContext['createChildContext'](options['data'], {\r\n                                    'as': options['as'],\r\n                                    'noChildContext': options['noChildContext'],\r\n                                    'exportDependencies': true\r\n                                });\r\n                            }\r\n                            templateComputed = ko.renderTemplate(template, innerBindingContext, options, element);\r\n                        }\r\n\r\n                        // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n                        disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n                    }\r\n                };\r\n\r\n                // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\r\n                ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\r\n                    var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n                    if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\r\n                        return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n                    if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n                        return null; // Named templates can be rewritten, so return \"no error\"\r\n                    return \"This template engine does not support anonymous templates nested within its templates\";\r\n                };\r\n\r\n                ko.virtualElements.allowedBindings['template'] = true;\r\n            })();\r\n\r\n            ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\r\n            ko.exportSymbol('renderTemplate', ko.renderTemplate);\r\n// Go through the items that have been added and deleted and try to find matches between them.\r\n            ko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n                if (left.length && right.length) {\r\n                    var failedCompares, l, r, leftItem, rightItem;\r\n                    for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\r\n                        for (r = 0; rightItem = right[r]; ++r) {\r\n                            if (leftItem['value'] === rightItem['value']) {\r\n                                leftItem['moved'] = rightItem['index'];\r\n                                rightItem['moved'] = leftItem['index'];\r\n                                right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                                failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\r\n                                break;\r\n                            }\r\n                        }\r\n                        failedCompares += r;\r\n                    }\r\n                }\r\n            };\r\n\r\n            ko.utils.compareArrays = (function () {\r\n                var statusNotInOld = 'added', statusNotInNew = 'deleted';\r\n\r\n                // Simple calculation based on Levenshtein distance.\r\n                function compareArrays(oldArray, newArray, options) {\r\n                    // For backward compatibility, if the third arg is actually a bool, interpret\r\n                    // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\r\n                    options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\r\n                    oldArray = oldArray || [];\r\n                    newArray = newArray || [];\r\n\r\n                    if (oldArray.length < newArray.length)\r\n                        return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n                    else\r\n                        return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n                }\r\n\r\n                function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n                    var myMin = Math.min,\r\n                        myMax = Math.max,\r\n                        editDistanceMatrix = [],\r\n                        smlIndex, smlIndexMax = smlArray.length,\r\n                        bigIndex, bigIndexMax = bigArray.length,\r\n                        compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n                        maxDistance = smlIndexMax + bigIndexMax + 1,\r\n                        thisRow, lastRow,\r\n                        bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n                    for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\r\n                        lastRow = thisRow;\r\n                        editDistanceMatrix.push(thisRow = []);\r\n                        bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n                        bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n                        for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\r\n                            if (!bigIndex)\r\n                                thisRow[bigIndex] = smlIndex + 1;\r\n                            else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                                thisRow[bigIndex] = bigIndex + 1;\r\n                            else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                                thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                            else {\r\n                                var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                                var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                                thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n                    for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n                        meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n                        if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                            notInSml.push(editScript[editScript.length] = {     // added\r\n                                'status': statusNotInSml,\r\n                                'value': bigArray[--bigIndex],\r\n                                'index': bigIndex });\r\n                        } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                            notInBig.push(editScript[editScript.length] = {     // deleted\r\n                                'status': statusNotInBig,\r\n                                'value': smlArray[--smlIndex],\r\n                                'index': smlIndex });\r\n                        } else {\r\n                            --bigIndex;\r\n                            --smlIndex;\r\n                            if (!options['sparse']) {\r\n                                editScript.push({\r\n                                    'status': \"retained\",\r\n                                    'value': bigArray[bigIndex] });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n                    // smlIndexMax keeps the time complexity of this algorithm linear.\r\n                    ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\r\n\r\n                    return editScript.reverse();\r\n                }\r\n\r\n                return compareArrays;\r\n            })();\r\n\r\n            ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\r\n            (function () {\r\n                // Objective:\r\n                // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n                //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n                // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n                //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\r\n                //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n                // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n                // You can use this, for example, to activate bindings on those nodes.\r\n\r\n                function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n                    // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n                    var mappedNodes = [];\r\n                    var dependentObservable = ko.dependentObservable(function() {\r\n                        var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n                        // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n                        if (mappedNodes.length > 0) {\r\n                            ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                            if (callbackAfterAddingNodes)\r\n                                ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n                        }\r\n\r\n                        // Replace the contents of the mappedNodes array, thereby updating the record\r\n                        // of which nodes would be deleted if valueToMap was itself later removed\r\n                        mappedNodes.length = 0;\r\n                        ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n                    }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n                    return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n                }\r\n\r\n                var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\r\n                    deletedItemDummyValue = ko.utils.domData.nextKey();\r\n\r\n                ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes, editScript) {\r\n                    array = array || [];\r\n                    if (typeof array.length == \"undefined\") // Coerce single value into array\r\n                        array = [array];\r\n\r\n                    options = options || {};\r\n                    var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey);\r\n                    var isFirstExecution = !lastMappingResult;\r\n\r\n                    // Build the new mapping result\r\n                    var newMappingResult = [];\r\n                    var lastMappingResultIndex = 0;\r\n                    var currentArrayIndex = 0;\r\n\r\n                    var nodesToDelete = [];\r\n                    var itemsToMoveFirstIndexes = [];\r\n                    var itemsForBeforeRemoveCallbacks = [];\r\n                    var itemsForMoveCallbacks = [];\r\n                    var itemsForAfterAddCallbacks = [];\r\n                    var mapData;\r\n                    var countWaitingForRemove = 0;\r\n\r\n                    function itemAdded(value) {\r\n                        mapData = { arrayEntry: value, indexObservable: ko.observable(currentArrayIndex++) };\r\n                        newMappingResult.push(mapData);\r\n                        if (!isFirstExecution) {\r\n                            itemsForAfterAddCallbacks.push(mapData);\r\n                        }\r\n                    }\r\n\r\n                    function itemMovedOrRetained(oldPosition) {\r\n                        mapData = lastMappingResult[oldPosition];\r\n                        if (currentArrayIndex !== mapData.indexObservable.peek())\r\n                            itemsForMoveCallbacks.push(mapData);\r\n                        // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n                        mapData.indexObservable(currentArrayIndex++);\r\n                        ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n                        newMappingResult.push(mapData);\r\n                    }\r\n\r\n                    function callCallback(callback, items) {\r\n                        if (callback) {\r\n                            for (var i = 0, n = items.length; i < n; i++) {\r\n                                ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                                    callback(node, i, items[i].arrayEntry);\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (isFirstExecution) {\r\n                        ko.utils.arrayForEach(array, itemAdded);\r\n                    } else {\r\n                        if (!editScript || (lastMappingResult && lastMappingResult['_countWaitingForRemove'])) {\r\n                            // Compare the provided array against the previous one\r\n                            var lastArray = ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; }),\r\n                                compareOptions = {\r\n                                    'dontLimitMoves': options['dontLimitMoves'],\r\n                                    'sparse': true\r\n                                };\r\n                            editScript = ko.utils.compareArrays(lastArray, array, compareOptions);\r\n                        }\r\n\r\n                        for (var i = 0, editScriptItem, movedIndex, itemIndex; editScriptItem = editScript[i]; i++) {\r\n                            movedIndex = editScriptItem['moved'];\r\n                            itemIndex = editScriptItem['index'];\r\n                            switch (editScriptItem['status']) {\r\n                                case \"deleted\":\r\n                                    while (lastMappingResultIndex < itemIndex) {\r\n                                        itemMovedOrRetained(lastMappingResultIndex++);\r\n                                    }\r\n                                    if (movedIndex === undefined) {\r\n                                        mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                                        // Stop tracking changes to the mapping for these nodes\r\n                                        if (mapData.dependentObservable) {\r\n                                            mapData.dependentObservable.dispose();\r\n                                            mapData.dependentObservable = undefined;\r\n                                        }\r\n\r\n                                        // Queue these nodes for later removal\r\n                                        if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\r\n                                            if (options['beforeRemove']) {\r\n                                                newMappingResult.push(mapData);\r\n                                                countWaitingForRemove++;\r\n                                                if (mapData.arrayEntry === deletedItemDummyValue) {\r\n                                                    mapData = null;\r\n                                                } else {\r\n                                                    itemsForBeforeRemoveCallbacks.push(mapData);\r\n                                                }\r\n                                            }\r\n                                            if (mapData) {\r\n                                                nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    lastMappingResultIndex++;\r\n                                    break;\r\n\r\n                                case \"added\":\r\n                                    while (currentArrayIndex < itemIndex) {\r\n                                        itemMovedOrRetained(lastMappingResultIndex++);\r\n                                    }\r\n                                    if (movedIndex !== undefined) {\r\n                                        itemsToMoveFirstIndexes.push(newMappingResult.length);\r\n                                        itemMovedOrRetained(movedIndex);\r\n                                    } else {\r\n                                        itemAdded(editScriptItem['value']);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n\r\n                        while (currentArrayIndex < array.length) {\r\n                            itemMovedOrRetained(lastMappingResultIndex++);\r\n                        }\r\n\r\n                        // Record that the current view may still contain deleted items\r\n                        // because it means we won't be able to use a provided editScript.\r\n                        newMappingResult['_countWaitingForRemove'] = countWaitingForRemove;\r\n                    }\r\n\r\n                    // Store a copy of the array items we just considered so we can difference it next time\r\n                    ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n\r\n                    // Call beforeMove first before any changes have been made to the DOM\r\n                    callCallback(options['beforeMove'], itemsForMoveCallbacks);\r\n\r\n                    // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\r\n                    ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\r\n\r\n                    var i, j, lastNode, nodeToInsert, mappedNodes, activeElement;\r\n\r\n                    // Since most browsers remove the focus from an element when it's moved to another location,\r\n                    // save the focused element and try to restore it later.\r\n                    try {\r\n                        activeElement = domNode.ownerDocument.activeElement;\r\n                    } catch(e) {\r\n                        // IE9 throws if you access activeElement during page load (see issue #703)\r\n                    }\r\n\r\n                    // Try to reduce overall moved nodes by first moving the ones that were marked as moved by the edit script\r\n                    if (itemsToMoveFirstIndexes.length) {\r\n                        while ((i = itemsToMoveFirstIndexes.shift()) != undefined) {\r\n                            mapData = newMappingResult[i];\r\n                            for (lastNode = undefined; i; ) {\r\n                                if ((mappedNodes = newMappingResult[--i].mappedNodes) && mappedNodes.length) {\r\n                                    lastNode = mappedNodes[mappedNodes.length-1];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            for (j = 0; nodeToInsert = mapData.mappedNodes[j]; lastNode = nodeToInsert, j++) {\r\n                                ko.virtualElements.insertAfter(domNode, nodeToInsert, lastNode);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\r\n                    for (i = 0; mapData = newMappingResult[i]; i++) {\r\n                        // Get nodes for newly added items\r\n                        if (!mapData.mappedNodes)\r\n                            ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n                        // Put nodes in the right place if they aren't there already\r\n                        for (j = 0; nodeToInsert = mapData.mappedNodes[j]; lastNode = nodeToInsert, j++) {\r\n                            ko.virtualElements.insertAfter(domNode, nodeToInsert, lastNode);\r\n                        }\r\n\r\n                        // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n                        if (!mapData.initialized && callbackAfterAddingNodes) {\r\n                            callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                            mapData.initialized = true;\r\n                            lastNode = mapData.mappedNodes[mapData.mappedNodes.length - 1];     // get the last node again since it may have been changed by a preprocessor\r\n                        }\r\n                    }\r\n\r\n                    // Restore the focused element if it had lost focus\r\n                    if (activeElement && domNode.ownerDocument.activeElement != activeElement) {\r\n                        activeElement.focus();\r\n                    }\r\n\r\n                    // If there's a beforeRemove callback, call it after reordering.\r\n                    // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n                    // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n                    // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n                    // Perhaps we'll make that change in the future if this scenario becomes more common.\r\n                    callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\r\n\r\n                    // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\r\n                    // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\r\n                    // with an actual item in the array and appear as \"retained\" or \"moved\".\r\n                    for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\r\n                        itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\r\n                    }\r\n\r\n                    // Finally call afterMove and afterAdd callbacks\r\n                    callCallback(options['afterMove'], itemsForMoveCallbacks);\r\n                    callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\r\n                }\r\n            })();\r\n\r\n            ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\r\n            ko.nativeTemplateEngine = function () {\r\n                this['allowTemplateRewriting'] = false;\r\n            }\r\n\r\n            ko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\n            ko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\n            ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n                var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\r\n                    templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\r\n                    templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\r\n\r\n                if (templateNodes) {\r\n                    return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n                } else {\r\n                    var templateText = templateSource['text']();\r\n                    return ko.utils.parseHtmlFragment(templateText, templateDocument);\r\n                }\r\n            };\r\n\r\n            ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\n            ko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\n            ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\r\n            (function() {\r\n                ko.jqueryTmplTemplateEngine = function () {\r\n                    // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\r\n                    // doesn't expose a version number, so we have to infer it.\r\n                    // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n                    // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n                    var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n                        if (!jQueryInstance || !(jQueryInstance['tmpl']))\r\n                            return 0;\r\n                        // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n                        try {\r\n                            if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\r\n                                // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                                return 2; // Final version of jquery.tmpl\r\n                            }\r\n                        } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n                        return 1; // Any older version that we don't support\r\n                    })();\r\n\r\n                    function ensureHasReferencedJQueryTemplates() {\r\n                        if (jQueryTmplVersion < 2)\r\n                            throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n                    }\r\n\r\n                    function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n                        return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\r\n                    }\r\n\r\n                    this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\r\n                        templateDocument = templateDocument || document;\r\n                        options = options || {};\r\n                        ensureHasReferencedJQueryTemplates();\r\n\r\n                        // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\r\n                        var precompiled = templateSource['data']('precompiled');\r\n                        if (!precompiled) {\r\n                            var templateText = templateSource['text']() || \"\";\r\n                            // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                            templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                            precompiled = jQueryInstance['template'](null, templateText);\r\n                            templateSource['data']('precompiled', precompiled);\r\n                        }\r\n\r\n                        var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n                        var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\r\n\r\n                        var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n                        resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n                        jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\r\n                        return resultNodes;\r\n                    };\r\n\r\n                    this['createJavaScriptEvaluatorBlock'] = function(script) {\r\n                        return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n                    };\r\n\r\n                    this['addTemplate'] = function(templateName, templateMarkup) {\r\n                        document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\r\n                    };\r\n\r\n                    if (jQueryTmplVersion > 0) {\r\n                        jQueryInstance['tmpl']['tag']['ko_code'] = {\r\n                            open: \"__.push($1 || '');\"\r\n                        };\r\n                        jQueryInstance['tmpl']['tag']['ko_with'] = {\r\n                            open: \"with($1) {\",\r\n                            close: \"} \"\r\n                        };\r\n                    }\r\n                };\r\n\r\n                ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n                ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n                // Use this one by default *only if jquery.tmpl is referenced*\r\n                var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n                if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\r\n                    ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n                ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\r\n            })();\r\n        }));\r\n    }());\r\n})();\r\n","mage/accordion.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/tabs'\r\n], function ($, tabs) {\r\n    'use strict';\r\n\r\n    $.widget('mage.accordion', tabs, {\r\n        options: {\r\n            active: [0],\r\n            multipleCollapsible: false,\r\n            openOnFocus: false\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _callCollapsible: function () {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            if (typeof this.options.active === 'string') {\r\n                this.options.active = this.options.active.split(' ').map(function (item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n\r\n            $.each(this.collapsibles, function (i) {\r\n                disabled = active = false;\r\n\r\n                if ($.inArray(i, self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n\r\n                if ($.inArray(i, self.options.active) !== -1) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this, i, active, disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Overwrites default functionality to provide the option to activate/deactivate multiple sections simultaneous\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleActivate: function (action, index) {\r\n            var self = this;\r\n\r\n            if (Array.isArray(index && this.options.multipleCollapsible)) {\r\n                $.each(index, function () {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if (index === undefined && this.options.multipleCollapsible) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this._super(action, index);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * If the Accordion allows multiple section to be active at the same time, if deep linking is used\r\n         * sections that don't contain the id from anchor shouldn't be closed, otherwise the accordion uses the\r\n         * tabs behavior\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function () {\r\n            if (!this.options.multipleCollapsible) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Prevent default behavior that closes the other sections when one gets activated if the Accordion allows\r\n         * multiple sections simultaneous\r\n         * @private\r\n         */\r\n        _closeOthers: function () {\r\n            var self = this;\r\n\r\n            if (!this.options.multipleCollapsible) {\r\n                $.each(this.collapsibles, function () {\r\n                    $(this).on('beforeOpen', function () {\r\n                        self.collapsibles.not(this).collapsible('deactivate');\r\n                    });\r\n                });\r\n            }\r\n            $.each(this.collapsibles, function () {\r\n                $(this).on('beforeOpen', function () {\r\n                    var section = $(this);\r\n\r\n                    section.addClass('allow').prevAll().addClass('allow');\r\n                    section.nextAll().removeClass('allow');\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.accordion;\r\n});\r\n","mage/bootstrap.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main',\r\n    'Magento_Ui/js/lib/knockout/bootstrap'\r\n], function ($, mage) {\r\n    'use strict';\r\n\r\n    $.ajaxSetup({\r\n        cache: false\r\n    });\r\n\r\n    /**\r\n     * Init all components defined via data-mage-init attribute.\r\n     * Execute in a separate task to prevent main thread blocking.\r\n     */\r\n    setTimeout(mage.apply);\r\n});\r\n","mage/calendar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/*eslint max-depth: 0*/\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/datepicker',\r\n    'jquery-ui-modules/timepicker'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var calendarBasePrototype,\r\n        datepickerPrototype = $.datepicker.constructor.prototype;\r\n\r\n    $.datepicker.markerClassName = '_has-datepicker';\r\n\r\n    /**\r\n     * Extend JQuery date picker prototype with store local time methods\r\n     */\r\n    $.extend(datepickerPrototype, {\r\n        /**\r\n         * Get date/time according to store settings.\r\n         * We use serverTimezoneOffset (in seconds) instead of serverTimezoneSeconds\r\n         * in order to have ability to know actual store time even if page hadn't been reloaded\r\n         * @returns {Date}\r\n         */\r\n        _getTimezoneDate: function (options) {\r\n            // local time in ms\r\n            var ms = Date.now();\r\n\r\n            options = options || $.calendarConfig || {};\r\n\r\n            // Adjust milliseconds according to store timezone offset,\r\n            // mind the GMT zero offset\r\n            if (typeof options.serverTimezoneOffset !== 'undefined') {\r\n                // Make UTC time and add store timezone offset in seconds\r\n                ms += new Date().getTimezoneOffset() * 60 * 1000 + options.serverTimezoneOffset * 1000;\r\n            } else if (typeof options.serverTimezoneSeconds !== 'undefined') {\r\n                //Set milliseconds according to client local timezone offset\r\n                ms = (options.serverTimezoneSeconds + new Date().getTimezoneOffset() * 60) * 1000;\r\n            }\r\n\r\n            return new Date(ms);\r\n        },\r\n\r\n        /**\r\n         * Set date/time according to store settings.\r\n         * @param {String|Object} target - the target input field or division or span\r\n         */\r\n        _setTimezoneDateDatepicker: function (target) {\r\n            this._setDateDatepicker(target, this._getTimezoneDate());\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Widget calendar\r\n     */\r\n    $.widget('mage.calendar', {\r\n        options: {\r\n            autoComplete: true\r\n        },\r\n\r\n        /**\r\n         * Merge global options with options passed to widget invoke\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._enableAMPM();\r\n            this.options = $.extend(\r\n                {},\r\n                $.calendarConfig ? $.calendarConfig : {},\r\n                this.options.showsTime ? {\r\n                    showTime: true,\r\n                    showHour: true,\r\n                    showMinute: true\r\n                } : {},\r\n                this.options\r\n            );\r\n            this._initPicker(this.element);\r\n            this._overwriteGenerateHtml();\r\n        },\r\n\r\n        /**\r\n         * Get picker name\r\n         * @protected\r\n         */\r\n        _picker: function () {\r\n            return this.options.showsTime ? 'datetimepicker' : 'datepicker';\r\n        },\r\n\r\n        /**\r\n         * Fix for Timepicker - Set ampm option for Timepicker if timeformat contains string 'tt'\r\n         * @protected\r\n         */\r\n        _enableAMPM: function () {\r\n            if (this.options.timeFormat && this.options.timeFormat.indexOf('tt') >= 0) {\r\n                this.options.ampm = true;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Wrapper for overwrite jQuery UI datepicker function.\r\n         */\r\n        _overwriteGenerateHtml: function () {\r\n            /**\r\n             * Overwrite jQuery UI datepicker function.\r\n             * Reason: magento date could be set before calendar show\r\n             * but local date will be styled as current in original _generateHTML\r\n             *\r\n             * @param {Object} inst - instance datepicker.\r\n             * @return {String} html template\r\n             */\r\n            $.datepicker.constructor.prototype._generateHTML = function (inst) {\r\n                var today = this._getTimezoneDate(),\r\n                    isRTL = this._get(inst, 'isRTL'),\r\n                    showButtonPanel = this._get(inst, 'showButtonPanel'),\r\n                    hideIfNoPrevNext = this._get(inst, 'hideIfNoPrevNext'),\r\n                    navigationAsDateFormat = this._get(inst, 'navigationAsDateFormat'),\r\n                    numMonths = this._getNumberOfMonths(inst),\r\n                    showCurrentAtPos = this._get(inst, 'showCurrentAtPos'),\r\n                    stepMonths = this._get(inst, 'stepMonths'),\r\n                    isMultiMonth = parseInt(numMonths[0], 10) !== 1 || parseInt(numMonths[1], 10) !== 1,\r\n                    currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) :\r\n                        new Date(inst.currentYear, inst.currentMonth, inst.currentDay)),\r\n                    minDate = this._getMinMaxDate(inst, 'min'),\r\n                    maxDate = this._getMinMaxDate(inst, 'max'),\r\n                    drawMonth = inst.drawMonth - showCurrentAtPos,\r\n                    drawYear = inst.drawYear,\r\n                    maxDraw,\r\n                    prevText = this._get(inst, 'prevText'),\r\n                    prev,\r\n                    nextText = this._get(inst, 'nextText'),\r\n                    next,\r\n                    currentText = this._get(inst, 'currentText'),\r\n                    gotoDate,\r\n                    controls,\r\n                    buttonPanel,\r\n                    firstDay,\r\n                    showWeek = this._get(inst, 'showWeek'),\r\n                    dayNames = this._get(inst, 'dayNames'),\r\n                    dayNamesMin = this._get(inst, 'dayNamesMin'),\r\n                    monthNames = this._get(inst, 'monthNames'),\r\n                    monthNamesShort =  this._get(inst, 'monthNamesShort'),\r\n                    beforeShowDay = this._get(inst, 'beforeShowDay'),\r\n                    showOtherMonths = this._get(inst, 'showOtherMonths'),\r\n                    selectOtherMonths = this._get(inst, 'selectOtherMonths'),\r\n                    defaultDate = this._getDefaultDate(inst),\r\n                    html = '',\r\n                    row = 0,\r\n                    col = 0,\r\n                    selectedDate,\r\n                    cornerClass = ' ui-corner-all',\r\n                    group = '',\r\n                    calender = '',\r\n                    dow = 0,\r\n                    thead,\r\n                    day,\r\n                    daysInMonth,\r\n                    leadDays,\r\n                    curRows,\r\n                    numRows,\r\n                    printDate,\r\n                    dRow = 0,\r\n                    tbody,\r\n                    daySettings,\r\n                    otherMonth,\r\n                    unselectable;\r\n\r\n                if (drawMonth < 0) {\r\n                    drawMonth += 12;\r\n                    drawYear--;\r\n                }\r\n\r\n                if (maxDate) {\r\n                    maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(),\r\n                        maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));\r\n                    maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;\r\n\r\n                    while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {\r\n                        drawMonth--;\r\n\r\n                        if (drawMonth < 0) {\r\n                            drawMonth = 11;\r\n                            drawYear--;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                inst.drawMonth = drawMonth;\r\n                inst.drawYear = drawYear;\r\n                prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText,\r\n                    this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)),\r\n                    this._getFormatConfig(inst));\r\n                prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-prev ui-corner-all\" data-handler=\"prev\" data-event=\"click\"' +\r\n                    ' title=\"' + prevText + '\">' +\r\n                    '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'e' : 'w') + '\">' +\r\n                    '' + prevText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-prev ui-corner-all ui-state-disabled\" title=\"' +\r\n                            '' + prevText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                            '' + (isRTL ? 'e' : 'w') + '\">' + prevText + '</span></a>';\r\n                nextText = !navigationAsDateFormat ?\r\n                    nextText\r\n                    :   this.formatDate(nextText,\r\n                        this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)),\r\n                        this._getFormatConfig(inst));\r\n                next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ?\r\n                    '<a class=\"ui-datepicker-next ui-corner-all\" data-handler=\"next\" data-event=\"click\"' +\r\n                    'title=\"' + nextText + '\"><span class=\"ui-icon ui-icon-circle-triangle-' +\r\n                    '' + (isRTL ? 'w' : 'e') + '\">' + nextText + '</span></a>'\r\n                    : hideIfNoPrevNext ? ''\r\n                        :   '<a class=\"ui-datepicker-next ui-corner-all ui-state-disabled\" title=\"' + nextText + '\">' +\r\n                            '<span class=\"ui-icon ui-icon-circle-triangle-' + (isRTL ? 'w' : 'e') + '\">' + nextText +\r\n                            '</span></a>';\r\n                gotoDate = this._get(inst, 'gotoCurrent') && inst.currentDay ? currentDate : today;\r\n                currentText = !navigationAsDateFormat ? currentText :\r\n                    this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));\r\n                controls = !inst.inline ?\r\n                    '<button type=\"button\" class=\"ui-datepicker-close ui-state-default ui-priority-primary ' +\r\n                    'ui-corner-all\" data-handler=\"hide\" data-event=\"click\">' +\r\n                    this._get(inst, 'closeText') + '</button>'\r\n                    : '';\r\n                buttonPanel = showButtonPanel ?\r\n                    '<div class=\"ui-datepicker-buttonpane ui-widget-content\">' + (isRTL ? controls : '') +\r\n                    (this._isInRange(inst, gotoDate) ? '<button type=\"button\" class=\"ui-datepicker-current ' +\r\n                    'ui-state-default ui-priority-secondary ui-corner-all\" data-handler=\"today\" data-event=\"click\"' +\r\n                    '>' + currentText + '</button>' : '') + (isRTL ? '' : controls) + '</div>' : '';\r\n                firstDay = parseInt(this._get(inst, 'firstDay'), 10);\r\n                firstDay = isNaN(firstDay) ? 0 : firstDay;\r\n\r\n                for (row = 0; row < numMonths[0]; row++) {\r\n                    this.maxRows = 4;\r\n\r\n                    for (col = 0; col < numMonths[1]; col++) {\r\n                        selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));\r\n\r\n                        calender = '';\r\n\r\n                        if (isMultiMonth) {\r\n                            calender += '<div class=\"ui-datepicker-group';\r\n\r\n                            if (numMonths[1] > 1) {\r\n                                switch (col) {\r\n                                    case 0: calender += ' ui-datepicker-group-first';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'right' : 'left');\r\n                                        break;\r\n\r\n                                    case numMonths[1] - 1: calender += ' ui-datepicker-group-last';\r\n                                        cornerClass = ' ui-corner-' + (isRTL ? 'left' : 'right');\r\n                                        break;\r\n\r\n                                    default: calender += ' ui-datepicker-group-middle'; cornerClass = '';\r\n                                }\r\n                            }\r\n                            calender += '\">';\r\n                        }\r\n                        calender += '<div class=\"ui-datepicker-header ' +\r\n                            'ui-widget-header ui-helper-clearfix' + cornerClass + '\">' +\r\n                            (/all|left/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? next : prev : '') +\r\n                            (/all|right/.test(cornerClass) && parseInt(row, 10) === 0 ? isRTL ? prev : next : '') +\r\n                            this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate,\r\n                            row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers\r\n                            '</div><table class=\"ui-datepicker-calendar\"><thead>' +\r\n                            '<tr>';\r\n                        thead = showWeek ?\r\n                            '<th class=\"ui-datepicker-week-col\">' + this._get(inst, 'weekHeader') + '</th>' : '';\r\n\r\n                        for (dow = 0; dow < 7; dow++) { // days of the week\r\n                            day = (dow + firstDay) % 7;\r\n                            thead += '<th' + ((dow + firstDay + 6) % 7 >= 5 ?\r\n                                ' class=\"ui-datepicker-week-end\"' : '') + '>' +\r\n                                '<span title=\"' + dayNames[day] + '\">' + dayNamesMin[day] + '</span></th>';\r\n                        }\r\n                        calender += thead + '</tr></thead><tbody>';\r\n                        daysInMonth = this._getDaysInMonth(drawYear, drawMonth);\r\n\r\n                        if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {\r\n                            inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);\r\n                        }\r\n                        leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;\r\n                        curRows = Math.ceil((leadDays + daysInMonth) / 7); // calculate the number of rows to generate\r\n                        numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;\r\n                        this.maxRows = numRows;\r\n                        printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));\r\n\r\n                        for (dRow = 0; dRow < numRows; dRow++) { // create date picker rows\r\n                            calender += '<tr>';\r\n                            tbody = !showWeek ? '' : '<td class=\"ui-datepicker-week-col\">' +\r\n                            this._get(inst, 'calculateWeek')(printDate) + '</td>';\r\n\r\n                            for (dow = 0; dow < 7; dow++) { // create date picker days\r\n                                daySettings = beforeShowDay ?\r\n                                    beforeShowDay.apply(inst.input ? inst.input[0] : null, [printDate]) : [true, ''];\r\n                                otherMonth = printDate.getMonth() !== drawMonth;\r\n                                unselectable = otherMonth && !selectOtherMonths || !daySettings[0] ||\r\n                                minDate && printDate < minDate || maxDate && printDate > maxDate;\r\n                                tbody += '<td class=\"' +\r\n                                ((dow + firstDay + 6) % 7 >= 5 ? ' ui-datepicker-week-end' : '') + // highlight weekends\r\n                                (otherMonth ? ' ui-datepicker-other-month' : '') + // highlight days from other months\r\n                                (printDate.getTime() === selectedDate.getTime() &&\r\n                                drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key\r\n                                defaultDate.getTime() === printDate.getTime() &&\r\n                                defaultDate.getTime() === selectedDate.getTime() ?\r\n                                    // or defaultDate is current printedDate and defaultDate is selectedDate\r\n                                ' ' + this._dayOverClass : '') + // highlight selected day\r\n                                (unselectable ? ' ' + this._unselectableClass + ' ui-state-disabled' : '') +\r\n                                (otherMonth && !showOtherMonths ? '' : ' ' + daySettings[1] + // highlight custom dates\r\n                                (printDate.getTime() === currentDate.getTime() ? ' ' + this._currentClass : '') +\r\n                                (printDate.getDate() === today.getDate() && printDate.getMonth() === today.getMonth() &&\r\n                                printDate.getYear() === today.getYear() ? ' ui-datepicker-today' : '')) + '\"' +\r\n                                ((!otherMonth || showOtherMonths) && daySettings[2] ?\r\n                                ' title=\"' + daySettings[2] + '\"' : '') + // cell title\r\n                                (unselectable ? '' : ' data-handler=\"selectDay\" data-event=\"click\" data-month=\"' +\r\n                                '' + printDate.getMonth() + '\" data-year=\"' + printDate.getFullYear() + '\"') + '>' +\r\n                                (otherMonth && !showOtherMonths ? '&#xa0;' : // display for other months\r\n                                    unselectable ? '<span class=\"ui-state-default\">' + printDate.getDate() + '</span>'\r\n                                        : '<a class=\"ui-state-default' +\r\n                                    (printDate.getTime() === today.getTime() ? ' ' : '') +\r\n                                    (printDate.getTime() === currentDate.getTime() ? ' ui-state-active' : '') +\r\n                                    (otherMonth ? ' ui-priority-secondary' : '') +\r\n                                    '\" data-date=\"' + printDate.getDate() + '\" href=\"#\">' +\r\n                                        printDate.getDate() + '</a>') + '</td>';\r\n                                printDate.setDate(printDate.getDate() + 1);\r\n                                printDate = this._daylightSavingAdjust(printDate);\r\n                            }\r\n                            calender += tbody + '</tr>';\r\n                        }\r\n                        drawMonth++;\r\n\r\n                        if (drawMonth > 11) {\r\n                            drawMonth = 0;\r\n                            drawYear++;\r\n                        }\r\n                        calender += '</tbody></table>' + (isMultiMonth ? '</div>' +\r\n                        (numMonths[0] > 0 && col === numMonths[1] - 1 ? '<div class=\"ui-datepicker-row-break\"></div>'\r\n                            : '') : '');\r\n                        group += calender;\r\n                    }\r\n                    html += group;\r\n                }\r\n                html += buttonPanel + ($.ui.ie6 && !inst.inline ?\r\n                    '<iframe src=\"javascript:false;\" class=\"ui-datepicker-cover\" frameborder=\"0\"></iframe>' : '');\r\n                inst._keyEvent = false;\r\n\r\n                return html;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Set current date if the date is not set\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _setCurrentDate: function (element) {\r\n            if (!element.val()) {\r\n                element[this._picker()]('setTimezoneDate').val('');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init Datetimepicker\r\n         * @protected\r\n         * @param {Object} element\r\n         */\r\n        _initPicker: function (element) {\r\n            var picker = element[this._picker()](this.options),\r\n                pickerButtonText = picker.next('.ui-datepicker-trigger')\r\n                    .find('img')\r\n                    .attr('title');\r\n\r\n            picker.next('.ui-datepicker-trigger')\r\n                .addClass('v-middle')\r\n                .text('') // Remove jQuery UI datepicker generated image\r\n                .append('<span>' + pickerButtonText + '</span>');\r\n\r\n            $(element).attr('autocomplete', this.options.autoComplete ? 'on' : 'off');\r\n\r\n            this._setCurrentDate(element);\r\n        },\r\n\r\n        /**\r\n         * destroy instance of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            this.element[this._picker()]('destroy');\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * Method is kept for backward compatibility and unit-tests acceptance\r\n         * see \\mage\\calendar\\calendar-test.js\r\n         * @return {Object} date\r\n         */\r\n        getTimezoneDate: function () {\r\n            return datepickerPrototype._getTimezoneDate.call(this, this.options);\r\n        }\r\n    });\r\n\r\n    calendarBasePrototype = $.mage.calendar.prototype;\r\n\r\n    /**\r\n     * Extension for Calendar - date and time format convert functionality\r\n     * @var {Object}\r\n     */\r\n    $.widget('mage.calendar', $.extend({}, calendarBasePrototype,\r\n            /** @lends {$.mage.calendar.prototype} */ {\r\n                /**\r\n                 * key - backend format, value - jquery format\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                dateTimeFormat: {\r\n                    date: {\r\n                        'EEEE': 'DD',\r\n                        'EEE': 'D',\r\n                        'EE': 'D',\r\n                        'E': 'D',\r\n                        'D': 'o',\r\n                        'MMMM': 'MM',\r\n                        'MMM': 'M',\r\n                        'MM': 'mm',\r\n                        'M': 'mm',\r\n                        'yyyy': 'yy',\r\n                        'y': 'yy',\r\n                        'Y': 'yy',\r\n                        'yy': 'yy' // Always long year format on frontend\r\n                    },\r\n                    time: {\r\n                        'a': 'TT'\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Add Date and Time converting to _create method\r\n                 * @protected\r\n                 */\r\n                _create: function () {\r\n                    if (this.options.dateFormat) {\r\n                        this.options.dateFormat = this._convertFormat(this.options.dateFormat, 'date');\r\n                    }\r\n\r\n                    if (this.options.timeFormat) {\r\n                        this.options.timeFormat = this._convertFormat(this.options.timeFormat, 'time');\r\n                    }\r\n                    calendarBasePrototype._create.apply(this, arguments);\r\n                },\r\n\r\n                /**\r\n                 * Converting date or time format\r\n                 * @protected\r\n                 * @param {String} format\r\n                 * @param {String} type\r\n                 * @return {String}\r\n                 */\r\n                _convertFormat: function (format, type) {\r\n                    var symbols = format.match(/([a-z]+)/ig),\r\n                        separators = format.match(/([^a-z]+)/ig),\r\n                        self = this,\r\n                        convertedFormat = '';\r\n\r\n                    if (symbols) {\r\n                        $.each(symbols, function (key, val) {\r\n                            convertedFormat +=\r\n                                (self.dateTimeFormat[type][val] || val) +\r\n                                (separators[key] || '');\r\n                        });\r\n                    }\r\n\r\n                    return convertedFormat;\r\n                }\r\n            })\r\n    );\r\n\r\n    /**\r\n     * Widget dateRange\r\n     * @extends $.mage.calendar\r\n     */\r\n    $.widget('mage.dateRange', $.mage.calendar, {\r\n\r\n        /**\r\n         * creates two instances of datetimepicker for date range selection\r\n         * @protected\r\n         */\r\n        _initPicker: function () {\r\n            var from,\r\n                to;\r\n\r\n            if (this.options.from && this.options.to) {\r\n                from = this.element.find('#' + this.options.from.id);\r\n                to = this.element.find('#' + this.options.to.id);\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    to[this._picker()]('option', 'minDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, from);\r\n                from.on('change', $.proxy(function () {\r\n                    to[this._picker()]('option', 'minDate', from[this._picker()]('getDate'));\r\n                }, this));\r\n                this.options.onSelect = $.proxy(function (selectedDate) {\r\n                    from[this._picker()]('option', 'maxDate', selectedDate);\r\n                }, this);\r\n                $.mage.calendar.prototype._initPicker.call(this, to);\r\n                to.on('change', $.proxy(function () {\r\n                    from[this._picker()]('option', 'maxDate', to[this._picker()]('getDate'));\r\n                }, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * destroy two instances of datetimepicker\r\n         */\r\n        _destroy: function () {\r\n            if (this.options.from) {\r\n                this.element.find('#' + this.options.from.id)[this._picker()]('destroy');\r\n            }\r\n\r\n            if (this.options.to) {\r\n                this.element.find('#' + this.options.to.id)[this._picker()]('destroy');\r\n            }\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Overrides the \"today\" button functionality to select today's date when clicked.\r\n    $.datepicker._gotoTodayOriginal = $.datepicker._gotoToday;\r\n\r\n    /**\r\n     * overwrite jQuery UI _showDatepicker function for proper HTML generation conditions.\r\n     *\r\n     */\r\n    $.datepicker._showDatepickerOriginal = $.datepicker._showDatepicker;\r\n\r\n    /**\r\n     * Triggers original method showDataPicker for rendering calendar\r\n     * @param {HTMLObject} input\r\n     * @private\r\n     */\r\n    $.datepicker._showDatepicker = function (input) {\r\n        if (!input.disabled) {\r\n            $.datepicker._showDatepickerOriginal.call(this, input);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * _gotoToday\r\n     * @param {Object} el\r\n     */\r\n    $.datepicker._gotoToday = function (el) {\r\n        //Set date/time according to timezone offset\r\n        $(el).datepicker('setTimezoneDate')\r\n            // To ensure that user can re-select date field without clicking outside it first.\r\n            .trigger('blur').trigger('change');\r\n    };\r\n\r\n    return {\r\n        dateRange:  $.mage.dateRange,\r\n        calendar:   $.mage.calendar\r\n    };\r\n});\r\n","mage/collapsible.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery-ui-modules/core',\r\n    'jquery/jquery-storageapi',\r\n    'mage/mage'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var hideProps = {},\r\n        showProps = {};\r\n\r\n    hideProps.height = 'hide';\r\n    showProps.height = 'show';\r\n\r\n    $.widget('mage.collapsible', {\r\n        options: {\r\n            active: false,\r\n            disabled: false,\r\n            collapsible: true,\r\n            header: '[data-role=title]',\r\n            content: '[data-role=content]',\r\n            trigger: '[data-role=trigger]',\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: '[data-ajax=true]',\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            },\r\n            collateral: {\r\n                element: null,\r\n                openedState: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.storage = $.localStorage;\r\n            this.icons = false;\r\n\r\n            if (typeof this.options.icons === 'string') {\r\n                this.options.icons = JSON.parse(this.options.icons);\r\n            }\r\n\r\n            this._processPanels();\r\n            this._processState();\r\n            this._refresh();\r\n\r\n            if (this.options.icons.header && this.options.icons.activeHeader) {\r\n                this._createIcons();\r\n                this.icons = true;\r\n            }\r\n\r\n            this.element.on('dimensionsChanged', function (e) {\r\n                if (e.target && e.target.classList.contains('active')) {\r\n                    this._scrollToTopIfNotVisible();\r\n                }\r\n            }.bind(this));\r\n\r\n            this._bind('click');\r\n            this._trigger('created');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _refresh: function () {\r\n            this.trigger.attr('tabIndex', 0);\r\n\r\n            if (this.options.active && !this.options.disabled) {\r\n                if (this.options.openedState) {\r\n                    this.element.addClass(this.options.openedState);\r\n                }\r\n\r\n                if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                    $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n                }\r\n\r\n                if (this.options.ajaxContent) {\r\n                    this._loadContent();\r\n                }\r\n                // ARIA (updates aria attributes)\r\n                this.header.attr({\r\n                    'aria-selected': false\r\n                });\r\n            } else if (this.options.disabled) {\r\n                this.disable();\r\n            } else {\r\n                this.content.hide();\r\n\r\n                if (this.options.closedState) {\r\n                    this.element.addClass(this.options.closedState);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Processing the state:\r\n         *     If deep linking is used and the anchor is the id of the content or the content contains this id,\r\n         *     and the collapsible element is a nested one having collapsible parents, in order to see the content,\r\n         *     all the parents must be expanded.\r\n         * @private\r\n         */\r\n        _processState: function () {\r\n            var anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                urlPath = window.location.pathname.replace(/\\./g, ''),\r\n                state;\r\n\r\n            this.stateKey = encodeURIComponent(urlPath + this.element.attr('id'));\r\n\r\n            if (isValid &&\r\n                ($(this.content.find(anchor)).length > 0 || this.content.attr('id') === anchor.replace('#', ''))\r\n            ) {\r\n                this.element.parents('[data-collapsible=true]').collapsible('forceActivate');\r\n\r\n                if (!this.options.disabled) {\r\n                    this.options.active = true;\r\n\r\n                    if (this.options.saveState) { //eslint-disable-line max-depth\r\n                        this.storage.set(this.stateKey, true);\r\n                    }\r\n                }\r\n            } else if (this.options.saveState && !this.options.disabled) {\r\n                state = this.storage.get(this.stateKey);\r\n\r\n                if (typeof state === 'undefined' || state === null) {\r\n                    this.storage.set(this.stateKey, this.options.active);\r\n                } else if (state === true) {\r\n                    this.options.active = true;\r\n                } else if (state === false) {\r\n                    this.options.active = false;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _createIcons: function () {\r\n            var icons = this.options.icons;\r\n\r\n            if (icons) {\r\n                $('<span>')\r\n                    .addClass(icons.header)\r\n                    .attr('data-role', 'icons')\r\n                    .prependTo(this.header);\r\n\r\n                if (this.options.active && !this.options.disabled) {\r\n                    this.header.children('[data-role=icons]')\r\n                        .removeClass(icons.header)\r\n                        .addClass(icons.activeHeader);\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroyIcons: function () {\r\n            this.header\r\n                .children('[data-role=icons]')\r\n                .remove();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            var options = this.options;\r\n\r\n            this.element.removeAttr('data-collapsible');\r\n\r\n            this.trigger.removeAttr('tabIndex');\r\n\r\n            if (options.openedState) {\r\n                this.element.removeClass(options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (options.closedState) {\r\n                this.element.removeClass(options.closedState);\r\n            }\r\n\r\n            if (options.disabledState) {\r\n                this.element.removeClass(options.disabledState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this._destroyIcons();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _processPanels: function () {\r\n            var headers, triggers;\r\n\r\n            this.element.attr('data-collapsible', 'true');\r\n\r\n            if (typeof this.options.header === 'object') {\r\n                this.header = this.options.header;\r\n            } else {\r\n                headers = this.element.find(this.options.header);\r\n\r\n                if (headers.length > 0) {\r\n                    this.header = headers.eq(0);\r\n                } else {\r\n                    this.header = this.element;\r\n                }\r\n            }\r\n\r\n            if (typeof this.options.content === 'object') {\r\n                this.content = this.options.content;\r\n            } else {\r\n                this.content = this.header.next(this.options.content).eq(0);\r\n            }\r\n\r\n            // ARIA (init aria attributes)\r\n            if (this.header.attr('id')) {\r\n                this.content.attr('aria-labelledby', this.header.attr('id'));\r\n            }\r\n\r\n            if (this.content.attr('id')) {\r\n                this.header.attr('aria-controls', this.content.attr('id'));\r\n            }\r\n\r\n            this.header\r\n                .attr({\r\n                    'role': 'tab',\r\n                    'aria-selected': this.options.active,\r\n                    'aria-expanded': this.options.active\r\n                });\r\n\r\n            // For collapsible widget only (not tabs or accordion)\r\n            if (this.header.parent().attr('role') !== 'presentation') {\r\n                this.header\r\n                    .parent()\r\n                    .attr('role', 'tablist');\r\n            }\r\n\r\n            this.content.attr({\r\n                'role': 'tabpanel',\r\n                'aria-hidden': !this.options.active\r\n            });\r\n\r\n            if (typeof this.options.trigger === 'object') {\r\n                this.trigger = this.options.trigger;\r\n            } else {\r\n                triggers = this.header.find(this.options.trigger);\r\n\r\n                if (triggers.length > 0) {\r\n                    this.trigger = triggers.eq(0);\r\n                } else {\r\n                    this.trigger = this.header;\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var keyCode;\r\n\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n\r\n            keyCode = $.ui.keyCode;\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.SPACE:\r\n                case keyCode.ENTER:\r\n                    this._eventHandler(event);\r\n                    break;\r\n            }\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _bind: function (event) {\r\n            var self = this;\r\n\r\n            this.events = {\r\n                keydown: '_keydown'\r\n            };\r\n\r\n            if (event) {\r\n                $.each(event.split(' '), function (index, eventName) {\r\n                    self.events[eventName] = '_eventHandler';\r\n                });\r\n            }\r\n            this._off(this.trigger);\r\n\r\n            if (!this.options.disabled) {\r\n                this._on(this.trigger, this.events);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Disable.\r\n         */\r\n        disable: function () {\r\n            this.options.disabled = true;\r\n            this._off(this.trigger);\r\n            this.forceDeactivate();\r\n\r\n            if (this.options.disabledState) {\r\n                this.element.addClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr('tabIndex', -1);\r\n        },\r\n\r\n        /**\r\n         * Enable.\r\n         */\r\n        enable: function () {\r\n            this.options.disabled = false;\r\n            this._on(this.trigger, this.events);\r\n            this.forceActivate();\r\n\r\n            if (this.options.disabledState) {\r\n                this.element.removeClass(this.options.disabledState);\r\n            }\r\n            this.trigger.attr('tabIndex', 0);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _eventHandler: function (event) {\r\n\r\n            if (this.options.active && this.options.collapsible) {\r\n                this.deactivate();\r\n            } else {\r\n                this.activate();\r\n\r\n            }\r\n            event.preventDefault();\r\n\r\n        },\r\n\r\n        /**\r\n         * @param {*} prop\r\n         * @private\r\n         */\r\n        _animate: function (prop) {\r\n            var duration,\r\n                easing,\r\n                animate = this.options.animate;\r\n\r\n            if (typeof animate === 'number') {\r\n                duration = animate;\r\n            }\r\n\r\n            if (typeof animate === 'string') {\r\n                animate = JSON.parse(animate);\r\n            }\r\n            duration = duration || animate.duration;\r\n            easing = animate.easing;\r\n            this.content.animate(prop, duration, easing);\r\n        },\r\n\r\n        /**\r\n         * Deactivate.\r\n         */\r\n        deactivate: function () {\r\n            if (this.options.animate) {\r\n                this._animate(hideProps);\r\n            } else {\r\n                this.content.hide();\r\n            }\r\n            this._close();\r\n        },\r\n\r\n        /**\r\n         * Force deactivate.\r\n         */\r\n        forceDeactivate: function () {\r\n            this.content.hide();\r\n            this._close();\r\n\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _close: function () {\r\n            this.options.active = false;\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey, false);\r\n            }\r\n\r\n            if (this.options.openedState) {\r\n                this.element.removeClass(this.options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).removeClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (this.options.closedState) {\r\n                this.element.addClass(this.options.closedState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this.header.children('[data-role=icons]')\r\n                    .removeClass(this.options.icons.activeHeader)\r\n                    .addClass(this.options.icons.header);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'false',\r\n                'aria-expanded': 'false'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'true'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {\r\n                opened: false\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Activate.\r\n         *\r\n         * @return void;\r\n         */\r\n        activate: function () {\r\n            if (this.options.disabled) {\r\n                return;\r\n            }\r\n\r\n            if (this.options.animate) {\r\n                this._animate(showProps);\r\n            } else {\r\n                this.content.show();\r\n            }\r\n            this._open();\r\n        },\r\n\r\n        /**\r\n         * Force activate.\r\n         */\r\n        forceActivate: function () {\r\n            if (!this.options.disabled) {\r\n                this.content.show();\r\n                this._open();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _open: function () {\r\n            this.element.trigger('beforeOpen');\r\n            this.options.active = true;\r\n\r\n            if (this.options.ajaxContent) {\r\n                this._loadContent();\r\n            }\r\n\r\n            if (this.options.saveState) {\r\n                this.storage.set(this.stateKey, true);\r\n            }\r\n\r\n            if (this.options.openedState) {\r\n                this.element.addClass(this.options.openedState);\r\n            }\r\n\r\n            if (this.options.collateral.element && this.options.collateral.openedState) {\r\n                $(this.options.collateral.element).addClass(this.options.collateral.openedState);\r\n            }\r\n\r\n            if (this.options.closedState) {\r\n                this.element.removeClass(this.options.closedState);\r\n            }\r\n\r\n            if (this.icons) {\r\n                this.header.children('[data-role=icons]')\r\n                    .removeClass(this.options.icons.header)\r\n                    .addClass(this.options.icons.activeHeader);\r\n            }\r\n\r\n            // ARIA (updates aria attributes)\r\n            this.header.attr({\r\n                'aria-selected': 'true',\r\n                'aria-expanded': 'true'\r\n            });\r\n            this.content.attr({\r\n                'aria-hidden': 'false'\r\n            });\r\n\r\n            this.element.trigger('dimensionsChanged', {\r\n                opened: true\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _loadContent: function () {\r\n            var url = this.element.find(this.options.ajaxUrlElement).attr('href'),\r\n                that = this;\r\n\r\n            if (url) {\r\n                that.xhr = $.get({\r\n                    url: url,\r\n                    dataType: 'html'\r\n                }, function () {\r\n                });\r\n            }\r\n\r\n            if (that.xhr && that.xhr.statusText !== 'canceled') {\r\n                if (that.options.loadingClass) {\r\n                    that.element.addClass(that.options.loadingClass);\r\n                }\r\n                that.content.attr('aria-busy', 'true');\r\n                that.xhr.done(function (response) {\r\n                    setTimeout(function () {\r\n                        that.content.html(response);\r\n                    }, 1);\r\n                });\r\n                that.xhr.always(function (jqXHR, status) {\r\n                    setTimeout(function () {\r\n                        if (status === 'abort') {\r\n                            that.content.stop(false, true);\r\n                        }\r\n\r\n                        if (that.options.loadingClass) {\r\n                            that.element.removeClass(that.options.loadingClass);\r\n                        }\r\n                        that.content.removeAttr('aria-busy');\r\n\r\n                        if (jqXHR === that.xhr) {\r\n                            delete that.xhr;\r\n                        }\r\n                    }, 1);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _scrollToTopIfNotVisible: function () {\r\n            if (this._isElementOutOfViewport()) {\r\n                this.header[0].scrollIntoView();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @return {Boolean}\r\n         */\r\n        _isElementOutOfViewport: function () {\r\n            var headerRect = this.header[0].getBoundingClientRect(),\r\n                contentRect = this.content.get().length ? this.content[0].getBoundingClientRect() : false,\r\n                headerOut,\r\n                contentOut;\r\n\r\n            headerOut = headerRect.bottom - headerRect.height < 0 ||\r\n                headerRect.right - headerRect.width < 0 ||\r\n                headerRect.left + headerRect.width > window.innerWidth ||\r\n                headerRect.top + headerRect.height > window.innerHeight;\r\n\r\n            contentOut = contentRect ? contentRect.bottom - contentRect.height < 0 ||\r\n                contentRect.right - contentRect.width < 0 ||\r\n                contentRect.left + contentRect.width > window.innerWidth ||\r\n                contentRect.top + contentRect.height > window.innerHeight : false;\r\n\r\n            return headerOut ? headerOut : contentOut;\r\n        }\r\n    });\r\n\r\n    return $.mage.collapsible;\r\n});\r\n","mage/common.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'domReady!'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /* Form with auto submit feature */\r\n    $('form[data-auto-submit=\"true\"]').trigger('submit');\r\n\r\n    //Add form keys.\r\n    $(document).on(\r\n        'submit',\r\n        'form',\r\n        function (e) {\r\n            var formKeyElement,\r\n                existingFormKeyElement,\r\n                isKeyPresentInForm,\r\n                isActionExternal,\r\n                baseUrl = window.BASE_URL,\r\n                form = $(e.target),\r\n                formKey = $('input[name=\"form_key\"]').val(),\r\n                formMethod = form.prop('method'),\r\n                formAction = form.prop('action');\r\n\r\n            isActionExternal = formAction.indexOf(baseUrl) !== 0;\r\n\r\n            existingFormKeyElement = form.find('input[name=\"form_key\"]');\r\n            isKeyPresentInForm = existingFormKeyElement.length;\r\n\r\n            /* Verifies that existing auto-added form key is a direct form child element,\r\n               protection from a case when one form contains another form. */\r\n            if (isKeyPresentInForm && existingFormKeyElement.attr('auto-added-form-key') === '1') {\r\n                isKeyPresentInForm = form.find('> input[name=\"form_key\"]').length;\r\n            }\r\n\r\n            if (formKey && !isKeyPresentInForm && !isActionExternal && formMethod !== 'get') {\r\n                formKeyElement = document.createElement('input');\r\n                formKeyElement.setAttribute('type', 'hidden');\r\n                formKeyElement.setAttribute('name', 'form_key');\r\n                formKeyElement.setAttribute('value', formKey);\r\n                formKeyElement.setAttribute('auto-added-form-key', '1');\r\n                form.get(0).appendChild(formKeyElement);\r\n            }\r\n        }\r\n    );\r\n});\r\n","mage/cookies.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'js-cookie/cookie-wrapper'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Helper for cookies manipulation\r\n     * @returns {CookieHelper}\r\n     * @constructor\r\n     */\r\n    var CookieHelper = function () {\r\n\r\n        /**\r\n         * Cookie default values.\r\n         * @type {Object}\r\n         */\r\n        this.defaults = {\r\n            expires: null,\r\n            path: '/',\r\n            domain: null,\r\n            secure: false,\r\n            lifetime: null,\r\n            samesite: 'lax'\r\n        };\r\n\r\n        /**\r\n         * Calculate cookie expiration date based on its lifetime.\r\n         * @param {Object} options - Cookie option values\r\n         * @return {Date|null} Calculated cookie expiration date or null if no lifetime provided.\r\n         * @private\r\n         */\r\n        function lifetimeToExpires(options, defaults) {\r\n            var expires,\r\n                lifetime;\r\n\r\n            lifetime = options.lifetime || defaults.lifetime;\r\n\r\n            if (lifetime && lifetime > 0) {\r\n                expires = options.expires || new Date();\r\n\r\n                return new Date(expires.getTime() + lifetime * 1000);\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /**\r\n         * Set a cookie's value by cookie name based on optional cookie options.\r\n         * @param {String} name - The name of the cookie.\r\n         * @param {String} value - The cookie's value.\r\n         * @param {Object} options - Optional options (e.g. lifetime, expires, path, etc.)\r\n         */\r\n        this.set = function (name, value, options) {\r\n            var expires,\r\n                path,\r\n                domain,\r\n                secure,\r\n                samesite;\r\n\r\n            options = $.extend({}, this.defaults, options || {});\r\n            expires = lifetimeToExpires(options, this.defaults) || options.expires;\r\n            path = options.path;\r\n            domain = options.domain;\r\n            secure = options.secure;\r\n            samesite = options.samesite;\r\n\r\n            document.cookie = name + '=' + encodeURIComponent(value) +\r\n                (expires ? '; expires=' + expires.toUTCString() :  '') +\r\n                (path ? '; path=' + path : '') +\r\n                (domain ? '; domain=' + domain : '') +\r\n                (secure ? '; secure' : '') +\r\n                '; samesite=' + (samesite ? samesite : 'lax');\r\n        };\r\n\r\n        /**\r\n         * Get a cookie's value by cookie name.\r\n         * @param {String} name  - The name of the cookie.\r\n         * @return {(null|String)}\r\n         */\r\n        this.get = function (name) {\r\n            var arg = name + '=',\r\n                aLength = arg.length,\r\n                cookie = document.cookie,\r\n                cLength = cookie.length,\r\n                i = 0,\r\n                j = 0;\r\n\r\n            while (i < cLength) {\r\n                j = i + aLength;\r\n\r\n                if (cookie.substring(i, j) === arg) {\r\n                    return this.getCookieVal(j);\r\n                }\r\n                i = cookie.indexOf(' ', i) + 1;\r\n\r\n                if (i === 0) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        };\r\n\r\n        /**\r\n         * Clear a cookie's value by name.\r\n         * @param {String} name - The name of the cookie being cleared.\r\n         */\r\n        this.clear = function (name) {\r\n            if (this.get(name)) {\r\n                this.set(name, '', {\r\n                    expires: new Date('Jan 01 1970 00:00:01 GMT')\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Return URI decoded cookie component value (e.g. expires, path, etc.) based on a\r\n         * numeric offset in the document's cookie value.\r\n         * @param {Number} offset - Offset into the document's cookie value.\r\n         * @return {String}\r\n         */\r\n        this.getCookieVal = function (offset) {\r\n            var cookie = document.cookie,\r\n                endstr = cookie.indexOf(';', offset);\r\n\r\n            if (endstr === -1) {\r\n                endstr = cookie.length;\r\n            }\r\n\r\n            return decodeURIComponent(cookie.substring(offset, endstr));\r\n        };\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend(true, $, {\r\n        mage: {\r\n            cookies: new CookieHelper()\r\n        }\r\n    });\r\n\r\n    return function (pageOptions) {\r\n        $.extend($.mage.cookies.defaults, pageOptions);\r\n        $.extend($.cookie.defaults, $.mage.cookies.defaults);\r\n    };\r\n});\r\n","mage/dataPost.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate, uiConfirm) {\r\n    'use strict';\r\n\r\n    $.widget('mage.dataPost', {\r\n        options: {\r\n            formTemplate: '<form action=\"<%- data.action %>\" method=\"post\">' +\r\n            '<% _.each(data.data, function(value, index) { %>' +\r\n            '<input name=\"<%- index %>\" value=\"<%- value %>\">' +\r\n            '<% }) %></form>',\r\n            postTrigger: ['a[data-post]', 'button[data-post]', 'span[data-post]'],\r\n            formKeyInputSelector: 'input[name=\"form_key\"]'\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _bind: function () {\r\n            var events = {};\r\n\r\n            $.each(this.options.postTrigger, function (index, value) {\r\n                events['click ' + value] = '_postDataAction';\r\n            });\r\n\r\n            this._on(events);\r\n        },\r\n\r\n        /**\r\n         * Handler for click.\r\n         *\r\n         * @param {Object} e\r\n         * @private\r\n         */\r\n        _postDataAction: function (e) {\r\n            var params = $(e.currentTarget).data('post');\r\n\r\n            e.preventDefault();\r\n            this.postData(params);\r\n        },\r\n\r\n        /**\r\n         * Data post action.\r\n         *\r\n         * @param {Object} params\r\n         */\r\n        postData: function (params) {\r\n            var formKey = $(this.options.formKeyInputSelector).val(),\r\n                $form, input;\r\n\r\n            if (formKey) {\r\n                params.data['form_key'] = formKey;\r\n            }\r\n\r\n            $form = $(mageTemplate(this.options.formTemplate, {\r\n                data: params\r\n            }));\r\n\r\n            if (params.files) {\r\n                $form[0].enctype = 'multipart/form-data';\r\n                $.each(params.files, function (key, files) {\r\n                    if (files instanceof FileList) {\r\n                        input = document.createElement('input');\r\n                        input.type = 'file';\r\n                        input.name = key;\r\n                        input.files = files;\r\n                        $form[0].appendChild(input);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (params.data.confirmation) {\r\n                uiConfirm({\r\n                    content: params.data.confirmationMessage,\r\n                    actions: {\r\n                        /** @inheritdoc */\r\n                        confirm: function () {\r\n                            $form.appendTo('body').hide().trigger('submit');\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                $form.appendTo('body').hide().trigger('submit');\r\n            }\r\n        }\r\n    });\r\n\r\n    $(document).dataPost();\r\n\r\n    return $.mage.dataPost;\r\n});\r\n","mage/decorate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([\r\n    'jquery',\r\n    'mage/translate'\r\n], function ($) {\r\n    var methods = {\r\n        /**\r\n         * Decorate a list (e.g. a <ul> containing <li>) recursively if specified.\r\n         * @param {Boolean} isRecursive\r\n         */\r\n        list: function (isRecursive) {\r\n            return this.each(function () {\r\n                var list = $(this),\r\n                    items;\r\n\r\n                if (list.length > 0) {\r\n                    items = typeof isRecursive === 'undefined' || isRecursive ?\r\n                        list.find('li') :\r\n                        list.children();\r\n                    items.decorate('generic', ['odd', 'even', 'last']);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Annotate a set of DOM elements with decorator classes.\r\n         * @param {Array} decoratorParams\r\n         */\r\n        generic: function (decoratorParams) {\r\n            var elements = $(this),\r\n                allSupportedParams;\r\n\r\n            if (elements) {\r\n                allSupportedParams = {\r\n                    even: 'odd', // Flip jQuery odd/even so that index 0 is odd.\r\n                    odd: 'even',\r\n                    last: 'last',\r\n                    first: 'first'\r\n                };\r\n\r\n                decoratorParams = decoratorParams || allSupportedParams;\r\n\r\n                $.each(decoratorParams, function (index, param) {\r\n                    if (param === 'even' || param === 'odd') {\r\n                        elements.filter(':' + param).removeClass('odd even').addClass(allSupportedParams[param]);\r\n                    } else {\r\n                        elements.filter(':' + param).addClass(allSupportedParams[param]);\r\n                    }\r\n                });\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Decorate DOM elements in an HTML table with specified classes.\r\n         * @param {Object} instanceOptions\r\n         */\r\n        table: function (instanceOptions) {\r\n            return this.each(function () {\r\n                var table = $(this),\r\n                    options;\r\n\r\n                if (table.length > 0) {\r\n                    options = {\r\n                        'tbody': false,\r\n                        'tbody tr': ['odd', 'even', 'first', 'last'],\r\n                        'thead tr': ['first', 'last'],\r\n                        'tfoot tr': ['first', 'last'],\r\n                        'tr td': ['last']\r\n                    };\r\n\r\n                    $.extend(options, instanceOptions || {});\r\n\r\n                    $.each(options, function (key, value) {\r\n                        if (options[key]) {\r\n                            if (key === 'tr td') {\r\n                                $.each(table.find('tr'), function () {\r\n                                    $(this).find('td').decorate('generic', options['tr td']);\r\n                                });\r\n                            } else {\r\n                                table.find(key).decorate('generic', value);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Annotate data list elements with CSS classes.\r\n         */\r\n        dataList: function () {\r\n            return this.each(function () {\r\n                var list = $(this);\r\n\r\n                if (list) {\r\n                    list.find('dt').decorate('generic', ['odd', 'even', 'last']);\r\n                    list.find('dd').decorate('generic', ['odd', 'even', 'last']);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} method\r\n     * @return {*}\r\n     */\r\n    $.fn.decorate = function (method) {\r\n        var message;\r\n\r\n        if (methods[method]) {\r\n            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));\r\n        } else if (typeof method === 'object' || !method) {\r\n            return methods.init.apply(this, arguments);\r\n        }\r\n\r\n        message = $.mage.__('Method %s does not exist on jQuery.decorate');\r\n        // eslint-disable-next-line jquery-no-event-shorthand\r\n        $.error(message.replace('%s', method));\r\n    };\r\n});\r\n","mage/deletable-item.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This widget is used to tag a DOM element as deletable. By default, it will use the click event on the item with a\r\n     * data role of delete to trigger the deletion.\r\n     */\r\n    $.widget('mage.deletableItem', {\r\n        options: {\r\n            deleteEvent: 'click',\r\n            deleteSelector: '[data-role=\"delete\"]',\r\n            hiddenClass: 'no-display'\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            // since the first handler is dynamic, generate the object using array notation\r\n            handlers[this.options.deleteEvent + ' ' + this.options.deleteSelector] = '_onDeleteClicked';\r\n            handlers.hideDelete = '_onHideDelete';\r\n            handlers.showDelete = '_onShowDelete';\r\n\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method is to initialize the control\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._onHideDelete(); // by default, hide the control\r\n        },\r\n\r\n        /**\r\n         * This method removes the entity from the DOM.\r\n         * @private\r\n         */\r\n        _onDeleteClicked: function (e) {\r\n            e.stopPropagation();\r\n            this.element.trigger('deleteItem');\r\n        },\r\n\r\n        /**\r\n         * This method hides the delete capability of this item (i.e. making it not deletable)\r\n         * @private\r\n         */\r\n        _onHideDelete: function () {\r\n            this.element.find(this.options.deleteSelector).addClass(this.options.hiddenClass);\r\n        },\r\n\r\n        /**\r\n         * This method shows the delete capability of this item (i.e. making it deletable)\r\n         * @private\r\n         */\r\n        _onShowDelete: function () {\r\n            this.element.find(this.options.deleteSelector).removeClass(this.options.hiddenClass);\r\n        }\r\n    });\r\n\r\n    return $.mage.deletableItem;\r\n});\r\n","mage/dropdown.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/dialog',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    var timer = null;\r\n\r\n    /**\r\n     * Dropdown Widget - this widget is a wrapper for the jQuery UI Dialog\r\n     */\r\n    $.widget('mage.dropdownDialog', $.ui.dialog, {\r\n        options: {\r\n            triggerEvent: 'click',\r\n            triggerClass: null,\r\n            parentClass: null,\r\n            triggerTarget: null,\r\n            defaultDialogClass: 'mage-dropdown-dialog',\r\n            dialogContentClass: null,\r\n            shadowHinter: null,\r\n            closeOnMouseLeave: true,\r\n            closeOnClickOutside: true,\r\n            minHeight: null,\r\n            minWidth: null,\r\n            width: null,\r\n            modal: false,\r\n            timeout: null,\r\n            autoOpen: false,\r\n            createTitleBar: false,\r\n            autoPosition: false,\r\n            autoSize: false,\r\n            draggable: false,\r\n            resizable: false,\r\n            bodyClass: '',\r\n            buttons: [\r\n                {\r\n                    'class': 'action close',\r\n                    'text': $.mage.__('Close'),\r\n\r\n                    /**\r\n                     * Click action.\r\n                     */\r\n                    'click': function () {\r\n                        $(this).dropdownDialog('close');\r\n                    }\r\n                }\r\n            ]\r\n        },\r\n\r\n        /**\r\n         * extend default functionality to bind the opener for dropdown\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var _self = this;\r\n\r\n            this._super();\r\n            this.uiDialog.addClass(this.options.defaultDialogClass);\r\n\r\n            if (_self.options.triggerTarget) {\r\n                $(_self.options.triggerTarget).on(_self.options.triggerEvent, function (event) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n\r\n                    if (!_self._isOpen) {\r\n                        $('.' + _self.options.defaultDialogClass + ' > .ui-dialog-content').dropdownDialog('close');\r\n                        _self.open();\r\n                    } else {\r\n                        _self.close(event);\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (_self.options.shadowHinter) {\r\n                _self.hinter = $('<div class=\"' + _self.options.shadowHinter + '\"></div>');\r\n                _self.element.append(_self.hinter);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Extend default functionality to close the dropdown\r\n         * with custom delay on mouse out and also to close when clicking outside\r\n         */\r\n        open: function () {\r\n            var _self = this;\r\n\r\n            this._super();\r\n\r\n            if (_self.options.dialogContentClass) {\r\n                _self.element.addClass(_self.options.dialogContentClass);\r\n            }\r\n\r\n            if (_self.options.closeOnMouseLeave) {\r\n\r\n                this._mouseEnter(_self.uiDialog);\r\n                this._mouseLeave(_self.uiDialog);\r\n\r\n                if (_self.options.triggerTarget) {\r\n                    this._mouseLeave($(_self.options.triggerTarget));\r\n                }\r\n            }\r\n\r\n            if (_self.options.closeOnClickOutside) {\r\n                $('body').on('click.outsideDropdown', function (event) {\r\n                    if (_self._isOpen && !$(event.target).closest('.ui-dialog').length) {\r\n                        if (timer) {\r\n                            clearTimeout(timer);\r\n                        }\r\n                        _self.close(event);\r\n                    }\r\n                });\r\n            }\r\n            // adding the class on the opener and parent element for dropdown\r\n            if (_self.options.triggerClass) {\r\n                $(_self.options.triggerTarget).addClass(_self.options.triggerClass);\r\n            }\r\n\r\n            if (_self.options.parentClass) {\r\n                $(_self.options.appendTo).addClass(_self.options.parentClass);\r\n            }\r\n\r\n            if (_self.options.bodyClass) {\r\n                $('body').addClass(_self.options.bodyClass);\r\n            }\r\n\r\n            if (_self.options.shadowHinter) {\r\n                _self._setShadowHinterPosition();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * extend default functionality to reset the timer and remove the active class for opener\r\n         */\r\n        close: function () {\r\n            this._super();\r\n\r\n            if (this.options.dialogContentClass) {\r\n                this.element.removeClass(this.options.dialogContentClass);\r\n            }\r\n\r\n            if (this.options.triggerClass) {\r\n                $(this.options.triggerTarget).removeClass(this.options.triggerClass);\r\n            }\r\n\r\n            if (this.options.parentClass) {\r\n                $(this.options.appendTo).removeClass(this.options.parentClass);\r\n            }\r\n\r\n            if (this.options.bodyClass) {\r\n                $('body').removeClass(this.options.bodyClass);\r\n            }\r\n\r\n            if (timer) {\r\n                clearTimeout(timer);\r\n            }\r\n\r\n            if (this.options.triggerTarget) {\r\n                $(this.options.triggerTarget).off('mouseleave');\r\n            }\r\n            this.uiDialog.off('mouseenter');\r\n            this.uiDialog.off('mouseleave');\r\n            $('body').off('click.outsideDropdown');\r\n        },\r\n\r\n        /**\r\n         * _setShadowHinterPosition\r\n         * @private\r\n         */\r\n        _setShadowHinterPosition: function () {\r\n            var _self = this,\r\n                offset;\r\n\r\n            offset = _self.options.position.of.offset().left -\r\n                _self.element.offset().left +\r\n                _self.options.position.of.outerWidth() / 2;\r\n            offset = isNaN(offset) ? 0 : Math.floor(offset);\r\n            _self.hinter.css('left', offset);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _position: function () {\r\n            if (this.options.autoPosition) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _createTitlebar: function () {\r\n            if (this.options.createTitleBar) {\r\n                this._super();\r\n            } else {\r\n                // the title bar close button is referenced\r\n                // in _focusTabbable function, so to prevent errors it must be declared\r\n                this.uiDialogTitlebarClose = $('<div></div>');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _size: function () {\r\n            if (this.options.autoSize) {\r\n                this._super();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {Object} handler\r\n         * @private\r\n         */\r\n        _mouseLeave: function (handler) {\r\n            var _self = this;\r\n\r\n            handler.on('mouseleave', function (event) {\r\n                event.stopPropagation();\r\n\r\n                if (_self._isOpen) {\r\n                    if (timer) {\r\n                        clearTimeout(timer);\r\n                    }\r\n                    timer = setTimeout(function (e) {\r\n                        _self.close(e);\r\n                    }, _self.options.timeout);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} handler\r\n         * @private\r\n         */\r\n        _mouseEnter: function (handler) {\r\n            handler.on('mouseenter', function (event) {\r\n                event.stopPropagation();\r\n\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @param {*} value\r\n         * @private\r\n         */\r\n        _setOption: function (key, value) {\r\n            this._super(key, value);\r\n\r\n            if (key === 'triggerTarget') {\r\n                this.options.triggerTarget = value;\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.dropdownDialog;\r\n});\r\n","mage/dropdowns.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {Object} options\r\n     */\r\n    $.fn.dropdown = function (options) {\r\n        var defaults = {\r\n                parent: null,\r\n                autoclose: true,\r\n                btnArrow: '.arrow',\r\n                menu: '[data-target=\"dropdown\"]',\r\n                activeClass: 'active'\r\n            },\r\n            actionElem = $(this),\r\n            self = this;\r\n\r\n        options = $.extend(defaults, options);\r\n        actionElem = $(this);\r\n        self = this;\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         */\r\n        this.openDropdown = function (elem) {\r\n            elem\r\n                .addClass(options.activeClass)\r\n                .attr('aria-expanded', true)\r\n                .parent()\r\n                    .addClass(options.activeClass);\r\n\r\n            elem.parent()\r\n                .find(options.menu)\r\n                .attr('aria-hidden', false);\r\n\r\n            $(options.btnArrow, elem).text('-');\r\n        };\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         */\r\n        this.closeDropdown = function (elem) {\r\n            elem.removeClass(options.activeClass)\r\n                .attr('aria-expanded', false)\r\n                .parent()\r\n                    .removeClass(options.activeClass);\r\n\r\n            elem.parent()\r\n                .find(options.menu)\r\n                .attr('aria-hidden', true);\r\n\r\n            $(options.btnArrow, elem).text('+');\r\n        };\r\n\r\n        /**\r\n         * Reset all dropdowns.\r\n         *\r\n         * @param {Object} param\r\n         */\r\n        this.reset = function (param) {\r\n            var params = param || {},\r\n                dropdowns = params.elems || actionElem;\r\n\r\n            dropdowns.each(function (index, elem) {\r\n                self.closeDropdown($(elem));\r\n            });\r\n        };\r\n\r\n        /* document Event bindings */\r\n        if (options.autoclose === true) {\r\n            $(document).on('click.hideDropdown', this.reset);\r\n            $(document).on('keyup.hideDropdown', function (e) {\r\n                var ESC_CODE = '27';\r\n\r\n                if (e.keyCode == ESC_CODE) { //eslint-disable-line eqeqeq\r\n                    self.reset();\r\n                }\r\n            });\r\n        }\r\n\r\n        if (options.events) {\r\n            $.each(options.events, function (index, event) {\r\n                $(document).on(event.name, event.selector, event.action);\r\n            });\r\n        }\r\n\r\n        return this.each(function () {\r\n            var elem = $(this),\r\n                parent = $(options.parent).length > 0 ? $(options.parent) : elem.parent(),\r\n                menu = $(options.menu, parent) || $('.dropdown-menu', parent);\r\n\r\n            // ARIA (adding aria attributes)\r\n            if (menu.length) {\r\n                elem.attr('aria-haspopup', true);\r\n            }\r\n\r\n            if (!elem.hasClass(options.activeClass)) {\r\n                elem.attr('aria-expanded', false);\r\n                menu.attr('aria-hidden', true);\r\n            } else {\r\n                elem.attr('aria-expanded', true);\r\n                menu.attr('aria-hidden', false);\r\n            }\r\n\r\n            if (!elem.is('a, button')) {\r\n                elem.attr('role', 'button');\r\n                elem.attr('tabindex', 0);\r\n            }\r\n\r\n            if (elem.attr('data-trigger-keypress-button')) {\r\n                elem.on('keypress', function (e) {\r\n                    var keyCode = e.keyCode || e.which,\r\n                        ENTER_CODE = 13;\r\n\r\n                    if (keyCode === ENTER_CODE) {\r\n                        e.preventDefault();\r\n                        elem.trigger('click.toggleDropdown');\r\n                    }\r\n                });\r\n            }\r\n\r\n            elem.on('click.toggleDropdown', function () {\r\n                var el = actionElem;\r\n\r\n                if (options.autoclose === true) {\r\n                    actionElem = $();\r\n                    $(document).trigger('click.hideDropdown');\r\n                    actionElem = el;\r\n                }\r\n\r\n                self[el.hasClass(options.activeClass) ? 'closeDropdown' : 'openDropdown'](elem);\r\n\r\n                return false;\r\n            });\r\n        });\r\n    };\r\n\r\n    return function (data, el) {\r\n        $(el).dropdown(data);\r\n    };\r\n});\r\n","mage/edit-trigger.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    var editTriggerPrototype;\r\n\r\n    $.widget('mage.editTrigger', {\r\n        options: {\r\n            img: '',\r\n            alt: '[TR]',\r\n            template: '#translate-inline-icon',\r\n            zIndex: 2000,\r\n            editSelector: '[data-translate]',\r\n            delay: 2000,\r\n            offsetTop: -3,\r\n            singleElement: true\r\n        },\r\n\r\n        /**\r\n         * editTriger creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.tmpl = mageTemplate(this.options.template);\r\n            this._initTrigger();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _getCss: function () {\r\n            return {\r\n                position: 'absolute',\r\n                cursor: 'pointer',\r\n                display: 'none',\r\n                'z-index': this.options.zIndex\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @param {*} appendTo\r\n         * @return {*|jQuery}\r\n         * @private\r\n         */\r\n        _createTrigger: function (appendTo) {\r\n            var tmpl = this.tmpl({\r\n                data: this.options\r\n            });\r\n\r\n            return $(tmpl)\r\n                .css(this._getCss())\r\n                .data('role', 'edit-trigger-element')\r\n                .appendTo(appendTo);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initTrigger: function () {\r\n            this.trigger = this._createTrigger($('body'));\r\n        },\r\n\r\n        /**\r\n         * Bind on mousemove event\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this.trigger.on('click.' + this.widgetName, $.proxy(this._onClick, this));\r\n            this.element.on('mousemove.' + this.widgetName, $.proxy(this._onMouseMove, this));\r\n        },\r\n\r\n        /**\r\n         * Show editTriger\r\n         */\r\n        show: function () {\r\n            if (this.trigger.is(':hidden')) {\r\n                this.trigger.show();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Hide editTriger\r\n         */\r\n        hide: function () {\r\n            this.currentTarget = null;\r\n\r\n            if (this.trigger && this.trigger.is(':visible')) {\r\n                this.trigger.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set editTriger position\r\n         * @protected\r\n         */\r\n        _setPosition: function (el) {\r\n            var offset = el.offset();\r\n\r\n            this.trigger.css({\r\n                top: offset.top + el.outerHeight() + this.options.offsetTop,\r\n                left: offset.left\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show/hide trigger on mouse move.\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @protected\r\n         */\r\n        _onMouseMove: function (e) {\r\n            var target = $(e.target),\r\n                inner = target.find(this.options.editSelector);\r\n\r\n            if ($(e.target).is('button') && inner.length) {\r\n                target = inner;\r\n            } else if (!target.is(this.trigger) && !target.is(this.options.editSelector)) {\r\n                target = target.parents(this.options.editSelector).first();\r\n            }\r\n\r\n            if (target.length) {\r\n                if (!target.is(this.trigger)) {\r\n                    this._setPosition(target);\r\n                    this.currentTarget = target;\r\n                }\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trigger event \"edit\" on element for translate.\r\n         *\r\n         * @param {jQuery.Event} e\r\n         * @protected\r\n         */\r\n        _onClick: function (e) {\r\n            e.preventDefault();\r\n            e.stopImmediatePropagation();\r\n            $(this.currentTarget).trigger('edit.' + this.widgetName);\r\n            this.hide(true);\r\n        },\r\n\r\n        /**\r\n         * Destroy editTriger\r\n         */\r\n        destroy: function () {\r\n            this.trigger.remove();\r\n            this.element.off('.' + this.widgetName);\r\n\r\n            return $.Widget.prototype.destroy.call(this);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Extention for widget editTrigger - hide trigger with delay\r\n     */\r\n    editTriggerPrototype = $.mage.editTrigger.prototype;\r\n\r\n    $.widget('mage.editTrigger', $.extend({}, editTriggerPrototype, {\r\n        /**\r\n         * Added clear timeout on trigger show\r\n         */\r\n        show: function () {\r\n            editTriggerPrototype.show.apply(this, arguments);\r\n\r\n            if (this.options.delay) {\r\n                this._clearTimer();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Added setTimeout on trigger hide\r\n         */\r\n        hide: function (immediate) {\r\n            if (!immediate && this.options.delay) {\r\n                if (!this.timer) {\r\n                    this.timer = setTimeout($.proxy(function () {\r\n                        editTriggerPrototype.hide.apply(this, arguments);\r\n                        this._clearTimer();\r\n                    }, this), this.options.delay);\r\n                }\r\n            } else {\r\n                editTriggerPrototype.hide.apply(this, arguments);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Clear timer\r\n         * @protected\r\n         */\r\n        _clearTimer: function () {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer);\r\n                this.timer = null;\r\n            }\r\n        }\r\n    }));\r\n\r\n    return $.mage.editTrigger;\r\n});\r\n","mage/fieldset-controls.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * This widget will allow a control with the fieldsetResetControl widget attached to reset a set of input fields.\r\n     * The input fields to reset are defined by the inputSelector selector. The widget will store a clone of the fields\r\n     * on create, and on trigger of fieldsetReset event it resets the defined fields. The event is triggered by the\r\n     * reset control widget.\r\n     *\r\n     * For inputs of type file, the whole dom element is replaced as changing the value is a security violation\r\n     * For inputs of type checkbox or radio, the checked attribute is added or removed as appropriate\r\n     * For all others the jquery .val method is used to update to value to the original.\r\n     */\r\n    $.widget('mage.fieldsetControls', {\r\n        original: undefined,\r\n        options: {\r\n            inputSelector: '[data-reset=\"true\"]'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.original = this.element.find(this.options.inputSelector).clone(true);\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'fieldsetReset': '_onReset'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _onReset: function (e) {\r\n            var items;\r\n\r\n            e.stopPropagation();\r\n            // find all the ones we have to remove\r\n            items = this.element.find(this.options.inputSelector);\r\n            // loop over replacing each one.\r\n            items.each($.proxy(function (index, item) {\r\n                if ($(item).attr('type') == 'file') { //eslint-disable-line eqeqeq\r\n                    // Replace the current one we found with a clone of the original saved earlier\r\n                    $(item).replaceWith($(this.original[index]).clone(true));\r\n                } else if ($(item).attr('type') == 'checkbox' || $(item).attr('type') == 'radio') { //eslint-disable-line\r\n                    // Return to original state.\r\n                    if ($(this.original[index]).attr('checked') === undefined) {\r\n                        $(item).removeAttr('checked');\r\n                    } else {\r\n                        $(item).attr('checked', $(this.original[index]).attr('checked'));\r\n                    }\r\n                } else {\r\n                    // Replace the value with the original\r\n                    $(item).val($(this.original[index]).val());\r\n                }\r\n            }, this));\r\n        }\r\n    });\r\n\r\n    $.widget('mage.fieldsetResetControl', {\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                click: '_onClick'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @private\r\n         */\r\n        _onClick: function (e) {\r\n            e.stopPropagation();\r\n            $(this.element).trigger('fieldsetReset');\r\n        }\r\n    });\r\n\r\n    return {\r\n        fieldsetControls: $.mage.fieldsetControls,\r\n        fieldsetResetControl: $.mage.fieldsetResetControl\r\n    };\r\n});\r\n","mage/item-table.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.itemTable', {\r\n        options: {\r\n            addBlock: '[data-template=\"add-block\"]',\r\n            addBlockData: {},\r\n            addEvent: 'click',\r\n            addSelector: '[data-role=\"add\"]',\r\n            itemsSelector: '[data-container=\"items\"]',\r\n            keepLastRow: true\r\n        },\r\n\r\n        /**\r\n         * This method adds a new instance of the block to the items.\r\n         * @private\r\n         */\r\n        _add: function () {\r\n            var hideShowDelete,\r\n                deletableItems,\r\n                addedBlock;\r\n\r\n            // adding a new row, so increment the count to give each row a unique index\r\n            this.rowIndex++;\r\n\r\n            // make sure the block data has the rowIndex\r\n            this.options.addBlockData.rowIndex = this.rowIndex;\r\n\r\n            // render the form\r\n            addedBlock = $(this.addBlockTmpl({\r\n                data: this.options.addBlockData\r\n            }));\r\n\r\n            // add the row to the item block\r\n            this.element.find(this.options.itemsSelector).append(addedBlock);\r\n\r\n            // initialize all mage content\r\n            addedBlock.trigger('contentUpdated');\r\n\r\n            // determine all existing items in the collection\r\n            deletableItems = this._getDeletableItems();\r\n\r\n            // for the most part, show the delete mechanism, except in the case where there is only one it should not\r\n            // be deleted\r\n            hideShowDelete = 'showDelete';\r\n\r\n            if (this.options.keepLastRow && deletableItems.length === 1) {\r\n                hideShowDelete = 'hideDelete';\r\n            }\r\n\r\n            // loop through each control and perform that action on the deletable item\r\n            $.each(deletableItems, function (index) {\r\n                $(deletableItems[index]).trigger(hideShowDelete);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            // since the first handler is dynamic, generate the object using array notation\r\n            handlers[this.options.addEvent + ' ' + this.options.addSelector] = '_add';\r\n            handlers.deleteItem = '_onDeleteItem';\r\n\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n\r\n            this.addBlockTmpl = mageTemplate(this.options.addBlock);\r\n\r\n            // nothing in the table, so indicate that\r\n            this.rowIndex = -1;\r\n\r\n            // make sure the block data is an object\r\n            if (this.options.addBlockData == null || typeof this.options.addBlockData !== 'object') {\r\n                // reset the block data to an empty object\r\n                this.options.addBlockData = {};\r\n            }\r\n\r\n            // add the first row to the table\r\n            this._add();\r\n        },\r\n\r\n        /**\r\n         * This method returns the list of widgets associated with deletable items from the container (direct children\r\n         * only).\r\n         * @private\r\n         */\r\n        _getDeletableItems: function () {\r\n            return this.element.find(this.options.itemsSelector + '> .deletableItem');\r\n        },\r\n\r\n        /**\r\n         * This method removes the item associated with the message.\r\n         * @private\r\n         */\r\n        _onDeleteItem: function (e) {\r\n            var deletableItems;\r\n\r\n            // parent elements don't need to see this event\r\n            e.stopPropagation();\r\n\r\n            // remove the deletable item\r\n            $(e.target).remove();\r\n\r\n            if (this.options.keepLastRow) {\r\n                // determine if there is only one element remaining, in which case, disable the delete mechanism on it\r\n                deletableItems = this._getDeletableItems();\r\n\r\n                if (deletableItems.length === 1) {\r\n                    $(deletableItems[0]).trigger('hideDelete');\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.itemTable;\r\n});\r\n","mage/loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget',\r\n    'mage/translate'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    $.widget('mage.loader', {\r\n        loaderStarted: 0,\r\n        options: {\r\n            icon: '',\r\n            texts: {\r\n                loaderText: $.mage.__('Please wait...'),\r\n                imgAlt: $.mage.__('Loading...')\r\n            },\r\n            template:\r\n                '<div class=\"loading-mask\" data-role=\"loader\">' +\r\n                    '<div class=\"loader\">' +\r\n                        '<img alt=\"<%- data.texts.imgAlt %>\" src=\"<%- data.icon %>\">' +\r\n                        '<p><%- data.texts.loaderText %></p>' +\r\n                    '</div>' +\r\n                '</div>'\r\n\r\n        },\r\n\r\n        /**\r\n         * Loader creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Bind on ajax events\r\n         * @protected\r\n         */\r\n        _bind: function () {\r\n            this._on({\r\n                'processStop': 'hide',\r\n                'processStart': 'show',\r\n                'show.loader': 'show',\r\n                'hide.loader': 'hide',\r\n                'contentUpdated.loader': '_contentUpdated'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Verify loader present after content updated\r\n         *\r\n         * This will be cleaned up by the task MAGETWO-11070\r\n         *\r\n         * @param {EventObject} e\r\n         * @private\r\n         */\r\n        _contentUpdated: function (e) {\r\n            this.show(e);\r\n        },\r\n\r\n        /**\r\n         * Show loader\r\n         */\r\n        show: function (e, ctx) {\r\n            this._render();\r\n            this.loaderStarted++;\r\n            this.spinner.show();\r\n\r\n            if (ctx) {\r\n                this.spinner\r\n                    .css({\r\n                        width: ctx.outerWidth(),\r\n                        height: ctx.outerHeight(),\r\n                        position: 'absolute'\r\n                    })\r\n                    .position({\r\n                        my: 'top left',\r\n                        at: 'top left',\r\n                        of: ctx\r\n                    });\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Hide loader\r\n         */\r\n        hide: function () {\r\n            if (this.loaderStarted > 0) {\r\n                this.loaderStarted--;\r\n\r\n                if (this.loaderStarted === 0) {\r\n                    this.spinner.hide();\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Render loader\r\n         * @protected\r\n         */\r\n        _render: function () {\r\n            var html;\r\n\r\n            if (!this.spinnerTemplate) {\r\n                this.spinnerTemplate = mageTemplate(this.options.template);\r\n\r\n                html = $(this.spinnerTemplate({\r\n                    data: this.options\r\n                }));\r\n\r\n                html.prependTo(this.element);\r\n\r\n                this.spinner = html;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Destroy loader\r\n         */\r\n        _destroy: function () {\r\n            this.spinner.remove();\r\n        }\r\n    });\r\n\r\n    /**\r\n     * This widget takes care of registering the needed loader listeners on the body\r\n     */\r\n    $.widget('mage.loaderAjax', {\r\n        options: {\r\n            defaultContainer: '[data-container=body]',\r\n            loadingClass: 'ajax-loading'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n            // There should only be one instance of this widget, and it should be attached\r\n            // to the body only. Having it on the page twice will trigger multiple processStarts.\r\n            if (window.console && !this.element.is(this.options.defaultContainer) && $.mage.isDevMode(undefined)) {\r\n                console.warn('This widget is intended to be attached to the body, not below.');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            $(document).on({\r\n                'ajaxSend': this._onAjaxSend.bind(this),\r\n                'ajaxComplete': this._onAjaxComplete.bind(this)\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} loaderContext\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _getJqueryObj: function (loaderContext) {\r\n            var ctx;\r\n\r\n            // Check to see if context is jQuery object or not.\r\n            if (loaderContext) {\r\n                if (loaderContext.jquery) {\r\n                    ctx = loaderContext;\r\n                } else {\r\n                    ctx = $(loaderContext);\r\n                }\r\n            } else {\r\n                ctx = $('[data-container=\"body\"]');\r\n            }\r\n\r\n            return ctx;\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} jqxhr\r\n         * @param {Object} settings\r\n         * @private\r\n         */\r\n        _onAjaxSend: function (e, jqxhr, settings) {\r\n            var ctx;\r\n\r\n            $(this.options.defaultContainer)\r\n                .addClass(this.options.loadingClass)\r\n                .attr({\r\n                    'aria-busy': true\r\n                });\r\n\r\n            if (settings && settings.showLoader) {\r\n                ctx = this._getJqueryObj(settings.loaderContext);\r\n                ctx.trigger('processStart');\r\n\r\n                // Check to make sure the loader is there on the page if not report it on the console.\r\n                // NOTE that this check should be removed before going live. It is just an aid to help\r\n                // in finding the uses of the loader that maybe broken.\r\n                if (window.console && !ctx.parents('[data-role=\"loader\"]').length) {\r\n                    console.warn('Expected to start loader but did not find one in the dom');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} e\r\n         * @param {Object} jqxhr\r\n         * @param {Object} settings\r\n         * @private\r\n         */\r\n        _onAjaxComplete: function (e, jqxhr, settings) {\r\n            $(this.options.defaultContainer)\r\n                .removeClass(this.options.loadingClass)\r\n                .attr('aria-busy', false);\r\n\r\n            if (settings && settings.showLoader) {\r\n                this._getJqueryObj(settings.loaderContext).trigger('processStop');\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return {\r\n        loader: $.mage.loader,\r\n        loaderAjax: $.mage.loaderAjax\r\n    };\r\n});\r\n","mage/mage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/apply/main'\r\n], function ($, mage) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Main namespace for Magento extensions\r\n     * @type {Object}\r\n     */\r\n    $.mage = $.mage || {};\r\n\r\n    /**\r\n     * Plugin mage, initialize components on elements\r\n     * @param {String} name - Components' path.\r\n     * @param {Object} config - Components' config.\r\n     * @returns {JQuery} Chainable.\r\n     */\r\n    $.fn.mage = function (name, config) {\r\n        config = config || {};\r\n\r\n        this.each(function (index, el) {\r\n            mage.applyFor(el, config, name);\r\n        });\r\n\r\n        return this;\r\n    };\r\n\r\n    $.extend($.mage, {\r\n        /**\r\n         * Handle all components declared via data attribute\r\n         * @return {Object} $.mage\r\n         */\r\n        init: function () {\r\n            mage.apply();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Method handling redirects and page refresh\r\n         * @param {String} url - redirect URL\r\n         * @param {(undefined|String)} type - 'assign', 'reload', 'replace'\r\n         * @param {(undefined|Number)} timeout - timeout in milliseconds before processing the redirect or reload\r\n         * @param {(undefined|Boolean)} forced - true|false used for 'reload' only\r\n         */\r\n        redirect: function (url, type, timeout, forced) {\r\n            var _redirect;\r\n\r\n            forced  = !!forced;\r\n            timeout = timeout || 0;\r\n            type    = type || 'assign';\r\n\r\n            /**\r\n             * @private\r\n             */\r\n            _redirect = function () {\r\n                window.location[type](type === 'reload' ? forced : url);\r\n            };\r\n\r\n            timeout ? setTimeout(_redirect, timeout) : _redirect();\r\n        },\r\n\r\n        /**\r\n         * Checks if provided string is a valid selector.\r\n         * @param {String} selector - Selector to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isValidSelector: function (selector) {\r\n            try {\r\n                document.querySelector(selector);\r\n\r\n                return true;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Init components inside of dynamically updated elements\r\n     */\r\n    $(document).on('contentUpdated', 'body', function () {\r\n        if (mage) {\r\n            mage.apply();\r\n        }\r\n    });\r\n\r\n    return $.mage;\r\n});\r\n","mage/menu.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'matchMedia',\r\n    'jquery-ui-modules/menu',\r\n    'mage/translate'\r\n], function ($, mediaCheck) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Menu Widget - this widget is a wrapper for the jQuery UI Menu\r\n     */\r\n    $.widget('mage.menu', $.ui.menu, {\r\n        options: {\r\n            responsive: false,\r\n            expanded: false,\r\n            showDelay: 42,\r\n            hideDelay: 300,\r\n            delay: 0,\r\n            mediaBreakpoint: '(max-width: 768px)'\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var self = this;\r\n\r\n            this.delay = this.options.delay;\r\n\r\n            this._super();\r\n            $(window).on('resize', function () {\r\n                self.element.find('.submenu-reverse').removeClass('submenu-reverse');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            this._super();\r\n\r\n            if (this.options.expanded === true) {\r\n                this.isExpanded();\r\n            }\r\n\r\n            if (this.options.responsive === true) {\r\n                mediaCheck({\r\n                    media: this.options.mediaBreakpoint,\r\n                    entry: $.proxy(function () {\r\n                        this._toggleMobileMode();\r\n                    }, this),\r\n                    exit: $.proxy(function () {\r\n                        this._toggleDesktopMode();\r\n                    }, this)\r\n                });\r\n            }\r\n\r\n            this._assignControls()._listen();\r\n            this._setActiveMenu();\r\n        },\r\n\r\n        /**\r\n         * @return {Object}\r\n         * @private\r\n         */\r\n        _assignControls: function () {\r\n            this.controls = {\r\n                toggleBtn: $('[data-action=\"toggle-nav\"]')\r\n            };\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _listen: function () {\r\n            var controls = this.controls,\r\n                toggle = this.toggle;\r\n\r\n            controls.toggleBtn.off('click');\r\n            controls.toggleBtn.on('click', toggle.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Toggle.\r\n         */\r\n        toggle: function () {\r\n            var html = $('html');\r\n\r\n            if (html.hasClass('nav-open')) {\r\n                html.removeClass('nav-open');\r\n                setTimeout(function () {\r\n                    html.removeClass('nav-before-open');\r\n                }, this.options.hideDelay);\r\n            } else {\r\n                html.addClass('nav-before-open');\r\n                setTimeout(function () {\r\n                    html.addClass('nav-open');\r\n                }, this.options.showDelay);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to figure out the active category for current page and add appropriate classes:\r\n         *  - 'active' class for active category\r\n         *  - 'has-active' class for all parents of active category\r\n         *\r\n         *  First, checks whether current URL is URL of category page,\r\n         *  otherwise tries to retrieve category URL in case of current URL is product view page URL\r\n         *  which has category tree path in it.\r\n         *\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveMenu: function () {\r\n            var currentUrl = window.location.href.split('?')[0];\r\n\r\n            if (!this._setActiveMenuForCategory(currentUrl)) {\r\n                this._setActiveMenuForProduct(currentUrl);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Looks for category with provided URL and adds 'active' CSS class to it if it was not set before.\r\n         * If menu item has parent categories, sets 'has-active' class to all af them.\r\n         *\r\n         * @param {String} url - possible category URL\r\n         * @returns {Boolean} - true if active category was founded by provided URL, otherwise return false\r\n         * @private\r\n         */\r\n        _setActiveMenuForCategory: function (url) {\r\n            var activeCategoryLink = this.element.find('a[href=\"' + url + '\"]'),\r\n                classes,\r\n                classNav;\r\n\r\n            if (!activeCategoryLink || !activeCategoryLink.hasClass('ui-menu-item-wrapper')) {\r\n\r\n                //category was not found by provided URL\r\n                return false;\r\n            } else if (!activeCategoryLink.parent().hasClass('active')) {\r\n                activeCategoryLink.parent().addClass('active');\r\n                classes = activeCategoryLink.parent().attr('class');\r\n                classNav = classes.match(/(nav\\-)[0-9]+(\\-[0-9]+)+/gi);\r\n\r\n                if (classNav) {\r\n                    this._setActiveParent(classNav[0]);\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sets 'has-active' CSS class to all parent categories which have part of provided class in childClassName\r\n         *\r\n         * @example\r\n         *  childClassName - 'nav-1-2-3'\r\n         *  CSS class 'has-active' will be added to categories have 'nav-1-2' and 'nav-1' classes\r\n         *\r\n         * @param {String} childClassName - Class name of active category <li> element\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveParent: function (childClassName) {\r\n            var parentElement,\r\n                parentClass = childClassName.substr(0, childClassName.lastIndexOf('-'));\r\n\r\n            if (parentClass.lastIndexOf('-') !== -1) {\r\n                parentElement = this.element.find('.' + parentClass);\r\n\r\n                if (parentElement) {\r\n                    parentElement.addClass('has-active');\r\n                }\r\n                this._setActiveParent(parentClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Tries to retrieve category URL from current URL and mark this category as active\r\n         * @see _setActiveMenuForCategory(url)\r\n         *\r\n         * @example\r\n         *  currentUrl - http://magento.com/category1/category12/product.html,\r\n         *  category URLs has extensions .phtml - http://magento.com/category1.phtml\r\n         *  method sets active category which has URL http://magento.com/category1/category12.phtml\r\n         *\r\n         * @param {String} currentUrl - current page URL without parameters\r\n         * @return void\r\n         * @private\r\n         */\r\n        _setActiveMenuForProduct: function (currentUrl) {\r\n            var categoryUrlExtension,\r\n                lastUrlSection,\r\n                possibleCategoryUrl,\r\n                //retrieve first category URL to know what extension is used for category URLs\r\n                firstCategoryUrl = this.element.find('> li a').attr('href');\r\n\r\n            if (firstCategoryUrl) {\r\n                lastUrlSection = firstCategoryUrl.substr(firstCategoryUrl.lastIndexOf('/'));\r\n                categoryUrlExtension = lastUrlSection.lastIndexOf('.') !== -1 ?\r\n                    lastUrlSection.substr(lastUrlSection.lastIndexOf('.')) : '';\r\n\r\n                possibleCategoryUrl = currentUrl.substr(0, currentUrl.lastIndexOf('/')) + categoryUrlExtension;\r\n                this._setActiveMenuForCategory(possibleCategoryUrl);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Add class for expanded option.\r\n         */\r\n        isExpanded: function () {\r\n            var subMenus = this.element.find(this.options.menus),\r\n                expandedMenus = subMenus.find(this.options.menus);\r\n\r\n            expandedMenus.addClass('expanded');\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _activate: function (event) {\r\n            window.location.href = this.active.find('> a').attr('href');\r\n            this.collapseAll(event);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var match, prev, character, skip, regex,\r\n                preventDefault = true;\r\n\r\n            /* eslint-disable max-depth */\r\n            /**\r\n             * @param {String} value\r\n             */\r\n            function escape(value) {\r\n                return value.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\r\n            }\r\n\r\n            if (this.active.closest(this.options.menus).attr('aria-expanded') != 'true') { //eslint-disable-line eqeqeq\r\n\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.PAGE_UP:\r\n                        this.previousPage(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.PAGE_DOWN:\r\n                        this.nextPage(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.HOME:\r\n                        this._move('first', 'first', event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.END:\r\n                        this._move('last', 'last', event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.UP:\r\n                        this.previous(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.DOWN:\r\n                        if (this.active && !this.active.is('.ui-state-disabled')) {\r\n                            this.expand(event);\r\n                        }\r\n                        break;\r\n\r\n                    case $.ui.keyCode.LEFT:\r\n                        this.previous(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.RIGHT:\r\n                        this.next(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.ENTER:\r\n                    case $.ui.keyCode.SPACE:\r\n                        this._activate(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.ESCAPE:\r\n                        this.collapse(event);\r\n                        break;\r\n                    default:\r\n                        preventDefault = false;\r\n                        prev = this.previousFilter || '';\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        skip = false;\r\n\r\n                        clearTimeout(this.filterTimer);\r\n\r\n                        if (character === prev) {\r\n                            skip = true;\r\n                        } else {\r\n                            character = prev + character;\r\n                        }\r\n\r\n                        regex = new RegExp('^' + escape(character), 'i');\r\n                        match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                            return regex.test($(this).children('a').text());\r\n                        });\r\n                        match = skip && match.index(this.active.next()) !== -1 ?\r\n                            this.active.nextAll('.ui-menu-item') :\r\n                            match;\r\n\r\n                        // If no matches on the current filter, reset to the last character pressed\r\n                        // to move down the menu to the first item that starts with that character\r\n                        if (!match.length) {\r\n                            character = String.fromCharCode(event.keyCode);\r\n                            regex = new RegExp('^' + escape(character), 'i');\r\n                            match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                                return regex.test($(this).children('a').text());\r\n                            });\r\n                        }\r\n\r\n                        if (match.length) {\r\n                            this.focus(event, match);\r\n\r\n                            if (match.length > 1) {\r\n                                this.previousFilter = character;\r\n                                this.filterTimer = this._delay(function () {\r\n                                    delete this.previousFilter;\r\n                                }, 1000);\r\n                            } else {\r\n                                delete this.previousFilter;\r\n                            }\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                }\r\n            } else {\r\n                switch (event.keyCode) {\r\n                    case $.ui.keyCode.DOWN:\r\n                        this.next(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.UP:\r\n                        this.previous(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.RIGHT:\r\n                        if (this.active && !this.active.is('.ui-state-disabled')) {\r\n                            this.expand(event);\r\n                        }\r\n                        break;\r\n\r\n                    case $.ui.keyCode.ENTER:\r\n                    case $.ui.keyCode.SPACE:\r\n                        this._activate(event);\r\n                        break;\r\n\r\n                    case $.ui.keyCode.LEFT:\r\n                    case $.ui.keyCode.ESCAPE:\r\n                        this.collapse(event);\r\n                        break;\r\n                    default:\r\n                        preventDefault = false;\r\n                        prev = this.previousFilter || '';\r\n                        character = String.fromCharCode(event.keyCode);\r\n                        skip = false;\r\n\r\n                        clearTimeout(this.filterTimer);\r\n\r\n                        if (character === prev) {\r\n                            skip = true;\r\n                        } else {\r\n                            character = prev + character;\r\n                        }\r\n\r\n                        regex = new RegExp('^' + escape(character), 'i');\r\n                        match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                            return regex.test($(this).children('a').text());\r\n                        });\r\n                        match = skip && match.index(this.active.next()) !== -1 ?\r\n                            this.active.nextAll('.ui-menu-item') :\r\n                            match;\r\n\r\n                        // If no matches on the current filter, reset to the last character pressed\r\n                        // to move down the menu to the first item that starts with that character\r\n                        if (!match.length) {\r\n                            character = String.fromCharCode(event.keyCode);\r\n                            regex = new RegExp('^' + escape(character), 'i');\r\n                            match = this.activeMenu.children('.ui-menu-item').filter(function () {\r\n                                return regex.test($(this).children('a').text());\r\n                            });\r\n                        }\r\n\r\n                        if (match.length) {\r\n                            this.focus(event, match);\r\n\r\n                            if (match.length > 1) {\r\n                                this.previousFilter = character;\r\n                                this.filterTimer = this._delay(function () {\r\n                                    delete this.previousFilter;\r\n                                }, 1000);\r\n                            } else {\r\n                                delete this.previousFilter;\r\n                            }\r\n                        } else {\r\n                            delete this.previousFilter;\r\n                        }\r\n                }\r\n            }\r\n\r\n            /* eslint-enable max-depth */\r\n            if (preventDefault) {\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _toggleMobileMode: function () {\r\n            var subMenus;\r\n\r\n            $(this.element).off('mouseenter mouseleave');\r\n            this._on({\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(a)': function (event) {\r\n                    var target;\r\n\r\n                    event.preventDefault();\r\n                    target = $(event.target).closest('.ui-menu-item');\r\n                    target.get(0).scrollIntoView();\r\n\r\n                    // Open submenu on click\r\n                    if (target.has('.ui-menu').length) {\r\n                        this.expand(event);\r\n                    } else if (!this.element.is(':focus') &&\r\n                        $(this.document[0].activeElement).closest('.ui-menu').length\r\n                    ) {\r\n                        // Redirect focus to the menu\r\n                        this.element.trigger('focus', [true]);\r\n\r\n                        // If the active item is on the top level, let it stay active.\r\n                        // Otherwise, blur the active item since it is no longer visible.\r\n                        if (this.active && this.active.parents('.ui-menu').length === 1) { //eslint-disable-line\r\n                            clearTimeout(this.timer);\r\n                        }\r\n                    }\r\n\r\n                    if (!target.hasClass('level-top') || !target.has('.ui-menu').length) {\r\n                        window.location.href = target.find('> a').attr('href');\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(.ui-state-active)': function (event) {\r\n                    this.collapseAll(event, true);\r\n                }\r\n            });\r\n\r\n            subMenus = this.element.find('.level-top');\r\n            $.each(subMenus, $.proxy(function (index, item) {\r\n                var category = $(item).find('> a span').not('.ui-menu-icon').text(),\r\n                    categoryUrl = $(item).find('> a').attr('href'),\r\n                    menu = $(item).find('> .ui-menu');\r\n\r\n                this.categoryLink = $('<a>')\r\n                    .attr('href', categoryUrl)\r\n                    .text($.mage.__('All %1').replace('%1', category));\r\n\r\n                this.categoryParent = $('<li>')\r\n                    .addClass('ui-menu-item all-category')\r\n                    .html(this.categoryLink);\r\n\r\n                if (menu.find('.all-category').length === 0) {\r\n                    menu.prepend(this.categoryParent);\r\n                }\r\n\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _toggleDesktopMode: function () {\r\n            var categoryParent, html;\r\n\r\n            $(this.element).off('click mousedown mouseenter mouseleave');\r\n            this._on({\r\n\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'mousedown .ui-menu-item > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * Prevent focus from sticking to links inside menu after clicking\r\n                 * them (focus should always stay on UL during navigation).\r\n                 */\r\n                'click .ui-state-disabled > a': function (event) {\r\n                    event.preventDefault();\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuer.Event} event\r\n                 */\r\n                'click .ui-menu-item:has(a)': function (event) {\r\n                    var target = $(event.target).closest('.ui-menu-item');\r\n\r\n                    if (!this.mouseHandled && target.not('.ui-state-disabled').length) {\r\n                        this.select(event);\r\n\r\n                        // Only set the mouseHandled flag if the event will bubble, see #9469.\r\n                        if (!event.isPropagationStopped()) {\r\n                            this.mouseHandled = true;\r\n                        }\r\n\r\n                        // Open submenu on click\r\n                        if (target.has('.ui-menu').length) {\r\n                            this.expand(event);\r\n                        } else if (!this.element.is(':focus') &&\r\n                            $(this.document[0].activeElement).closest('.ui-menu').length\r\n                        ) {\r\n                            // Redirect focus to the menu\r\n                            this.element.trigger('focus', [true]);\r\n\r\n                            // If the active item is on the top level, let it stay active.\r\n                            // Otherwise, blur the active item since it is no longer visible.\r\n                            if (this.active && this.active.parents('.ui-menu').length === 1) { //eslint-disable-line\r\n                                clearTimeout(this.timer);\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseenter .ui-menu-item': function (event) {\r\n                    var target = $(event.currentTarget),\r\n                        submenu = this.options.menus,\r\n                        ulElement,\r\n                        ulElementWidth,\r\n                        width,\r\n                        targetPageX,\r\n                        rightBound;\r\n\r\n                    if (target.has(submenu)) {\r\n                        ulElement = target.find(submenu);\r\n                        ulElementWidth = ulElement.outerWidth(true);\r\n                        width = target.outerWidth() * 2;\r\n                        targetPageX = target.offset().left;\r\n                        rightBound = $(window).width();\r\n\r\n                        if (ulElementWidth + width + targetPageX > rightBound) {\r\n                            ulElement.addClass('submenu-reverse');\r\n                        }\r\n\r\n                        if (targetPageX - ulElementWidth < 0) {\r\n                            ulElement.removeClass('submenu-reverse');\r\n                        }\r\n                    }\r\n\r\n                    // Remove ui-state-active class from siblings of the newly focused menu item\r\n                    // to avoid a jump caused by adjacent elements both having a class with a border\r\n                    target.siblings().children('.ui-state-active').removeClass('ui-state-active');\r\n                    this.focus(event, target);\r\n                },\r\n\r\n                /**\r\n                 * @param {jQuery.Event} event\r\n                 */\r\n                'mouseleave': function (event) {\r\n                    this.collapseAll(event, true);\r\n                },\r\n\r\n                /**\r\n                 * Mouse leave.\r\n                 */\r\n                'mouseleave .ui-menu': 'collapseAll'\r\n            });\r\n\r\n            categoryParent = this.element.find('.all-category');\r\n            html = $('html');\r\n\r\n            categoryParent.remove();\r\n\r\n            if (html.hasClass('nav-open')) {\r\n                html.removeClass('nav-open');\r\n                setTimeout(function () {\r\n                    html.removeClass('nav-before-open');\r\n                }, this.options.hideDelay);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} handler\r\n         * @param {Number} delay\r\n         * @return {Number}\r\n         * @private\r\n         */\r\n        _delay: function (handler, delay) {\r\n            var instance = this,\r\n\r\n                /**\r\n                 * @return {*}\r\n                 */\r\n                handlerProxy = function () {\r\n                    return (typeof handler === 'string' ? instance[handler] : handler).apply(instance, arguments);\r\n                };\r\n\r\n            return setTimeout(handlerProxy, delay || 0);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        expand: function (event) {\r\n            var newItem = this.active &&\r\n                this.active\r\n                    .children('.ui-menu')\r\n                    .children('.ui-menu-item')\r\n                    .first();\r\n\r\n            if (newItem && newItem.length) {\r\n                if (newItem.closest('.ui-menu').is(':visible') &&\r\n                    newItem.closest('.ui-menu').has('.all-categories')\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                // remove the active state class from the siblings\r\n                this.active.siblings().children('.ui-state-active').removeClass('ui-state-active');\r\n\r\n                this._open(newItem.parent());\r\n\r\n                // Delay so Firefox will not hide activedescendant change in expanding submenu from AT\r\n                this._delay(function () {\r\n                    this.focus(event, newItem);\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         */\r\n        select: function (event) {\r\n            var ui;\r\n\r\n            this.active = this.active || $(event.target).closest('.ui-menu-item');\r\n\r\n            if (this.active.is('.all-category')) {\r\n                this.active = $(event.target).closest('.ui-menu-item');\r\n            }\r\n            ui = {\r\n                item: this.active\r\n            };\r\n\r\n            if (!this.active.has('.ui-menu').length) {\r\n                this.collapseAll(event, true);\r\n            }\r\n            this._trigger('select', event, ui);\r\n        }\r\n    });\r\n\r\n    $.widget('mage.navigation', $.mage.menu, {\r\n        options: {\r\n            responsiveAction: 'wrap', //option for responsive handling\r\n            maxItems: null, //option to set max number of menu items\r\n            container: '#menu', //container to check against navigation length\r\n            moreText: $.mage.__('more'),\r\n            breakpoint: 768\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function () {\r\n            var that, responsive;\r\n\r\n            this._super();\r\n\r\n            that = this;\r\n            responsive = this.options.responsiveAction;\r\n\r\n            this.element\r\n                .addClass('ui-menu-responsive')\r\n                .attr('responsive', 'main');\r\n\r\n            this.setupMoreMenu();\r\n            this.setMaxItems();\r\n\r\n            //check responsive option\r\n            if (responsive == 'onResize') { //eslint-disable-line eqeqeq\r\n                $(window).on('resize', function () {\r\n                    if ($(window).width() > that.options.breakpoint) {\r\n                        that._responsive();\r\n                        $('[responsive=more]').show();\r\n                    } else {\r\n                        that.element.children().show();\r\n                        $('[responsive=more]').hide();\r\n                    }\r\n                });\r\n            } else if (responsive == 'onReload') { //eslint-disable-line eqeqeq\r\n                this._responsive();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Setup more menu.\r\n         */\r\n        setupMoreMenu: function () {\r\n            var moreListItems = this.element.children().clone(),\r\n                moreLink = $('<a>' + this.options.moreText + '</a>');\r\n\r\n            moreListItems.hide();\r\n\r\n            moreLink.attr('href', '#');\r\n\r\n            this.moreItemsList = $('<ul>')\r\n                .append(moreListItems);\r\n\r\n            this.moreListContainer = $('<li>')\r\n                .append(moreLink)\r\n                .append(this.moreItemsList);\r\n\r\n            this.responsiveMenu = $('<ul>')\r\n                .addClass('ui-menu-more')\r\n                .attr('responsive', 'more')\r\n                .append(this.moreListContainer)\r\n                .menu({\r\n                    position: {\r\n                        my: 'right top',\r\n                        at: 'right bottom'\r\n                    }\r\n                })\r\n                .insertAfter(this.element);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _responsive: function () {\r\n            var container = $(this.options.container),\r\n                containerSize = container.width(),\r\n                width = 0,\r\n                items = this.element.children('li'),\r\n                more = $('.ui-menu-more > li > ul > li a');\r\n\r\n            items = items.map(function () {\r\n                var item = {};\r\n\r\n                item.item = $(this);\r\n                item.itemSize = $(this).outerWidth();\r\n\r\n                return item;\r\n            });\r\n\r\n            $.each(items, function (index) {\r\n                var itemText = items[index].item\r\n                    .find('a:first')\r\n                    .text();\r\n\r\n                width += parseInt(items[index].itemSize, null); //eslint-disable-line radix\r\n\r\n                if (width < containerSize) {\r\n                    items[index].item.show();\r\n\r\n                    more.each(function () {\r\n                        var text = $(this).text();\r\n\r\n                        if (text === itemText) {\r\n                            $(this).parent().hide();\r\n                        }\r\n                    });\r\n                } else if (width > containerSize) {\r\n                    items[index].item.hide();\r\n\r\n                    more.each(function () {\r\n                        var text = $(this).text();\r\n\r\n                        if (text === itemText) {\r\n                            $(this).parent().show();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set max items.\r\n         */\r\n        setMaxItems: function () {\r\n            var items = this.element.children('li'),\r\n                itemsCount = items.length,\r\n                maxItems = this.options.maxItems,\r\n                overflow = itemsCount - maxItems,\r\n                overflowItems = items.slice(overflow);\r\n\r\n            overflowItems.hide();\r\n\r\n            overflowItems.each(function () {\r\n                var itemText = $(this).find('a:first').text();\r\n\r\n                $(this).hide();\r\n\r\n                $('.ui-menu-more > li > ul > li a').each(function () {\r\n                    var text = $(this).text();\r\n\r\n                    if (text === itemText) {\r\n                        $(this).parent().show();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    });\r\n\r\n    return {\r\n        menu: $.mage.menu,\r\n        navigation: $.mage.navigation\r\n    };\r\n});\r\n","mage/multiselect.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'text!mage/multiselect.html',\r\n    'Magento_Ui/js/modal/alert',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/editableMultiselect/js/jquery.multiselect'\r\n], function (_, $, searchTemplate, alert) {\r\n    'use strict';\r\n\r\n    $.widget('mage.multiselect2', {\r\n        options: {\r\n            mselectContainer: 'section.mselect-list',\r\n            mselectItemsWrapperClass: 'mselect-items-wrapper',\r\n            mselectCheckedClass: 'mselect-checked',\r\n            containerClass: 'paginated',\r\n            searchInputClass: 'admin__action-multiselect-search',\r\n            selectedItemsCountClass: 'admin__action-multiselect-items-selected',\r\n            currentPage: 1,\r\n            lastAppendValue: 0,\r\n            updateDelay: 1000,\r\n            optionsLoaded: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            $.fn.multiselect.call(this.element, this.options);\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _init: function () {\r\n            this.domElement = this.element.get(0);\r\n\r\n            this.$container = $(this.options.mselectContainer);\r\n            this.$wrapper = this.$container.find('.' + this.options.mselectItemsWrapperClass);\r\n            this.$item = this.$wrapper.find('div').first();\r\n            this.selectedValues = [];\r\n            this.values = {};\r\n\r\n            this.$container.addClass(this.options.containerClass).prepend(searchTemplate);\r\n            this.$input = this.$container.find('.' + this.options.searchInputClass);\r\n            this.$selectedCounter = this.$container.find('.' + this.options.selectedItemsCountClass);\r\n            this.filter = '';\r\n\r\n            if (this.domElement.options.length) {\r\n                this._setLastAppendOption(this.domElement.options[this.domElement.options.length - 1].value);\r\n            }\r\n\r\n            this._initElement();\r\n            this._events();\r\n        },\r\n\r\n        /**\r\n         * Leave only saved/selected options in select element.\r\n         *\r\n         * @private\r\n         */\r\n        _initElement: function () {\r\n            this.element.empty();\r\n            _.each(this.options.selectedValues, function (value) {\r\n                this._createSelectedOption({\r\n                    value: value,\r\n                    label: value\r\n                });\r\n            }, this);\r\n        },\r\n\r\n        /**\r\n         * Attach required events.\r\n         *\r\n         * @private\r\n         */\r\n        _events: function () {\r\n            var onKeyUp = _.debounce(this.onKeyUp, this.options.updateDelay);\r\n\r\n            _.bindAll(this, 'onScroll', 'onCheck', 'onOptionsChange');\r\n\r\n            this.$wrapper.on('scroll', this.onScroll);\r\n            this.$wrapper.on('change.mselectCheck', '[type=checkbox]', this.onCheck);\r\n            this.$input.on('keyup', _.bind(onKeyUp, this));\r\n            this.element.on('change.hiddenSelect', this.onOptionsChange);\r\n        },\r\n\r\n        /**\r\n         * Behaves multiselect scroll.\r\n         */\r\n        onScroll: function () {\r\n            var height = this.$wrapper.height(),\r\n                scrollHeight = this.$wrapper.prop('scrollHeight'),\r\n                scrollTop = Math.ceil(this.$wrapper.prop('scrollTop'));\r\n\r\n            if (!this.options.optionsLoaded && scrollHeight - height <= scrollTop) {\r\n                this.loadOptions();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Behaves keyup event on input search\r\n         */\r\n        onKeyUp: function () {\r\n            if (this.getSearchCriteria() === this.filter) {\r\n                return false;\r\n            }\r\n\r\n            this.setFilter();\r\n            this.clearMultiselectOptions();\r\n            this.setCurrentPage(0);\r\n            this.loadOptions();\r\n        },\r\n\r\n        /**\r\n         * Callback for select change event\r\n         */\r\n        onOptionsChange: function () {\r\n            this.selectedValues = _.map(this.domElement.options, function (option) {\r\n                this.values[option.value] = true;\r\n\r\n                return option.value;\r\n            }, this);\r\n\r\n            this._updateSelectedCounter();\r\n        },\r\n\r\n        /**\r\n         * Overrides native check behaviour.\r\n         *\r\n         * @param {Event} event\r\n         */\r\n        onCheck: function (event) {\r\n            var checkbox = event.target,\r\n                option = {\r\n                    value: checkbox.value,\r\n                    label: $(checkbox).parent('label').text()\r\n                };\r\n\r\n            checkbox.checked ? this._createSelectedOption(option) : this._removeSelectedOption(option);\r\n            event.stopPropagation();\r\n        },\r\n\r\n        /**\r\n         * Show error message.\r\n         *\r\n         * @param {String} message\r\n         */\r\n        onError: function (message) {\r\n            alert({\r\n                content: message\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Updates current filter state.\r\n         */\r\n        setFilter: function () {\r\n            this.filter = this.getSearchCriteria() || '';\r\n        },\r\n\r\n        /**\r\n         * Reads search input value.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getSearchCriteria: function () {\r\n            return this.$input.val().trim();\r\n        },\r\n\r\n        /**\r\n         * Load options data.\r\n         */\r\n        loadOptions: function () {\r\n            var nextPage = this.getCurrentPage() + 1;\r\n\r\n            this.$wrapper.trigger('processStart');\r\n            this.$input.prop('disabled', true);\r\n\r\n            $.get(this.options.nextPageUrl, {\r\n                p: nextPage,\r\n                s: this.filter\r\n            })\r\n            .done(function (response) {\r\n                if (response.success) {\r\n                    this.appendOptions(response.result);\r\n                    this.setCurrentPage(nextPage);\r\n                } else {\r\n                    this.onError(response.errorMessage);\r\n                }\r\n            }.bind(this))\r\n            .always(function () {\r\n                this.$wrapper.trigger('processStop');\r\n                this.$input.prop('disabled', false);\r\n\r\n                if (this.filter) {\r\n                    this.$input.focus();\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Append loaded options\r\n         *\r\n         * @param {Array} options\r\n         */\r\n        appendOptions: function (options) {\r\n            var divOptions = [];\r\n\r\n            if (!options.length) {\r\n                return false;\r\n            }\r\n\r\n            if (this.isOptionsLoaded(options)) {\r\n                return;\r\n            }\r\n\r\n            options.forEach(function (option) {\r\n                if (!this.values[option.value]) {\r\n                    this.values[option.value] = true;\r\n                    option.selected = this._isOptionSelected(option);\r\n                    divOptions.push(this._createMultiSelectOption(option));\r\n                    this._setLastAppendOption(option.value);\r\n                }\r\n            }, this);\r\n\r\n            this.$wrapper.append(divOptions);\r\n        },\r\n\r\n        /**\r\n         * Clear multiselect options\r\n         */\r\n        clearMultiselectOptions: function () {\r\n            this._setLastAppendOption(0);\r\n            this.values = {};\r\n            this.$wrapper.empty();\r\n        },\r\n\r\n        /**\r\n         * Checks if all options are already loaded\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isOptionsLoaded: function (options) {\r\n            this.options.optionsLoaded = this.options.lastAppendValue === options[options.length - 1].value;\r\n\r\n            return this.options.optionsLoaded;\r\n        },\r\n\r\n        /**\r\n         * Setter for current page.\r\n         *\r\n         * @param {Number} page\r\n         */\r\n        setCurrentPage: function (page) {\r\n            this.options.currentPage = page;\r\n        },\r\n\r\n        /**\r\n         * Getter for current page.\r\n         *\r\n         * @return {Number}\r\n         */\r\n        getCurrentPage: function () {\r\n            return this.options.currentPage;\r\n        },\r\n\r\n        /**\r\n         * Creates new selected option for select element\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @private\r\n         */\r\n        _createSelectedOption: function (option) {\r\n            var selectOption = new Option(option.label, option.value, false, true);\r\n\r\n            this.element.append(selectOption);\r\n            this.selectedValues.push(option.value);\r\n            this._updateSelectedCounter();\r\n\r\n            return selectOption;\r\n        },\r\n\r\n        /**\r\n         * Remove passed option from select element\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @return {Object} option\r\n         * @private\r\n         */\r\n        _removeSelectedOption: function (option) {\r\n            var unselectedOption = _.findWhere(this.domElement.options, {\r\n                value: option.value\r\n            });\r\n\r\n            if (!_.isUndefined(unselectedOption)) {\r\n                this.domElement.remove(unselectedOption.index);\r\n                this.selectedValues.splice(_.indexOf(this.selectedValues, option.value), 1);\r\n                this._updateSelectedCounter();\r\n            }\r\n\r\n            return unselectedOption;\r\n        },\r\n\r\n        /**\r\n         * Creates new DIV option for multiselect widget\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @param {Boolean} option.selected - is option selected\r\n         * @private\r\n         */\r\n        _createMultiSelectOption: function (option) {\r\n            var item = this.$item.clone(),\r\n                checkbox = item.find('input'),\r\n                isSelected = !!option.selected;\r\n\r\n            checkbox.val(option.value)\r\n                .prop('checked', isSelected)\r\n                .toggleClass(this.options.mselectCheckedClass, isSelected);\r\n\r\n            item.find('label > span').text(option.label);\r\n\r\n            return item;\r\n        },\r\n\r\n        /**\r\n         * Checks if passed option should be selected\r\n         *\r\n         * @param {Object} option - option object\r\n         * @param {String} option.value - option value\r\n         * @param {String} option.label - option label\r\n         * @param {Boolean} option.selected - is option selected\r\n         * @return {Boolean}\r\n         * @private\r\n         */\r\n        _isOptionSelected: function (option) {\r\n            return !!~this.selectedValues.indexOf(option.value);\r\n        },\r\n\r\n        /**\r\n         * Saves last added option value.\r\n         *\r\n         * @param {Number} value\r\n         * @private\r\n         */\r\n        _setLastAppendOption: function (value) {\r\n            this.options.lastAppendValue = value;\r\n        },\r\n\r\n        /**\r\n         * Updates counter of selected items.\r\n         *\r\n         * @private\r\n         */\r\n        _updateSelectedCounter: function () {\r\n            this.$selectedCounter.text(this.selectedValues.length);\r\n        }\r\n    });\r\n\r\n    return $.mage.multiselect2;\r\n});\r\n","mage/polyfill.js":"(function (root, doc) {\r\n    'use strict';\r\n\r\n    var Storage;\r\n\r\n    try {\r\n        if (!root.localStorage || !root.sessionStorage) {\r\n            throw new Error();\r\n        }\r\n\r\n        localStorage.setItem('storage_test', 1);\r\n        localStorage.removeItem('storage_test');\r\n    } catch (e) {\r\n        /**\r\n         * Returns a storage object to shim local or sessionStorage\r\n         * @param {String} type - either 'local' or 'session'\r\n         */\r\n        Storage = function (type) {\r\n            var data;\r\n\r\n            /**\r\n             * Creates a cookie\r\n             * @param {String} name\r\n             * @param {String} value\r\n             * @param {Integer} days\r\n             */\r\n            function createCookie(name, value, days) {\r\n                var date, expires;\r\n\r\n                if (days) {\r\n                    date = new Date();\r\n                    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\r\n                    expires = '; expires=' + date.toGMTString();\r\n                } else {\r\n                    expires = '';\r\n                }\r\n                doc.cookie = name + '=' + value + expires + '; path=/';\r\n            }\r\n\r\n            /**\r\n             * Reads value of a cookie\r\n             * @param {String} name\r\n             */\r\n            function readCookie(name) {\r\n                var nameEQ = name + '=',\r\n                    ca = doc.cookie.split(';'),\r\n                    i = 0,\r\n                    c;\r\n\r\n                for (i = 0; i < ca.length; i++) {\r\n                    c = ca[i];\r\n\r\n                    while (c.charAt(0) === ' ') {\r\n                        c = c.substring(1, c.length);\r\n                    }\r\n\r\n                    if (c.indexOf(nameEQ) === 0) {\r\n                        return c.substring(nameEQ.length, c.length);\r\n                    }\r\n                }\r\n\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             * Returns cookie name based upon the storage type.\r\n             * If this is session storage, the function returns a unique cookie per tab\r\n             */\r\n            function getCookieName() {\r\n\r\n                if (type !== 'session') {\r\n                    return 'localstorage';\r\n                }\r\n\r\n                if (!root.name) {\r\n                    root.name = new Date().getTime();\r\n                }\r\n\r\n                return 'sessionStorage' + root.name;\r\n            }\r\n\r\n            /**\r\n             * Sets storage cookie to a data object\r\n             * @param {Object} dataObject\r\n             */\r\n            function setData(dataObject) {\r\n                data = encodeURIComponent(JSON.stringify(dataObject));\r\n                createCookie(getCookieName(), data, 365);\r\n            }\r\n\r\n            /**\r\n             * Clears value of cookie data\r\n             */\r\n            function clearData() {\r\n                createCookie(getCookieName(), '', 365);\r\n            }\r\n\r\n            /**\r\n             * @returns value of cookie data\r\n             */\r\n            function getData() {\r\n                var dataResponse = readCookie(getCookieName());\r\n\r\n                return dataResponse ? JSON.parse(decodeURIComponent(dataResponse)) : {};\r\n            }\r\n\r\n            data = getData();\r\n\r\n            return {\r\n                length: 0,\r\n\r\n                /**\r\n                 * Clears data from storage\r\n                 */\r\n                clear: function () {\r\n                    data = {};\r\n                    this.length = 0;\r\n                    clearData();\r\n                },\r\n\r\n                /**\r\n                 * Gets an item from storage\r\n                 * @param {String} key\r\n                 */\r\n                getItem: function (key) {\r\n                    return data[key] === undefined ? null : data[key];\r\n                },\r\n\r\n                /**\r\n                 * Gets an item by index from storage\r\n                 * @param {Integer} i\r\n                 */\r\n                key: function (i) {\r\n                    var ctr = 0,\r\n                        k;\r\n\r\n                    for (k in data) {\r\n\r\n                        if (data.hasOwnProperty(k)) {\r\n\r\n                            // eslint-disable-next-line max-depth\r\n                            if (ctr.toString() === i.toString()) {\r\n                                return k;\r\n                            }\r\n                            ctr++;\r\n                        }\r\n                    }\r\n\r\n                    return null;\r\n                },\r\n\r\n                /**\r\n                 * Removes an item from storage\r\n                 * @param {String} key\r\n                 */\r\n                removeItem: function (key) {\r\n                    delete data[key];\r\n                    this.length--;\r\n                    setData(data);\r\n                },\r\n\r\n                /**\r\n                 * Sets an item from storage\r\n                 * @param {String} key\r\n                 * @param {String} value\r\n                 */\r\n                setItem: function (key, value) {\r\n                    data[key] = value.toString();\r\n                    this.length++;\r\n                    setData(data);\r\n                }\r\n            };\r\n        };\r\n\r\n        root.localStorage.prototype = root.localStorage = new Storage('local');\r\n        root.sessionStorage.prototype = root.sessionStorage = new Storage('session');\r\n    }\r\n})(window, document);\r\n","mage/popup-window.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.popupWindow', {\r\n        options: {\r\n            centerBrowser: 0, // center window over browser window? {1 (YES) or 0 (NO)}. overrides top and left\r\n            centerScreen: 0, // center window over entire screen? {1 (YES) or 0 (NO)}. overrides top and left\r\n            height: 500, // sets the height in pixels of the window.\r\n            left: 0, // left position when the window appears.\r\n            location: 0, // determines whether the address bar is displayed {1 (YES) or 0 (NO)}.\r\n            menubar: 0, // determines whether the menu bar is displayed {1 (YES) or 0 (NO)}.\r\n            resizable: 0, // whether the window can be resized {1 (YES) or 0 (NO)}.\r\n            scrollbars: 0, // determines whether scrollbars appear on the window {1 (YES) or 0 (NO)}.\r\n            status: 0, // whether a status line appears at the bottom of the window {1 (YES) or 0 (NO)}.\r\n            width: 500, // sets the width in pixels of the window.\r\n            windowName: null, // name of window set from the name attribute of the element that invokes the click\r\n            windowURL: null, // url used for the popup\r\n            top: 0, // top position when the window appears.\r\n            toolbar: 0 // determines whether a toolbar is displayed {1 (YES) or 0 (NO)}.\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.element.on('click', $.proxy(this._openPopupWindow, this));\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _openPopupWindow: function (event) {\r\n            var element = $(event.target),\r\n                settings = this.options,\r\n                windowFeatures =\r\n                    'height=' + settings.height +\r\n                        ',width=' + settings.width +\r\n                        ',toolbar=' + settings.toolbar +\r\n                        ',scrollbars=' + settings.scrollbars +\r\n                        ',status=' + settings.status +\r\n                        ',resizable=' + settings.resizable +\r\n                        ',location=' + settings.location +\r\n                        ',menuBar=' + settings.menubar,\r\n                centeredX,\r\n                centeredY;\r\n\r\n            settings.windowName = settings.windowName || element.attr('name');\r\n            settings.windowURL = settings.windowURL || element.attr('href');\r\n\r\n            if (settings.centerBrowser) {\r\n                centeredY = window.screenY + (window.outerHeight / 2 - settings.height / 2);\r\n                centeredX = window.screenX + (window.outerWidth / 2 - settings.width / 2);\r\n                windowFeatures += ',left=' + centeredX + ',top=' + centeredY;\r\n            } else if (settings.centerScreen) {\r\n                centeredY = (screen.height - settings.height) / 2;\r\n                centeredX = (screen.width - settings.width) / 2;\r\n                windowFeatures += ',left=' + centeredX + ',top=' + centeredY;\r\n            } else {\r\n                windowFeatures += ',left=' + settings.left + ',top=' + settings.top;\r\n            }\r\n\r\n            window.open(settings.windowURL, settings.windowName, windowFeatures).focus();\r\n            event.preventDefault();\r\n        }\r\n    });\r\n\r\n    return $.mage.popupWindow;\r\n});\r\n","mage/redirect-url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.redirectUrl', {\r\n        options: {\r\n            event: 'click',\r\n            url: undefined\r\n        },\r\n\r\n        /**\r\n         * This method binds elements found in this widget.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var handlers = {};\r\n\r\n            handlers[this.options.event] = '_onEvent';\r\n            this._on(handlers);\r\n        },\r\n\r\n        /**\r\n         * This method constructs a new widget.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * This method set the url for the redirect.\r\n         * @private\r\n         */\r\n        _onEvent: function () {\r\n            if (this.options.url) {\r\n                location.href = this.options.url;\r\n            } else {\r\n                location.href = this.element.val();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.redirectUrl;\r\n});\r\n","mage/smart-keyboard-handler.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @return {Object}\r\n     * @constructor\r\n     */\r\n    function KeyboardHandler() {\r\n        var body = $('body'),\r\n            focusState = false,\r\n            tabFocusClass = '_keyfocus',\r\n            productsGrid = '[data-container=\"product-grid\"]',\r\n            catalogProductsGrid = $(productsGrid),\r\n            CODE_TAB = 9;\r\n\r\n        /**\r\n         * Handle logic, when onTabKeyPress fired at first.\r\n         * Then it changes state.\r\n         */\r\n        function onFocusInHandler() {\r\n            focusState = true;\r\n            body.addClass(tabFocusClass)\r\n                .off('focusin.keyboardHandler', onFocusInHandler);\r\n        }\r\n\r\n        /**\r\n         * Handle logic to remove state after onTabKeyPress to normal.\r\n         */\r\n        function onClickHandler() {\r\n            focusState = false;\r\n            body.removeClass(tabFocusClass)\r\n                .off('click', onClickHandler);\r\n        }\r\n\r\n        /**\r\n         * Tab key onKeypress handler. Apply main logic:\r\n         *  - call differ actions onTabKeyPress and onClick\r\n         */\r\n        function smartKeyboardFocus() {\r\n            $(document).on('keydown keypress', function (event) {\r\n                if (event.which === CODE_TAB && !focusState) {\r\n                    body\r\n                        .on('focusin.keyboardHandler', onFocusInHandler)\r\n                        .on('click', onClickHandler);\r\n                }\r\n            });\r\n\r\n            // ARIA support for catalog grid products\r\n            if (catalogProductsGrid.length) {\r\n                body.on('focusin.gridProducts', productsGrid, function () {\r\n                    if (body.hasClass(tabFocusClass)) {\r\n                        $(this).addClass('active');\r\n                    }\r\n                });\r\n                body.on('focusout.gridProducts', productsGrid, function () {\r\n                    $(this).removeClass('active');\r\n                });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Attach smart focus on specific element.\r\n         * @param {jQuery} element\r\n         */\r\n        function handleFocus(element) {\r\n            element.on('focusin.emulateTabFocus', function () {\r\n                focusState = true;\r\n                body.addClass(tabFocusClass);\r\n                element.off();\r\n            });\r\n\r\n            element.on('focusout.emulateTabFocus', function () {\r\n                focusState = false;\r\n                body.removeClass(tabFocusClass);\r\n                element.off();\r\n            });\r\n        }\r\n\r\n        return {\r\n            apply: smartKeyboardFocus,\r\n            focus: handleFocus\r\n        };\r\n    }\r\n\r\n    return new KeyboardHandler;\r\n});\r\n","mage/sticky.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.sticky', {\r\n        options: {\r\n            /**\r\n             * Element selector, who's height will be used to restrict the\r\n             * maximum offsetTop position of the stuck element.\r\n             * Default uses document body.\r\n             * @type {String}\r\n             */\r\n            container: '',\r\n\r\n            /**\r\n             * Spacing in pixels above the stuck element\r\n             * @type {Number|Function} Number or Function that will return a Number\r\n             */\r\n            spacingTop: 0,\r\n\r\n            /**\r\n             * Allows postponing sticking, until element will go out of the\r\n             * screen for the number of pixels.\r\n             * @type {Number|Function} Number or Function that will return a Number\r\n             */\r\n            stickAfter: 0,\r\n\r\n            /**\r\n             * CSS class for active sticky state\r\n             * @type {String}\r\n             */\r\n            stickyClass: '_sticky'\r\n        },\r\n\r\n        /**\r\n         * Retrieve option value\r\n         * @param  {String} option\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _getOptionValue: function (option) {\r\n            var value = this.options[option] || 0;\r\n\r\n            if (typeof value === 'function') {\r\n                value = this.options[option]();\r\n            }\r\n\r\n            return value;\r\n        },\r\n\r\n        /**\r\n         * Bind handlers to scroll event\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            $(window).on({\r\n                'scroll': $.proxy(this._stick, this),\r\n                'resize': $.proxy(this.reset, this)\r\n            });\r\n\r\n            this.element.on('dimensionsChanged', $.proxy(this.reset, this));\r\n\r\n            this.reset();\r\n\r\n            // Application of the workaround for IE11 and Edge\r\n            this.normalizeIE11AndEdgeScroll();\r\n        },\r\n\r\n        /**\r\n         * float Block on windowScroll\r\n         * @private\r\n         */\r\n        _stick: function () {\r\n            var offset,\r\n                isStatic,\r\n                stuck,\r\n                stickAfter;\r\n\r\n            isStatic = this.element.css('position') === 'static';\r\n\r\n            if (!isStatic && this.element.is(':visible')) {\r\n                offset = $(document).scrollTop() -\r\n                    this.parentOffset +\r\n                    this._getOptionValue('spacingTop');\r\n\r\n                offset = Math.max(0, Math.min(offset, this.maxOffset));\r\n\r\n                stuck = this.element.hasClass(this.options.stickyClass);\r\n                stickAfter = this._getOptionValue('stickAfter');\r\n\r\n                if (offset && !stuck && offset < stickAfter) {\r\n                    offset = 0;\r\n                }\r\n\r\n                this.element\r\n                    .toggleClass(this.options.stickyClass, offset > 0)\r\n                    .css('top', offset);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Defines maximum offset value of the element.\r\n         * @private\r\n         */\r\n        _calculateDimens: function () {\r\n            var $parent         = this.element.parent(),\r\n                topMargin       = parseInt(this.element.css('margin-top'), 10),\r\n                parentHeight    = $parent.height() - topMargin,\r\n                height          = this.element.innerHeight(),\r\n                maxScroll       = document.body.offsetHeight - window.innerHeight;\r\n\r\n            if (this.options.container.length > 0) {\r\n                maxScroll = $(this.options.container).height();\r\n            }\r\n\r\n            this.parentOffset   = $parent.offset().top + topMargin;\r\n            this.maxOffset      = maxScroll - this.parentOffset;\r\n\r\n            if (this.maxOffset + height >= parentHeight) {\r\n                this.maxOffset = parentHeight - height;\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Facade method that places sticky element where it should be.\r\n         */\r\n        reset: function () {\r\n            this._calculateDimens()\r\n                ._stick();\r\n        },\r\n\r\n        /**\r\n         * Workaround for IE11 and Edge that solves the IE known rendering issue\r\n         * that prevents sticky element from jumpy movement on scrolling the page.\r\n         *\r\n         * Alternatively, undesired jumpy movement can be eliminated by changing the setting in IE:\r\n         * Settings > Internet options > Advanced tab > inside 'Browsing' item > set 'Use smooth scrolling' to False\r\n         */\r\n        normalizeIE11AndEdgeScroll: function () {\r\n            if (navigator.userAgent.match(/Trident.*rv[ :]*11\\.|Edge\\//)) {\r\n                document.body.addEventListener('mousewheel', function () {\r\n                    event.preventDefault();\r\n                    window.scrollTo(0, window.pageYOffset - event.wheelDelta);\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.sticky;\r\n});\r\n","mage/storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery', 'mage/url'], function ($, urlBuilder) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Perform asynchronous GET request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @param {Object} headers\r\n         * @returns {Deferred}\r\n         */\r\n        get: function (url, global, contentType, headers) {\r\n            headers = headers || {};\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'GET',\r\n                global: global,\r\n                contentType: contentType,\r\n                headers: headers\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous POST request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @param {Object} headers\r\n         * @returns {Deferred}\r\n         */\r\n        post: function (url, data, global, contentType, headers) {\r\n            headers = headers || {};\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'POST',\r\n                data: data,\r\n                global: global,\r\n                contentType: contentType,\r\n                headers: headers\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous PUT request to server.\r\n         * @param {String} url\r\n         * @param {String} data\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @param {Object} headers\r\n         * @returns {Deferred}\r\n         */\r\n        put: function (url, data, global, contentType, headers) {\r\n            var ajaxSettings = {};\r\n\r\n            headers = headers || {};\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n            ajaxSettings.url = urlBuilder.build(url);\r\n            ajaxSettings.type = 'PUT';\r\n            ajaxSettings.data = data;\r\n            ajaxSettings.global = global;\r\n            ajaxSettings.contentType = contentType;\r\n            ajaxSettings.headers = headers;\r\n\r\n            return $.ajax(ajaxSettings);\r\n        },\r\n\r\n        /**\r\n         * Perform asynchronous DELETE request to server.\r\n         * @param {String} url\r\n         * @param {Boolean} global\r\n         * @param {String} contentType\r\n         * @param {Object} headers\r\n         * @returns {Deferred}\r\n         */\r\n        delete: function (url, global, contentType, headers) {\r\n            headers = headers || {};\r\n            global = global === undefined ? true : global;\r\n            contentType = contentType || 'application/json';\r\n\r\n            return $.ajax({\r\n                url: urlBuilder.build(url),\r\n                type: 'DELETE',\r\n                global: global,\r\n                contentType: contentType,\r\n                headers: headers\r\n            });\r\n        }\r\n    };\r\n});\r\n","mage/tabs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/ui-modules/widgets/tabs',\r\n    'mage/mage',\r\n    'mage/collapsible'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.tabs', {\r\n        options: {\r\n            active: 0,\r\n            disabled: [],\r\n            openOnFocus: true,\r\n            collapsible: false,\r\n            collapsibleElement: '[data-role=collapsible]',\r\n            header: '[data-role=title]',\r\n            content: '[data-role=content]',\r\n            trigger: '[data-role=trigger]',\r\n            closedState: null,\r\n            openedState: null,\r\n            disabledState: null,\r\n            ajaxUrlElement: '[data-ajax=true]',\r\n            ajaxContent: false,\r\n            loadingClass: null,\r\n            saveState: false,\r\n            animate: false,\r\n            icons: {\r\n                activeHeader: null,\r\n                header: null\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if (typeof this.options.disabled === 'string') {\r\n                this.options.disabled = this.options.disabled.split(' ').map(function (item) {\r\n                    return parseInt(item, 10);\r\n                });\r\n            }\r\n            this._processPanels();\r\n            this._handleDeepLinking();\r\n            this._processTabIndex();\r\n            this._closeOthers();\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _destroy: function () {\r\n            $.each(this.collapsibles, function () {\r\n                $(this).collapsible('destroy');\r\n            });\r\n        },\r\n\r\n        /**\r\n         * If deep linking is used, all sections must be closed but the one that contains the anchor.\r\n         * @private\r\n         */\r\n        _handleDeepLinking: function () {\r\n            var self = this,\r\n                anchor = window.location.hash,\r\n                isValid = $.mage.isValidSelector(anchor),\r\n                anchorId = anchor.replace('#', '');\r\n\r\n            if (anchor && isValid) {\r\n                $.each(self.contents, function (i) {\r\n                    if ($(this).attr('id') === anchorId || $(this).find('#' + anchorId).length) {\r\n                        self.collapsibles.not(self.collapsibles.eq(i)).collapsible('forceDeactivate');\r\n\r\n                        return false;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * When the widget gets instantiated, the first tab that is not disabled receive focusable property\r\n         * All tabs receive tabIndex 0\r\n         * @private\r\n         */\r\n        _processTabIndex: function () {\r\n            var self = this;\r\n\r\n            self.triggers.attr('tabIndex', 0);\r\n            $.each(this.collapsibles, function (i) {\r\n                self.triggers.attr('tabIndex', 0);\r\n                self.triggers.eq(i).attr('tabIndex', 0);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prepare the elements for instantiating the collapsible widget\r\n         * @private\r\n         */\r\n        _processPanels: function () {\r\n            var isNotNested = this._isNotNested.bind(this);\r\n\r\n            this.contents = this.element\r\n                .find(this.options.content)\r\n                .filter(isNotNested);\r\n\r\n            this.collapsibles =  this.element\r\n                .find(this.options.collapsibleElement)\r\n                .filter(isNotNested);\r\n\r\n            this.collapsibles\r\n                .attr('role', 'presentation')\r\n                .parent()\r\n                .attr('role', 'tablist');\r\n\r\n            this.headers = this.element\r\n                .find(this.options.header)\r\n                .filter(isNotNested);\r\n\r\n            if (this.headers.length === 0) {\r\n                this.headers = this.collapsibles;\r\n            }\r\n            this.triggers = this.element\r\n                .find(this.options.trigger)\r\n                .filter(isNotNested);\r\n\r\n            if (this.triggers.length === 0) {\r\n                this.triggers = this.headers;\r\n            }\r\n            this._callCollapsible();\r\n        },\r\n\r\n        /**\r\n         * Checks if element is not in nested container to keep the correct scope of collapsible\r\n         * @param {Number} index\r\n         * @param {HTMLElement} element\r\n         * @private\r\n         * @return {Boolean}\r\n         */\r\n        _isNotNested: function (index, element) {\r\n            var parentContent = $(element).parents(this.options.content);\r\n\r\n            return !parentContent.length || !this.element.find(parentContent).length;\r\n        },\r\n\r\n        /**\r\n         * Setting the disabled and active tabs and calling instantiation of collapsible\r\n         * @private\r\n         */\r\n        _callCollapsible: function () {\r\n            var self = this,\r\n                disabled = false,\r\n                active = false;\r\n\r\n            $.each(this.collapsibles, function (i) {\r\n                disabled = active = false;\r\n\r\n                if ($.inArray(i, self.options.disabled) !== -1) {\r\n                    disabled = true;\r\n                }\r\n\r\n                if (i === self.options.active) {\r\n                    active = true;\r\n                }\r\n                self._instantiateCollapsible(this, i, active, disabled);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Instantiate collapsible.\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Number} index\r\n         * @param {*} active\r\n         * @param {*} disabled\r\n         * @private\r\n         */\r\n        _instantiateCollapsible: function (element, index, active, disabled) {\r\n            $(element).collapsible(\r\n                $.extend({}, this.options, {\r\n                    active: active,\r\n                    disabled: disabled,\r\n                    header: this.headers.eq(index),\r\n                    content: this.contents.eq(index),\r\n                    trigger: this.triggers.eq(index)\r\n                })\r\n            );\r\n        },\r\n\r\n        /**\r\n         * Adding callback to close others tabs when one gets opened\r\n         * @private\r\n         */\r\n        _closeOthers: function () {\r\n            var self = this;\r\n\r\n            $.each(this.collapsibles, function () {\r\n                $(this).on('beforeOpen', function () {\r\n                    self.collapsibles.not(this).collapsible('forceDeactivate');\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        activate: function (index) {\r\n            this._toggleActivate('activate', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        deactivate: function (index) {\r\n            this._toggleActivate('deactivate', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleActivate: function (action, index) {\r\n            this.collapsibles.eq(index).collapsible(action);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        disable: function (index) {\r\n            this._toggleEnable('disable', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} index\r\n         */\r\n        enable: function (index) {\r\n            this._toggleEnable('enable', index);\r\n        },\r\n\r\n        /**\r\n         * @param {*} action\r\n         * @param {*} index\r\n         * @private\r\n         */\r\n        _toggleEnable: function (action, index) {\r\n            var self = this;\r\n\r\n            if (Array.isArray(index)) {\r\n                $.each(index, function () {\r\n                    self.collapsibles.eq(this).collapsible(action);\r\n                });\r\n            } else if (index === undefined) {\r\n                this.collapsibles.collapsible(action);\r\n            } else {\r\n                this.collapsibles.eq(index).collapsible(action);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _keydown: function (event) {\r\n            var self = this,\r\n                keyCode, toFocus, toFocusIndex, enabledTriggers, length, currentIndex, nextToFocus;\r\n\r\n            if (event.altKey || event.ctrlKey) {\r\n                return;\r\n            }\r\n            keyCode = $.ui.keyCode;\r\n            toFocus = false;\r\n            enabledTriggers = [];\r\n\r\n            $.each(this.triggers, function () {\r\n                if (!self.collapsibles.eq(self.triggers.index($(this))).collapsible('option', 'disabled')) {\r\n                    enabledTriggers.push(this);\r\n                }\r\n            });\r\n            length = $(enabledTriggers).length;\r\n            currentIndex = $(enabledTriggers).index(event.target);\r\n\r\n            /**\r\n             * @param {String} direction\r\n             * @return {*}\r\n             */\r\n            nextToFocus = function (direction) {\r\n                if (length > 0) {\r\n                    if (direction === 'right') {\r\n                        toFocusIndex = (currentIndex + 1) % length;\r\n                    } else {\r\n                        toFocusIndex = (currentIndex + length - 1) % length;\r\n                    }\r\n\r\n                    return enabledTriggers[toFocusIndex];\r\n                }\r\n\r\n                return event.target;\r\n            };\r\n\r\n            switch (event.keyCode) {\r\n                case keyCode.RIGHT:\r\n                case keyCode.DOWN:\r\n                    toFocus = nextToFocus('right');\r\n                    break;\r\n\r\n                case keyCode.LEFT:\r\n                case keyCode.UP:\r\n                    toFocus = nextToFocus('left');\r\n                    break;\r\n\r\n                case keyCode.HOME:\r\n                    toFocus = enabledTriggers[0];\r\n                    break;\r\n\r\n                case keyCode.END:\r\n                    toFocus = enabledTriggers[length - 1];\r\n                    break;\r\n            }\r\n\r\n            if (toFocus) {\r\n                toFocusIndex = this.triggers.index(toFocus);\r\n                $(event.target).attr('tabIndex', -1);\r\n                $(toFocus).attr('tabIndex', 0);\r\n                toFocus.focus();\r\n\r\n                if (this.options.openOnFocus) {\r\n                    this.activate(toFocusIndex);\r\n                }\r\n                event.preventDefault();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            var events = {\r\n                keydown: '_keydown'\r\n            };\r\n\r\n            this._off(this.triggers);\r\n            this._on(this.triggers, events);\r\n        }\r\n    });\r\n\r\n    return $.mage.tabs;\r\n});\r\n","mage/template.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if provided string is a valid DOM selector.\r\n     *\r\n     * @param {String} selector - Selector to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isSelector(selector) {\r\n        try {\r\n            document.querySelector(selector);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unescapes characters used in underscore templates.\r\n     *\r\n     * @param {String} str - String to be processed.\r\n     * @returns {String}\r\n     */\r\n    function unescape(str) {\r\n        return str.replace(/&lt;%|%3C%/g, '<%').replace(/%&gt;|%%3E/g, '%>');\r\n    }\r\n\r\n    /**\r\n     * If 'tmpl' is a valid selector, returns target node's innerHTML if found.\r\n     * Else, returns empty string and emits console warning.\r\n     * If 'tmpl' is not a selector, returns 'tmpl' as is.\r\n     *\r\n     * @param {String} tmpl\r\n     * @returns {String}\r\n     */\r\n    function getTmplString(tmpl) {\r\n        if (isSelector(tmpl)) {\r\n            tmpl = document.querySelector(tmpl);\r\n\r\n            if (tmpl) {\r\n                tmpl = tmpl.innerHTML.trim();\r\n            } else {\r\n                console.warn('No template was found by selector: ' + tmpl);\r\n\r\n                tmpl = '';\r\n            }\r\n        }\r\n\r\n        return unescape(tmpl);\r\n    }\r\n\r\n    /**\r\n     * Compiles or renders template provided either\r\n     * by selector or by the template string.\r\n     *\r\n     * @param {String} tmpl - Template string or selector.\r\n     * @param {(Object|Array|Function)} [data] - Data object with which to render template.\r\n     * @returns {String|Function}\r\n     */\r\n    return function (tmpl, data) {\r\n        var render;\r\n\r\n        tmpl   = getTmplString(tmpl);\r\n        render = _.template(tmpl);\r\n\r\n        return !_.isUndefined(data) ?\r\n            render(data) :\r\n            render;\r\n    };\r\n});\r\n","mage/terms.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @param {*} args\r\n     */\r\n    $.fn.terms = function (args) {\r\n\r\n        // default\r\n        var defaults = {\r\n                start: 0,\r\n                wrapper: '',\r\n                showAnchor: '',\r\n                effects: 'slide'\r\n            },\r\n            options = $.extend(defaults, args);\r\n\r\n        this.each(function () {\r\n            var obj = $(this),\r\n                wrapper = options.wrapper !== '' ? '> ' + options.wrapper : '',\r\n                switches = $(wrapper + '> [data-section=\"title\"] > [data-toggle=\"switch\"]', obj),\r\n                terms = $(wrapper + '> [data-section=\"content\"]', obj),\r\n                t = switches.length,\r\n                marginTop = $(switches[0]).closest('[data-section=\"title\"]').css('position') == 'absolute' ? 0 : null, //eslint-disable-line\r\n                title,\r\n                current,\r\n\r\n                /**\r\n                 * @param {*} item\r\n                 */\r\n                showItem = function (item) {\r\n                    if (item != current && !$(switches[item]).closest('[data-section=\"title\"]').hasClass('disabled')) { //eslint-disable-line\r\n                        $(switches).closest('[data-section=\"title\"]').removeClass('active');\r\n\r\n                        if (options.wrapper !== '') {\r\n                            $(switches).parent().parent().removeClass('active');\r\n                        }\r\n                        $(terms).removeClass('active');\r\n                        $(switches[item]).closest('[data-section=\"title\"]').addClass('active');\r\n\r\n                        if (options.wrapper !== '') {\r\n                            $(switches[current]).parent().parent().addClass('active');\r\n                        }\r\n                        $(terms[item]).addClass('active');\r\n                        current = item;\r\n                    } else if (\r\n                        // Check if this is accordion width as criteria for now\r\n                        (obj.attr('data-sections') == 'accordion' || $(switches[item]).closest('[data-section=\"title\"]').css('width') == obj.css('width')) && //eslint-disable-line\r\n                        item == current && !$(switches[item]).closest('[data-section=\"title\"]').hasClass('disabled') //eslint-disable-line\r\n                    ) {\r\n                        $(switches).closest('[data-section=\"title\"]').removeClass('active');\r\n\r\n                        if (options.wrapper !== '') {\r\n                            $(switches).parent().parent().removeClass('active');\r\n                        }\r\n                        $(terms).removeClass('active');\r\n                        current = -1;\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Init.\r\n                 */\r\n                init = function () {\r\n                    var linksList, i, classes, dataSection, itemHref, itemClass, fromUrl;\r\n\r\n                    if (t > 0) {\r\n                        if ($(switches[0]).closest('[data-section=\"title\"]').css('display') == 'table-cell') { //eslint-disable-line\r\n                            obj.addClass('adjusted');\r\n\r\n                            if (obj[0].tagName == 'DL') { //eslint-disable-line eqeqeq, max-depth\r\n                                linksList = $('<dd>');\r\n                            } else {\r\n                                linksList = $('<div>');\r\n                            }\r\n                            linksList.addClass('sections-nav');\r\n                            obj.prepend(linksList);\r\n\r\n                            for (i = 0; i < t; i++) { //eslint-disable-line max-depth\r\n                                title = $(switches[i]).html();\r\n                                classes = $(switches[i]).closest('[data-section=\"title\"]').attr('class');\r\n                                dataSection = $(switches[i]).closest('[data-section=\"title\"]').attr('data-section');\r\n                                itemHref = $(switches[i]).attr('href');\r\n                                itemClass = $(switches[i]).attr('class');\r\n                                $(switches[i]).parent('[data-section=\"title\"]').hide();\r\n                                switches[i] = $('<a/>', {\r\n                                    href: itemHref,\r\n                                    'class': itemClass,\r\n                                    html: title\r\n                                }).appendTo(linksList);\r\n                                $(switches[i]).wrap(\r\n                                    '<strong class=\"' + classes + '\" data-section=\"' + dataSection + '\" />'\r\n                                );\r\n                            }\r\n                        }\r\n                        $(switches).each(function (ind, el) {\r\n                            $(el).on('click', function (event) {\r\n                                event.preventDefault();\r\n                                showItem(ind);\r\n                            });\r\n\r\n                            if (marginTop !== null) {\r\n                                $(el).closest('[data-section=\"title\"]').css({\r\n                                    'top': marginTop + 'px'\r\n                                });\r\n                                marginTop += $(el).closest('[data-section=\"title\"]').outerHeight(true);\r\n                                obj.css({\r\n                                    'min-height': marginTop + 'px'\r\n                                });\r\n                            }\r\n                        });\r\n\r\n                        fromUrl = false;\r\n\r\n                        if (window.location.hash.length > 0) {\r\n                            $(terms).each(function (ind, el) {\r\n                                if ('#info-' + $(el).attr('id') == window.location.hash) { //eslint-disable-line eqeqeq\r\n                                    showItem(ind);\r\n                                    $('html, body').animate({\r\n                                        scrollTop: $(switches[ind]).offset().top\r\n                                    }, 700);\r\n                                    fromUrl = true;\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        if (fromUrl === false) {\r\n                            if (options.start % 1 === 0) { //eslint-disable-line max-depth\r\n                                current = options.start + 1;\r\n                                showItem(options.start);\r\n                            } else {\r\n                                $(terms).each(function (ind, el) {\r\n                                    if ($(el).attr('id') == options.start) { //eslint-disable-line eqeqeq\r\n                                        current = ind + 1;\r\n                                        showItem(ind);\r\n                                        $('html, body').animate({\r\n                                            scrollTop: $(switches[ind]).offset().top\r\n                                        }, 700);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n\r\n            init();\r\n        });\r\n    };\r\n\r\n    return function (data, el) {\r\n        $(el).terms(data);\r\n    };\r\n});\r\n","mage/toggle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.toggleAdvanced', {\r\n        options: {\r\n            baseToggleClass: 'active' // Class used to be toggled on clicked element\r\n        },\r\n\r\n        /**\r\n         * Toggle creation\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.beforeCreate();\r\n            this._bindCore();\r\n            this.afterCreate();\r\n        },\r\n\r\n        /**\r\n         *  Core bound events & setup\r\n         * @protected\r\n         */\r\n        _bindCore: function () {\r\n            var widget = this;\r\n\r\n            this.element.on('click', $.proxy(function (e) {\r\n                widget._onClick();\r\n                e.preventDefault();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Binding Click event\r\n         *\r\n         * @protected\r\n         */\r\n        _onClick: function () {\r\n            this._prepareOptions();\r\n            this._toggleSelectors();\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         */\r\n        _prepareOptions: function () {\r\n            this.options.baseToggleClass = this.element.data('base-toggle-class') ?\r\n                this.element.data('base-toggle-class') : this.options.baseToggleClass;\r\n        },\r\n\r\n        /**\r\n         * Method responsible for hiding and revealing specified DOM elements\r\n         * Toggle the class on clicked element\r\n         *\r\n         * @protected\r\n         */\r\n        _toggleSelectors: function () {\r\n            this.element.toggleClass(this.options.baseToggleClass);\r\n        },\r\n\r\n        /**\r\n         * Method used to inject 3rd party functionality before create\r\n         * @public\r\n         */\r\n        beforeCreate: function () {},\r\n\r\n        /**\r\n         * Method used to inject 3rd party functionality after create\r\n         * @public\r\n         */\r\n        afterCreate: function () {}\r\n    });\r\n\r\n    // Extension for mage.toggle - Adding selectors support for other DOM elements we wish to toggle\r\n    $.widget('mage.toggleAdvanced', $.mage.toggleAdvanced, {\r\n\r\n        options: {\r\n            selectorsToggleClass: 'hidden',    // Class used to be toggled on selectors DOM elements\r\n            toggleContainers: null\r\n        },\r\n\r\n        /**\r\n         * Method responsible for hiding and revealing specified DOM elements\r\n         * If data-toggle-selectors attribute is present - toggle will be done on these selectors\r\n         * Otherwise we toggle the class on clicked element\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _toggleSelectors: function () {\r\n            this._super();\r\n\r\n            if (this.options.toggleContainers) {\r\n                $(this.options.toggleContainers).toggleClass(this.options.selectorsToggleClass);\r\n            } else {\r\n                this.element.toggleClass(this.options.baseToggleClass);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _prepareOptions: function () {\r\n            this.options.selectorsToggleClass = this.element.data('selectors-toggle-class') ?\r\n                this.element.data('selectors-toggle-class') : this.options.selectorsToggleClass;\r\n            this.options.toggleContainers = this.element.data('toggle-selectors') ?\r\n                this.element.data('toggle-selectors') : this.options.toggleContainers;\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    // Extension for mage.toggle - Adding label toggle\r\n    $.widget('mage.toggleAdvanced', $.mage.toggleAdvanced, {\r\n\r\n        options: {\r\n            newLabel: null,             // Text of the new label to be used on toggle\r\n            curLabel: null,             // Text of the old label to be used on toggle\r\n            currentLabelElement: null   // Current label container\r\n        },\r\n\r\n        /**\r\n         * Binding Click event\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _onClick: function () {\r\n            this._super();\r\n            this._toggleLabel();\r\n        },\r\n\r\n        /**\r\n         * Method responsible for replacing clicked element labels\r\n         * @protected\r\n         */\r\n        _toggleLabel: function () {\r\n            var cachedLabel, currentLabelSelector;\r\n\r\n            if (this.options.newLabel) {\r\n                cachedLabel = this.options.newLabel;\r\n                currentLabelSelector = this.options.currentLabelElement ?\r\n                        $(this.options.currentLabelElement) : this.element;\r\n\r\n                this.element.data('toggle-label', this.options.curLabel);\r\n                currentLabelSelector.html(this.options.newLabel);\r\n\r\n                this.options.curLabel = this.options.newLabel;\r\n                this.options.newLabel = cachedLabel;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Method used to look for data attributes to override default options\r\n         *\r\n         * @protected\r\n         * @override\r\n         */\r\n        _prepareOptions: function () {\r\n            this.options.newLabel = this.element.data('toggle-label') ?\r\n                this.element.data('toggle-label') : this.options.newLabel;\r\n\r\n            this.options.currentLabelElement = this.element.data('current-label-el') ?\r\n                this.element.data('current-label-el') : this.options.currentLabelElement;\r\n\r\n            if (!this.options.currentLabelElement) {\r\n                this.options.currentLabelElement = this.element;\r\n            }\r\n\r\n            this.options.curLabel = $(this.options.currentLabelElement).html();\r\n\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    return $.mage.toggleAdvanced;\r\n});\r\n","mage/tooltip.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @deprecated since version 2.2.0\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/tooltip'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    //Widget Wrapper\r\n    $.widget('mage.tooltip', $.ui.tooltip, {});\r\n\r\n    return $.mage.tooltip;\r\n});\r\n","mage/touch-slider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'jquery-ui-modules/slider'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Adds support for touch events for regular jQuery UI slider.\r\n     */\r\n    $.widget('mage.touchSlider', $.ui.slider, {\r\n\r\n        /**\r\n         * Creates instance of widget.\r\n         *\r\n         * @override\r\n         */\r\n        _create: function () {\r\n            _.bindAll(\r\n                this,\r\n                '_mouseDown',\r\n                '_mouseMove',\r\n                '_onTouchEnd'\r\n            );\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * Initializes mouse events on element.\r\n         * @override\r\n         */\r\n        _mouseInit: function () {\r\n            var result = this._superApply(arguments);\r\n\r\n            this.element\r\n                .off('mousedown.' + this.widgetName)\r\n                .on('touchstart.' + this.widgetName, this._mouseDown);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Elements' 'mousedown' event handler polyfill.\r\n         * @override\r\n         */\r\n        _mouseDown: function (event) {\r\n            var prevDelegate = this._mouseMoveDelegate,\r\n                result;\r\n\r\n            event = this._touchToMouse(event);\r\n            result = this._super(event);\r\n\r\n            if (prevDelegate === this._mouseMoveDelegate) {\r\n                return result;\r\n            }\r\n\r\n            $(document)\r\n                .off('mousemove.' + this.widgetName)\r\n                .off('mouseup.' + this.widgetName);\r\n\r\n            $(document)\r\n                .on('touchmove.' + this.widgetName, this._mouseMove)\r\n                .on('touchend.' + this.widgetName, this._onTouchEnd)\r\n                .on('tochleave.' + this.widgetName, this._onTouchEnd);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Documents' 'mousemove' event handler polyfill.\r\n         *\r\n         * @override\r\n         * @param {Event} event - Touch event object.\r\n         */\r\n        _mouseMove: function (event) {\r\n            event = this._touchToMouse(event);\r\n\r\n            return this._super(event);\r\n        },\r\n\r\n        /**\r\n         * Documents' 'touchend' event handler.\r\n         */\r\n        _onTouchEnd: function (event) {\r\n            $(document).trigger('mouseup');\r\n\r\n            return this._mouseUp(event);\r\n        },\r\n\r\n        /**\r\n         * Removes previously assigned touch handlers.\r\n         *\r\n         * @override\r\n         */\r\n        _mouseUp: function () {\r\n            this._removeTouchHandlers();\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * Removes previously assigned touch handlers.\r\n         *\r\n         * @override\r\n         */\r\n        _mouseDestroy: function () {\r\n            this._removeTouchHandlers();\r\n\r\n            return this._superApply(arguments);\r\n        },\r\n\r\n        /**\r\n         * Removes touch events from document object.\r\n         */\r\n        _removeTouchHandlers: function () {\r\n            $(document)\r\n                .off('touchmove.' + this.widgetName)\r\n                .off('touchend.' + this.widgetName)\r\n                .off('touchleave.' + this.widgetName);\r\n        },\r\n\r\n        /**\r\n         * Adds properties to the touch event to mimic mouse event.\r\n         *\r\n         * @param {Event} event - Touch event object.\r\n         * @returns {Event}\r\n         */\r\n        _touchToMouse: function (event) {\r\n            var orig = event.originalEvent,\r\n                touch = orig.touches[0];\r\n\r\n            return _.extend(event, {\r\n                which:      1,\r\n                pageX:      touch.pageX,\r\n                pageY:      touch.pageY,\r\n                clientX:    touch.clientX,\r\n                clientY:    touch.clientY,\r\n                screenX:    touch.screenX,\r\n                screenY:    touch.screenY\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.touchSlider;\r\n});\r\n","mage/translate-inline.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'mage/utils/misc',\r\n    'mage/translate',\r\n    'jquery-ui-modules/dialog'\r\n], function ($, mageTemplate, miscUtils) {\r\n    'use strict';\r\n\r\n    $.widget('mage.translateInline', $.ui.dialog, {\r\n        options: {\r\n            translateForm: {\r\n                template: '#translate-form-template',\r\n                data: {\r\n                    id: 'translate-inline-form',\r\n                    message: 'Please refresh the page to see your changes after submitting this form. ' +\r\n                        'Note: browser cache refresh may be required'\r\n                }\r\n            },\r\n            autoOpen: false,\r\n            translateArea: null,\r\n            modal: true,\r\n            dialogClass: 'popup-window window-translate-inline',\r\n            width: '75%',\r\n            title: $.mage.__('Translate'),\r\n            height: 470,\r\n            position: {\r\n                my: 'left top',\r\n                at: 'center top',\r\n                of: 'body'\r\n            },\r\n            buttons: [{\r\n                text: $.mage.__('Submit'),\r\n                'class': 'action-primary',\r\n\r\n                /**\r\n                 * Click\r\n                 */\r\n                click: function () {\r\n                    $(this).translateInline('submit');\r\n                }\r\n            },\r\n            {\r\n                text: $.mage.__('Close'),\r\n                'class': 'action-close',\r\n\r\n                /**\r\n                 * Click.\r\n                 */\r\n                click: function () {\r\n                    $(this).translateInline('close');\r\n                }\r\n            }],\r\n\r\n            /**\r\n             * Open.\r\n             */\r\n            open: function () {\r\n                var $uiDialog = $(this).closest('.ui-dialog'),\r\n                    topMargin = $uiDialog.children('.ui-dialog-titlebar').outerHeight() + 45;\r\n\r\n                $uiDialog\r\n                    .addClass('ui-dialog-active')\r\n                    .css('margin-top', topMargin);\r\n            },\r\n\r\n            /**\r\n             * Close.\r\n             */\r\n            close: function () {\r\n                $(this).closest('.ui-dialog').removeClass('ui-dialog-active');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Translate Inline creation\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            var $translateArea = $(this.options.translateArea);\r\n\r\n            if (!$translateArea.length) {\r\n                $translateArea = $('body');\r\n            }\r\n            $translateArea.on('edit.editTrigger', $.proxy(this._onEdit, this));\r\n\r\n            this.tmpl = mageTemplate(this.options.translateForm.template);\r\n\r\n            this._super();\r\n        },\r\n\r\n        /**\r\n         * @param {*} templateData\r\n         * @return {*|jQuery|HTMLElement}\r\n         * @private\r\n         */\r\n        _prepareContent: function (templateData) {\r\n            var data = $.extend({\r\n                items: templateData,\r\n                escape: miscUtils.escape\r\n            }, this.options.translateForm.data);\r\n\r\n            this.data = data;\r\n\r\n            return $(this.tmpl({\r\n                data: data\r\n            }));\r\n        },\r\n\r\n        /**\r\n         * Render translation form and open dialog\r\n         * @param {Object} e - object\r\n         * @protected\r\n         */\r\n        _onEdit: function (e) {\r\n            this.target = e.target;\r\n            this.element.html(this._prepareContent($(e.target).data('translate')));\r\n            this.open(e);\r\n        },\r\n\r\n        /**\r\n         * Submit.\r\n         */\r\n        submit: function () {\r\n            if (this.formIsSubmitted) {\r\n                return;\r\n            }\r\n            this._formSubmit();\r\n        },\r\n\r\n        /**\r\n         * Send ajax request on form submit\r\n         * @protected\r\n         */\r\n        _formSubmit: function () {\r\n            var parameters = $.param({\r\n                    area: this.options.area\r\n                }) + '&' + $('#' + this.options.translateForm.data.id).serialize();\r\n\r\n            this.formIsSubmitted = true;\r\n\r\n            $.ajax({\r\n                url: this.options.ajaxUrl,\r\n                type: 'POST',\r\n                data: parameters,\r\n                loaderContext: this.element,\r\n                showLoader: true\r\n            }).always($.proxy(this._formSubmitComplete, this));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} response\r\n         * @private\r\n         */\r\n        _formSubmitComplete: function (response) {\r\n            var responseJSON = response.responseJSON || response;\r\n\r\n            this.close();\r\n            this.formIsSubmitted = false;\r\n            $.mage.translate.add(responseJSON);\r\n            this._updatePlaceholder(responseJSON[this.data.items[0].original]);\r\n        },\r\n\r\n        /**\r\n         * @param {*} newValue\r\n         * @private\r\n         */\r\n        _updatePlaceholder: function (newValue) {\r\n            var $target = $(this.target),\r\n                translateObject = $target.data('translate')[0];\r\n\r\n            translateObject.shown = newValue;\r\n            translateObject.translated = newValue;\r\n            $.mage.translate.add(this.data.items[0].original, newValue);\r\n\r\n            $target.html(newValue);\r\n        },\r\n\r\n        /**\r\n         * Destroy translateInline\r\n         */\r\n        destroy: function () {\r\n            this.element.off('.editTrigger');\r\n            this._super();\r\n        }\r\n    });\r\n\r\n    return $.mage.translateInline;\r\n});\r\n","mage/translate.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'mageTranslationDictionary',\r\n    'underscore'\r\n], function ($, mage, dictionary, _) {\r\n    'use strict';\r\n\r\n    $.extend(true, $, {\r\n        mage: {\r\n            translate: (function () {\r\n                /**\r\n                 * Key-value translations storage\r\n                 * @type {Object}\r\n                 * @private\r\n                 */\r\n                var _data = dictionary;\r\n\r\n                return {\r\n                    /**\r\n                     * Add new translation (two string parameters) or several translations (object)\r\n                     */\r\n                    add: function () {\r\n                        if (arguments.length > 1) {\r\n                            _data[arguments[0]] = arguments[1];\r\n                        } else if (typeof arguments[0] === 'object') {\r\n                            $.extend(_data, arguments[0]);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Make a translation with parsing (to handle case when _data represents tuple)\r\n                     * @param {String} text\r\n                     * @return {String}\r\n                     */\r\n                    translate: function (text) {\r\n                        return typeof _data[text] !== 'undefined' ? _data[text] : text;\r\n                    }\r\n                };\r\n            }())\r\n        }\r\n    });\r\n    $.mage.__ = $.proxy($.mage.translate.translate, $.mage.translate);\r\n\r\n    // Provide i18n wrapper to be used in underscore templates for translation\r\n    _.extend(_, {\r\n        /**\r\n         * Make a translation using $.mage.__\r\n         *\r\n         * @param {String} text\r\n         * @return {String}\r\n         */\r\n        i18n: function (text) {\r\n            return $.mage.__(text);\r\n        }\r\n    });\r\n\r\n    return $.mage.__;\r\n});\r\n","mage/trim-input.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.trimInput', {\r\n        options: {\r\n            cache: {}\r\n        },\r\n\r\n        /**\r\n         * Widget initialization\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.options.cache.input = $(this.element);\r\n            this._bind();\r\n        },\r\n\r\n        /**\r\n         * Event binding, will monitor change, keyup and paste events.\r\n         * @private\r\n         */\r\n        _bind: function () {\r\n            if (this.options.cache.input.length) {\r\n                this._on(this.options.cache.input, {\r\n                    'change': this._trimInput,\r\n                    'keyup': this._trimInput,\r\n                    'paste': this._trimInput\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Trim value\r\n         * @private\r\n         */\r\n        _trimInput: function () {\r\n            // Safari caret position workaround: storing carter position\r\n            var caretStart, caretEnd, input;\r\n\r\n            caretStart = this.options.cache.input.get(0).selectionStart;\r\n            caretEnd = this.options.cache.input.get(0).selectionEnd;\r\n\r\n            input = this._getInputValue().trim();\r\n\r\n            this.options.cache.input.val(input);\r\n\r\n            // Safari caret position workaround: setting caret position to previously stored values\r\n            if (caretStart !== null && caretEnd !== null) {\r\n                this.options.cache.input.get(0).setSelectionRange(caretStart, caretEnd);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Get input value\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _getInputValue: function () {\r\n            return this.options.cache.input.val();\r\n        }\r\n    });\r\n\r\n    return $.mage.trimInput;\r\n});\r\n","mage/url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable strict */\r\ndefine([], function () {\r\n    var baseUrl = '';\r\n\r\n    return {\r\n        /**\r\n         * @param {String} url\r\n         */\r\n        setBaseUrl: function (url) {\r\n            baseUrl = url;\r\n        },\r\n\r\n        /**\r\n         * @param {String} path\r\n         * @return {*}\r\n         */\r\n        build: function (path) {\r\n            if (path.indexOf(baseUrl) !== -1) {\r\n                return path;\r\n            }\r\n\r\n            return baseUrl + path;\r\n        }\r\n    };\r\n});\r\n","mage/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'moment',\r\n    'mageUtils',\r\n    'jquery-ui-modules/widget',\r\n    'jquery/validate',\r\n    'mage/translate'\r\n], function ($, moment, utils) {\r\n    'use strict';\r\n\r\n    var creditCartTypes, rules, showLabel, originValidateDelegate;\r\n\r\n    $.extend(true, $, {\r\n        // @TODO: Move methods 'isEmpty', 'isEmptyNoTrim', 'parseNumber', 'stripHtml' in file with utility functions\r\n        mage: {\r\n            /**\r\n             * Check if string is empty with trim\r\n             * @param {String} value\r\n             */\r\n            isEmpty: function (value) {\r\n                return value === '' || value === undefined ||\r\n                    value == null || value.length === 0 || /^\\s+$/.test(value);\r\n            },\r\n\r\n            /**\r\n             * Check if string is empty no trim\r\n             * @param {String} value\r\n             */\r\n            isEmptyNoTrim: function (value) {\r\n                return value === '' || value == null || value.length === 0;\r\n            },\r\n\r\n            /**\r\n             * Checks if {value} is between numbers {from} and {to}\r\n             * @param {String} value\r\n             * @param {String} from\r\n             * @param {String} to\r\n             * @returns {Boolean}\r\n             */\r\n            isBetween: function (value, from, to) {\r\n                return ($.mage.isEmpty(from) || value >= $.mage.parseNumber(from)) &&\r\n                    ($.mage.isEmpty(to) || value <= $.mage.parseNumber(to));\r\n            },\r\n\r\n            /**\r\n             * Parse price string\r\n             * @param {String} value\r\n             */\r\n            parseNumber: function (value) {\r\n                var isDot, isComa;\r\n\r\n                if (typeof value !== 'string') {\r\n                    return parseFloat(value);\r\n                }\r\n                isDot = value.indexOf('.');\r\n                isComa = value.indexOf(',');\r\n\r\n                if (isDot !== -1 && isComa !== -1) {\r\n                    if (isComa > isDot) {\r\n                        value = value.replace('.', '').replace(',', '.');\r\n                    } else {\r\n                        value = value.replace(',', '');\r\n                    }\r\n                } else if (isComa !== -1) {\r\n                    value = value.replace(',', '.');\r\n                }\r\n\r\n                return parseFloat(value);\r\n            },\r\n\r\n            /**\r\n             * Removes HTML tags and space characters, numbers and punctuation.\r\n             *\r\n             * @param {String} value - Value being stripped.\r\n             * @return {String}\r\n             */\r\n            stripHtml: function (value) {\r\n                return value.replace(/<.[^<>]*?>/g, ' ').replace(/&nbsp;|&#160;/gi, ' ')\r\n                    .replace(/[0-9.(),;:!?%#$'\"_+=\\/-]*/g, '');\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * @param {String} name\r\n     * @param {*} method\r\n     * @param {*} message\r\n     * @param {*} dontSkip\r\n     */\r\n    $.validator.addMethod = function (name, method, message, dontSkip) {\r\n        $.validator.methods[name] = method;\r\n        $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];\r\n\r\n        if (method.length < 3 || dontSkip) {\r\n            $.validator.addClassRules(name, $.validator.normalizeRule(name));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Javascript object with credit card types\r\n     * 0 - regexp for card number\r\n     * 1 - regexp for cvn\r\n     * 2 - check or not credit card number trough Luhn algorithm by\r\n     */\r\n    creditCartTypes = {\r\n        'SO': [\r\n            new RegExp('^(6334[5-9]([0-9]{11}|[0-9]{13,14}))|(6767([0-9]{12}|[0-9]{14,15}))$'),\r\n            new RegExp('^([0-9]{3}|[0-9]{4})?$'),\r\n            true\r\n        ],\r\n        'SM': [\r\n            new RegExp('(^(5[0678])[0-9]{11,18}$)|(^(6[^05])[0-9]{11,18}$)|' +\r\n                '(^(601)[^1][0-9]{9,16}$)|(^(6011)[0-9]{9,11}$)|(^(6011)[0-9]{13,16}$)|' +\r\n                '(^(65)[0-9]{11,13}$)|(^(65)[0-9]{15,18}$)|(^(49030)[2-9]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(49033)[5-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49110)[1-2]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(49117)[4-9]([0-9]{10}$|[0-9]{12,13}$))|(^(49118)[0-2]([0-9]{10}$|[0-9]{12,13}$))|' +\r\n                '(^(4936)([0-9]{12}$|[0-9]{14,15}$))'), new RegExp('^([0-9]{3}|[0-9]{4})?$'),\r\n            true\r\n        ],\r\n        'VI': [new RegExp('^4[0-9]{12}([0-9]{3})?$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MC': [\r\n            new RegExp('^(?:5[1-5][0-9]{2}|222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$'),\r\n            new RegExp('^[0-9]{3}$'),\r\n            true\r\n        ],\r\n        'AE': [new RegExp('^3[47][0-9]{13}$'), new RegExp('^[0-9]{4}$'), true],\r\n        'DI': [new RegExp('^(6011(0|[2-4]|74|7[7-9]|8[6-9]|9)|6(4[4-9]|5))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'JCB': [new RegExp('^35(2[8-9]|[3-8])\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'DN': [new RegExp('^(3(0[0-5]|095|6|[8-9]))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'UN': [\r\n            new RegExp('^(622(1(2[6-9]|[3-9])|[3-8]|9([[0-1]|2[0-5]))|62[4-6]|628([2-8]))\\\\d*?$'),\r\n            new RegExp('^[0-9]{3}$'),\r\n            true\r\n        ],\r\n        'MI': [new RegExp('^(5(0|[6-9])|63|67(?!59|6770|6774))\\\\d*$'), new RegExp('^[0-9]{3}$'), true],\r\n        'MD': [new RegExp('^6759(?!24|38|40|6[3-9]|70|76)|676770|676774\\\\d*$'), new RegExp('^[0-9]{3}$'), true]\r\n    };\r\n\r\n    /**\r\n     * validate credit card number using mod10\r\n     * @param {String} s\r\n     * @return {Boolean}\r\n     */\r\n    function validateCreditCard(s) {\r\n        // remove non-numerics\r\n        var v = '0123456789',\r\n            w = '',\r\n            i, j, k, m, c, a, x;\r\n\r\n        for (i = 0; i < s.length; i++) {\r\n            x = s.charAt(i);\r\n\r\n            if (v.indexOf(x, 0) !== -1) {\r\n                w += x;\r\n            }\r\n        }\r\n        // validate number\r\n        j = w.length / 2;\r\n        k = Math.floor(j);\r\n        m = Math.ceil(j) - k;\r\n        c = 0;\r\n\r\n        for (i = 0; i < k; i++) {\r\n            a = w.charAt(i * 2 + m) * 2;\r\n            c += a > 9 ? Math.floor(a / 10 + a % 10) : a;\r\n        }\r\n\r\n        for (i = 0; i < k + m; i++) {\r\n            c += w.charAt(i * 2 + 1 - m) * 1;\r\n        }\r\n\r\n        return c % 10 === 0;\r\n    }\r\n\r\n    /**\r\n     * validate all table required inputs at once, using single hidden input\r\n     * @param {String} value\r\n     * @param {HTMLElement} element\r\n     *\r\n     * @return {Boolean}\r\n     */\r\n    function tableSingleValidation(value, element) {\r\n        var empty = $(element).closest('table')\r\n            .find('input.required-option:visible')\r\n            .filter(function (i, el) {\r\n                if ($(el).is('disabled')) {\r\n                    return $.mage.isEmpty(el.value);\r\n                }\r\n            })\r\n            .length;\r\n\r\n        return empty === 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {float} qty\r\n     * @param {float} qtyIncrements\r\n     * @returns {float}\r\n     */\r\n    function resolveModulo(qty, qtyIncrements) {\r\n        var divideEpsilon = 10000,\r\n            epsilon,\r\n            remainder;\r\n\r\n        while (qtyIncrements < 1) {\r\n            qty *= 10;\r\n            qtyIncrements *= 10;\r\n        }\r\n\r\n        epsilon = qtyIncrements / divideEpsilon;\r\n        remainder = qty % qtyIncrements;\r\n\r\n        if (Math.abs(remainder - qtyIncrements) < epsilon ||\r\n            Math.abs(remainder) < epsilon) {\r\n            remainder = 0;\r\n        }\r\n\r\n        return remainder;\r\n    }\r\n\r\n    /**\r\n     * Collection of validation rules including rules from additional-methods.js\r\n     * @type {Object}\r\n     */\r\n    rules = {\r\n        'max-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length <= params;\r\n            },\r\n            $.mage.__('Please enter {0} words or less.')\r\n        ],\r\n        'min-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) || $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params;\r\n            },\r\n            $.mage.__('Please enter at least {0} words.')\r\n        ],\r\n        'range-words': [\r\n            function (value, element, params) {\r\n                return this.optional(element) ||\r\n                    $.mage.stripHtml(value).match(/\\b\\w+\\b/g).length >= params[0] &&\r\n                    value.match(/bw+b/g).length < params[1];\r\n            },\r\n            $.mage.__('Please enter between {0} and {1} words.')\r\n        ],\r\n        'letters-with-basic-punc': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z\\-.,()'\\\"\\s]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters or punctuation only please')\r\n        ],\r\n        'alphanumeric': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\w+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters, numbers, spaces or underscores only please')\r\n        ],\r\n        'letters-only': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^[a-z]+$/i.test(value);\r\n            },\r\n            $.mage.__('Letters only please')\r\n        ],\r\n        'no-whitespace': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\S+$/i.test(value);\r\n            },\r\n            $.mage.__('No white space please')\r\n        ],\r\n        'no-marginal-whitespace': [\r\n            function (value, element) {\r\n                return this.optional(element) || !/^\\s+|\\s+$/i.test(value);\r\n            },\r\n            $.mage.__('No marginal white space please')\r\n        ],\r\n        'zip-range': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^90[2-5]-\\d{2}-\\d{4}$/.test(value);\r\n            },\r\n            $.mage.__('Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx')\r\n        ],\r\n        'integer': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^-?\\d+$/.test(value);\r\n            },\r\n            $.mage.__('A positive or negative non-decimal number please')\r\n        ],\r\n        'vinUS': [\r\n            function (v) {\r\n                var i, n, d, f, cd, cdv, LL, VL, FL, rs;\r\n\r\n                /* eslint-disable max-depth */\r\n                if (v.length !== 17) {\r\n                    return false;\r\n                }\r\n\r\n                LL = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L',\r\n                    'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n                VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9];\r\n                FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n                rs = 0;\r\n\r\n                for (i = 0; i < 17; i++) {\r\n                    f = FL[i];\r\n                    d = v.slice(i, i + 1);\r\n\r\n                    if (i === 8) {\r\n                        cdv = d;\r\n                    }\r\n\r\n                    if (!isNaN(d)) {\r\n                        d *= f;\r\n                    } else {\r\n                        for (n = 0; n < LL.length; n++) {\r\n                            if (d.toUpperCase() === LL[n]) {\r\n                                d = VL[n];\r\n                                d *= f;\r\n\r\n                                if (isNaN(cdv) && n === 8) {\r\n                                    cdv = LL[n];\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    rs += d;\r\n                }\r\n\r\n                /* eslint-enable max-depth */\r\n                cd = rs % 11;\r\n\r\n                if (cd === 10) {\r\n                    cd = 'X';\r\n                }\r\n\r\n                if (cd === cdv) {\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('The specified vehicle identification number (VIN) is invalid.')\r\n        ],\r\n        'dateITA': [\r\n            function (value, element) {\r\n                var check = false,\r\n                    re = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/,\r\n                    adata, gg, mm, aaaa, xdata;\r\n\r\n                if (re.test(value)) {\r\n                    adata = value.split('/');\r\n                    gg = parseInt(adata[0], 10);\r\n                    mm = parseInt(adata[1], 10);\r\n                    aaaa = parseInt(adata[2], 10);\r\n                    xdata = new Date(aaaa, mm - 1, gg);\r\n\r\n                    if (xdata.getFullYear() === aaaa &&\r\n                        xdata.getMonth() === mm - 1 &&\r\n                        xdata.getDate() === gg\r\n                    ) {\r\n                        check = true;\r\n                    } else {\r\n                        check = false;\r\n                    }\r\n                } else {\r\n                    check = false;\r\n                }\r\n\r\n                return this.optional(element) || check;\r\n            },\r\n            $.mage.__('Please enter a correct date')\r\n        ],\r\n        'dateNL': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^\\d\\d?[\\.\\/-]\\d\\d?[\\.\\/-]\\d\\d\\d?\\d?$/.test(value);\r\n            },\r\n            'Vul hier een geldige datum in.'\r\n        ],\r\n        'time': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^([01]\\d|2[0-3])(:[0-5]\\d){0,2}$/.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 and 23:59')\r\n        ],\r\n        'time12h': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\\d){0,2}(\\s[AP]M))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid time, between 00:00 am and 12:00 pm')\r\n        ],\r\n        'phoneUS': [\r\n            function (phoneNumber, element) {\r\n                phoneNumber = phoneNumber.replace(/\\s+/g, '');\r\n\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^(1-?)?(\\([2-9]\\d{2}\\)|[2-9]\\d{2})-?[2-9]\\d{2}-?\\d{4}$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'phoneUK': [\r\n            function (phoneNumber, element) {\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^(\\(?(0|\\+44)[1-9]{1}\\d{1,4}?\\)?\\s?\\d{3,4}\\s?\\d{3,4})$/);\r\n            },\r\n            $.mage.__('Please specify a valid phone number')\r\n        ],\r\n        'mobileUK': [\r\n            function (phoneNumber, element) {\r\n                return this.optional(element) || phoneNumber.length > 9 &&\r\n                    phoneNumber.match(/^((0|\\+44)7\\d{3}\\s?\\d{6})$/);\r\n            },\r\n            $.mage.__('Please specify a valid mobile number')\r\n        ],\r\n        'stripped-min-length': [\r\n            function (value, element, param) {\r\n                return value.length >= param;\r\n            },\r\n            $.mage.__('Please enter at least {0} characters')\r\n        ],\r\n\r\n        /* detect chars that would require more than 3 bytes */\r\n        'validate-no-utf8mb4-characters': [\r\n            function (value) {\r\n                var validator = this,\r\n                    message = $.mage.__('Please remove invalid characters: {0}.'),\r\n                    matches = value.match(/(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g),\r\n                    result = matches === null;\r\n\r\n                if (!result) {\r\n                    validator.charErrorMessage = message.replace('{0}', matches.join());\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.charErrorMessage;\r\n            }\r\n        ],\r\n\r\n        /* eslint-disable max-len */\r\n        'email2': [\r\n            function (value, element) {\r\n                return this.optional(element) ||\r\n                    /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i.test(value);\r\n            },\r\n            $.validator.messages.email\r\n        ],\r\n        'url2': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)*(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i.test(value);\r\n            },\r\n            $.validator.messages.url\r\n        ],\r\n\r\n        /* eslint-enable max-len */\r\n        'credit-card-types': [\r\n            function (value, element, param) {\r\n                var validTypes;\r\n\r\n                if (/[^0-9-]+/.test(value)) {\r\n                    return false;\r\n                }\r\n                value = value.replace(/\\D/g, '');\r\n\r\n                validTypes = 0x0000;\r\n\r\n                if (param.mastercard) {\r\n                    validTypes |= 0x0001;\r\n                }\r\n\r\n                if (param.visa) {\r\n                    validTypes |= 0x0002;\r\n                }\r\n\r\n                if (param.amex) {\r\n                    validTypes |= 0x0004;\r\n                }\r\n\r\n                if (param.dinersclub) {\r\n                    validTypes |= 0x0008;\r\n                }\r\n\r\n                if (param.enroute) {\r\n                    validTypes |= 0x0010;\r\n                }\r\n\r\n                if (param.discover) {\r\n                    validTypes |= 0x0020;\r\n                }\r\n\r\n                if (param.jcb) {\r\n                    validTypes |= 0x0040;\r\n                }\r\n\r\n                if (param.unknown) {\r\n                    validTypes |= 0x0080;\r\n                }\r\n\r\n                if (param.all) {\r\n                    validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;\r\n                }\r\n\r\n                if (validTypes & 0x0001 && /^(51|52|53|54|55)/.test(value)) { //mastercard\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0002 && /^(4)/.test(value)) { //visa\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0004 && /^(34|37)/.test(value)) { //amex\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0008 && /^(300|301|302|303|304|305|36|38)/.test(value)) { //dinersclub\r\n                    return value.length === 14;\r\n                }\r\n\r\n                if (validTypes & 0x0010 && /^(2014|2149)/.test(value)) { //enroute\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0020 && /^(6011)/.test(value)) { //discover\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(3)/.test(value)) { //jcb\r\n                    return value.length === 16;\r\n                }\r\n\r\n                if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) { //jcb\r\n                    return value.length === 15;\r\n                }\r\n\r\n                if (validTypes & 0x0080) { //unknown\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n\r\n        /* eslint-disable max-len */\r\n        'ipv4': [\r\n            function (value, element) {\r\n                return this.optional(element) ||\r\n                    /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v4 address.')\r\n        ],\r\n        'ipv6': [\r\n            function (value, element) {\r\n                return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b)\\.){3}(\\b((25[0-5])|(1\\d{2})|(2[0-4]\\d)|(\\d{1,2}))\\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);\r\n            },\r\n            $.mage.__('Please enter a valid IP v6 address.')\r\n        ],\r\n\r\n        /* eslint-enable max-len */\r\n        'pattern': [\r\n            function (value, element, param) {\r\n                return this.optional(element) || new RegExp(param).test(value);\r\n            },\r\n            $.mage.__('Invalid format.')\r\n        ],\r\n        'allow-container-className': [\r\n            function (element) {\r\n                if (element.type === 'radio' || element.type === 'checkbox') {\r\n                    return $(element).hasClass('change-container-classname');\r\n                }\r\n            },\r\n            ''\r\n        ],\r\n        'validate-no-html-tags': [\r\n            function (value) {\r\n                return !/<(\\/)?\\w+/.test(value);\r\n            },\r\n            $.mage.__('HTML tags are not allowed.')\r\n        ],\r\n        'validate-select': [\r\n            function (value) {\r\n                return value !== 'none' && value != null && value.length !== 0;\r\n            },\r\n            $.mage.__('Please select an option.')\r\n        ],\r\n        'validate-no-empty': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            },\r\n            $.mage.__('Empty Value.')\r\n        ],\r\n        'validate-alphanum-with-spaces': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9 ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces only in this field.')\r\n        ],\r\n        'validate-data': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Za-z]+[A-Za-z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-street': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[ \\w]{3,}([A-Za-z]\\.)?([ \\w]*\\#\\d+)?(\\r\\n| )[ \\w]{3,}/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9), spaces and \"#\" in this field.')\r\n        ],\r\n        'validate-phoneStrict': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-phoneLax': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) ||\r\n                    /^((\\d[\\-. ]?)?((\\(\\d{3}\\))|\\d{3}))?[\\-. ]?\\d{3}[\\-. ]?\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid phone number. For example (123) 456-7890 or 123-456-7890.')\r\n        ],\r\n        'validate-fax': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(\\()?\\d{3}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid fax number (Ex: 123-456-7890).')\r\n        ],\r\n        'validate-email': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i.test(v); //eslint-disable-line max-len\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-emailSender': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[\\S ]+$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid email address (Ex: johndoe@domain.com).')\r\n        ],\r\n        'validate-password': [\r\n            function (v) {\r\n                var pass;\r\n\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                //strip leading and trailing spaces\r\n                pass = v.trim();\r\n\r\n                if (!pass.length) {\r\n                    return true;\r\n                }\r\n\r\n                return !(pass.length > 0 && pass.length < 6);\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'validate-admin-password': [\r\n            function (v) {\r\n                var pass;\r\n\r\n                if (v == null) {\r\n                    return false;\r\n                }\r\n                pass = v.trim();\r\n                // strip leading and trailing spaces\r\n                if (pass.length === 0) {\r\n                    return true;\r\n                }\r\n\r\n                if (!/[a-z]/i.test(v) || !/[0-9]/.test(v)) {\r\n                    return false;\r\n                }\r\n\r\n                if (pass.length < 7) {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 7 or more characters, using both numeric and alphabetic.')\r\n        ],\r\n        'validate-customer-password': [\r\n            function (v, elm) {\r\n                var validator = this,\r\n                    counter = 0,\r\n                    passwordMinLength = $(elm).data('password-min-length'),\r\n                    passwordMinCharacterSets = $(elm).data('password-min-character-sets'),\r\n                    pass = v.trim(),\r\n                    result = pass.length >= passwordMinLength;\r\n\r\n                if (result === false) {\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum length of this field must be equal or greater than %1 symbols. Leading and trailing spaces will be ignored.').replace('%1', passwordMinLength); //eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                if (pass.match(/\\d+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[a-z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[A-Z]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (pass.match(/[^a-zA-Z0-9]+/)) {\r\n                    counter++;\r\n                }\r\n\r\n                if (counter < passwordMinCharacterSets) {\r\n                    result = false;\r\n                    validator.passwordErrorMessage = $.mage.__('Minimum of different classes of characters in password is %1. Classes of characters: Lower Case, Upper Case, Digits, Special Characters.').replace('%1', passwordMinCharacterSets); //eslint-disable-line max-len\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.passwordErrorMessage;\r\n            }\r\n        ],\r\n        'validate-url': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = (v || '').replace(/^\\s+/, '').replace(/\\s+$/, '');\r\n\r\n                return (/^(http|https|ftp):\\/\\/(([A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))(\\.[A-Z0-9]([A-Z0-9_-]*[A-Z0-9]|))*)(:(\\d+))?(\\/[A-Z0-9~](([A-Z0-9_~-]|\\.)*[A-Z0-9~]|))*\\/?(.*)?$/i).test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. Protocol is required (http://, https:// or ftp://).')\r\n        ],\r\n        'validate-clean-url': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^(http|https|ftp):\\/\\/(([A-Z0-9][A-Z0-9_-]*)(\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v) || /^(www)((\\.[A-Z0-9][A-Z0-9_-]*)+.(com|org|net|dk|at|us|tv|info|uk|co.uk|biz|se)$)(:(\\d+))?\\/?/i.test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid URL. For example http://www.example.com or www.example.com.')\r\n        ],\r\n        'validate-xml-identifier': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[A-Z][A-Z0-9_\\/-]*$/i.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid XML-identifier (Ex: something_1, block5, id-4).')\r\n        ],\r\n        'validate-ssn': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\d{3}-?\\d{2}-?\\d{4}$/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid social security number (Ex: 123-45-6789).')\r\n        ],\r\n        'validate-zip-us': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(v);\r\n\r\n            },\r\n            $.mage.__('Please enter a valid zip code (Ex: 90602 or 90602-1234).')\r\n        ],\r\n        'validate-date-au': [\r\n            function (v) {\r\n                var regex, d;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                regex = /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/;\r\n\r\n                if ($.mage.isEmpty(v) || !regex.test(v)) {\r\n                    return false;\r\n                }\r\n                d = new Date(v.replace(regex, '$2/$1/$3'));\r\n\r\n                return parseInt(RegExp.$2, 10) === 1 + d.getMonth() &&\r\n                    parseInt(RegExp.$1, 10) === d.getDate() &&\r\n                    parseInt(RegExp.$3, 10) === d.getFullYear();\r\n\r\n            },\r\n            $.mage.__('Please use this date format: dd/mm/yyyy. For example 17/03/2006 for the 17th of March, 2006.')\r\n        ],\r\n        'validate-currency-dollar': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^\\$?\\-?([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}\\d*(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$/.test(v); //eslint-disable-line max-len\r\n\r\n            },\r\n            $.mage.__('Please enter a valid $ amount. For example $100.00.')\r\n        ],\r\n        'validate-not-negative-number': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        // validate-not-negative-number should be replaced in all places with this one and then removed\r\n        'validate-zero-or-greater': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v >= 0;\r\n\r\n            },\r\n            $.mage.__('Please enter a number 0 or greater in this field.')\r\n        ],\r\n        'validate-greater-than-zero': [\r\n            function (v) {\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n                v = $.mage.parseNumber(v);\r\n\r\n                return !isNaN(v) && v > 0;\r\n            },\r\n            $.mage.__('Please enter a number greater than 0 in this field.')\r\n        ],\r\n        'validate-css-length': [\r\n            function (v) {\r\n                if (v !== '') {\r\n                    return (/^[0-9]*\\.*[0-9]+(px|pc|pt|ex|em|mm|cm|in|%)?$/).test(v);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please input a valid CSS-length (Ex: 100px, 77pt, 20em, .5ex or 50%).')\r\n        ],\r\n        // Additional methods\r\n        'validate-number': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !isNaN($.mage.parseNumber(v)) && /^\\s*-?\\d*(\\.\\d*)?\\s*$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'required-number': [\r\n            function (v) {\r\n                return !!v.length;\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-number-range': [\r\n            function (v, elm, param) {\r\n                var numValue, dataAttrRange, classNameRange, result, range, m, classes, ii;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = $.mage.parseNumber(v);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                classNameRange = /^number-range-(-?[\\d.,]+)?-(-?[\\d.,]+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (typeof range === 'string') {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    } else {\r\n                        result = false;\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(' ');\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n\r\n                        if (m) { //eslint-disable-line max-depth\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-digits': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || !/[^\\d]/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid number in this field.')\r\n        ],\r\n        'validate-forbidden-extensions': [\r\n            function (v, elem) {\r\n                var forbiddenExtensions = $(elem).attr('data-validation-params'),\r\n                    forbiddenExtensionsArray = forbiddenExtensions.split(','),\r\n                    extensionsArray = v.split(','),\r\n                    result = true;\r\n\r\n                this.validateExtensionsMessage = $.mage.__('Forbidden extensions has been used. Avoid usage of ') +\r\n                    forbiddenExtensions;\r\n\r\n                $.each(extensionsArray, function (key, extension) {\r\n                    if (forbiddenExtensionsArray.indexOf(extension) !== -1) {\r\n                        result = false;\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.validateExtensionsMessage;\r\n            }\r\n        ],\r\n        'validate-digits-range': [\r\n            function (v, elm, param) {\r\n                var numValue, dataAttrRange, classNameRange, result, range, m, classes, ii;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                numValue = $.mage.parseNumber(v);\r\n\r\n                if (isNaN(numValue)) {\r\n                    return false;\r\n                }\r\n\r\n                dataAttrRange = /^(-?\\d+)?-(-?\\d+)?$/;\r\n                classNameRange = /^digits-range-(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                range = param;\r\n\r\n                if (typeof range === 'string') {\r\n                    m = dataAttrRange.exec(range);\r\n\r\n                    if (m) {\r\n                        result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                    } else {\r\n                        result = false;\r\n                    }\r\n                } else if (elm && elm.className) {\r\n                    classes = elm.className.split(' ');\r\n                    ii = classes.length;\r\n\r\n                    while (ii--) {\r\n                        range = classes[ii];\r\n                        m = classNameRange.exec(range);\r\n\r\n                        if (m) { //eslint-disable-line max-depth\r\n                            result = result && $.mage.isBetween(numValue, m[1], m[2]);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.'),\r\n            true\r\n        ],\r\n        'validate-range': [\r\n            function (v, elm) {\r\n                var minValue, maxValue, ranges, reRange, result, values,\r\n                    i, name, validRange, minValidRange, maxValidRange;\r\n\r\n                if ($.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                } else if ($.validator.methods['validate-digits'] && $.validator.methods['validate-digits'](v)) {\r\n                    minValue = maxValue = $.mage.parseNumber(v);\r\n                } else {\r\n                    ranges = /^(-?\\d+)?-(-?\\d+)?$/.exec(v);\r\n\r\n                    if (ranges) {\r\n                        minValue = $.mage.parseNumber(ranges[1]);\r\n                        maxValue = $.mage.parseNumber(ranges[2]);\r\n\r\n                        if (minValue > maxValue) { //eslint-disable-line max-depth\r\n                            return false;\r\n                        }\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                }\r\n                reRange = /^range-(-?\\d+)?-(-?\\d+)?$/;\r\n                result = true;\r\n                values = $(elm).prop('class').split(' ');\r\n\r\n                for (i = values.length - 1; i >= 0; i--) {\r\n                    name = values[i];\r\n                    validRange = reRange.exec(name);\r\n\r\n                    if (validRange) {\r\n                        minValidRange = $.mage.parseNumber(validRange[1]);\r\n                        maxValidRange = $.mage.parseNumber(validRange[2]);\r\n                        result = result &&\r\n                            (isNaN(minValidRange) || minValue >= minValidRange) &&\r\n                            (isNaN(maxValidRange) || maxValue <= maxValidRange);\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('The value is not within the specified range.')\r\n        ],\r\n        'validate-alpha': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use letters only (a-z or A-Z) in this field.')\r\n        ],\r\n        'validate-code': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z]+[a-zA-Z0-9_]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z), numbers (0-9) or underscore (_) in this field, and the first character should be a letter.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-alphanum': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-zA-Z0-9]+$/.test(v);\r\n            },\r\n            $.mage.__('Please use only letters (a-z or A-Z) or numbers (0-9) in this field. No spaces or other characters are allowed.') //eslint-disable-line max-len\r\n        ],\r\n        'validate-not-number-first': [\r\n            function (value) {\r\n                return $.mage.isEmptyNoTrim(value) || /^[^0-9-\\.].*$/.test(value.trim());\r\n            },\r\n            $.mage.__('First character must be letter.')\r\n        ],\r\n        'validate-date': [\r\n            function (value, params, additionalParams) {\r\n                var test = moment(value, utils.convertToMomentFormat(additionalParams.dateFormat));\r\n\r\n                return $.mage.isEmptyNoTrim(value) || test.isValid();\r\n            },\r\n            $.mage.__('Please enter a valid date.')\r\n\r\n        ],\r\n        'validate-date-range': [\r\n            function (v, elm) {\r\n                var m = /\\bdate-range-(\\w+)-(\\w+)\\b/.exec(elm.className),\r\n                    currentYear, normalizedTime, dependentElements;\r\n\r\n                if (!m || m[2] === 'to' || $.mage.isEmptyNoTrim(v)) {\r\n                    return true;\r\n                }\r\n\r\n                currentYear = new Date().getFullYear() + '';\r\n\r\n                /**\r\n                 * @param {String} vd\r\n                 * @return {Number}\r\n                 */\r\n                normalizedTime = function (vd) {\r\n                    vd = vd.split(/[.\\/]/);\r\n\r\n                    if (vd[2] && vd[2].length < 4) {\r\n                        vd[2] = currentYear.substr(0, vd[2].length) + vd[2];\r\n                    }\r\n\r\n                    return new Date(vd.join('/')).getTime();\r\n                };\r\n\r\n                dependentElements = $(elm.form).find('.validate-date-range.date-range-' + m[1] + '-to');\r\n\r\n                return !dependentElements.length || $.mage.isEmptyNoTrim(dependentElements[0].value) ||\r\n                    normalizedTime(v) <= normalizedTime(dependentElements[0].value);\r\n            },\r\n            $.mage.__('Make sure the To Date is later than or the same as the From Date.')\r\n        ],\r\n        'validate-cpassword': [\r\n            function () {\r\n                var conf = $('#confirmation').length > 0 ? $('#confirmation') : $($('.validate-cpassword')[0]),\r\n                    pass = false,\r\n                    passwordElements, i, passwordElement;\r\n\r\n                if ($('#password')) {\r\n                    pass = $('#password');\r\n                }\r\n                passwordElements = $('.validate-password');\r\n\r\n                for (i = 0; i < passwordElements.length; i++) {\r\n                    passwordElement = $(passwordElements[i]);\r\n\r\n                    if (passwordElement.closest('form').attr('id') === conf.closest('form').attr('id')) {\r\n                        pass = passwordElement;\r\n                    }\r\n                }\r\n\r\n                if ($('.validate-admin-password').length) {\r\n                    pass = $($('.validate-admin-password')[0]);\r\n                }\r\n\r\n                return pass.val() === conf.val();\r\n            },\r\n            $.mage.__('Please make sure your passwords match.')\r\n        ],\r\n        'validate-identifier': [\r\n            function (v) {\r\n                return $.mage.isEmptyNoTrim(v) || /^[a-z0-9][a-z0-9_\\/-]+(\\.[a-z0-9_-]+)?$/.test(v);\r\n            },\r\n            $.mage.__('Please enter a valid URL Key (Ex: \"example-page\", \"example-page.html\" or \"anotherlevel/example-page\").') //eslint-disable-line max-len\r\n        ],\r\n        'validate-zip-international': [\r\n\r\n            /*function(v) {\r\n             // @TODO: Cleanup\r\n             return Validation.get('IsEmpty').test(v) ||\r\n             /(^[A-z0-9]{2,10}([\\s]{0,1}|[\\-]{0,1})[A-z0-9]{2,10}$)/.test(v);\r\n             }*/\r\n            function () {\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter a valid zip code.')\r\n        ],\r\n        'validate-one-required': [\r\n            function (v, elm) {\r\n                var p = $(elm).parent(),\r\n                    options = p.find('input');\r\n\r\n                return options.map(function (el) {\r\n                    return $(el).val();\r\n                }).length > 0;\r\n            },\r\n            $.mage.__('Please select one of the options above.')\r\n        ],\r\n        'validate-state': [\r\n            function (v) {\r\n                return v !== 0;\r\n            },\r\n            $.mage.__('Please select State/Province.')\r\n        ],\r\n        'required-file': [\r\n            function (v, elm) {\r\n                var result = !$.mage.isEmptyNoTrim(v),\r\n                    ovId;\r\n\r\n                if (!result) {\r\n                    ovId = $('#' + $(elm).attr('id') + '_value');\r\n\r\n                    if (ovId.length > 0) {\r\n                        result = !$.mage.isEmptyNoTrim(ovId.val());\r\n                    }\r\n                }\r\n\r\n                return result;\r\n            },\r\n            $.mage.__('Please select a file.')\r\n        ],\r\n        'validate-ajax-error': [\r\n            function (v, element) {\r\n                element = $(element);\r\n                element.on('change.ajaxError', function () {\r\n                    element.removeClass('validate-ajax-error');\r\n                    element.off('change.ajaxError');\r\n                });\r\n\r\n                return !element.hasClass('validate-ajax-error');\r\n            },\r\n            ''\r\n        ],\r\n        'validate-optional-datetime': [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    hasWithValue = false,\r\n                    hasWithNoValue = false,\r\n                    pattern = /day_part$/i,\r\n                    i;\r\n\r\n                for (i = 0; i < dateTimeParts.length; i++) {\r\n                    if (!pattern.test($(dateTimeParts[i]).attr('id'))) {\r\n                        if ($(dateTimeParts[i]).val() === 's') { //eslint-disable-line max-depth\r\n                            hasWithValue = true;\r\n                        } else {\r\n                            hasWithNoValue = true;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return hasWithValue ^ hasWithNoValue;\r\n            },\r\n            $.mage.__('The field isn\\'t complete.')\r\n        ],\r\n        'validate-required-datetime': [\r\n            function (v, elm, param) {\r\n                var dateTimeParts = $('.datetime-picker[id^=\"options_' + param + '\"]'),\r\n                    i;\r\n\r\n                for (i = 0; i < dateTimeParts.length; i++) {\r\n                    if (dateTimeParts[i].value === '') {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'validate-one-required-by-name': [\r\n            function (v, elm, selector) {\r\n                var name = elm.name.replace(/([\\\\\"])/g, '\\\\$1'),\r\n                    container = this.currentForm;\r\n\r\n                selector = selector === true ? 'input[name=\"' + name + '\"]:checked' : selector;\r\n\r\n                return !!container.querySelectorAll(selector).length;\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        'less-than-equals-to': [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.lteToVal = $(params).val();\r\n\r\n                    return parseFloat(value) <= parseFloat($(params).val());\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value less than or equal to %s.');\r\n\r\n                return message.replace('%s', this.lteToVal);\r\n            }\r\n        ],\r\n        'greater-than-equals-to': [\r\n            function (value, element, params) {\r\n                if ($.isNumeric($(params).val()) && $.isNumeric(value)) {\r\n                    this.gteToVal = $(params).val();\r\n\r\n                    return parseFloat(value) >= parseFloat($(params).val());\r\n                }\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                var message = $.mage.__('Please enter a value greater than or equal to %s.');\r\n\r\n                return message.replace('%s', this.gteToVal);\r\n            }\r\n        ],\r\n        'validate-emails': [\r\n            function (value) {\r\n                var validRegexp, emails, i;\r\n\r\n                if ($.mage.isEmpty(value)) {\r\n                    return true;\r\n                }\r\n                validRegexp = /^([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!\\#\\$%&'\\*\\+\\/=\\?\\^_`\\{\\|\\}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i; //eslint-disable-line max-len\r\n                emails = value.split(/[\\s\\n\\,]+/g);\r\n\r\n                for (i = 0; i < emails.length; i++) {\r\n                    if (!validRegexp.test(emails[i].trim())) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter valid email addresses, separated by commas. For example, johndoe@domain.com, johnsmith@domain.com.') //eslint-disable-line max-len\r\n        ],\r\n\r\n        'validate-cc-type-select': [\r\n\r\n            /**\r\n             * Validate credit card type matches credit card number\r\n             * @param {*} value - select credit card type\r\n             * @param {*} element - element contains the select box for credit card types\r\n             * @param {*} params - selector for credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                if (value && params && creditCartTypes[value]) {\r\n                    return creditCartTypes[value][0].test($(params).val().replace(/\\s+/g, ''));\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Card type does not match credit card number.')\r\n        ],\r\n        'validate-cc-number': [\r\n\r\n            /**\r\n             * Validate credit card number based on mod 10.\r\n             *\r\n             * @param {*} value - credit card number\r\n             * @return {Boolean}\r\n             */\r\n            function (value) {\r\n                if (value) {\r\n                    return validateCreditCard(value);\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card number.')\r\n        ],\r\n        'validate-cc-type': [\r\n\r\n            /**\r\n             * Validate credit card number is for the correct credit card type.\r\n             *\r\n             * @param {String} value - credit card number\r\n             * @param {*} element - element contains credit card number\r\n             * @param {*} params - selector for credit card type\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                var ccType;\r\n\r\n                if (value && params) {\r\n                    ccType = $(params).val();\r\n                    value = value.replace(/\\s/g, '').replace(/\\-/g, '');\r\n\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][0].test(value);\r\n                    } else if (creditCartTypes[ccType] && !creditCartTypes[ccType][0]) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Credit card number does not match credit card type.')\r\n        ],\r\n        'validate-cc-exp': [\r\n\r\n            /**\r\n             * Validate credit card expiration date, make sure it's within the year and not before current month.\r\n             *\r\n             * @param {*} value - month\r\n             * @param {*} element - element contains month\r\n             * @param {*} params - year selector\r\n             * @return {Boolean}\r\n             */\r\n            function (value, element, params) {\r\n                var isValid = false,\r\n                    month, year, currentTime, currentMonth, currentYear;\r\n\r\n                if (value && params) {\r\n                    month = value;\r\n                    year = $(params).val();\r\n                    currentTime = new Date();\r\n                    currentMonth = currentTime.getMonth() + 1;\r\n                    currentYear = currentTime.getFullYear();\r\n\r\n                    isValid = !year || year > currentYear || year == currentYear && month >= currentMonth; //eslint-disable-line\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Incorrect credit card expiration date.')\r\n        ],\r\n        'validate-cc-cvn': [\r\n\r\n            /**\r\n             * Validate credit card cvn based on credit card type.\r\n             *\r\n             * @param {*} value - credit card cvn\r\n             * @param {*} element - element contains credit card cvn\r\n             * @param {*} params - credit card type selector\r\n             * @return {*}\r\n             */\r\n            function (value, element, params) {\r\n                var ccType;\r\n\r\n                if (value && params) {\r\n                    ccType = $(params).val();\r\n\r\n                    if (creditCartTypes[ccType] && creditCartTypes[ccType][0]) {\r\n                        return creditCartTypes[ccType][1].test(value);\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please enter a valid credit card verification number.')\r\n        ],\r\n        'validate-cc-ukss': [\r\n\r\n            /**\r\n             * Validate Switch/Solo/Maestro issue number and start date is filled.\r\n             *\r\n             * @param {*} value - input field value\r\n             * @return {*}\r\n             */\r\n            function (value) {\r\n                return value;\r\n            },\r\n            $.mage.__('Please enter issue number or start date for switch/solo card type.')\r\n        ],\r\n        'validate-length': [\r\n            function (v, elm) {\r\n                var reMax = new RegExp(/^maximum-length-[0-9]+$/),\r\n                    reMin = new RegExp(/^minimum-length-[0-9]+$/),\r\n                    validator = this,\r\n                    result = true,\r\n                    length = 0;\r\n\r\n                $.each(elm.className.split(' '), function (index, name) {\r\n                    if (name.match(reMax) && result) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length <= length;\r\n                        validator.validateMessage =\r\n                            $.mage.__('Please enter less or equal than %1 symbols.').replace('%1', length);\r\n                    }\r\n\r\n                    if (name.match(reMin) && result && !$.mage.isEmpty(v)) {\r\n                        length = name.split('-')[2];\r\n                        result = v.length >= length;\r\n                        validator.validateMessage =\r\n                            $.mage.__('Please enter more or equal than %1 symbols.').replace('%1', length);\r\n                    }\r\n                });\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.validateMessage;\r\n            }\r\n        ],\r\n        'required-entry': [\r\n            function (value) {\r\n                return !$.mage.isEmpty(value);\r\n            }, $.mage.__('This is a required field.')\r\n        ],\r\n        'not-negative-amount': [\r\n            function (v) {\r\n                if (v.length) {\r\n                    return (/^\\s*\\d+([,.]\\d+)*\\s*%?\\s*$/).test(v);\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter positive number in this field.')\r\n        ],\r\n        'validate-per-page-value-list': [\r\n            function (v) {\r\n                var isValid = true,\r\n                    values = v.split(','),\r\n                    i;\r\n\r\n                if ($.mage.isEmpty(v)) {\r\n                    return isValid;\r\n                }\r\n\r\n                for (i = 0; i < values.length; i++) {\r\n                    if (!/^[0-9]+$/.test(values[i])) {\r\n                        isValid = false;\r\n                    }\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('Please enter a valid value, ex: 10,20,30')\r\n        ],\r\n        'validate-per-page-value': [\r\n            function (v, elm) {\r\n                var values;\r\n\r\n                if ($.mage.isEmpty(v)) {\r\n                    return false;\r\n                }\r\n                values = $('#' + elm.id + '_values').val().split(',');\r\n\r\n                return values.indexOf(v) !== -1;\r\n            },\r\n            $.mage.__('Please enter a valid value from list')\r\n        ],\r\n        'validate-new-password': [\r\n            function (v) {\r\n                if ($.validator.methods['validate-password'] && !$.validator.methods['validate-password'](v)) {\r\n                    return false;\r\n                }\r\n\r\n                if ($.mage.isEmpty(v) && v !== '') {\r\n                    return false;\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('Please enter 6 or more characters. Leading and trailing spaces will be ignored.')\r\n        ],\r\n        'required-if-not-specified': [\r\n            function (value, element, params) {\r\n                var valid = false,\r\n                    alternate = $(params),\r\n                    alternateValue;\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        alternateValue = alternate.val();\r\n\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) { //eslint-disable-line\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    valid = !this.optional(element);\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-if-all-sku-empty-and-file-not-loaded': [\r\n            function (value, element, params) {\r\n                var valid = false,\r\n                    alternate = $(params.specifiedId),\r\n                    alternateValue;\r\n\r\n                if (alternate.length > 0) {\r\n                    valid = this.check(alternate);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        alternateValue = alternate.val();\r\n\r\n                        if (typeof alternateValue == 'undefined' || alternateValue.length === 0) { //eslint-disable-line\r\n                            valid = false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!valid) {\r\n                    valid = !this.optional(element);\r\n                }\r\n\r\n                $('input[' + params.dataSku + '=true]').each(function () {\r\n                    if ($(this).val() !== '') {\r\n                        valid = true;\r\n                    }\r\n                });\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('Please enter valid SKU key.')\r\n        ],\r\n        'required-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    dependentValue;\r\n\r\n                if (dependent.length > 0) {\r\n                    valid = this.check(dependent);\r\n                    // if valid, it may be blank, so check for that\r\n                    if (valid) {\r\n                        dependentValue = dependent.val();\r\n                        valid = typeof dependentValue != 'undefined' && dependentValue.length > 0;\r\n                    }\r\n                }\r\n\r\n                if (valid) {\r\n                    valid = !this.optional(element);\r\n                } else {\r\n                    valid = true; // dependent was not valid, so don't even check\r\n                }\r\n\r\n                return valid;\r\n            },\r\n            $.mage.__('This is a required field.')\r\n        ],\r\n        'required-number-if-specified': [\r\n            function (value, element, params) {\r\n                var valid = true,\r\n                    dependent = $(params),\r\n                    depeValue;\r\n\r\n                if (dependent.length) {\r\n                    valid = this.check(dependent);\r\n\r\n                    if (valid) {\r\n                        depeValue = dependent[0].value;\r\n                        valid = !!(depeValue && depeValue.length);\r\n                    }\r\n                }\r\n\r\n                return valid ? !!value.length : true;\r\n            },\r\n            $.mage.__('Please enter a valid number.')\r\n        ],\r\n        'datetime-validation': [\r\n            function (value, element) {\r\n                var isValid = true;\r\n\r\n                if ($(element).val().length === 0) {\r\n                    isValid = false;\r\n                    $(element).addClass('mage-error');\r\n                }\r\n\r\n                return isValid;\r\n            },\r\n            $.mage.__('This is required field')\r\n        ],\r\n        'required-text-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'required-visual-swatch-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'required-dropdown-attribute-entry': [\r\n            tableSingleValidation,\r\n            $.mage.__('Admin is a required field in each row.')\r\n        ],\r\n        'validate-item-quantity': [\r\n            function (value, element, params) {\r\n                var validator = this,\r\n                    result = false,\r\n                    // obtain values for validation\r\n                    qty = $.mage.parseNumber(value),\r\n                    isMinAllowedValid = typeof params.minAllowed === 'undefined' ||\r\n                        qty >= $.mage.parseNumber(params.minAllowed),\r\n                    isMaxAllowedValid = typeof params.maxAllowed === 'undefined' ||\r\n                        qty <= $.mage.parseNumber(params.maxAllowed),\r\n                    isQtyIncrementsValid = typeof params.qtyIncrements === 'undefined' ||\r\n                        resolveModulo(qty, $.mage.parseNumber(params.qtyIncrements)) === 0.0;\r\n\r\n                result = qty > 0;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('Please enter a quantity greater than 0.');//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMinAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The fewest you may purchase is %1.').replace('%1', params.minAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isMaxAllowedValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('The maximum you may purchase is %1.').replace('%1', params.maxAllowed);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                result = isQtyIncrementsValid;\r\n\r\n                if (result === false) {\r\n                    validator.itemQtyErrorMessage = $.mage.__('You can buy this product only in quantities of %1 at a time.').replace('%1', params.qtyIncrements);//eslint-disable-line max-len\r\n\r\n                    return result;\r\n                }\r\n\r\n                return result;\r\n            }, function () {\r\n                return this.itemQtyErrorMessage;\r\n            }\r\n        ],\r\n        'password-not-equal-to-user-name': [\r\n            function (value, element, params) {\r\n                if (typeof params === 'string') {\r\n                    return value.toLowerCase() !== params.toLowerCase();\r\n                }\r\n\r\n                return true;\r\n            },\r\n            $.mage.__('The password can\\'t be the same as the email address. Create a new password and try again.')\r\n        ]\r\n    };\r\n\r\n    $.each(rules, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n    $.validator.addClassRules({\r\n        'required-option': {\r\n            required: true\r\n        },\r\n        'required-options-count': {\r\n            required: true\r\n        },\r\n        'validate-both-passwords': {\r\n            'validate-cpassword': true\r\n        }\r\n    });\r\n    $.validator.messages = $.extend($.validator.messages, {\r\n        required: $.mage.__('This is a required field.'),\r\n        remote: $.mage.__('Please fix this field.'),\r\n        email: $.mage.__('Please enter a valid email address.'),\r\n        url: $.mage.__('Please enter a valid URL.'),\r\n        date: $.mage.__('Please enter a valid date.'),\r\n        dateISO: $.mage.__('Please enter a valid date (ISO).'),\r\n        number: $.mage.__('Please enter a valid number.'),\r\n        digits: $.mage.__('Please enter only digits.'),\r\n        creditcard: $.mage.__('Please enter a valid credit card number.'),\r\n        equalTo: $.mage.__('Please enter the same value again.'),\r\n        maxlength: $.validator.format($.mage.__('Please enter no more than {0} characters.')),\r\n        minlength: $.validator.format($.mage.__('Please enter at least {0} characters.')),\r\n        rangelength: $.validator.format($.mage.__('Please enter a value between {0} and {1} characters long.')),\r\n        range: $.validator.format($.mage.__('Please enter a value between {0} and {1}.')),\r\n        max: $.validator.format($.mage.__('Please enter a value less than or equal to {0}.')),\r\n        min: $.validator.format($.mage.__('Please enter a value greater than or equal to {0}.'))\r\n    });\r\n\r\n    if ($.metadata) {\r\n        // Setting the type as html5 to enable data-validate attribute\r\n        $.metadata.setType('html5');\r\n    }\r\n\r\n    showLabel = $.validator.prototype.showLabel;\r\n    $.extend(true, $.validator.prototype, {\r\n        /**\r\n         * @param {*} element\r\n         * @param {*} message\r\n         */\r\n        showLabel: function (element, message) {\r\n            var label, elem;\r\n\r\n            showLabel.call(this, element, message);\r\n\r\n            // ARIA (adding aria-invalid & aria-describedby)\r\n            label = this.errorsFor(element);\r\n            elem = $(element);\r\n\r\n            if (!label.attr('id')) {\r\n                label.attr('id', this.idOrName(element) + '-error');\r\n            }\r\n            elem.attr('aria-invalid', 'true')\r\n                .attr('aria-describedby', label.attr('id'));\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Validate form field without instantiating validate plug-in.\r\n     *\r\n     * @param {Element|String} element - DOM element or selector\r\n     * @return {Boolean} validation result\r\n     */\r\n    $.validator.validateElement = function (element) {\r\n        var form, validator, valid, classes;\r\n\r\n        element = $(element);\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n        valid = true;\r\n        classes = element.prop('class').split(' ');\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            if (this.methods[className] && !this.methods[className](element.val(), element.get(0))) {\r\n                valid = false;\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    originValidateDelegate = $.fn.validateDelegate;\r\n\r\n    /**\r\n     * @return {*}\r\n     */\r\n    $.fn.validateDelegate = function () {\r\n        if (!this[0].form) {\r\n            return this;\r\n        }\r\n\r\n        return originValidateDelegate.apply(this, arguments);\r\n    };\r\n\r\n    /**\r\n     * Validate single element.\r\n     *\r\n     * @param {Element} element\r\n     * @param {Object} config\r\n     * @returns {*}\r\n     */\r\n    $.validator.validateSingleElement = function (element, config) {\r\n        var errors = {},\r\n            valid = true,\r\n            validateConfig = {\r\n                errorElement: 'label',\r\n                ignore: '.ignore-validate',\r\n                hideError: false\r\n            },\r\n            form, validator, classes, elementValue;\r\n\r\n        $.extend(validateConfig, config);\r\n        element = $(element).not(validateConfig.ignore);\r\n\r\n        if (!element.length) {\r\n            return true;\r\n        }\r\n\r\n        form = element.get(0).form;\r\n        validator = form ? $(form).data('validator') : null;\r\n\r\n        if (validator) {\r\n            return validator.element(element.get(0));\r\n        }\r\n\r\n        classes = element.prop('class').split(' ');\r\n        validator = element.parent().data('validator') ||\r\n            $.mage.validation(validateConfig, element.parent()).validate;\r\n\r\n        element.removeClass(validator.settings.errorClass);\r\n        validator.toHide = validator.toShow;\r\n        validator.hideErrors();\r\n        validator.toShow = validator.toHide = $([]);\r\n\r\n        $.each(classes, $.proxy(function (i, className) {\r\n            elementValue = element.val();\r\n\r\n            if (element.is(':checkbox') || element.is(':radio')) {\r\n                elementValue = element.is(':checked') || null;\r\n            }\r\n\r\n            if (this.methods[className] && !this.methods[className](elementValue, element.get(0))) {\r\n                valid = false;\r\n                errors[element.get(0).name] = this.messages[className];\r\n                validator.invalid[element.get(0).name] = true;\r\n\r\n                if (!validateConfig.hideError) {\r\n                    validator.showErrors(errors);\r\n                }\r\n\r\n                return valid;\r\n            }\r\n        }, this));\r\n\r\n        return valid;\r\n    };\r\n\r\n    $.widget('mage.validation', {\r\n        options: {\r\n            meta: 'validate',\r\n            onfocusout: false,\r\n            onkeyup: false,\r\n            onclick: false,\r\n            ignoreTitle: true,\r\n            errorClass: 'mage-error',\r\n            errorElement: 'div',\r\n\r\n            /**\r\n             * @param {*} error\r\n             * @param {*} element\r\n             */\r\n            errorPlacement: function (error, element) {\r\n                var errorPlacement = element,\r\n                    fieldWrapper;\r\n\r\n                // logic for date-picker error placement\r\n                if (element.hasClass('_has-datepicker')) {\r\n                    errorPlacement = element.siblings('button');\r\n                }\r\n                // logic for field wrapper\r\n                fieldWrapper = element.closest('.addon');\r\n\r\n                if (fieldWrapper.length) {\r\n                    errorPlacement = fieldWrapper.after(error);\r\n                }\r\n                //logic for checkboxes/radio\r\n                if (element.is(':checkbox') || element.is(':radio')) {\r\n                    errorPlacement = element.parents('.control').children().last();\r\n\r\n                    //fallback if group does not have .control parent\r\n                    if (!errorPlacement.length) {\r\n                        errorPlacement = element.siblings('label').last();\r\n                    }\r\n                }\r\n                //logic for control with tooltip\r\n                if (element.siblings('.tooltip').length) {\r\n                    errorPlacement = element.siblings('.tooltip');\r\n                }\r\n                //logic for select with tooltip in after element\r\n                if (element.next().find('.tooltip').length) {\r\n                    errorPlacement = element.next();\r\n                }\r\n                errorPlacement.after(error);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check if form pass validation rules without submit.\r\n         *\r\n         * @return boolean\r\n         */\r\n        isValid: function () {\r\n            return this.element.valid();\r\n        },\r\n\r\n        /**\r\n         * Remove validation error messages\r\n         */\r\n        clearError: function () {\r\n            if (arguments.length) {\r\n                $.each(arguments, $.proxy(function (index, item) {\r\n                    this.validate.prepareElement(item);\r\n                    this.validate.hideErrors();\r\n                }, this));\r\n            } else {\r\n                this.validate.resetForm();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validation creation.\r\n         *\r\n         * @protected\r\n         */\r\n        _create: function () {\r\n            this.validate = this.element.validate(this.options);\r\n\r\n            // ARIA (adding aria-required attribute)\r\n            this.element\r\n                .find('.field.required')\r\n                .find('.control')\r\n                .find('input, select, textarea')\r\n                .attr('aria-required', 'true');\r\n\r\n            this._listenFormValidate();\r\n        },\r\n\r\n        /**\r\n         * Validation listening.\r\n         *\r\n         * @protected\r\n         */\r\n        _listenFormValidate: function () {\r\n            $('form').on('invalid-form.validate', this.listenFormValidateHandler);\r\n        },\r\n\r\n        /**\r\n         * Handle form validation. Focus on first invalid form field.\r\n         *\r\n         * @param {jQuery.Event} event\r\n         * @param {Object} validation\r\n         */\r\n        listenFormValidateHandler: function (event, validation) {\r\n            var firstActive = $(validation.errorList[0].element || []),\r\n                lastActive = $(validation.findLastActive() ||\r\n                    validation.errorList.length && validation.errorList[0].element || []),\r\n                windowHeight = $(window).height(),\r\n                parent, successList;\r\n\r\n            if (lastActive.is(':hidden')) {\r\n                parent = lastActive.parent();\r\n                $('html, body').animate({\r\n                    scrollTop: parent.offset().top - windowHeight / 2\r\n                });\r\n            }\r\n\r\n            // ARIA (removing aria attributes if success)\r\n            successList = validation.successList;\r\n\r\n            if (successList.length) {\r\n                $.each(successList, function () {\r\n                    $(this)\r\n                        .removeAttr('aria-describedby')\r\n                        .removeAttr('aria-invalid');\r\n                });\r\n            }\r\n\r\n            if (firstActive.length) {\r\n                $('html, body').stop().animate({\r\n                    scrollTop: firstActive.parent().offset().top - windowHeight / 2\r\n                });\r\n                firstActive.focus();\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.validation;\r\n});\r\n","mage/apply/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    './scripts'\r\n], function (_, $, processScripts) {\r\n    'use strict';\r\n\r\n    var dataAttr = 'data-mage-init',\r\n        nodeSelector = '[' + dataAttr + ']';\r\n\r\n    /**\r\n     * Initializes components assigned to a specified element via data-* attribute.\r\n     *\r\n     * @param {HTMLElement} el - Element to initialize components with.\r\n     * @param {Object|String} config - Initial components' config.\r\n     * @param {String} component - Components' path.\r\n     */\r\n    function init(el, config, component) {\r\n        require([component], function (fn) {\r\n            var $el;\r\n\r\n            if (typeof fn === 'object') {\r\n                fn = fn[component].bind(fn);\r\n            }\r\n\r\n            if (_.isFunction(fn)) {\r\n                fn = fn.bind(null, config, el);\r\n            } else {\r\n                $el = $(el);\r\n\r\n                if ($el[component]) {\r\n                    // eslint-disable-next-line jquery-no-bind-unbind\r\n                    fn = $el[component].bind($el, config);\r\n                }\r\n            }\r\n            // Init module in separate task to prevent blocking main thread.\r\n            setTimeout(fn);\r\n        }, function (error) {\r\n            if ('console' in window && typeof window.console.error === 'function') {\r\n                console.error(error);\r\n            }\r\n\r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parses elements 'data-mage-init' attribute as a valid JSON data.\r\n     * Note: data-mage-init attribute will be removed.\r\n     *\r\n     * @param {HTMLElement} el - Element whose attribute should be parsed.\r\n     * @returns {Object}\r\n     */\r\n    function getData(el) {\r\n        var data = el.getAttribute(dataAttr);\r\n\r\n        el.removeAttribute(dataAttr);\r\n\r\n        return {\r\n            el: el,\r\n            data: JSON.parse(data)\r\n        };\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Initializes components assigned to HTML elements via [data-mage-init].\r\n         *\r\n         * @example Sample 'data-mage-init' declaration.\r\n         *      data-mage-init='{\"path/to/component\": {\"foo\": \"bar\"}}'\r\n         */\r\n        apply: function (context) {\r\n            var virtuals = processScripts(!context ? document : context),\r\n                nodes = document.querySelectorAll(nodeSelector);\r\n\r\n            _.toArray(nodes)\r\n                .map(getData)\r\n                .concat(virtuals)\r\n                .forEach(function (itemContainer) {\r\n                    var element = itemContainer.el;\r\n\r\n                    _.each(itemContainer.data, function (obj, key) {\r\n                            if (obj.mixins) {\r\n                                require(obj.mixins, function () { //eslint-disable-line max-nested-callbacks\r\n                                    var i, len;\r\n\r\n                                    for (i = 0, len = arguments.length; i < len; i++) {\r\n                                        $.extend(\r\n                                            true,\r\n                                            itemContainer.data[key],\r\n                                            arguments[i](itemContainer.data[key], element)\r\n                                        );\r\n                                    }\r\n\r\n                                    delete obj.mixins;\r\n                                    init.call(null, element, obj, key);\r\n                                });\r\n                            } else {\r\n                                init.call(null, element, obj, key);\r\n                            }\r\n\r\n                        }\r\n                    );\r\n\r\n                });\r\n        },\r\n        applyFor: init\r\n    };\r\n});\r\n","mage/apply/scripts.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery'\r\n], function (_, $) {\r\n    'use strict';\r\n\r\n    var scriptSelector = 'script[type=\"text/x-magento-init\"]',\r\n        dataAttr = 'data-mage-init',\r\n        virtuals = [];\r\n\r\n    /**\r\n     * Adds components to the virtual list.\r\n     *\r\n     * @param {Object} components\r\n     */\r\n    function addVirtual(components) {\r\n        virtuals.push({\r\n            el: false,\r\n            data: components\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Merges provided data with a current data\r\n     * of a elements' \"data-mage-init\" attribute.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {HTMLElement} elem - Element whose data should be modified.\r\n     */\r\n    function setData(components, elem) {\r\n        var data = elem.getAttribute(dataAttr);\r\n\r\n        data = data ? JSON.parse(data) : {};\r\n        _.each(components, function (obj, key) {\r\n            if (_.has(obj, 'mixins')) {\r\n                data[key] = data[key] || {};\r\n                data[key].mixins = data[key].mixins || [];\r\n                data[key].mixins = data[key].mixins.concat(obj.mixins);\r\n                delete obj.mixins;\r\n            }\r\n        });\r\n\r\n        data = $.extend(true, data, components);\r\n        data = JSON.stringify(data);\r\n        elem.setAttribute(dataAttr, data);\r\n    }\r\n\r\n    /**\r\n     * Search for the elements by privded selector and extends theirs data.\r\n     *\r\n     * @param {Object} components - Object with components and theirs configuration.\r\n     * @param {String} selector - Selector for the elements.\r\n     */\r\n    function processElems(components, selector) {\r\n        var elems,\r\n            iterator;\r\n\r\n        if (selector === '*') {\r\n            addVirtual(components);\r\n\r\n            return;\r\n        }\r\n\r\n        elems = document.querySelectorAll(selector);\r\n        iterator = setData.bind(null, components);\r\n\r\n        _.toArray(elems).forEach(iterator);\r\n    }\r\n\r\n    /**\r\n     * Parses content of a provided script node.\r\n     * Note: node will be removed from DOM.\r\n     *\r\n     * @param {HTMLScriptElement} node - Node to be processed.\r\n     * @returns {Object}\r\n     */\r\n    function getNodeData(node) {\r\n        var data = node.textContent;\r\n\r\n        node.parentNode.removeChild(node);\r\n\r\n        return JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Parses 'script' tags with a custom type attribute and moves it's data\r\n     * to a 'data-mage-init' attribute of an element found by provided selector.\r\n     * Note: All found script nodes will be removed from DOM.\r\n     *\r\n     * @returns {Array} An array of components not assigned to the specific element.\r\n     *\r\n     * @example Sample declaration.\r\n     *      <script type=\"text/x-magento-init\">\r\n     *          {\r\n     *              \"body\": {\r\n     *                  \"path/to/component\": {\"foo\": \"bar\"}\r\n     *              }\r\n     *          }\r\n     *      </script>\r\n     *\r\n     * @example Providing data without selector.\r\n     *      {\r\n     *          \"*\": {\r\n     *              \"path/to/component\": {\"bar\": \"baz\"}\r\n     *          }\r\n     *      }\r\n     */\r\n    return function () {\r\n        var nodes = document.querySelectorAll(scriptSelector);\r\n\r\n        _.toArray(nodes)\r\n            .map(getNodeData)\r\n            .forEach(function (item) {\r\n                _.each(item, processElems);\r\n            });\r\n\r\n        return virtuals.splice(0, virtuals.length);\r\n    };\r\n});\r\n","mage/gallery/gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'fotorama/fotorama',\r\n    'underscore',\r\n    'matchMedia',\r\n    'mage/template',\r\n    'text!mage/gallery/gallery.html',\r\n    'uiClass',\r\n    'mage/translate'\r\n], function ($, fotorama, _, mediaCheck, template, galleryTpl, Class, $t) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Retrieves index if the main item.\r\n     * @param {Array.<Object>} data - Set of gallery items.\r\n     */\r\n    var getMainImageIndex = function (data) {\r\n            var mainIndex;\r\n\r\n            if (_.every(data, function (item) {\r\n                    return _.isObject(item);\r\n                })\r\n            ) {\r\n                mainIndex = _.findIndex(data, function (item) {\r\n                    return item.isMain;\r\n                });\r\n            }\r\n\r\n            return mainIndex > 0 ? mainIndex : 0;\r\n        },\r\n\r\n        /**\r\n         * Helper for parse translate property\r\n         *\r\n         * @param {Element} el - el that to parse\r\n         * @returns {Array} - array of properties.\r\n         */\r\n        getTranslate = function (el) {\r\n            var slideTransform = $(el).attr('style').split(';');\r\n\r\n            slideTransform = $.map(slideTransform, function (style) {\r\n                style = style.trim();\r\n\r\n                if (style.startsWith('transform: translate3d')) {\r\n                    return style.match(/transform: translate3d\\((.+)px,(.+)px,(.+)px\\)/);\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n            return slideTransform.filter(Boolean);\r\n        },\r\n\r\n        /**\r\n         * @param {*} str\r\n         * @return {*}\r\n         * @private\r\n         */\r\n        _toNumber = function (str) {\r\n            var type = typeof str;\r\n\r\n            if (type === 'string') {\r\n                return parseInt(str); //eslint-disable-line radix\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n    return Class.extend({\r\n\r\n        defaults: {\r\n            settings: {},\r\n            config: {},\r\n            startConfig: {}\r\n        },\r\n\r\n        /**\r\n         * Checks if device has touch interface.\r\n         * @return {Boolean} The result of searching touch events on device.\r\n         */\r\n        isTouchEnabled: (function () {\r\n            return 'ontouchstart' in document.documentElement;\r\n        })(),\r\n\r\n        /**\r\n         * Initializes gallery.\r\n         * @param {Object} config - Gallery configuration.\r\n         * @param {String} element - String selector of gallery DOM element.\r\n         */\r\n        initialize: function (config, element) {\r\n            var self = this;\r\n\r\n            this._super();\r\n\r\n            _.bindAll(this,\r\n                '_focusSwitcher'\r\n            );\r\n\r\n            /*turn off arrows for touch devices*/\r\n            if (this.isTouchEnabled) {\r\n                config.options.arrows = false;\r\n\r\n                if (config.fullscreen) {\r\n                    config.fullscreen.arrows = false;\r\n                }\r\n            }\r\n\r\n            config.options.width = _toNumber(config.options.width);\r\n            config.options.height = _toNumber(config.options.height);\r\n            config.options.thumbwidth = _toNumber(config.options.thumbwidth);\r\n            config.options.thumbheight = _toNumber(config.options.thumbheight);\r\n\r\n            config.options.swipe = true;\r\n            this.config = config;\r\n\r\n            this.settings = {\r\n                $element: $(element),\r\n                $pageWrapper: $('body>.page-wrapper'),\r\n                currentConfig: config,\r\n                defaultConfig: _.clone(config),\r\n                fullscreenConfig: _.clone(config.fullscreen),\r\n                breakpoints: config.breakpoints,\r\n                activeBreakpoint: {},\r\n                fotoramaApi: null,\r\n                isFullscreen: false,\r\n                api: null,\r\n                data: _.clone(config.data)\r\n            };\r\n            config.options.ratio = config.options.width / config.options.height;\r\n            config.options.height = null;\r\n\r\n            $.extend(true, this.startConfig, config);\r\n\r\n            this.initGallery();\r\n            this.initApi();\r\n            this.setupBreakpoints();\r\n            this.initFullscreenSettings();\r\n\r\n            this.settings.$element.on('click', '.fotorama__stage__frame', function () {\r\n                if (\r\n                    !$(this).parents('.fotorama__shadows--left, .fotorama__shadows--right').length &&\r\n                    !$(this).hasClass('fotorama-video-container')\r\n                ) {\r\n                    self.openFullScreen();\r\n                }\r\n            });\r\n\r\n            if (this.isTouchEnabled && this.settings.isFullscreen) {\r\n                this.settings.$element.on('tap', '.fotorama__stage__frame', function () {\r\n                    var translate = getTranslate($(this).parents('.fotorama__stage__shaft'));\r\n\r\n                    if (translate[1] === '0' && !$(this).hasClass('fotorama-video-container')) {\r\n                        self.openFullScreen();\r\n                        self.settings.$pageWrapper.hide();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Open gallery fullscreen\r\n         */\r\n        openFullScreen: function () {\r\n            this.settings.api.fotorama.requestFullScreen();\r\n            this.settings.$fullscreenIcon.css({\r\n                opacity: 1,\r\n                visibility: 'visible',\r\n                display: 'block'\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Gallery fullscreen settings.\r\n         */\r\n        initFullscreenSettings: function () {\r\n            var settings = this.settings,\r\n                self = this;\r\n\r\n            settings.$gallery = this.settings.$element.find('[data-gallery-role=\"gallery\"]');\r\n            settings.$fullscreenIcon = this.settings.$element.find('[data-gallery-role=\"fotorama__fullscreen-icon\"]');\r\n            settings.focusableStart = this.settings.$element.find('[data-gallery-role=\"fotorama__focusable-start\"]');\r\n            settings.focusableEnd = this.settings.$element.find('[data-gallery-role=\"fotorama__focusable-end\"]');\r\n            settings.closeIcon = this.settings.$element.find('[data-gallery-role=\"fotorama__fullscreen-icon\"]');\r\n            settings.fullscreenConfig.swipe = true;\r\n\r\n            settings.$gallery.on('fotorama:fullscreenenter', function () {\r\n                settings.closeIcon.show();\r\n                settings.focusableStart.attr('tabindex', '0');\r\n                settings.focusableEnd.attr('tabindex', '0');\r\n                settings.focusableStart.on('focusin', self._focusSwitcher);\r\n                settings.focusableEnd.on('focusin', self._focusSwitcher);\r\n                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n\r\n                if (!_.isEqual(settings.activeBreakpoint, {}) && settings.breakpoints) {\r\n                    settings.api.updateOptions(settings.activeBreakpoint.options, true);\r\n                }\r\n                settings.isFullscreen = true;\r\n            });\r\n\r\n            settings.$gallery.on('fotorama:fullscreenexit', function () {\r\n                settings.closeIcon.hide();\r\n                settings.focusableStart.attr('tabindex', '-1');\r\n                settings.focusableEnd.attr('tabindex', '-1');\r\n                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n                settings.focusableStart.off('focusin', this._focusSwitcher);\r\n                settings.focusableEnd.off('focusin', this._focusSwitcher);\r\n                settings.closeIcon.hide();\r\n\r\n                if (!_.isEqual(settings.activeBreakpoint, {}) && settings.breakpoints) {\r\n                    settings.api.updateOptions(settings.activeBreakpoint.options, true);\r\n                }\r\n                settings.isFullscreen = false;\r\n                settings.$element.data('gallery').updateOptions({\r\n                    swipe: true\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Switcher focus.\r\n         */\r\n        _focusSwitcher: function (e) {\r\n            var target = $(e.target),\r\n                settings = this.settings;\r\n\r\n            if (target.is(settings.focusableStart)) {\r\n                this._setFocus('start');\r\n            } else if (target.is(settings.focusableEnd)) {\r\n                this._setFocus('end');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set focus to element.\r\n         * @param {String} position - can be \"start\" and \"end\"\r\n         *      positions.\r\n         *      If position is \"end\" - sets focus to first\r\n         *      focusable element in modal window scope.\r\n         *      If position is \"start\" - sets focus to last\r\n         *      focusable element in modal window scope\r\n         */\r\n        _setFocus: function (position) {\r\n            var settings = this.settings,\r\n                focusableElements,\r\n                infelicity;\r\n\r\n            if (position === 'end') {\r\n                settings.$gallery.find(settings.closeIcon).trigger('focus');\r\n            } else if (position === 'start') {\r\n                infelicity = 3; //Constant for find last focusable element\r\n                focusableElements = settings.$gallery.find(':focusable');\r\n                focusableElements.eq(focusableElements.length - infelicity).trigger('focus');\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes gallery with configuration options.\r\n         */\r\n        initGallery: function () {\r\n            var breakpoints = {},\r\n                settings = this.settings,\r\n                config = this.config,\r\n                tpl = template(galleryTpl, {\r\n                    next: $t('Next'),\r\n                    previous: $t('Previous')\r\n                }),\r\n                mainImageIndex,\r\n                $element = settings.$element,\r\n                $fotoramaElement,\r\n                $fotoramaStage;\r\n\r\n            if (settings.breakpoints) {\r\n                _.each(_.values(settings.breakpoints), function (breakpoint) {\r\n                    var conditions;\r\n\r\n                    _.each(_.pairs(breakpoint.conditions), function (pair) {\r\n                        conditions = conditions ? conditions + ' and (' + pair[0] + ': ' + pair[1] + ')' :\r\n                        '(' + pair[0] + ': ' + pair[1] + ')';\r\n                    });\r\n                    breakpoints[conditions] = breakpoint.options;\r\n                });\r\n                settings.breakpoints = breakpoints;\r\n            }\r\n\r\n            _.extend(config, config.options,\r\n                {\r\n                    options: undefined,\r\n                    click: false,\r\n                    breakpoints: null\r\n                }\r\n            );\r\n            settings.currentConfig = config;\r\n\r\n            $element\r\n                .css('min-height', settings.$element.height())\r\n                .append(tpl);\r\n\r\n            $fotoramaElement = $element.find('[data-gallery-role=\"gallery\"]');\r\n\r\n            $fotoramaStage = $fotoramaElement.find('.fotorama__stage');\r\n            $fotoramaStage.css('position', 'absolute');\r\n\r\n            $fotoramaElement.fotorama(config);\r\n            $fotoramaElement.find('.fotorama__stage__frame.fotorama__active')\r\n                    .one('f:load', function () {\r\n                        // Remove placeholder when main gallery image loads.\r\n                        $element.find('.gallery-placeholder__image').remove();\r\n                        $element\r\n                            .removeClass('_block-content-loading')\r\n                            .css('min-height', '');\r\n\r\n                        $fotoramaStage.css('position', '');\r\n                    });\r\n            settings.$elementF = $fotoramaElement;\r\n            settings.fotoramaApi = $fotoramaElement.data('fotorama');\r\n\r\n            $.extend(true, config, this.startConfig);\r\n\r\n            mainImageIndex = getMainImageIndex(config.data);\r\n\r\n            if (mainImageIndex) {\r\n                this.settings.fotoramaApi.show({\r\n                    index: mainImageIndex,\r\n                    time: 0\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates breakpoints for gallery.\r\n         */\r\n        setupBreakpoints: function () {\r\n            var pairs,\r\n                settings = this.settings,\r\n                config = this.config,\r\n                startConfig = this.startConfig,\r\n                isInitialized = {},\r\n                isTouchEnabled = this.isTouchEnabled;\r\n\r\n            if (_.isObject(settings.breakpoints)) {\r\n                pairs = _.pairs(settings.breakpoints);\r\n                _.each(pairs, function (pair) {\r\n                    var mediaQuery = pair[0];\r\n\r\n                    isInitialized[mediaQuery] = false;\r\n                    mediaCheck({\r\n                        media: mediaQuery,\r\n\r\n                        /**\r\n                         * Is triggered when breakpoint enties.\r\n                         */\r\n                        entry: function () {\r\n                            $.extend(true, config, _.clone(startConfig));\r\n\r\n                            settings.api.updateOptions(settings.defaultConfig.options, true);\r\n\r\n                            if (settings.isFullscreen) {\r\n                                settings.api.updateOptions(settings.fullscreenConfig, true);\r\n                            }\r\n\r\n                            if (isTouchEnabled) {\r\n                                settings.breakpoints[mediaQuery].options.arrows = false;\r\n\r\n                                if (settings.breakpoints[mediaQuery].options.fullscreen) {\r\n                                    settings.breakpoints[mediaQuery].options.fullscreen.arrows = false;\r\n                                }\r\n                            }\r\n\r\n                            settings.api.updateOptions(settings.breakpoints[mediaQuery].options, true);\r\n                            $.extend(true, config, settings.breakpoints[mediaQuery]);\r\n                            settings.activeBreakpoint = settings.breakpoints[mediaQuery];\r\n\r\n                            isInitialized[mediaQuery] = true;\r\n                        },\r\n\r\n                        /**\r\n                         * Is triggered when breakpoint exits.\r\n                         */\r\n                        exit: function () {\r\n                            if (isInitialized[mediaQuery]) {\r\n                                $.extend(true, config, _.clone(startConfig));\r\n                                settings.api.updateOptions(settings.defaultConfig.options, true);\r\n\r\n                                if (settings.isFullscreen) {\r\n                                    settings.api.updateOptions(settings.fullscreenConfig, true);\r\n                                }\r\n                                settings.activeBreakpoint = {};\r\n                            } else {\r\n                                isInitialized[mediaQuery] = true;\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Creates gallery's API.\r\n         */\r\n        initApi: function () {\r\n            var settings = this.settings,\r\n                config = this.config,\r\n                api = {\r\n\r\n                    /**\r\n                     * Contains fotorama's API methods.\r\n                     */\r\n                    fotorama: settings.fotoramaApi,\r\n\r\n                    /**\r\n                     * Displays the last image on preview.\r\n                     */\r\n                    last: function () {\r\n                        settings.fotoramaApi.show('>>');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays the first image on preview.\r\n                     */\r\n                    first: function () {\r\n                        settings.fotoramaApi.show('<<');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays previous element on preview.\r\n                     */\r\n                    prev: function () {\r\n                        settings.fotoramaApi.show('<');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays next element on preview.\r\n                     */\r\n                    next: function () {\r\n                        settings.fotoramaApi.show('>');\r\n                    },\r\n\r\n                    /**\r\n                     * Displays image with appropriate count number on preview.\r\n                     * @param {Number} index - Number of image that should be displayed.\r\n                     */\r\n                    seek: function (index) {\r\n                        if (_.isNumber(index) && index !== 0) {\r\n\r\n                            if (index > 0) {\r\n                                index -= 1;\r\n                            }\r\n                            settings.fotoramaApi.show(index);\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery with new set of options.\r\n                     * @param {Object} configuration - Standart gallery configuration object.\r\n                     * @param {Boolean} isInternal - Is this function called via breakpoints.\r\n                     */\r\n                    updateOptions: function (configuration, isInternal) {\r\n\r\n                        var $selectable = $('a[href], area[href], input, select, ' +\r\n                                'textarea, button, iframe, object, embed, *[tabindex], *[contenteditable]')\r\n                                .not('[tabindex=-1], [disabled], :hidden'),\r\n                            $focus = $(':focus'),\r\n                            index;\r\n\r\n                        if (_.isObject(configuration)) {\r\n\r\n                            //Saves index of focus\r\n                            $selectable.each(function (number) {\r\n                                if ($(this).is($focus)) {\r\n                                    index = number;\r\n                                }\r\n                            });\r\n\r\n                            if (this.isTouchEnabled) {\r\n                                configuration.arrows = false;\r\n                            }\r\n                            configuration.click = false;\r\n                            configuration.breakpoints = null;\r\n\r\n                            if (!isInternal) {\r\n                                !_.isEqual(settings.activeBreakpoint, {} && settings.breakpoints) ?\r\n                                    $.extend(true, settings.activeBreakpoint.options, configuration) :\r\n\r\n                                    settings.isFullscreen ?\r\n                                        $.extend(true, settings.fullscreenConfig, configuration) :\r\n                                        $.extend(true, settings.defaultConfig.options, configuration);\r\n\r\n                            }\r\n                            $.extend(true, settings.currentConfig.options, configuration);\r\n                            settings.fotoramaApi.setOptions(settings.currentConfig.options);\r\n\r\n                            if (_.isNumber(index)) {\r\n                                $selectable.eq(index).trigger('focus');\r\n                            }\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery with specific set of items.\r\n                     * @param {Array.<Object>} data - Set of gallery items to update.\r\n                     */\r\n                    updateData: function (data) {\r\n                        var mainImageIndex;\r\n\r\n                        if (_.isArray(data)) {\r\n                            settings.fotoramaApi.load(data);\r\n                            mainImageIndex = getMainImageIndex(data);\r\n\r\n                            if (settings.fotoramaApi.activeIndex !== mainImageIndex) {\r\n                                settings.fotoramaApi.show({\r\n                                    index: mainImageIndex,\r\n                                    time: 0\r\n                                });\r\n                            }\r\n\r\n                            $.extend(false, settings, {\r\n                                data: data,\r\n                                defaultConfig: data\r\n                            });\r\n                            $.extend(false, config, {\r\n                                data: data\r\n                            });\r\n                        }\r\n                    },\r\n\r\n                    /**\r\n                     * Returns current images list\r\n                     *\r\n                     * @returns {Array}\r\n                     */\r\n                    returnCurrentImages: function () {\r\n                        var images = [];\r\n\r\n                        _.each(this.fotorama.data, function (item) {\r\n                            images.push(_.omit(item, '$navThumbFrame', '$navDotFrame', '$stageFrame', 'labelledby'));\r\n                        });\r\n\r\n                        return images;\r\n                    },\r\n\r\n                    /**\r\n                     * Updates gallery data partially by index\r\n                     * @param {Number} index - Index of image in data array to be updated.\r\n                     * @param {Object} item - Standart gallery image object.\r\n                     *\r\n                     */\r\n                    updateDataByIndex: function (index, item) {\r\n                        settings.fotoramaApi.spliceByIndex(index, item);\r\n                    }\r\n                };\r\n\r\n            settings.$element.data('gallery', api);\r\n            settings.api = settings.$element.data('gallery');\r\n            settings.$element.trigger('gallery:loaded');\r\n        }\r\n    });\r\n});\r\n","mage/msie/file-reader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Init \"readAsBinaryString\" function for FileReader class.\r\n     * It need for IE11\r\n     * @param {Blob} fileData\r\n     */\r\n    var readAsBinaryStringIEFunc = function (fileData) {\r\n        var binary = '',\r\n            self = this,\r\n            reader = new FileReader();\r\n\r\n        /**\r\n         * Read file as binary string\r\n         */\r\n        reader.onload = function () {\r\n            var bytes, length, index;\r\n\r\n            /* eslint-disable no-undef */\r\n            bytes = new Uint8Array(reader.result);\r\n            /* eslint-enable */\r\n            length = bytes.length;\r\n\r\n            for (index = 0; index < length; index++) {\r\n                binary += String.fromCharCode(bytes[index]);\r\n            }\r\n            //self.result  - readonly so assign binary\r\n            self.content = binary;\r\n            $(self).trigger('onload');\r\n        };\r\n        reader.readAsArrayBuffer(fileData);\r\n    };\r\n\r\n    if (typeof FileReader.prototype.readAsBinaryString === 'undefined') {\r\n        FileReader.prototype.readAsBinaryString = readAsBinaryStringIEFunc;\r\n    }\r\n});\r\n","mage/utils/arrays.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    './strings'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Defines index of an item in a specified container.\r\n     *\r\n     * @param {*} item - Item whose index should be defined.\r\n     * @param {Array} container - Container upon which to perform search.\r\n     * @returns {Number}\r\n     */\r\n    function getIndex(item, container) {\r\n        var index = container.indexOf(item);\r\n\r\n        if (~index) {\r\n            return index;\r\n        }\r\n\r\n        return _.findIndex(container, function (value) {\r\n            return value && value.name === item;\r\n        });\r\n    }\r\n\r\n    return {\r\n        /**\r\n         * Facade method to remove/add value from/to array\r\n         * without creating a new instance.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to add/remove.\r\n         * @param {Boolean} add - Flag that specfies operation.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        toggle: function (arr, value, add) {\r\n            return add ?\r\n                this.add(arr, value) :\r\n                this.remove(arr, value);\r\n        },\r\n\r\n        /**\r\n         * Removes the incoming value from array in case\r\n         * without creating a new instance of it.\r\n         *\r\n         * @param {Array} arr - Array to be modified.\r\n         * @param {*} value - Value to be removed.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        remove: function (arr, value) {\r\n            var index = arr.indexOf(value);\r\n\r\n            if (~index) {\r\n                arr.splice(index, 1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Adds the incoming value to array if\r\n         * it's not alredy present in there.\r\n         *\r\n         * @param {Array} arr - Array to be modifed.\r\n         * @param {...*} arguments - Values to be added.\r\n         * @returns {Utils} Chainable.\r\n         */\r\n        add: function (arr) {\r\n            var values = _.toArray(arguments).slice(1);\r\n\r\n            values.forEach(function (value) {\r\n                if (!~arr.indexOf(value)) {\r\n                    arr.push(value);\r\n                }\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Inserts specified item into container at a specified position.\r\n         *\r\n         * @param {*} item - Item to be inserted into container.\r\n         * @param {Array} container - Container of items.\r\n         * @param {*} [position=-1] - Position at which item should be inserted.\r\n         *      Position can represent:\r\n         *          - specific index in container\r\n         *          - item which might already be present in container\r\n         *          - structure with one of these properties: after, before\r\n         * @returns {Boolean|*}\r\n         *      - true if element has changed its' position\r\n         *      - false if nothing has changed\r\n         *      - inserted value if it wasn't present in container\r\n         */\r\n        insert: function (item, container, position) {\r\n            var currentIndex = getIndex(item, container),\r\n                newIndex,\r\n                target;\r\n\r\n            if (typeof position === 'undefined') {\r\n                position = -1;\r\n            } else if (typeof position === 'string') {\r\n                position = isNaN(+position) ? position : +position;\r\n            }\r\n\r\n            newIndex = position;\r\n\r\n            if (~currentIndex) {\r\n                target = container.splice(currentIndex, 1)[0];\r\n\r\n                if (typeof item === 'string') {\r\n                    item = target;\r\n                }\r\n            }\r\n\r\n            if (typeof position !== 'number') {\r\n                target = position.after || position.before || position;\r\n\r\n                newIndex = getIndex(target, container);\r\n\r\n                if (~newIndex && (position.after || newIndex >= currentIndex)) {\r\n                    newIndex++;\r\n                }\r\n            }\r\n\r\n            if (newIndex < 0) {\r\n                newIndex += container.length + 1;\r\n            }\r\n\r\n            container[newIndex] ?\r\n                container.splice(newIndex, 0, item) :\r\n                container[newIndex] = item;\r\n\r\n            return !~currentIndex ? item : currentIndex !== newIndex;\r\n        },\r\n\r\n        /**\r\n         * @param {Array} elems\r\n         * @param {Number} offset\r\n         * @return {Number|*}\r\n         */\r\n        formatOffset: function (elems, offset) {\r\n            if (utils.isEmpty(offset)) {\r\n                offset = -1;\r\n            }\r\n\r\n            offset = +offset;\r\n\r\n            if (offset < 0) {\r\n                offset += elems.length + 1;\r\n            }\r\n\r\n            return offset;\r\n        }\r\n    };\r\n});\r\n","mage/utils/compare.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'mage/utils/objects'\r\n], function (_, utils) {\r\n    'use strict';\r\n\r\n    var result = [];\r\n\r\n    /**\r\n     * Checks if all of the provided arrays contains equal values.\r\n     *\r\n     * @param {(Boolean|Array)} [keepOrder=false]\r\n     * @param {Array} target\r\n     * @returns {Boolean}\r\n     */\r\n    function equalArrays(keepOrder, target) {\r\n        var args = _.toArray(arguments),\r\n            arrays;\r\n\r\n        if (!Array.isArray(keepOrder)) {\r\n            arrays      = args.slice(2);\r\n        } else {\r\n            target      = keepOrder;\r\n            keepOrder   = false;\r\n            arrays      = args.slice(1);\r\n        }\r\n\r\n        if (!arrays.length) {\r\n            return true;\r\n        }\r\n\r\n        return arrays.every(function (array) {\r\n            if (array === target) {\r\n                return true;\r\n            } else if (array.length !== target.length) {\r\n                return false;\r\n            } else if (!keepOrder) {\r\n                return !_.difference(target, array).length;\r\n            }\r\n\r\n            return array.every(function (value, index) {\r\n                return target[index] === value;\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks if two values are different.\r\n     *\r\n     * @param {*} a - First value.\r\n     * @param {*} b - Second value.\r\n     * @returns {Boolean}\r\n     */\r\n    function isDifferent(a, b) {\r\n        var oldIsPrimitive = utils.isPrimitive(a);\r\n\r\n        if (Array.isArray(a) && Array.isArray(b)) {\r\n            return !equalArrays(true, a, b);\r\n        }\r\n\r\n        return oldIsPrimitive ? a !== b : true;\r\n    }\r\n\r\n    /**\r\n     * @param {String} prefix\r\n     * @param {String} part\r\n     */\r\n    function getPath(prefix, part) {\r\n        return prefix ? prefix + '.' + part : part;\r\n    }\r\n\r\n    /**\r\n     * Checks if object has own specified property.\r\n     *\r\n     * @param {*} obj - Value to be checked.\r\n     * @param {String} key - Key of the property.\r\n     * @returns {Boolean}\r\n     */\r\n    function hasOwn(obj, key) {\r\n        return Object.prototype.hasOwnProperty.call(obj, key);\r\n    }\r\n\r\n    /**\r\n     * @param {Array} changes\r\n     */\r\n    function getContainers(changes) {\r\n        var containers  = {},\r\n            indexed     = _.indexBy(changes, 'path');\r\n\r\n        _.each(indexed, function (change, name) {\r\n            var path;\r\n\r\n            name.split('.').forEach(function (part) {\r\n                path = getPath(path, part);\r\n\r\n                if (path in indexed) {\r\n                    return;\r\n                }\r\n\r\n                (containers[path] = containers[path] || []).push(change);\r\n            });\r\n        });\r\n\r\n        return containers;\r\n    }\r\n\r\n    /**\r\n     * @param {String} path\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} newValue\r\n     * @param {String} oldValue\r\n     */\r\n    function addChange(path, name, type, newValue, oldValue) {\r\n        var data;\r\n\r\n        data = {\r\n            path: path,\r\n            name: name,\r\n            type: type\r\n        };\r\n\r\n        if (type !== 'remove') {\r\n            data.value = newValue;\r\n            data.oldValue = oldValue;\r\n        } else {\r\n            data.oldValue = newValue;\r\n        }\r\n\r\n        result.push(data);\r\n    }\r\n\r\n    /**\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     * @param {String} type\r\n     * @param {String} iterator\r\n     * @param {String} placeholder\r\n     */\r\n    function setAll(ns, name, type, iterator, placeholder) {\r\n        var key;\r\n\r\n        if (arguments.length > 4) {\r\n            type === 'add' ?\r\n                addChange(ns, name, 'update', iterator, placeholder) :\r\n                addChange(ns, name, 'update', placeholder, iterator);\r\n        } else {\r\n            addChange(ns, name, type, iterator);\r\n        }\r\n\r\n        if (!utils.isObject(iterator)) {\r\n            return;\r\n        }\r\n\r\n        for (key in iterator) {\r\n            if (hasOwn(iterator, key)) {\r\n                setAll(getPath(ns, key), key, type, iterator[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*eslint-disable max-depth*/\r\n    /**\r\n     * @param {Object} old\r\n     * @param {Object} current\r\n     * @param {String} ns\r\n     * @param {String} name\r\n     */\r\n    function compare(old, current, ns, name) {\r\n        var key,\r\n            oldIsObj = utils.isObject(old),\r\n            newIsObj = utils.isObject(current);\r\n\r\n        if (oldIsObj && newIsObj) {\r\n            for (key in old) {\r\n                if (hasOwn(old, key) && !hasOwn(current, key)) {\r\n                    setAll(getPath(ns, key), key, 'remove', old[key]);\r\n                }\r\n            }\r\n\r\n            for (key in current) {\r\n                if (hasOwn(current, key)) {\r\n                    hasOwn(old, key) ?\r\n                        compare(old[key], current[key], getPath(ns, key), key) :\r\n                        setAll(getPath(ns, key), key, 'add', current[key]);\r\n                }\r\n            }\r\n        } else if (oldIsObj) {\r\n            setAll(ns, name, 'remove', old, current);\r\n        } else if (newIsObj) {\r\n            setAll(ns, name, 'add', current, old);\r\n        } else if (isDifferent(old, current)) {\r\n            addChange(ns, name, 'update', current, old);\r\n        }\r\n    }\r\n\r\n    /*eslint-enable max-depth*/\r\n\r\n    return {\r\n\r\n        /**\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        compare: function () {\r\n            var changes;\r\n\r\n            compare.apply(null, arguments);\r\n\r\n            changes = result.splice(0);\r\n\r\n            return {\r\n                containers: getContainers(changes),\r\n                changes: changes,\r\n                equal: !changes.length\r\n            };\r\n        },\r\n\r\n        equalArrays: equalArrays\r\n    };\r\n});\r\n","mage/utils/main.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine(function (require) {\r\n    'use strict';\r\n\r\n    var utils = {},\r\n        _ = require('underscore'),\r\n        root = typeof self == 'object' && self.self === self && self ||\r\n            typeof global == 'object' && global.global === global && global ||\r\n            Function('return this')() || {};\r\n\r\n    root._ = _;\r\n\r\n    return _.extend(\r\n        utils,\r\n        require('./arrays'),\r\n        require('./compare'),\r\n        require('./misc'),\r\n        require('./objects'),\r\n        require('./strings'),\r\n        require('./template')\r\n    );\r\n});\r\n","mage/utils/misc.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mage/utils/objects'\r\n], function (_, $, utils) {\r\n    'use strict';\r\n\r\n    var defaultAttributes,\r\n        ajaxSettings,\r\n        map;\r\n\r\n    defaultAttributes = {\r\n        method: 'post',\r\n        enctype: 'multipart/form-data'\r\n    };\r\n\r\n    ajaxSettings = {\r\n        default: {\r\n            method: 'POST',\r\n            cache: false,\r\n            processData: false,\r\n            contentType: false\r\n        },\r\n        simple: {\r\n            method: 'POST',\r\n            dataType: 'json'\r\n        }\r\n    };\r\n\r\n    map = {\r\n        'D': 'DDD',\r\n        'dd': 'DD',\r\n        'd': 'D',\r\n        'EEEE': 'dddd',\r\n        'EEE': 'ddd',\r\n        'e': 'd',\r\n        'yyyy': 'YYYY',\r\n        'yy': 'YY',\r\n        'y': 'YYYY',\r\n        'a': 'A'\r\n    };\r\n\r\n    return {\r\n\r\n        /**\r\n         * Generates a unique identifier.\r\n         *\r\n         * @param {Number} [size=7] - Length of a resulting identifier.\r\n         * @returns {String}\r\n         */\r\n        uniqueid: function (size) {\r\n            var code = Math.random() * 25 + 65 | 0,\r\n                idstr = String.fromCharCode(code);\r\n\r\n            size = size || 7;\r\n\r\n            while (idstr.length < size) {\r\n                code = Math.floor(Math.random() * 42 + 48);\r\n\r\n                if (code < 58 || code > 64) {\r\n                    idstr += String.fromCharCode(code);\r\n                }\r\n            }\r\n\r\n            return idstr;\r\n        },\r\n\r\n        /**\r\n         * Limits function call.\r\n         *\r\n         * @param {Object} owner\r\n         * @param {String} target\r\n         * @param {Number} limit\r\n         */\r\n        limit: function (owner, target, limit) {\r\n            var fn = owner[target];\r\n\r\n            owner[target] = _.debounce(fn.bind(owner), limit);\r\n        },\r\n\r\n        /**\r\n         * Converts mage date format to a moment.js format.\r\n         *\r\n         * @param {String} mageFormat\r\n         * @returns {String}\r\n         */\r\n        normalizeDate: function (mageFormat) {\r\n            var result = mageFormat;\r\n\r\n            _.each(map, function (moment, mage) {\r\n                result = result.replace(\r\n                    new RegExp(mage + '(?=([^\\u0027]*\\u0027[^\\u0027]*\\u0027)*[^\\u0027]*$)'),\r\n                    moment\r\n                );\r\n            });\r\n            result = result.replace(/'(.*?)'/g, '[$1]');\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Puts provided value in range of min and max parameters.\r\n         *\r\n         * @param {Number} value - Value to be located.\r\n         * @param {Number} min - Min value.\r\n         * @param {Number} max - Max value.\r\n         * @returns {Number}\r\n         */\r\n        inRange: function (value, min, max) {\r\n            return Math.min(Math.max(min, value), max);\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} attrs - Attributes that will be added to virtual form.\r\n         */\r\n        submit: function (options, attrs) {\r\n            var form        = document.createElement('form'),\r\n                data        = utils.serialize(options.data),\r\n                attributes  = _.extend({}, defaultAttributes, attrs || {});\r\n\r\n            if (!attributes.action) {\r\n                attributes.action = options.url;\r\n            }\r\n\r\n            data['form_key'] = window.FORM_KEY;\r\n\r\n            _.each(attributes, function (value, name) {\r\n                form.setAttribute(name, value);\r\n            });\r\n\r\n            data = _.map(\r\n                data,\r\n                function (value, name) {\r\n                    return '<input type=\"hidden\" ' +\r\n                        'name=\"' + _.escape(name) + '\" ' +\r\n                        'value=\"' + _.escape(value) + '\"' +\r\n                        ' />';\r\n                }\r\n            ).join('');\r\n\r\n            form.insertAdjacentHTML('afterbegin', data);\r\n            document.body.appendChild(form);\r\n\r\n            form.submit();\r\n        },\r\n\r\n        /**\r\n         * Serializes and sends data via AJAX POST request.\r\n         *\r\n         * @param {Object} options - Options object that consists of\r\n         *      a 'url' and 'data' properties.\r\n         * @param {Object} config\r\n         */\r\n        ajaxSubmit: function (options, config) {\r\n            var t = new Date().getTime(),\r\n                settings;\r\n\r\n            options.data['form_key'] = window.FORM_KEY;\r\n            options.data = this.prepareFormData(options.data, config.ajaxSaveType);\r\n            settings = _.extend({}, ajaxSettings[config.ajaxSaveType], options || {});\r\n\r\n            if (!config.ignoreProcessEvents) {\r\n                $('body').trigger('processStart');\r\n            }\r\n\r\n            return $.ajax(settings)\r\n                .done(function (data) {\r\n                    if (config.response) {\r\n                        data.t = t;\r\n                        config.response.data(data);\r\n                        config.response.status(undefined);\r\n                        config.response.status(!data.error);\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    if (config.response) {\r\n                        config.response.status(undefined);\r\n                        config.response.status(false);\r\n                        config.response.data({\r\n                            error: true,\r\n                            messages: 'Something went wrong.',\r\n                            t: t\r\n                        });\r\n                    }\r\n                })\r\n                .always(function () {\r\n                    if (!config.ignoreProcessEvents) {\r\n                        $('body').trigger('processStop');\r\n                    }\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Creates FormData object and append this data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} type\r\n         * @returns {FormData}\r\n         */\r\n        prepareFormData: function (data, type) {\r\n            var formData;\r\n\r\n            if (type === 'default') {\r\n                formData = new FormData();\r\n                _.each(utils.serialize(data), function (val, name) {\r\n                    formData.append(name, val);\r\n                });\r\n            } else if (type === 'simple') {\r\n                formData = utils.serialize(data);\r\n            }\r\n\r\n            return formData;\r\n        },\r\n\r\n        /**\r\n         * Filters data object. Finds properties with suffix\r\n         * and sets their values to properties with the same name without suffix.\r\n         *\r\n         * @param {Object} data - The data object that should be filtered\r\n         * @param {String} suffix - The string by which data object should be filtered\r\n         * @param {String} separator - The string that is separator between property and suffix\r\n         *\r\n         * @returns {Object} Filtered data object\r\n         */\r\n        filterFormData: function (data, suffix, separator) {\r\n            data = data || {};\r\n            suffix = suffix || 'prepared-for-send';\r\n            separator = separator || '-';\r\n\r\n            _.each(data, function (value, key) {\r\n                if (_.isObject(value) && !Array.isArray(value)) {\r\n                    this.filterFormData(value, suffix, separator);\r\n                } else if (_.isString(key) && ~key.indexOf(suffix)) {\r\n                    data[key.split(separator)[0]] = value;\r\n                    delete data[key];\r\n                }\r\n            }, this);\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Replaces special characters with their corresponding HTML entities.\r\n         *\r\n         * @param {String} string - Text to escape.\r\n         * @returns {String} Escaped text.\r\n         */\r\n        escape: function (string) {\r\n            return string ? $('<p></p>').text(string).html().replace(/\"/g, '&quot;') : string;\r\n        },\r\n\r\n        /**\r\n         * Replaces symbol codes with their unescaped counterparts.\r\n         *\r\n         * @param {String} data\r\n         *\r\n         * @returns {String}\r\n         */\r\n        unescape: function (data) {\r\n            var unescaped = _.unescape(data),\r\n                mapCharacters = {\r\n                    '&#039;': '\\''\r\n                };\r\n\r\n            _.each(mapCharacters, function (value, key) {\r\n                unescaped = unescaped.replace(key, value);\r\n            });\r\n\r\n            return unescaped;\r\n        },\r\n\r\n        /**\r\n         * Converts PHP IntlFormatter format to moment format.\r\n         *\r\n         * @param {String} format - PHP format\r\n         * @returns {String} - moment compatible formatting\r\n         */\r\n        convertToMomentFormat: function (format) {\r\n            var newFormat;\r\n\r\n            newFormat = format.replace(/yyyy|yy|y/, 'YYYY'); // replace the year\r\n            newFormat = newFormat.replace(/dd|d/g, 'DD'); // replace the date\r\n\r\n            return newFormat;\r\n        },\r\n\r\n        /**\r\n         * Get Url Parameters.\r\n         *\r\n         * @param {String} url - Url string\r\n         * @returns {Object}\r\n         */\r\n        getUrlParameters: function (url) {\r\n            var params = {},\r\n                queries = url.split('?'),\r\n                temp,\r\n                i,\r\n                l;\r\n\r\n            if (!queries[1]) {\r\n                return params;\r\n            }\r\n\r\n            queries = queries[1].split('&');\r\n\r\n            for (i = 0, l = queries.length; i < l; i++) {\r\n                temp = queries[i].split('=');\r\n\r\n                if (temp[1]) {\r\n                    params[temp[0]] = decodeURIComponent(temp[1].replace(/\\+/g, '%20'));\r\n                } else {\r\n                    params[temp[0]] = '';\r\n                }\r\n            }\r\n\r\n            return params;\r\n        }\r\n    };\r\n});\r\n","mage/utils/objects.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/strings'\r\n], function (ko, $, _, stringUtils) {\r\n    'use strict';\r\n\r\n    var primitives = [\r\n        'undefined',\r\n        'boolean',\r\n        'number',\r\n        'string'\r\n    ];\r\n\r\n    /**\r\n     * Sets nested property of a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @param {*} value - Value of the last property in 'path' array.\r\n     * returns {*} New value for the property.\r\n     */\r\n    function setNested(parent, path, value) {\r\n        var last = path.pop(),\r\n            len = path.length,\r\n            pi = 0,\r\n            part = path[pi];\r\n\r\n        for (; pi < len; part = path[++pi]) {\r\n            if (!_.isObject(parent[part])) {\r\n                parent[part] = {};\r\n            }\r\n\r\n            parent = parent[part];\r\n        }\r\n\r\n        if (typeof parent[last] === 'function') {\r\n            parent[last](value);\r\n        } else {\r\n            parent[last] = value;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves value of a nested property.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object to look inside for the properties.\r\n     * @param {Array} path - Splitted path the property.\r\n     * @returns {*} Value of the property.\r\n     */\r\n    function getNested(parent, path) {\r\n        var exists = true,\r\n            len = path.length,\r\n            pi = 0;\r\n\r\n        for (; pi < len && exists; pi++) {\r\n            parent = parent[path[pi]];\r\n\r\n            if (typeof parent === 'undefined') {\r\n                exists = false;\r\n            }\r\n        }\r\n\r\n        if (exists) {\r\n            if (ko.isObservable(parent)) {\r\n                parent = parent();\r\n            }\r\n\r\n            return parent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes property from a specified object.\r\n     * @private\r\n     *\r\n     * @param {Object} parent - Object from which to remove property.\r\n     * @param {Array} path - Splitted path to the property.\r\n     */\r\n    function removeNested(parent, path) {\r\n        var field = path.pop();\r\n\r\n        parent = getNested(parent, path);\r\n\r\n        if (_.isObject(parent)) {\r\n            delete parent[field];\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Retrieves or defines objects' property by a composite path.\r\n         *\r\n         * @param {Object} data - Container for the properties specified in path.\r\n         * @param {String} path - Objects' properties divided by dots.\r\n         * @param {*} [value] - New value for the last property.\r\n         * @returns {*} Returns value of the last property in chain.\r\n         *\r\n         * @example\r\n         *      utils.nested({}, 'one.two', 3);\r\n         *      => { one: {two: 3} }\r\n         */\r\n        nested: function (data, path, value) {\r\n            var action = arguments.length > 2 ? setNested : getNested;\r\n\r\n            path = path ? path.split('.') : [];\r\n\r\n            return action(data, path, value);\r\n        },\r\n\r\n        /**\r\n         * Removes nested property from an object.\r\n         *\r\n         * @param {Object} data - Data source.\r\n         * @param {String} path - Path to the property e.g. 'one.two.three'\r\n         */\r\n        nestedRemove: function (data, path) {\r\n            path = path.split('.');\r\n\r\n            removeNested(data, path);\r\n        },\r\n\r\n        /**\r\n         * Flattens objects' nested properties.\r\n         *\r\n         * @param {Object} data - Object to flatten.\r\n         * @param {String} [separator='.'] - Objects' keys separator.\r\n         * @returns {Object} Flattened object.\r\n         *\r\n         * @example Example with a default separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }});\r\n         *      => { 'one.two.three': 'value' };\r\n         *\r\n         * @example Example with a custom separator.\r\n         *      utils.flatten({one: { two: { three: 'value'} }}, '=>');\r\n         *      => {'one=>two=>three': 'value'};\r\n         */\r\n        flatten: function (data, separator, parent, result) {\r\n            separator = separator || '.';\r\n            result = result || {};\r\n\r\n            if (!data) {\r\n                return result;\r\n            }\r\n\r\n            // UnderscoreJS each breaks when an object has a length property so we use Object.keys\r\n            _.each(Object.keys(data), function (name) {\r\n                var node = data[name];\r\n\r\n                if ({}.toString.call(node) === '[object Function]') {\r\n                    return;\r\n                }\r\n\r\n                if (parent) {\r\n                    name = parent + separator + name;\r\n                }\r\n\r\n                typeof node === 'object' ?\r\n                    this.flatten(node, separator, name, result) :\r\n                    result[name] = node;\r\n\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Opposite operation of the 'flatten' method.\r\n         *\r\n         * @param {Object} data - Previously flattened object.\r\n         * @param {String} [separator='.'] - Keys separator.\r\n         * @returns {Object} Object with nested properties.\r\n         *\r\n         * @example Example using custom separator.\r\n         *      utils.unflatten({'one=>two': 'value'}, '=>');\r\n         *      => {\r\n         *          one: { two: 'value' }\r\n         *      };\r\n         */\r\n        unflatten: function (data, separator) {\r\n            var result = {};\r\n\r\n            separator = separator || '.';\r\n\r\n            _.each(data, function (value, nodes) {\r\n                nodes = nodes.split(separator);\r\n\r\n                setNested(result, nodes, value);\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Same operation as 'flatten' method,\r\n         * but returns objects' keys wrapped in '[]'.\r\n         *\r\n         * @param {Object} data - Object that should be serialized.\r\n         * @returns {Object} Serialized data.\r\n         *\r\n         * @example\r\n         *      utils.serialize({one: { two: { three: 'value'} }});\r\n         *      => { 'one[two][three]': 'value' }\r\n         */\r\n        serialize: function (data) {\r\n            var result = {};\r\n\r\n            data = this.flatten(data);\r\n\r\n            _.each(data, function (value, keys) {\r\n                keys = stringUtils.serializeName(keys);\r\n                value = _.isUndefined(value) ? '' : value;\r\n\r\n                result[keys] = value;\r\n            }, this);\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs deep extend of specified objects.\r\n         *\r\n         * @returns {Object|Array} Extended object.\r\n         */\r\n        extend: function () {\r\n            var args = _.toArray(arguments);\r\n\r\n            args.unshift(true);\r\n\r\n            return $.extend.apply($, args);\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         *\r\n         * @param {(Object|Array)} data - Data that should be copied.\r\n         * @returns {Object|Array} Cloned object.\r\n         */\r\n        copy: function (data) {\r\n            var result = data,\r\n                isArray = Array.isArray(data),\r\n                placeholder;\r\n\r\n            if (this.isObject(data) || isArray) {\r\n                placeholder = isArray ? [] : {};\r\n                result = this.extend(placeholder, data);\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Performs a deep clone of a specified object.\r\n         * Doesn't save links to original object.\r\n         *\r\n         * @param {*} original - Object to clone\r\n         * @returns {*}\r\n         */\r\n        hardCopy: function (original) {\r\n            if (original === null || typeof original !== 'object') {\r\n                return original;\r\n            }\r\n\r\n            return JSON.parse(JSON.stringify(original));\r\n        },\r\n\r\n        /**\r\n         * Removes specified nested properties from the target object.\r\n         *\r\n         * @param {Object} target - Object whose properties should be removed.\r\n         * @param {(...String|Array|Object)} list - List that specifies properties to be removed.\r\n         * @returns {Object} Modified object.\r\n         *\r\n         * @example Basic usage\r\n         *      var obj = {a: {b: 2}, c: 'a'};\r\n         *\r\n         *      omit(obj, 'a.b');\r\n         *      => {'a.b': 2};\r\n         *      obj => {a: {}, c: 'a'};\r\n         *\r\n         * @example Various syntaxes that would return same result\r\n         *      omit(obj, ['a.b', 'c']);\r\n         *      omit(obj, 'a.b', 'c');\r\n         *      omit(obj, {'a.b': true, 'c': true});\r\n         */\r\n        omit: function (target, list) {\r\n            var removed = {},\r\n                ignored = list;\r\n\r\n            if (this.isObject(list)) {\r\n                ignored = [];\r\n\r\n                _.each(list, function (value, key) {\r\n                    if (value) {\r\n                        ignored.push(key);\r\n                    }\r\n                });\r\n            } else if (_.isString(list)) {\r\n                ignored = _.toArray(arguments).slice(1);\r\n            }\r\n\r\n            _.each(ignored, function (path) {\r\n                var value = this.nested(target, path);\r\n\r\n                if (!_.isUndefined(value)) {\r\n                    removed[path] = value;\r\n\r\n                    this.nestedRemove(target, path);\r\n                }\r\n            }, this);\r\n\r\n            return removed;\r\n        },\r\n\r\n        /**\r\n         * Checks if provided value is a plain object.\r\n         *\r\n         * @param {*} value - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isObject: function (value) {\r\n            var objProto = Object.prototype;\r\n\r\n            return typeof value == 'object' ?\r\n            objProto.toString.call(value) === '[object Object]' :\r\n                false;\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @param {*} value\r\n         * @returns {Boolean}\r\n         */\r\n        isPrimitive: function (value) {\r\n            return value === null || ~primitives.indexOf(typeof value);\r\n        },\r\n\r\n        /**\r\n         * Iterates over obj props/array elems recursively, applying action to each one\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to be called with each item as an argument.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         */\r\n        forEachRecursive: function (data, action, maxDepth) {\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                action(data);\r\n\r\n                return;\r\n            }\r\n\r\n            _.each(data, function (value) {\r\n                this.forEachRecursive(value, action, maxDepth);\r\n            }, this);\r\n\r\n            action(data);\r\n        },\r\n\r\n        /**\r\n         * Maps obj props/array elems recursively\r\n         *\r\n         * @param {Object|Array} data - Data to be iterated.\r\n         * @param {Function} action - Callback to transform each item.\r\n         * @param {Number} [maxDepth=7] - Max recursion depth.\r\n         *\r\n         * @returns {Object|Array}\r\n         */\r\n        mapRecursive: function (data, action, maxDepth) {\r\n            var newData;\r\n\r\n            maxDepth = typeof maxDepth === 'number' && !isNaN(maxDepth) ? maxDepth - 1 : 7;\r\n\r\n            if (!_.isFunction(action) || _.isFunction(data) || maxDepth < 0) {\r\n                return data;\r\n            }\r\n\r\n            if (!_.isObject(data)) {\r\n                return action(data);\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                newData = _.map(data, function (item) {\r\n                    return this.mapRecursive(item, action, maxDepth);\r\n                }, this);\r\n\r\n                return action(newData);\r\n            }\r\n\r\n            newData = _.mapObject(data, function (val, key) {\r\n                if (data.hasOwnProperty(key)) {\r\n                    return this.mapRecursive(val, action, maxDepth);\r\n                }\r\n\r\n                return val;\r\n            }, this);\r\n\r\n            return action(newData);\r\n        },\r\n\r\n        /**\r\n         * Removes empty(in common sence) obj props/array elems\r\n         *\r\n         * @param {*} data - Data to be cleaned.\r\n         * @returns {*}\r\n         */\r\n        removeEmptyValues: function (data) {\r\n            if (!_.isObject(data)) {\r\n                return data;\r\n            }\r\n\r\n            if (_.isArray(data)) {\r\n                return data.filter(function (item) {\r\n                    return !this.isEmptyObj(item);\r\n                }, this);\r\n            }\r\n\r\n            return _.omit(data, this.isEmptyObj.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Checks that argument of any type is empty in common sence:\r\n         * empty string, string with spaces only, object without own props, empty array, null or undefined\r\n         *\r\n         * @param {*} val - Value to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmptyObj: function (val) {\r\n\r\n            return _.isObject(val) && _.isEmpty(val) ||\r\n            this.isEmpty(val) ||\r\n            val && val.trim && this.isEmpty(val.trim());\r\n        }\r\n    };\r\n});\r\n\r\n","mage/utils/strings.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    var jsonRe = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Attempts to convert string to one of the primitive values,\r\n         * or to parse it as a valid json object.\r\n         *\r\n         * @param {String} str - String to be processed.\r\n         * @returns {*}\r\n         */\r\n        castString: function (str) {\r\n            try {\r\n                str = str === 'true' ? true :\r\n                    str === 'false' ? false :\r\n                        str === 'null' ? null :\r\n                            +str + '' === str ? +str :\r\n                                jsonRe.test(str) ? JSON.parse(str) :\r\n                                    str;\r\n            } catch (e) {\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        /**\r\n         * Splits string by separator if it's possible,\r\n         * otherwise returns the incoming value.\r\n         *\r\n         * @param {(String|Array|*)} str - String to split.\r\n         * @param {String} [separator=' '] - Seperator based on which to split the string.\r\n         * @returns {Array|*} Splitted string or the incoming value.\r\n         */\r\n        stringToArray: function (str, separator) {\r\n            separator = separator || ' ';\r\n\r\n            return typeof str === 'string' ?\r\n                str.split(separator) :\r\n                str;\r\n        },\r\n\r\n        /**\r\n         * Converts the incoming string which consists\r\n         * of a specified delimiters into a format commonly used in form elements.\r\n         *\r\n         * @param {String} name - The incoming string.\r\n         * @param {String} [separator='.']\r\n         * @returns {String} Serialized string.\r\n         *\r\n         * @example\r\n         *      utils.serializeName('one.two.three');\r\n         *      => 'one[two][three]';\r\n         */\r\n        serializeName: function (name, separator) {\r\n            var result;\r\n\r\n            separator = separator || '.';\r\n            name = name.split(separator);\r\n\r\n            result = name.shift();\r\n\r\n            name.forEach(function (part) {\r\n                result += '[' + part + ']';\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming value is not empty,\r\n         * e.g. not 'null' or 'undefined'\r\n         *\r\n         * @param {*} value - Value to check.\r\n         * @returns {Boolean}\r\n         */\r\n        isEmpty: function (value) {\r\n            return value === '' || _.isUndefined(value) || _.isNull(value);\r\n        },\r\n\r\n        /**\r\n         * Adds 'prefix' to the 'part' value if it was provided.\r\n         *\r\n         * @param {String} prefix\r\n         * @param {String} part\r\n         * @returns {String}\r\n         */\r\n        fullPath: function (prefix, part) {\r\n            return prefix ? prefix + '.' + part : part;\r\n        },\r\n\r\n        /**\r\n         * Splits incoming string and returns its' part specified by offset.\r\n         *\r\n         * @param {String} parts\r\n         * @param {Number} [offset]\r\n         * @param {String} [delimiter=.]\r\n         * @returns {String}\r\n         */\r\n        getPart: function (parts, offset, delimiter) {\r\n            delimiter = delimiter || '.';\r\n            parts = parts.split(delimiter);\r\n            offset = this.formatOffset(parts, offset);\r\n\r\n            parts.splice(offset, 1);\r\n\r\n            return parts.join(delimiter) || '';\r\n        },\r\n\r\n        /**\r\n         * Converts nameThroughCamelCase to name-through-minus\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        camelCaseToMinus: function camelCaseToMinus(string) {\r\n            return ('' + string)\r\n                .split('')\r\n                .map(function (symbol, index) {\r\n                    return index ?\r\n                        symbol.toUpperCase() === symbol ?\r\n                        '-' + symbol.toLowerCase() :\r\n                            symbol :\r\n                        symbol.toLowerCase();\r\n                })\r\n                .join('');\r\n        },\r\n\r\n        /**\r\n         * Converts name-through-minus to nameThroughCamelCase\r\n         *\r\n         * @param {String} string\r\n         * @returns {String}\r\n         */\r\n        minusToCamelCase: function minusToCamelCase(string) {\r\n            return ('' + string)\r\n                .split('-')\r\n                .map(function (part, index) {\r\n                    return index ? part.charAt(0).toUpperCase() + part.slice(1) : part;\r\n                })\r\n                .join('');\r\n        }\r\n    };\r\n});\r\n","mage/utils/template.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/* eslint-disable no-shadow */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/utils/objects',\r\n    'mage/utils/strings'\r\n], function ($, _, utils, stringUtils) {\r\n    'use strict';\r\n\r\n    var tmplSettings = _.templateSettings,\r\n        interpolate = /\\$\\{([\\s\\S]+?)\\}/g,\r\n        opener = '${',\r\n        template,\r\n        hasStringTmpls;\r\n\r\n    /**\r\n     * Identifies whether ES6 templates are supported.\r\n     */\r\n    hasStringTmpls = (function () {\r\n        var testString = 'var foo = \"bar\"; return `${ foo }` === foo';\r\n\r\n        try {\r\n            return Function(testString)();\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    })();\r\n\r\n    /**\r\n     * Objects can specify how to use templating for their properties - getting that configuration.\r\n     *\r\n     * To disable rendering for all properties of your object add __disableTmpl: true.\r\n     * To disable for specific property add __disableTmpl: {propertyName: true}.\r\n     * To limit recursion for a specific property add __disableTmpl: {propertyName: numberOfCycles}.\r\n     *\r\n     * @param {String} tmpl\r\n     * @param {Object | undefined} target\r\n     * @returns {Boolean|Object}\r\n     */\r\n    function isTmplIgnored(tmpl, target) {\r\n        var parsedTmpl;\r\n\r\n        try {\r\n            parsedTmpl = JSON.parse(tmpl);\r\n\r\n            if (typeof parsedTmpl === 'object') {\r\n                return tmpl.includes('__disableTmpl');\r\n            }\r\n        } catch (e) {\r\n        }\r\n\r\n        if (typeof target !== 'undefined') {\r\n            if (typeof target === 'object' && target.hasOwnProperty('__disableTmpl')) {\r\n                return target.__disableTmpl;\r\n            }\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    if (hasStringTmpls) {\r\n\r\n        /*eslint-disable no-unused-vars, no-eval*/\r\n        /**\r\n         * Evaluates template string using ES6 templates.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} $ - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, $) {\r\n            return eval('`' + tmpl + '`');\r\n        };\r\n\r\n        /*eslint-enable no-unused-vars, no-eval*/\r\n    } else {\r\n\r\n        /**\r\n         * Fallback function used when ES6 templates are not supported.\r\n         * Uses underscore templates renderer.\r\n         *\r\n         * @param {String} tmpl - Template string.\r\n         * @param {Object} data - Data object used in a template.\r\n         * @returns {String} Compiled template.\r\n         */\r\n        template = function (tmpl, data) {\r\n            var cached = tmplSettings.interpolate;\r\n\r\n            tmplSettings.interpolate = interpolate;\r\n\r\n            tmpl = _.template(tmpl, {\r\n                variable: '$'\r\n            })(data);\r\n\r\n            tmplSettings.interpolate = cached;\r\n\r\n            return tmpl;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checks if provided value contains template syntax.\r\n     *\r\n     * @param {*} value - Value to be checked.\r\n     * @returns {Boolean}\r\n     */\r\n    function isTemplate(value) {\r\n        return typeof value === 'string' &&\r\n            value.indexOf(opener) !== -1 &&\r\n            // the below pattern almost always indicates an accident which should not cause template evaluation\r\n            // refuse to evaluate\r\n            value.indexOf('${{') === -1;\r\n    }\r\n\r\n    /**\r\n     * Iteratively processes provided string\r\n     * until no templates syntax will be found.\r\n     *\r\n     * @param {String} tmpl - Template string.\r\n     * @param {Object} data - Data object used in a template.\r\n     * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n     *      should be casted after evaluation to a value of another type or\r\n     *      that it should be leaved as a string.\r\n     * @param {Number|undefined} maxCycles - Maximum number of rendering cycles, can be 0.\r\n     * @returns {*} Compiled template.\r\n     */\r\n    function render(tmpl, data, castString, maxCycles) {\r\n        var last = tmpl,\r\n            cycles = 0;\r\n\r\n        while (~tmpl.indexOf(opener) && (typeof maxCycles === 'undefined' || cycles < maxCycles)) {\r\n            if (!isTmplIgnored(tmpl)) {\r\n                tmpl = template(tmpl, data);\r\n            }\r\n\r\n            if (tmpl === last) {\r\n                break;\r\n            }\r\n\r\n            last = tmpl;\r\n            cycles++;\r\n        }\r\n\r\n        return castString ?\r\n            stringUtils.castString(tmpl) :\r\n            tmpl;\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Applies provided data to the template.\r\n         *\r\n         * @param {Object|String} tmpl\r\n         * @param {Object} [data] - Data object to match with template.\r\n         * @param {Boolean} [castString=false] - Flag that indicates whether template\r\n         *      should be casted after evaluation to a value of another type or\r\n         *      that it should be leaved as a string.\r\n         * @returns {*}\r\n         *\r\n         * @example Template defined as a string.\r\n         *      var source = { foo: 'Random Stuff', bar: 'Some' };\r\n         *\r\n         *      utils.template('${ $.bar } ${ $.foo }', source);\r\n         *      => 'Some Random Stuff';\r\n         *\r\n         * @example Template defined as an object.\r\n         *      var tmpl = {\r\n         *              key: {'${ $.$data.bar }': '${ $.$data.foo }'},\r\n         *              foo: 'bar',\r\n         *              x1: 2, x2: 5,\r\n         *              delta: '${ $.x2 - $.x1 }',\r\n         *              baz: 'Upper ${ $.foo.toUpperCase() }'\r\n         *      };\r\n         *\r\n         *      utils.template(tmpl, source);\r\n         *      => {\r\n         *          key: {'Some': 'Random Stuff'},\r\n         *          foo: 'bar',\r\n         *          x1: 2, x2: 5,\r\n         *          delta: 3,\r\n         *          baz: 'Upper BAR'\r\n         *      };\r\n         */\r\n        template: function (tmpl, data, castString, dontClone) {\r\n            if (typeof tmpl === 'string') {\r\n                return render(tmpl, data, castString);\r\n            }\r\n\r\n            if (!dontClone) {\r\n                tmpl = utils.copy(tmpl);\r\n            }\r\n\r\n            tmpl.$data = data || {};\r\n\r\n            /**\r\n             * Template iterator function.\r\n             */\r\n            _.each(tmpl, function iterate(value, key, list) {\r\n                var disabled,\r\n                    maxCycles;\r\n\r\n                if (key === '$data') {\r\n                    return;\r\n                }\r\n\r\n                if (isTemplate(key)) {\r\n                    delete list[key];\r\n\r\n                    key = render(key, tmpl);\r\n                    list[key] = value;\r\n                }\r\n\r\n                if (isTemplate(value)) {\r\n                    //Getting template disabling settings, can be true for all disabled and separate settings\r\n                    //for each property.\r\n                    disabled = isTmplIgnored(value, list);\r\n\r\n                    if (typeof disabled === 'object' && disabled.hasOwnProperty(key) && disabled[key] !== false) {\r\n                        //Checking if specific settings for a property provided.\r\n                        maxCycles = disabled[key];\r\n                    }\r\n\r\n                    if (disabled === true || maxCycles === true) {\r\n                        //Rendering for all properties is disabled.\r\n                        maxCycles = 0;\r\n                    }\r\n\r\n                    list[key] = render(value, tmpl, castString, maxCycles);\r\n                } else if ($.isPlainObject(value) || Array.isArray(value)) {\r\n                    _.each(value, iterate);\r\n                }\r\n            });\r\n\r\n            delete tmpl.$data;\r\n\r\n            return tmpl;\r\n        }\r\n    };\r\n});\r\n","mage/utils/wrapper.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Utility methods used to wrap and extend functions.\r\n *\r\n * @example Usage of a 'wrap' method with arguments delegation.\r\n *      var multiply = function (a, b) {\r\n *          return a * b;\r\n *      };\r\n *\r\n *      multiply = module.wrap(multiply, function (orig) {\r\n *          return 'Result is: ' + orig();\r\n *      });\r\n *\r\n *      multiply(2, 2);\r\n *      => 'Result is: 4'\r\n *\r\n * @example Usage of 'wrapSuper' method.\r\n *      var multiply = function (a, b) {\r\n *         return a * b;\r\n *      };\r\n *\r\n *      var obj = {\r\n *          multiply: module.wrapSuper(multiply, function () {\r\n *              return 'Result is: ' + this._super();\r\n *          });\r\n *      };\r\n *\r\n *      obj.multiply(2, 2);\r\n *      => 'Result is: 4'\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Checks if string has a '_super' substring.\r\n     */\r\n    var superReg = /\\b_super\\b/;\r\n\r\n    return {\r\n\r\n        /**\r\n         * Wraps target function with a specified wrapper, which will receive\r\n         * reference to the original function as a first argument.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapper function.\r\n         */\r\n        wrap: function (target, wrapper) {\r\n            if (!_.isFunction(target) || !_.isFunction(wrapper)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var args    = _.toArray(arguments),\r\n                    ctx     = this,\r\n                    _super;\r\n\r\n                /**\r\n                 * Function that will be passed to the wrapper.\r\n                 * If no arguments will be passed to it, then the original\r\n                 * function will be called with an arguments of a wrapper function.\r\n                 */\r\n                _super = function () {\r\n                    var superArgs = arguments.length ? arguments : args.slice(1);\r\n\r\n                    return target.apply(ctx, superArgs);\r\n                };\r\n\r\n                args.unshift(_super);\r\n\r\n                return wrapper.apply(ctx, args);\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Wraps the incoming function to implement support of the '_super' method.\r\n         *\r\n         * @param {Function} target - Function to be wrapped.\r\n         * @param {Function} wrapper - Wrapper function.\r\n         * @returns {Function} Wrapped function.\r\n         */\r\n        wrapSuper: function (target, wrapper) {\r\n            if (!this.hasSuper(wrapper) || !_.isFunction(target)) {\r\n                return wrapper;\r\n            }\r\n\r\n            return function () {\r\n                var _super  = this._super,\r\n                    args    = arguments,\r\n                    result;\r\n\r\n                /**\r\n                 * Temporary define '_super' method which\r\n                 * contains call to the original function.\r\n                 */\r\n                this._super = function () {\r\n                    var superArgs = arguments.length ? arguments : args;\r\n\r\n                    return target.apply(this, superArgs);\r\n                };\r\n\r\n                result = wrapper.apply(this, args);\r\n\r\n                this._super = _super;\r\n\r\n                return result;\r\n            };\r\n        },\r\n\r\n        /**\r\n         * Checks wether the incoming method contains calls of the '_super' method.\r\n         *\r\n         * @param {Function} fn - Function to be checked.\r\n         * @returns {Boolean}\r\n         */\r\n        hasSuper: function (fn) {\r\n            return _.isFunction(fn) && superReg.test(fn);\r\n        },\r\n\r\n        /**\r\n         * Extends target object with provided extenders.\r\n         * If property in target and extender objects is a function,\r\n         * then it will be wrapped using 'wrap' method.\r\n         *\r\n         * @param {Object} target - Object to be extended.\r\n         * @param {...Object} extenders - Multiple extenders objects.\r\n         * @returns {Object} Modified target object.\r\n         */\r\n        extend: function (target) {\r\n            var extenders = _.toArray(arguments).slice(1),\r\n                iterator = this._extend.bind(this, target);\r\n\r\n            extenders.forEach(iterator);\r\n\r\n            return target;\r\n        },\r\n\r\n        /**\r\n         * Same as the 'extend' method, but operates only on one extender object.\r\n         *\r\n         * @private\r\n         * @param {Object} target\r\n         * @param {Object} extender\r\n         */\r\n        _extend: function (target, extender) {\r\n            _.each(extender, function (value, key) {\r\n                target[key] = this.wrap(target[key], extender[key]);\r\n            }, this);\r\n        }\r\n    };\r\n});\r\n","mage/validation/url.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([], function () {\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        /**\r\n         * Redirects to the url if it is considered safe\r\n         *\r\n         * @param {String} path - url to be redirected to\r\n         */\r\n        redirect: function (path) {\r\n            path = this.sanitize(path);\r\n\r\n            if (this.validate(path)) {\r\n                window.location.href = path;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Validates url\r\n         *\r\n         * @param {Object} path - url to be validated\r\n         * @returns {Boolean}\r\n         */\r\n        validate: function (path) {\r\n            var hostname = window.location.hostname;\r\n\r\n            if (path.indexOf(hostname) === -1 ||\r\n                path.indexOf('javascript:') !== -1 ||\r\n                path.indexOf('vbscript:') !== -1) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Sanitize url, replacing disallowed chars\r\n         *\r\n         * @param {String} path - url to be normalized\r\n         * @returns {String}\r\n         */\r\n        sanitize: function (path) {\r\n            return path.replace('[^-A-Za-z0-9+&@#/%?=~_|!:,.;\\(\\)]', '');\r\n        }\r\n    };\r\n});\r\n","mage/validation/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/validation',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.each({\r\n        'validate-grouped-qty': [\r\n            function (value, element, params) {\r\n                var result = false,\r\n                    total = 0;\r\n\r\n                $(params).find('input[data-validate*=\"validate-grouped-qty\"]').each(function (i, e) {\r\n                    var val = $(e).val(),\r\n                        valInt;\r\n\r\n                    if (val && val.length > 0) {\r\n                        result = true;\r\n                        valInt = parseFloat(val) || 0;\r\n\r\n                        if (valInt >= 0) {\r\n                            total += valInt;\r\n                        } else {\r\n                            result = false;\r\n\r\n                            return result;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                return result && total > 0;\r\n            },\r\n            $.mage.__('Please specify the quantity of product(s).')\r\n        ],\r\n        'validate-one-checkbox-required-by-name': [\r\n            function (value, element, params) {\r\n                var checkedCount = 0,\r\n                    container;\r\n\r\n                if (element.type === 'checkbox') {\r\n                    $('[name=\"' + element.name + '\"]').each(\r\n                        function () {\r\n                            if ($(this).is(':checked')) {\r\n                                checkedCount += 1;\r\n\r\n                                return false;\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n                container = '#' + params;\r\n\r\n                if (checkedCount > 0) {\r\n                    $(container).removeClass('validation-failed');\r\n                    $(container).addClass('validation-passed');\r\n\r\n                    return true;\r\n                }\r\n                $(container).addClass('validation-failed');\r\n                $(container).removeClass('validation-passed');\r\n\r\n                return false;\r\n            },\r\n            $.mage.__('Please select one of the options.')\r\n        ],\r\n        'validate-date-between': [\r\n            function (value, element, params) {\r\n                var minDate = new Date(params[0]),\r\n                    maxDate = new Date(params[1]),\r\n                    inputDate = new Date(element.value),\r\n                    message;\r\n\r\n                minDate.setHours(0);\r\n                maxDate.setHours(0);\r\n\r\n                if (inputDate >= minDate && inputDate <= maxDate) {\r\n                    return true;\r\n                }\r\n                message = $.mage.__('Please enter a date between %min and %max.');\r\n                this.dateBetweenErrorMessage = message.replace('%min', minDate).replace('%max', maxDate);\r\n\r\n                return false;\r\n            },\r\n            function () {\r\n                return this.dateBetweenErrorMessage;\r\n            }\r\n        ],\r\n        'validate-dob': [\r\n            function (val, element, params) {\r\n                var dob = $(element).parents('.customer-dob'),\r\n                    dayVal, monthVal, yearVal, dobLength, day, month, year, curYear,\r\n                    validYearMessage, validateDayInMonth, validDateMessage, today, dateEntered;\r\n\r\n                $(dob).find('.' + this.settings.errorClass).removeClass(this.settings.errorClass);\r\n                dayVal = $(dob).find(params[0]).find('input:text').val();\r\n                monthVal = $(dob).find(params[1]).find('input:text').val();\r\n                yearVal = $(dob).find(params[2]).find('input:text').val();\r\n                dobLength = dayVal.length + monthVal.length + yearVal.length;\r\n\r\n                if (params[3] && dobLength === 0) {\r\n                    this.dobErrorMessage = $.mage.__('This is a required field.');\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (!params[3] && dobLength === 0) {\r\n                    return true;\r\n                }\r\n                day = parseInt(dayVal, 10) || 0;\r\n                month = parseInt(monthVal, 10) || 0;\r\n                year = parseInt(yearVal, 10) || 0;\r\n                curYear = new Date().getFullYear();\r\n\r\n                if (!day || !month || !year) {\r\n                    this.dobErrorMessage = $.mage.__('Please enter a valid full date.');\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (month < 1 || month > 12) {\r\n                    this.dobErrorMessage = $.mage.__('Please enter a valid month (1-12).');\r\n\r\n                    return false;\r\n                }\r\n\r\n                if (year < 1900 || year > curYear) {\r\n                    validYearMessage = $.mage.__('Please enter a valid year (1900-%1).');\r\n                    this.dobErrorMessage = validYearMessage.replace('%1', curYear.toString());\r\n\r\n                    return false;\r\n                }\r\n                validateDayInMonth = new Date(year, month, 0).getDate();\r\n\r\n                if (day < 1 || day > validateDayInMonth) {\r\n                    validDateMessage = $.mage.__('Please enter a valid day (1-%1).');\r\n                    this.dobErrorMessage = validDateMessage.replace('%1', validateDayInMonth.toString());\r\n\r\n                    return false;\r\n                }\r\n                today = new Date();\r\n                dateEntered = new Date();\r\n                dateEntered.setFullYear(year, month - 1, day);\r\n\r\n                if (dateEntered > today) {\r\n                    this.dobErrorMessage = $.mage.__('Please enter a date from the past.');\r\n\r\n                    return false;\r\n                }\r\n\r\n                day = day % 10 === day ? '0' + day : day;\r\n                month = month % 10 === month ? '0' + month : month;\r\n                $(element).val(month + '/' + day + '/' + year);\r\n\r\n                return true;\r\n            },\r\n            function () {\r\n                return this.dobErrorMessage;\r\n            }\r\n        ]\r\n    }, function (i, rule) {\r\n        rule.unshift(i);\r\n        $.validator.addMethod.apply($.validator, rule);\r\n    });\r\n});\r\n","Magento_Bundle/js/price-bundle.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'priceUtils',\r\n    'priceBox'\r\n], function ($, _, mageTemplate, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        optionConfig: null,\r\n        productBundleSelector: 'input.bundle.option, select.bundle.option, textarea.bundle.option',\r\n        qtyFieldSelector: 'input.qty',\r\n        priceBoxSelector: '.price-box',\r\n        optionHandlers: {},\r\n        optionTemplate: '<%- data.label %>' +\r\n            '<% if (data.finalPrice.value) { %>' +\r\n            ' +<%- data.finalPrice.formatted %>' +\r\n            '<% } %>',\r\n        controlContainer: 'dd', // should be eliminated\r\n        priceFormat: {},\r\n        isFixedPrice: false,\r\n        optionTierPricesBlocksSelector: '#option-tier-prices-{1} [data-role=\"selection-tier-prices\"]',\r\n        isOptionsInitialized: false\r\n    };\r\n\r\n    $.widget('mage.priceBundle', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function initPriceBundle() {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form);\r\n\r\n            options.trigger('change');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _create: function createPriceBundle() {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form),\r\n                priceBox = $(this.options.priceBoxSelector, form),\r\n                qty = $(this.options.qtyFieldSelector, form);\r\n\r\n            this._updatePriceBox();\r\n            priceBox.on('price-box-initialized', this._updatePriceBox.bind(this));\r\n            options.on('change', this._onBundleOptionChanged.bind(this));\r\n            qty.on('change', this._onQtyFieldChanged.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Update price box config with bundle option prices\r\n         * @private\r\n         */\r\n        _updatePriceBox: function () {\r\n            var form = this.element,\r\n                options = $(this.options.productBundleSelector, form),\r\n                priceBox = $(this.options.priceBoxSelector, form);\r\n\r\n            if (!this.options.isOptionsInitialized) {\r\n                if (priceBox.data('magePriceBox') &&\r\n                    priceBox.priceBox('option') &&\r\n                    priceBox.priceBox('option').priceConfig\r\n                ) {\r\n                    if (priceBox.priceBox('option').priceConfig.optionTemplate) { //eslint-disable-line max-depth\r\n                        this._setOption('optionTemplate', priceBox.priceBox('option').priceConfig.optionTemplate);\r\n                    }\r\n                    this._setOption('priceFormat', priceBox.priceBox('option').priceConfig.priceFormat);\r\n                    priceBox.priceBox('setDefault', this.options.optionConfig.prices);\r\n                    this.options.isOptionsInitialized = true;\r\n                }\r\n                this._applyOptionNodeFix(options);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handle change on bundle option inputs\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _onBundleOptionChanged: function onBundleOptionChanged(event) {\r\n            var changes,\r\n                bundleOption = $(event.target),\r\n                priceBox = $(this.options.priceBoxSelector, this.element),\r\n                handler = this.options.optionHandlers[bundleOption.data('role')];\r\n\r\n            bundleOption.data('optionContainer', bundleOption.closest(this.options.controlContainer));\r\n            bundleOption.data('qtyField', bundleOption.data('optionContainer').find(this.options.qtyFieldSelector));\r\n\r\n            if (handler && handler instanceof Function) {\r\n                changes = handler(bundleOption, this.options.optionConfig, this);\r\n            } else {\r\n                changes = defaultGetOptionValue(bundleOption, this.options.optionConfig);//eslint-disable-line\r\n            }\r\n\r\n            // eslint-disable-next-line no-use-before-define\r\n            if (isValidQty(bundleOption)) {\r\n                if (changes) {\r\n                    priceBox.trigger('updatePrice', changes);\r\n                }\r\n\r\n                this._displayTierPriceBlock(bundleOption);\r\n                this.updateProductSummary();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle change on qty inputs near bundle option\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _onQtyFieldChanged: function onQtyFieldChanged(event) {\r\n            var field = $(event.target),\r\n                optionInstance,\r\n                optionConfig;\r\n\r\n            if (field.data('optionId') && field.data('optionValueId')) {\r\n                optionInstance = field.data('option');\r\n                optionConfig = this.options.optionConfig\r\n                    .options[field.data('optionId')]\r\n                    .selections[field.data('optionValueId')];\r\n                optionConfig.qty = field.val();\r\n\r\n                // eslint-disable-next-line no-use-before-define\r\n                if (isValidQty(optionInstance)) {\r\n                    optionInstance.trigger('change');\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to fix backend behavior:\r\n         *  - if default qty large than 1 then backend multiply price in config\r\n         *\r\n         * @deprecated\r\n         * @private\r\n         */\r\n        _applyQtyFix: function applyQtyFix() {\r\n            var config = this.options.optionConfig;\r\n\r\n            if (config.isFixedPrice) {\r\n                _.each(config.options, function (option) {\r\n                    _.each(option.selections, function (item) {\r\n                        if (item.qty && item.qty !== 1) {\r\n                            _.each(item.prices, function (price) {\r\n                                price.amount /= item.qty;\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Helper to fix issue with option nodes:\r\n         *  - you can't place any html in option ->\r\n         *    so you can't style it via CSS\r\n         * @param {jQuery} options\r\n         * @private\r\n         */\r\n        _applyOptionNodeFix: function applyOptionNodeFix(options) {\r\n            var config = this.options,\r\n                format = config.priceFormat,\r\n                template = config.optionTemplate;\r\n\r\n            template = mageTemplate(template);\r\n            options.filter('select').each(function (index, element) {\r\n                var $element = $(element),\r\n                    optionId = utils.findOptionId($element),\r\n                    optionConfig = config.optionConfig && config.optionConfig.options[optionId].selections,\r\n                    value;\r\n\r\n                $element.find('option').each(function (idx, option) {\r\n                    var $option,\r\n                        optionValue,\r\n                        toTemplate,\r\n                        prices;\r\n\r\n                    $option = $(option);\r\n                    optionValue = $option.val();\r\n\r\n                    if (!optionValue && optionValue !== 0) {\r\n                        return;\r\n                    }\r\n\r\n                    toTemplate = {\r\n                        data: {\r\n                            label: optionConfig[optionValue] && optionConfig[optionValue].name\r\n                        }\r\n                    };\r\n                    prices = optionConfig[optionValue].prices;\r\n\r\n                    _.each(prices, function (price, type) {\r\n                        value = +price.amount;\r\n                        value += _.reduce(price.adjustments, function (sum, x) {//eslint-disable-line\r\n                            return sum + x;\r\n                        }, 0);\r\n                        toTemplate.data[type] = {\r\n                            value: value,\r\n                            formatted: utils.formatPriceLocale(value, format)\r\n                        };\r\n                    });\r\n\r\n                    $option.html(template(toTemplate));\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge accepted configuration with instance options.\r\n         * @param  {Object}  options\r\n         * @return {$.Widget}\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n\r\n            this._super(options);\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Show or hide option tier prices block\r\n         *\r\n         * @param {Object} optionElement\r\n         * @private\r\n         */\r\n        _displayTierPriceBlock: function (optionElement) {\r\n            var optionType = optionElement.prop('type'),\r\n                optionId,\r\n                optionValue,\r\n                optionTierPricesElements;\r\n\r\n            if (optionType === 'select-one') {\r\n                optionId = utils.findOptionId(optionElement[0]);\r\n                optionValue = optionElement.val() || null;\r\n                optionTierPricesElements = $(this.options.optionTierPricesBlocksSelector.replace('{1}', optionId));\r\n\r\n                _.each(optionTierPricesElements, function (tierPriceElement) {\r\n                    var selectionId = $(tierPriceElement).data('selection-id') + '';\r\n\r\n                    if (selectionId === optionValue) {\r\n                        $(tierPriceElement).show();\r\n                    } else {\r\n                        $(tierPriceElement).hide();\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler to update productSummary box\r\n         */\r\n        updateProductSummary: function updateProductSummary() {\r\n            this.element.trigger('updateProductSummary', {\r\n                config: this.options.optionConfig\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.priceBundle;\r\n\r\n    /**\r\n     * Converts option value to priceBox object\r\n     *\r\n     * @param   {jQuery} element\r\n     * @param   {Object} config\r\n     * @returns {Object|null} - priceBox object with additional prices\r\n     */\r\n    function defaultGetOptionValue(element, config) {\r\n        var changes = {},\r\n            optionHash,\r\n            tempChanges,\r\n            qtyField,\r\n            optionId = utils.findOptionId(element[0]),\r\n            optionValue = element.val() || null,\r\n            optionName = element.prop('name'),\r\n            optionType = element.prop('type'),\r\n            optionConfig = config.options[optionId].selections,\r\n            optionQty = 0,\r\n            canQtyCustomize = false,\r\n            selectedIds = config.selected;\r\n\r\n        switch (optionType) {\r\n            case 'radio':\r\n            case 'select-one':\r\n\r\n                if (optionType === 'radio' && !element.is(':checked')) {\r\n                    return null;\r\n                }\r\n\r\n                qtyField = element.data('qtyField');\r\n                qtyField.data('option', element);\r\n\r\n                if (optionValue) {\r\n                    optionQty = optionConfig[optionValue].qty || 0;\r\n                    canQtyCustomize = optionConfig[optionValue].customQty === '1';\r\n                    toggleQtyField(qtyField, optionQty, optionId, optionValue, canQtyCustomize);//eslint-disable-line\r\n                    tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                    tempChanges = applyTierPrice(//eslint-disable-line\r\n                        tempChanges,\r\n                        optionQty,\r\n                        optionConfig[optionValue]\r\n                    );\r\n                    tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                } else {\r\n                    tempChanges = {};\r\n                    toggleQtyField(qtyField, '0', optionId, optionValue, false);//eslint-disable-line\r\n                }\r\n                optionHash = 'bundle-option-' + optionName;\r\n                changes[optionHash] = tempChanges;\r\n                selectedIds[optionId] = [optionValue];\r\n                break;\r\n\r\n            case 'select-multiple':\r\n                optionValue = _.compact(optionValue);\r\n\r\n                _.each(optionConfig, function (row, optionValueCode) {\r\n                    optionHash = 'bundle-option-' + optionName + '##' + optionValueCode;\r\n                    optionQty = row.qty || 0;\r\n                    tempChanges = utils.deepClone(row.prices);\r\n                    tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                    tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                    changes[optionHash] = _.contains(optionValue, optionValueCode) ? tempChanges : {};\r\n                });\r\n\r\n                selectedIds[optionId] = optionValue || [];\r\n                break;\r\n\r\n            case 'checkbox':\r\n                optionHash = 'bundle-option-' + optionName + '##' + optionValue;\r\n                optionQty = optionConfig[optionValue].qty || 0;\r\n                tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n                changes[optionHash] = element.is(':checked') ? tempChanges : {};\r\n\r\n                selectedIds[optionId] = selectedIds[optionId] || [];\r\n\r\n                if (!_.contains(selectedIds[optionId], optionValue) && element.is(':checked')) {\r\n                    selectedIds[optionId].push(optionValue);\r\n                } else if (!element.is(':checked')) {\r\n                    selectedIds[optionId] = _.without(selectedIds[optionId], optionValue);\r\n                }\r\n                break;\r\n\r\n            case 'hidden':\r\n                optionHash = 'bundle-option-' + optionName + '##' + optionValue;\r\n                optionQty = optionConfig[optionValue].qty || 0;\r\n                canQtyCustomize = optionConfig[optionValue].customQty === '1';\r\n                qtyField = element.data('qtyField');\r\n                qtyField.data('option', element);\r\n                toggleQtyField(qtyField, optionQty, optionId, optionValue, canQtyCustomize);//eslint-disable-line\r\n                tempChanges = utils.deepClone(optionConfig[optionValue].prices);\r\n                tempChanges = applyTierPrice(tempChanges, optionQty, optionConfig);//eslint-disable-line\r\n                tempChanges = applyQty(tempChanges, optionQty);//eslint-disable-line\r\n\r\n                optionHash = 'bundle-option-' + optionName;\r\n                changes[optionHash] = tempChanges;\r\n                selectedIds[optionId] = [optionValue];\r\n                break;\r\n        }\r\n\r\n        return changes;\r\n    }\r\n\r\n    /**\r\n     * Check the quantity field if negative value occurs.\r\n     *\r\n     * @param {Object} bundleOption\r\n     */\r\n    function isValidQty(bundleOption) {\r\n        var isValid = true,\r\n            qtyElem = bundleOption.data('qtyField'),\r\n            bundleOptionType = bundleOption.prop('type');\r\n\r\n        if (['radio', 'select-one'].includes(bundleOptionType) && qtyElem.val() < 0) {\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * Helper to toggle qty field\r\n     * @param {jQuery} element\r\n     * @param {String|Number} value\r\n     * @param {String|Number} optionId\r\n     * @param {String|Number} optionValueId\r\n     * @param {Boolean} canEdit\r\n     */\r\n    function toggleQtyField(element, value, optionId, optionValueId, canEdit) {\r\n        element\r\n            .val(value)\r\n            .data('optionId', optionId)\r\n            .data('optionValueId', optionValueId)\r\n            .attr('disabled', !canEdit);\r\n\r\n        if (canEdit) {\r\n            element.removeClass('qty-disabled');\r\n        } else {\r\n            element.addClass('qty-disabled');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to multiply on qty\r\n     *\r\n     * @param   {Object} prices\r\n     * @param   {Number} qty\r\n     * @returns {Object}\r\n     */\r\n    function applyQty(prices, qty) {\r\n        _.each(prices, function (everyPrice) {\r\n            everyPrice.amount *= qty;\r\n            _.each(everyPrice.adjustments, function (el, index) {\r\n                everyPrice.adjustments[index] *= qty;\r\n            });\r\n        });\r\n\r\n        return prices;\r\n    }\r\n\r\n    /**\r\n     * Helper to limit price with tier price\r\n     *\r\n     * @param {Object} oneItemPrice\r\n     * @param {Number} qty\r\n     * @param {Object} optionConfig\r\n     * @returns {Object}\r\n     */\r\n    function applyTierPrice(oneItemPrice, qty, optionConfig) {\r\n        var tiers = optionConfig.tierPrice,\r\n            magicKey = _.keys(oneItemPrice)[0],\r\n            tiersFirstKey = _.keys(optionConfig)[0],\r\n            lowest = false;\r\n\r\n        if (!tiers) {//tiers is undefined when options has only one option\r\n            tiers = optionConfig[tiersFirstKey].tierPrice;\r\n        }\r\n\r\n        tiers.sort(function (a, b) {//sorting based on \"price_qty\"\r\n            return a['price_qty'] - b['price_qty'];\r\n        });\r\n\r\n        _.each(tiers, function (tier, index) {\r\n            if (tier['price_qty'] > qty) {\r\n                return;\r\n            }\r\n\r\n            if (tier.prices[magicKey].amount < oneItemPrice[magicKey].amount) {\r\n                lowest = index;\r\n            }\r\n        });\r\n\r\n        if (lowest !== false) {\r\n            oneItemPrice = utils.deepClone(tiers[lowest].prices);\r\n        }\r\n\r\n        return oneItemPrice;\r\n    }\r\n});\r\n","Magento_Bundle/js/product-summary.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget',\r\n    'Magento_Bundle/js/price-bundle'\r\n], function ($, mageTemplate) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Widget product Summary:\r\n     * Handles rendering of Bundle options and displays them in the Summary box\r\n     */\r\n    $.widget('mage.productSummary', {\r\n        options: {\r\n            mainContainer:          '#product_addtocart_form',\r\n            templates: {\r\n                summaryBlock:       '[data-template=\"bundle-summary\"]',\r\n                optionBlock:        '[data-template=\"bundle-option\"]'\r\n            },\r\n            optionSelector:         '[data-container=\"options\"]',\r\n            summaryContainer:       '[data-container=\"product-summary\"]',\r\n            bundleSummaryContainer: '.bundle-summary'\r\n        },\r\n        cache: {},\r\n\r\n        /**\r\n         * Method attaches event observer to the product form\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.element\r\n                .closest(this.options.mainContainer)\r\n                .on('updateProductSummary', $.proxy(this._renderSummaryBox, this))\r\n                .priceBundle({})\r\n            ;\r\n        },\r\n\r\n        /**\r\n         * Method extracts data from the event and renders Summary box\r\n         * using jQuery template mechanism\r\n         * @param {Event} event\r\n         * @param {Object} data\r\n         * @private\r\n         */\r\n        _renderSummaryBox: function (event, data) {\r\n            this.cache.currentElement = data.config;\r\n            this.cache.currentElementCount = 0;\r\n\r\n            // Clear Summary box\r\n            this.element.html('');\r\n            this.cache.currentElement.positions.forEach(function (optionId) {\r\n                this._renderOption(optionId, this.cache.currentElement.selected[optionId]);\r\n            }, this);\r\n            this.element\r\n                .parents(this.options.bundleSummaryContainer)\r\n                .toggleClass('empty', !this.cache.currentElementCount); // Zero elements equal '.empty' container\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @param {String} row\r\n         * @private\r\n         */\r\n        _renderOption: function (key, row) {\r\n            var template;\r\n\r\n            if (row && row.length > 0 && row[0] !== null) {\r\n                template = this.element\r\n                    .closest(this.options.summaryContainer)\r\n                    .find(this.options.templates.summaryBlock)\r\n                    .html();\r\n                template = mageTemplate(template.trim(), {\r\n                    data: {\r\n                        _label_: this.cache.currentElement.options[key].title\r\n                    }\r\n                });\r\n\r\n                this.cache.currentKey = key;\r\n                this.cache.summaryContainer = $(template);\r\n                this.element.append(this.cache.summaryContainer);\r\n\r\n                $.each(row, this._renderOptionRow.bind(this));\r\n                this.cache.currentElementCount += row.length;\r\n\r\n                //Reset Cache\r\n                this.cache.currentKey = null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {String} key\r\n         * @param {String} optionIndex\r\n         * @private\r\n         */\r\n        _renderOptionRow: function (key, optionIndex) {\r\n            var template;\r\n\r\n            template = this.element\r\n                .closest(this.options.summaryContainer)\r\n                .find(this.options.templates.optionBlock)\r\n                .html();\r\n            template = mageTemplate(template.trim(), {\r\n                data: {\r\n                    _quantity_: this.cache.currentElement.options[this.cache.currentKey].selections[optionIndex].qty,\r\n                    _label_: this.cache.currentElement.options[this.cache.currentKey].selections[optionIndex].name\r\n                }\r\n            });\r\n            this.cache.summaryContainer\r\n                .find(this.options.optionSelector)\r\n                .append(template);\r\n        }\r\n    });\r\n\r\n    return $.mage.productSummary;\r\n});\r\n","Magento_Bundle/js/slide.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.slide', {\r\n        options: {\r\n            slideSpeed: 1500,\r\n            slideSelector: '#bundle-slide',\r\n            slideBackSelector: '.bundle-slide-back',\r\n            bundleProductSelector: '#bundleProduct',\r\n            bundleOptionsContainer: '#options-container',\r\n            productViewContainer: '#productView',\r\n            slidedown: true\r\n\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            if (this.options.slidedown === true) {\r\n                $(this.options.slideSelector).on('click', $.proxy(this._show, this));\r\n                $(this.options.slideBackSelector).on('click', $.proxy(this._hide, this));\r\n                this.options.autostart && this._show();\r\n            } else {\r\n                $(this.options.slideSelector).on('click', $.proxy(this._slide, this));\r\n                $(this.options.slideBackSelector).on('click', $.proxy(this._slideBack, this));\r\n                this.options.autostart && this._slide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * slide bundleOptionsContainer over to the main view area\r\n         * @private\r\n         */\r\n        _slide: function () {\r\n            $(this.options.bundleProductSelector).css('top', '0px');\r\n            $(this.options.bundleOptionsContainer).show();\r\n            this.element.css('height', $(this.options.productViewContainer).height() + 'px');\r\n            $(this.options.bundleProductSelector).css('left', '0px').animate(\r\n                {\r\n                    'left': '-' + this.element.width() + 'px'\r\n                },\r\n                this.options.slideSpeed,\r\n                $.proxy(function () {\r\n                    this.element.css('height', 'auto');\r\n                    $(this.options.productViewContainer).hide();\r\n                }, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * slideback productViewContainer to main view area\r\n         * @private\r\n         */\r\n        _slideBack: function () {\r\n            $(this.options.bundleProductSelector).css('top', '0px');\r\n            $(this.options.productViewContainer).show();\r\n            this.element.css('height', $(this.options.bundleOptionsContainer).height() + 'px');\r\n            $(this.options.bundleProductSelector).animate(\r\n                {\r\n                    'left': '0px'\r\n                },\r\n                this.options.slideSpeed,\r\n                $.proxy(function () {\r\n                    $(this.options.bundleOptionsContainer).hide();\r\n                    this.element.css('height', 'auto');\r\n                }, this)\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _show: function () {\r\n            $(this.options.bundleOptionsContainer).slideDown(800);\r\n            $('html, body').animate({\r\n                scrollTop: $(this.options.bundleOptionsContainer).offset().top\r\n            }, 600);\r\n            $('#product-options-wrapper > fieldset').trigger('focus');\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _hide: function () {\r\n            $('html, body').animate({\r\n                scrollTop: 0\r\n            }, 600);\r\n            $(this.options.bundleOptionsContainer).slideUp(800);\r\n        }\r\n    });\r\n\r\n    return $.mage.slide;\r\n});\r\n","Magento_Captcha/js/captcha.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * @api\r\n     */\r\n    $.widget('mage.captcha', {\r\n        options: {\r\n            refreshClass: 'refreshing',\r\n            reloadSelector: '.captcha-reload',\r\n            imageSelector: '.captcha-img',\r\n            imageLoader: ''\r\n        },\r\n\r\n        /**\r\n         * Method binds click event to reload image\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.element.on('click', this.options.reloadSelector, $.proxy(this.refresh, this));\r\n        },\r\n\r\n        /**\r\n         * Method triggers an AJAX request to refresh the CAPTCHA image\r\n         */\r\n        refresh: function () {\r\n            var imageLoader = this.options.imageLoader;\r\n\r\n            if (imageLoader) {\r\n                this.element.find(this.options.imageSelector).attr('src', imageLoader);\r\n            }\r\n            this.element.addClass(this.options.refreshClass);\r\n\r\n            $.ajax({\r\n                url: this.options.url,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                context: this,\r\n                data: {\r\n                    'formId': this.options.type\r\n                },\r\n\r\n                /**\r\n                 * @param {Object} response\r\n                 */\r\n                success: function (response) {\r\n                    if (response.imgSrc) {\r\n                        this.element.find(this.options.imageSelector).attr('src', response.imgSrc);\r\n                    }\r\n                },\r\n\r\n                /** Complete callback. */\r\n                complete: function () {\r\n                    this.element.removeClass(this.options.refreshClass);\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.captcha;\r\n});\r\n","Magento_Captcha/js/action/refresh.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery', 'mage/url'\r\n], function ($, urlBuilder) {\r\n    'use strict';\r\n\r\n    return function (refreshUrl, formId, imageSource) {\r\n        return $.ajax({\r\n            url: urlBuilder.build(refreshUrl),\r\n            type: 'POST',\r\n            data: JSON.stringify({\r\n                'formId': formId\r\n            }),\r\n            global: false,\r\n            contentType: 'application/json'\r\n        }).done(\r\n            function (response) {\r\n                if (response.imgSrc) {\r\n                    imageSource(response.imgSrc);\r\n                }\r\n            }\r\n        );\r\n    };\r\n});\r\n","Magento_Captcha/js/model/captcha.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'ko',\r\n    'Magento_Captcha/js/action/refresh'\r\n], function ($, ko, refreshAction) {\r\n    'use strict';\r\n\r\n    return function (captchaData) {\r\n        return {\r\n            formId: captchaData.formId,\r\n            imageSource: ko.observable(captchaData.imageSrc),\r\n            visibility: ko.observable(false),\r\n            captchaValue: ko.observable(null),\r\n            isRequired: ko.observable(captchaData.isRequired),\r\n            isCaseSensitive: captchaData.isCaseSensitive,\r\n            imageHeight: captchaData.imageHeight,\r\n            refreshUrl: captchaData.refreshUrl,\r\n            isLoading: ko.observable(false),\r\n            timestamp: null,\r\n\r\n            /**\r\n             * @return {String}\r\n             */\r\n            getFormId: function () {\r\n                return this.formId;\r\n            },\r\n\r\n            /**\r\n             * @param {String} formId\r\n             */\r\n            setFormId: function (formId) {\r\n                this.formId = formId;\r\n            },\r\n\r\n            /**\r\n             * @return {Boolean}\r\n             */\r\n            getIsVisible: function () {\r\n                return this.visibility();\r\n            },\r\n\r\n            /**\r\n             * @param {Boolean} flag\r\n             */\r\n            setIsVisible: function (flag) {\r\n                this.visibility(flag);\r\n            },\r\n\r\n            /**\r\n             * @return {Boolean}\r\n             */\r\n            getIsRequired: function () {\r\n                return this.isRequired();\r\n            },\r\n\r\n            /**\r\n             * @param {Boolean} flag\r\n             */\r\n            setIsRequired: function (flag) {\r\n                this.isRequired(flag);\r\n            },\r\n\r\n            /**\r\n             * @return {Boolean}\r\n             */\r\n            getIsCaseSensitive: function () {\r\n                return this.isCaseSensitive;\r\n            },\r\n\r\n            /**\r\n             * @param {Boolean} flag\r\n             */\r\n            setIsCaseSensitive: function (flag) {\r\n                this.isCaseSensitive = flag;\r\n            },\r\n\r\n            /**\r\n             * @return {String|Number}\r\n             */\r\n            getImageHeight: function () {\r\n                return this.imageHeight;\r\n            },\r\n\r\n            /**\r\n             * @param {String|Number}height\r\n             */\r\n            setImageHeight: function (height) {\r\n                this.imageHeight = height;\r\n            },\r\n\r\n            /**\r\n             * @return {String}\r\n             */\r\n            getImageSource: function () {\r\n                return this.imageSource;\r\n            },\r\n\r\n            /**\r\n             * @param {String} imageSource\r\n             */\r\n            setImageSource: function (imageSource) {\r\n                this.imageSource(imageSource);\r\n            },\r\n\r\n            /**\r\n             * @return {String}\r\n             */\r\n            getRefreshUrl: function () {\r\n                return this.refreshUrl;\r\n            },\r\n\r\n            /**\r\n             * @param {String} url\r\n             */\r\n            setRefreshUrl: function (url) {\r\n                this.refreshUrl = url;\r\n            },\r\n\r\n            /**\r\n             * @return {*}\r\n             */\r\n            getCaptchaValue: function () {\r\n                return this.captchaValue;\r\n            },\r\n\r\n            /**\r\n             * @param {*} value\r\n             */\r\n            setCaptchaValue: function (value) {\r\n                this.captchaValue(value);\r\n            },\r\n\r\n            /**\r\n             * Refresh captcha.\r\n             */\r\n            refresh: function () {\r\n                var refresh,\r\n                    self = this;\r\n\r\n                this.isLoading(true);\r\n\r\n                refresh = refreshAction(this.getRefreshUrl(), this.getFormId(), this.getImageSource());\r\n                $.when(refresh).done(function () {\r\n                    self.isLoading(false);\r\n                });\r\n            }\r\n        };\r\n    };\r\n});\r\n","Magento_Captcha/js/model/captchaList.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['jquery'], function ($) {\r\n    'use strict';\r\n\r\n    var captchaList = [];\r\n\r\n    return {\r\n        /**\r\n         * @param {Object} captcha\r\n         */\r\n        add: function (captcha) {\r\n            captchaList.push(captcha);\r\n        },\r\n\r\n        /**\r\n         * @param {String} formId\r\n         * @return {Object}\r\n         */\r\n        getCaptchaByFormId: function (formId) {\r\n            var captcha = null;\r\n\r\n            $.each(captchaList, function (key, item) {\r\n                if (formId === item.formId) {\r\n                    captcha = item;\r\n\r\n                    return false;\r\n                }\r\n            });\r\n\r\n            return captcha;\r\n        },\r\n\r\n        /**\r\n         * @return {Array}\r\n         */\r\n        getCaptchaList: function () {\r\n            return captchaList;\r\n        }\r\n    };\r\n});\r\n","Magento_Captcha/js/view/checkout/defaultCaptcha.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiComponent',\r\n    'Magento_Captcha/js/model/captcha',\r\n    'Magento_Captcha/js/model/captchaList',\r\n    'Magento_Customer/js/customer-data',\r\n    'underscore'\r\n], function ($, Component, Captcha, captchaList, customerData, _) {\r\n    'use strict';\r\n\r\n    var captchaConfig;\r\n\r\n    return Component.extend({\r\n        defaults: {\r\n            template: 'Magento_Captcha/checkout/captcha'\r\n        },\r\n        dataScope: 'global',\r\n        currentCaptcha: null,\r\n        subscribedFormIds: [],\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        captchaValue: function () {\r\n            return this.currentCaptcha.getCaptchaValue();\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (window[this.configSource] && window[this.configSource].captcha) {\r\n                captchaConfig = window[this.configSource].captcha;\r\n                $.each(captchaConfig, function (formId, captchaData) {\r\n                    var captcha;\r\n\r\n                    captchaData.formId = formId;\r\n                    captcha = Captcha(captchaData);\r\n                    this.checkCustomerData(formId, customerData.get('captcha')(), captcha);\r\n                    this.subscribeCustomerData(formId, captcha);\r\n                    captchaList.add(captcha);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Check customer data for captcha configuration.\r\n         *\r\n         * @param {String} formId\r\n         * @param {Object} captchaData\r\n         * @param {Object} captcha\r\n         */\r\n        checkCustomerData: function (formId, captchaData, captcha) {\r\n            if (!_.isEmpty(captchaData) &&\r\n                !_.isEmpty(captchaData[formId]) &&\r\n                captchaData[formId].timestamp > captcha.timestamp\r\n            ) {\r\n                if (!captcha.isRequired() && captchaData[formId].isRequired) {\r\n                    captcha.refresh();\r\n                }\r\n                captcha.isRequired(captchaData[formId].isRequired);\r\n                captcha.timestamp = captchaData[formId].timestamp;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Subscribe for customer data updates.\r\n         *\r\n         * @param {String} formId\r\n         * @param {Object} captcha\r\n         */\r\n        subscribeCustomerData: function (formId, captcha) {\r\n            if (this.subscribedFormIds.includes(formId) === false) {\r\n                this.subscribedFormIds.push(formId);\r\n                customerData.get('captcha').subscribe(function (captchaData) {\r\n                    this.checkCustomerData(formId, captchaData, captcha);\r\n                }.bind(this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        getIsLoading: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.isLoading : false;\r\n        },\r\n\r\n        /**\r\n         * @return {null|Object}\r\n         */\r\n        getCurrentCaptcha: function () {\r\n            return this.currentCaptcha;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} captcha\r\n         */\r\n        setCurrentCaptcha: function (captcha) {\r\n            this.currentCaptcha = captcha;\r\n        },\r\n\r\n        /**\r\n         * @return {String|null}\r\n         */\r\n        getFormId: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.getFormId() : null;\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        getIsVisible: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.getIsVisible() : false;\r\n        },\r\n\r\n        /**\r\n         * @param {Boolean} flag\r\n         */\r\n        setIsVisible: function (flag) {\r\n            this.currentCaptcha.setIsVisible(flag);\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        isRequired: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.getIsRequired() : false;\r\n        },\r\n\r\n        /**\r\n         * Set isRequired on current captcha model.\r\n         *\r\n         * @param {Boolean} flag\r\n         */\r\n        setIsRequired: function (flag) {\r\n            this.currentCaptcha.setIsRequired(flag);\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        isCaseSensitive: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.getIsCaseSensitive() : false;\r\n        },\r\n\r\n        /**\r\n         * @return {String|Number|null}\r\n         */\r\n        imageHeight: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.getImageHeight() : null;\r\n        },\r\n\r\n        /**\r\n         * @return {String|null}\r\n         */\r\n        getImageSource: function () {\r\n            return this.currentCaptcha !== null ? this.currentCaptcha.getImageSource() : null;\r\n        },\r\n\r\n        /**\r\n         * Refresh captcha.\r\n         */\r\n        refresh: function () {\r\n            this.currentCaptcha.refresh();\r\n        }\r\n    });\r\n});\r\n","Magento_Captcha/js/view/checkout/loginCaptcha.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Captcha/js/view/checkout/defaultCaptcha',\r\n    'Magento_Captcha/js/model/captchaList',\r\n    'Magento_Customer/js/action/login',\r\n    'underscore'\r\n],\r\nfunction (defaultCaptcha, captchaList, loginAction, _) {\r\n    'use strict';\r\n\r\n    return defaultCaptcha.extend({\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            var self = this,\r\n                currentCaptcha;\r\n\r\n            this._super();\r\n            currentCaptcha = captchaList.getCaptchaByFormId(this.formId);\r\n\r\n            if (currentCaptcha != null) {\r\n                currentCaptcha.setIsVisible(true);\r\n                this.setCurrentCaptcha(currentCaptcha);\r\n\r\n                loginAction.registerLoginCallback(function (loginData) {\r\n                    if (loginData['captcha_form_id'] &&\r\n                        loginData['captcha_form_id'] === self.formId &&\r\n                        self.isRequired()\r\n                    ) {\r\n                        _.defer(self.refresh.bind(self));\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    });\r\n});\r\n","Magento_CardinalCommerce/js/cardinal-client.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'uiClass',\r\n    'Magento_CardinalCommerce/js/cardinal-factory',\r\n    'Magento_Checkout/js/model/quote',\r\n    'mage/translate'\r\n], function ($, Class, cardinalFactory, quote, $t) {\r\n    'use strict';\r\n\r\n    return {\r\n        /**\r\n         * Starts Cardinal Consumer Authentication\r\n         *\r\n         * @param {Object} cardData\r\n         * @return {jQuery.Deferred}\r\n         */\r\n        startAuthentication: function (cardData) {\r\n            var deferred = $.Deferred();\r\n\r\n            if (this.cardinalClient) {\r\n                this._startAuthentication(deferred, cardData);\r\n            } else {\r\n                cardinalFactory(this.getEnvironment())\r\n                    .done(function (client) {\r\n                        this.cardinalClient = client;\r\n                        this._startAuthentication(deferred, cardData);\r\n                    }.bind(this));\r\n            }\r\n\r\n            return deferred.promise();\r\n        },\r\n\r\n        /**\r\n         * Cardinal Consumer Authentication\r\n         *\r\n         * @param {jQuery.Deferred} deferred\r\n         * @param {Object} cardData\r\n         */\r\n        _startAuthentication: function (deferred, cardData) {\r\n            //this.cardinalClient.configure({ logging: { level: 'verbose' } });\r\n            this.cardinalClient.on('payments.validated', function (data, jwt) {\r\n                if (data.ErrorNumber !== 0) {\r\n                    deferred.reject(data.ErrorDescription);\r\n                } else if ($.inArray(data.ActionCode, ['FAILURE', 'ERROR']) !== -1) {\r\n                    deferred.reject($t('Authentication Failed. Please try again with another form of payment.'));\r\n                } else {\r\n                    deferred.resolve(jwt);\r\n                }\r\n                this.cardinalClient.off('payments.validated');\r\n            }.bind(this));\r\n\r\n            this.cardinalClient.on('payments.setupComplete', function () {\r\n                this.cardinalClient.start('cca', this.getRequestOrderObject(cardData));\r\n                this.cardinalClient.off('payments.setupComplete');\r\n            }.bind(this));\r\n\r\n            this.cardinalClient.setup('init', {\r\n                jwt: this.getRequestJWT()\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Returns request order object.\r\n         *\r\n         * The request order object is structured object that is used to pass data\r\n         * to Cardinal that describes an order you'd like to process.\r\n         *\r\n         * If you pass a request object in both the JWT and the browser,\r\n         * Cardinal will merge the objects together where the browser overwrites\r\n         * the JWT object as it is considered the most recently captured data.\r\n         *\r\n         * @param {Object} cardData\r\n         * @returns {Object}\r\n         */\r\n        getRequestOrderObject: function (cardData) {\r\n            var totalAmount = quote.totals()['base_grand_total'],\r\n                currencyCode = quote.totals()['base_currency_code'],\r\n                billingAddress = quote.billingAddress(),\r\n                requestObject;\r\n\r\n            requestObject = {\r\n                OrderDetails: {\r\n                    Amount: totalAmount * 100,\r\n                    CurrencyCode: currencyCode\r\n                },\r\n                Consumer: {\r\n                    Account: {\r\n                        AccountNumber: cardData.accountNumber,\r\n                        ExpirationMonth: cardData.expMonth,\r\n                        ExpirationYear: cardData.expYear,\r\n                        CardCode: cardData.cardCode\r\n                    },\r\n                    BillingAddress: {\r\n                        FirstName: billingAddress.firstname,\r\n                        LastName: billingAddress.lastname,\r\n                        Address1: billingAddress.street[0],\r\n                        Address2: billingAddress.street[1],\r\n                        City: billingAddress.city,\r\n                        State: billingAddress.region,\r\n                        PostalCode: billingAddress.postcode,\r\n                        CountryCode: billingAddress.countryId,\r\n                        Phone1: billingAddress.telephone\r\n                    }\r\n                }\r\n            };\r\n\r\n            return requestObject;\r\n        },\r\n\r\n        /**\r\n         * Returns request JWT\r\n         * @returns {String}\r\n         */\r\n        getRequestJWT: function () {\r\n            return window.checkoutConfig.cardinal.requestJWT;\r\n        },\r\n\r\n        /**\r\n         * Returns type of environment\r\n         * @returns {String}\r\n         */\r\n        getEnvironment: function () {\r\n            return window.checkoutConfig.cardinal.environment;\r\n        }\r\n    };\r\n});\r\n","Magento_CardinalCommerce/js/cardinal-factory.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    return function (environment) {\r\n        var deferred = $.Deferred(),\r\n            dependency = 'cardinaljs';\r\n\r\n        if (environment === 'sandbox') {\r\n            dependency = 'cardinaljsSandbox';\r\n        }\r\n\r\n        require(\r\n            [dependency],\r\n            function (Cardinal) {\r\n                deferred.resolve(Cardinal);\r\n            },\r\n            deferred.reject\r\n        );\r\n\r\n        return deferred.promise();\r\n    };\r\n});\r\n","Magento_Catalog/js/catalog-add-to-cart.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/translate',\r\n    'underscore',\r\n    'Magento_Catalog/js/product/view/product-ids-resolver',\r\n    'Magento_Catalog/js/product/view/product-info-resolver',\r\n    'jquery-ui-modules/widget'\r\n], function ($, $t, _, idsResolver, productInfoResolver) {\r\n    'use strict';\r\n\r\n    $.widget('mage.catalogAddToCart', {\r\n        options: {\r\n            processStart: null,\r\n            processStop: null,\r\n            bindSubmit: true,\r\n            minicartSelector: '[data-block=\"minicart\"]',\r\n            messagesSelector: '[data-placeholder=\"messages\"]',\r\n            productStatusSelector: '.stock.available',\r\n            addToCartButtonSelector: '.action.tocart',\r\n            addToCartButtonDisabledClass: 'disabled',\r\n            addToCartButtonTextWhileAdding: '',\r\n            addToCartButtonTextAdded: '',\r\n            addToCartButtonTextDefault: '',\r\n            productInfoResolver: productInfoResolver\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            if (this.options.bindSubmit) {\r\n                this._bindSubmit();\r\n            }\r\n            $(this.options.addToCartButtonSelector).prop('disabled', false);\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _bindSubmit: function () {\r\n            var self = this;\r\n\r\n            if (this.element.data('catalog-addtocart-initialized')) {\r\n                return;\r\n            }\r\n\r\n            this.element.data('catalog-addtocart-initialized', 1);\r\n            this.element.on('submit', function (e) {\r\n                e.preventDefault();\r\n                self.submitForm($(this));\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _redirect: function (url) {\r\n            var urlParts, locationParts, forceReload;\r\n\r\n            urlParts = url.split('#');\r\n            locationParts = window.location.href.split('#');\r\n            forceReload = urlParts[0] === locationParts[0];\r\n\r\n            window.location.assign(url);\r\n\r\n            if (forceReload) {\r\n                window.location.reload();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @return {Boolean}\r\n         */\r\n        isLoaderEnabled: function () {\r\n            return this.options.processStart && this.options.processStop;\r\n        },\r\n\r\n        /**\r\n         * Handler for the form 'submit' event\r\n         *\r\n         * @param {jQuery} form\r\n         */\r\n        submitForm: function (form) {\r\n            this.ajaxSubmit(form);\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery} form\r\n         */\r\n        ajaxSubmit: function (form) {\r\n            var self = this,\r\n                productIds = idsResolver(form),\r\n                productInfo = self.options.productInfoResolver(form),\r\n                formData;\r\n\r\n            $(self.options.minicartSelector).trigger('contentLoading');\r\n            self.disableAddToCartButton(form);\r\n            formData = new FormData(form[0]);\r\n\r\n            $.ajax({\r\n                url: form.prop('action'),\r\n                data: formData,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                cache: false,\r\n                contentType: false,\r\n                processData: false,\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    if (self.isLoaderEnabled()) {\r\n                        $('body').trigger(self.options.processStart);\r\n                    }\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                success: function (res) {\r\n                    var eventData, parameters;\r\n\r\n                    $(document).trigger('ajax:addToCart', {\r\n                        'sku': form.data().productSku,\r\n                        'productIds': productIds,\r\n                        'productInfo': productInfo,\r\n                        'form': form,\r\n                        'response': res\r\n                    });\r\n\r\n                    if (self.isLoaderEnabled()) {\r\n                        $('body').trigger(self.options.processStop);\r\n                    }\r\n\r\n                    if (res.backUrl) {\r\n                        eventData = {\r\n                            'form': form,\r\n                            'redirectParameters': []\r\n                        };\r\n                        // trigger global event, so other modules will be able add parameters to redirect url\r\n                        $('body').trigger('catalogCategoryAddToCartRedirect', eventData);\r\n\r\n                        if (eventData.redirectParameters.length > 0 &&\r\n                            window.location.href.split(/[?#]/)[0] === res.backUrl\r\n                        ) {\r\n                            parameters = res.backUrl.split('#');\r\n                            parameters.push(eventData.redirectParameters.join('&'));\r\n                            res.backUrl = parameters.join('#');\r\n                        }\r\n\r\n                        self._redirect(res.backUrl);\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (res.messages) {\r\n                        $(self.options.messagesSelector).html(res.messages);\r\n                    }\r\n\r\n                    if (res.minicart) {\r\n                        $(self.options.minicartSelector).replaceWith(res.minicart);\r\n                        $(self.options.minicartSelector).trigger('contentUpdated');\r\n                    }\r\n\r\n                    if (res.product && res.product.statusText) {\r\n                        $(self.options.productStatusSelector)\r\n                            .removeClass('available')\r\n                            .addClass('unavailable')\r\n                            .find('span')\r\n                            .html(res.product.statusText);\r\n                    }\r\n                    self.enableAddToCartButton(form);\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                error: function (res) {\r\n                    $(document).trigger('ajax:addToCart:error', {\r\n                        'sku': form.data().productSku,\r\n                        'productIds': productIds,\r\n                        'productInfo': productInfo,\r\n                        'form': form,\r\n                        'response': res\r\n                    });\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function (res) {\r\n                    if (res.state() === 'rejected') {\r\n                        location.reload();\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} form\r\n         */\r\n        disableAddToCartButton: function (form) {\r\n            var addToCartButtonTextWhileAdding = this.options.addToCartButtonTextWhileAdding || $t('Adding...'),\r\n                addToCartButton = $(form).find(this.options.addToCartButtonSelector);\r\n\r\n            addToCartButton.addClass(this.options.addToCartButtonDisabledClass);\r\n            addToCartButton.find('span').text(addToCartButtonTextWhileAdding);\r\n            addToCartButton.prop('title', addToCartButtonTextWhileAdding);\r\n        },\r\n\r\n        /**\r\n         * @param {String} form\r\n         */\r\n        enableAddToCartButton: function (form) {\r\n            var addToCartButtonTextAdded = this.options.addToCartButtonTextAdded || $t('Added'),\r\n                self = this,\r\n                addToCartButton = $(form).find(this.options.addToCartButtonSelector);\r\n\r\n            addToCartButton.find('span').text(addToCartButtonTextAdded);\r\n            addToCartButton.prop('title', addToCartButtonTextAdded);\r\n\r\n            setTimeout(function () {\r\n                var addToCartButtonTextDefault = self.options.addToCartButtonTextDefault || $t('Add to Cart');\r\n\r\n                addToCartButton.removeClass(self.options.addToCartButtonDisabledClass);\r\n                addToCartButton.find('span').text(addToCartButtonTextDefault);\r\n                addToCartButton.prop('title', addToCartButtonTextDefault);\r\n            }, 1000);\r\n        }\r\n    });\r\n\r\n    return $.mage.catalogAddToCart;\r\n});\r\n","Magento_Catalog/js/gallery.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.gallery', {\r\n        options: {\r\n            minWidth: 300, // Minimum width of the gallery image.\r\n            widthOffset: 90, // Offset added to the width of the gallery image.\r\n            heightOffset: 210, // Offset added to the height of the gallery image.\r\n            closeWindow: 'div.buttons-set a[role=\"close-window\"]' // Selector for closing the gallery popup window.\r\n        },\r\n\r\n        /**\r\n         * Bind click handler for closing the popup window and resize the popup based on the image size.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            $(this.options.closeWindow).on('click', function () {\r\n                window.close();\r\n            });\r\n            this._resizeWindow();\r\n        },\r\n\r\n        /**\r\n         * Resize the gallery image popup window based on the image's dimensions.\r\n         * @private\r\n         */\r\n        _resizeWindow: function () {\r\n            var img = this.element,\r\n                width = img.width() < this.options.minWidth ? this.options.minWidth : img.width();\r\n\r\n            window.resizeTo(width + this.options.widthOffset, img.height() + this.options.heightOffset);\r\n        }\r\n    });\r\n\r\n    return $.mage.gallery;\r\n});\r\n","Magento_Catalog/js/jquery.zoom.min.js":"/*!\r\n    Zoom 1.7.14\r\n    license: MIT\r\n    http://www.jacklmoore.com/zoom\r\n*/\r\n(function (factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n        define([\r\n            'jquery'\r\n        ], factory);\r\n    } else {\r\n        factory(window.jQuery);\r\n    }\r\n}(function ($) {\r\n    'use strict';\r\n    var defaults = {\r\n        url: false,\r\n        callback: false,\r\n        target: false,\r\n        duration: 120,\r\n        on: 'mouseover', // other options: grab, click, toggle\r\n        touch: true, // enables a touch fallback\r\n        onZoomIn: false,\r\n        onZoomOut: false,\r\n        magnify: 1\r\n    };\r\n\r\n    // Core Zoom Logic, independent of event listeners.\r\n    $.zoom = function(target, source, img, magnify) {\r\n        var targetHeight,\r\n            targetWidth,\r\n            sourceHeight,\r\n            sourceWidth,\r\n            xRatio,\r\n            yRatio,\r\n            offset,\r\n            $target = $(target),\r\n            position = $target.css('position'),\r\n            $source = $(source);\r\n\r\n        // The parent element needs positioning so that the zoomed element can be correctly positioned within.\r\n        $target.css('position', /(absolute|fixed)/.test(position) ? position : 'relative');\r\n        $target.css('overflow', 'hidden');\r\n\r\n        img.style.width = img.style.height = '';\r\n\r\n        if($(target).children(\"img.zoomImg\").length == 0)\r\n        $(img)\r\n            .addClass('zoomImg')\r\n            .css({\r\n                position: 'absolute',\r\n                top: 0,\r\n                left: 0,\r\n                opacity: 0,\r\n                width: img.width * magnify,\r\n                height: img.height * magnify,\r\n                border: 'none',\r\n                maxWidth: 'none',\r\n                maxHeight: 'none'\r\n            })\r\n            .appendTo(target);\r\n\r\n        return {\r\n            init: function() {\r\n                targetWidth = $target.outerWidth();\r\n                targetHeight = $target.outerHeight();\r\n\r\n                if (source === $target[0]) {\r\n                    sourceWidth = targetWidth;\r\n                    sourceHeight = targetHeight;\r\n                } else {\r\n                    sourceWidth = $source.outerWidth();\r\n                    sourceHeight = $source.outerHeight();\r\n                }\r\n\r\n                xRatio = (img.width - targetWidth) / sourceWidth;\r\n                yRatio = (img.height - targetHeight) / sourceHeight;\r\n\r\n                offset = $source.offset();\r\n            },\r\n            move: function (e) {\r\n                var left = (e.pageX - offset.left),\r\n                    top = (e.pageY - offset.top);\r\n\r\n                top = Math.max(Math.min(top, sourceHeight), 0);\r\n                left = Math.max(Math.min(left, sourceWidth), 0);\r\n\r\n                img.style.left = (left * -xRatio) + 'px';\r\n                img.style.top = (top * -yRatio) + 'px';\r\n            }\r\n        };\r\n    };\r\n\r\n    $.fn.zoom = function (options) {\r\n        return this.each(function () {\r\n            var\r\n            settings = $.extend({}, defaults, options || {}),\r\n            //target will display the zoomed image\r\n            target = settings.target || this,\r\n            //source will provide zoom location info (thumbnail)\r\n            source = this,\r\n            $source = $(source),\r\n            $target = $(target),\r\n            img = document.createElement('img'),\r\n            $img = $(img),\r\n            mousemove = 'mousemove.zoom',\r\n            clicked = false,\r\n            touched = false,\r\n            $urlElement;\r\n\r\n            // If a url wasn't specified, look for an image element.\r\n            if (!settings.url) {\r\n                $urlElement = $source.find('img');\r\n                if ($urlElement[0]) {\r\n                    settings.url = $urlElement.data('src') || $urlElement.attr('src');\r\n                }\r\n                if (!settings.url) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            (function(){\r\n                var position = $target.css('position');\r\n                var overflow = $target.css('overflow');\r\n\r\n                $source.one('zoom.destroy', function(){\r\n                    $source.off(\".zoom\");\r\n                    $target.css('position', position);\r\n                    $target.css('overflow', overflow);\r\n                    $img.remove();\r\n                });\r\n                \r\n            }());\r\n\r\n            img.onload = function () {\r\n                var zoom = $.zoom(target, source, img, settings.magnify);\r\n\r\n                function start(e) {\r\n                    zoom.init();\r\n                    zoom.move(e);\r\n\r\n                    // Skip the fade-in for IE8 and lower since it chokes on fading-in\r\n                    // and changing position based on mousemovement at the same time.\r\n                    $img.stop()\r\n                    .fadeTo($.support.opacity ? settings.duration : 0, 1, $.isFunction(settings.onZoomIn) ? settings.onZoomIn.call(img) : false);\r\n                }\r\n\r\n                function stop() {\r\n                    $img.stop()\r\n                    .fadeTo(settings.duration, 0, $.isFunction(settings.onZoomOut) ? settings.onZoomOut.call(img) : false);\r\n                }\r\n\r\n                // Mouse events\r\n                if (settings.on === 'grab') {\r\n                    $source\r\n                        .on('mousedown.zoom',\r\n                            function (e) {\r\n                                if (e.which === 1) {\r\n                                    $(document).one('mouseup.zoom',\r\n                                        function () {\r\n                                            stop();\r\n\r\n                                            $(document).off(mousemove, zoom.move);\r\n                                        }\r\n                                    );\r\n\r\n                                    start(e);\r\n\r\n                                    $(document).on(mousemove, zoom.move);\r\n\r\n                                    e.preventDefault();\r\n                                }\r\n                            }\r\n                        );\r\n                } else if (settings.on === 'click') {\r\n                    $source.on('click.zoom',\r\n                        function (e) {\r\n                            if (clicked) {\r\n                                // bubble the event up to the document to trigger the unbind.\r\n                                return;\r\n                            } else {\r\n                                clicked = true;\r\n                                start(e);\r\n                                $(document).on(mousemove, zoom.move);\r\n                                $(document).one('click.zoom',\r\n                                    function () {\r\n                                        stop();\r\n                                        clicked = false;\r\n                                        $(document).off(mousemove, zoom.move);\r\n                                    }\r\n                                );\r\n                                return false;\r\n                            }\r\n                        }\r\n                    );\r\n                } else if (settings.on === 'toggle') {\r\n                    $source.on('click.zoom',\r\n                        function (e) {\r\n                            if (clicked) {\r\n                                stop();\r\n                            } else {\r\n                                start(e);\r\n                            }\r\n                            clicked = !clicked;\r\n                        }\r\n                    );\r\n                } else if (settings.on === 'mouseover') {\r\n                    zoom.init(); // Preemptively call init because IE7 will fire the mousemove handler before the hover handler.\r\n\r\n                    $source\r\n                        .on('mouseenter.zoom', start)\r\n                        .on('mouseleave.zoom', stop)\r\n                        .on(mousemove, zoom.move);\r\n                }\r\n\r\n                // Touch fallback\r\n                if (settings.touch) {\r\n                    $source\r\n                        .on('touchstart.zoom', function (e) {\r\n                            e.preventDefault();\r\n                            if (touched) {\r\n                                touched = false;\r\n                                stop();\r\n                            } else {\r\n                                touched = true;\r\n                                start( e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] );\r\n                            }\r\n                        })\r\n                        .on('touchmove.zoom', function (e) {\r\n                            e.preventDefault();\r\n                            zoom.move( e.originalEvent.touches[0] || e.originalEvent.changedTouches[0] );\r\n                        });\r\n                }\r\n                \r\n                if ($.isFunction(settings.callback)) {\r\n                    settings.callback.call(img);\r\n                }\r\n            };\r\n\r\n            img.src = settings.url;\r\n        });\r\n    };\r\n\r\n    $.fn.zoom.defaults = defaults;\r\n}));\r\n","Magento_Catalog/js/list.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.compareList', {\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var elem = this.element,\r\n                products = $('thead td', elem),\r\n                headings;\r\n\r\n            if (products.length > this.options.productsInRow) {\r\n                headings = $('<table></table>')\r\n                    .addClass('comparison headings data table')\r\n                    .insertBefore(elem.closest('.container'));\r\n\r\n                elem.addClass('scroll');\r\n\r\n                $('th', elem).each(function () {\r\n                    var th = $(this),\r\n                        thCopy = th.clone();\r\n\r\n                    th.animate({\r\n                        top: '+=0'\r\n                    }, 50, function () {\r\n                        var height = th.height();\r\n\r\n                        thCopy.css('height', height)\r\n                            .appendTo(headings)\r\n                            .wrap('<tr></tr>');\r\n                    });\r\n                });\r\n            }\r\n\r\n            $(this.options.windowPrintSelector).on('click', function (e) {\r\n                e.preventDefault();\r\n                window.print();\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.compareList;\r\n});\r\n","Magento_Catalog/js/price-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Catalog/js/price-utils',\r\n    'underscore',\r\n    'mage/template',\r\n    'jquery-ui-modules/widget'\r\n], function ($, utils, _, mageTemplate) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        productId: null,\r\n        priceConfig: null,\r\n        prices: {},\r\n        priceTemplate: '<span class=\"price\"><%- data.formatted %></span>'\r\n    };\r\n\r\n    $.widget('mage.priceBox', {\r\n        options: globalOptions,\r\n        qtyInfo: '#qty',\r\n\r\n        /**\r\n         * Widget initialisation.\r\n         * Every time when option changed prices also can be changed. So\r\n         * changed options.prices -> changed cached prices -> recalculation -> redraw price box\r\n         */\r\n        _init: function initPriceBox() {\r\n            var box = this.element;\r\n\r\n            box.trigger('updatePrice');\r\n            this.cache.displayPrices = utils.deepClone(this.options.prices);\r\n        },\r\n\r\n        /**\r\n         * Widget creating.\r\n         */\r\n        _create: function createPriceBox() {\r\n            var box = this.element;\r\n\r\n            this.cache = {};\r\n            this._setDefaultsFromPriceConfig();\r\n            this._setDefaultsFromDataSet();\r\n\r\n            box.on('reloadPrice', this.reloadPrice.bind(this));\r\n            box.on('updatePrice', this.onUpdatePrice.bind(this));\r\n            $(this.qtyInfo).on('input', this.updateProductTierPrice.bind(this));\r\n            box.trigger('price-box-initialized');\r\n        },\r\n\r\n        /**\r\n         * Call on event updatePrice. Proxy to updatePrice method.\r\n         * @param {Event} event\r\n         * @param {Object} prices\r\n         */\r\n        onUpdatePrice: function onUpdatePrice(event, prices) {\r\n            return this.updatePrice(prices);\r\n        },\r\n\r\n        /**\r\n         * Updates price via new (or additional values).\r\n         * It expects object like this:\r\n         * -----\r\n         *   \"option-hash\":\r\n         *      \"price-code\":\r\n         *         \"amount\": 999.99999,\r\n         *         ...\r\n         * -----\r\n         * Empty option-hash object or empty price-code object treats as zero amount.\r\n         * @param {Object} newPrices\r\n         */\r\n        updatePrice: function updatePrice(newPrices) {\r\n            var prices = this.cache.displayPrices,\r\n                additionalPrice = {},\r\n                pricesCode = [],\r\n                priceValue, origin, finalPrice;\r\n\r\n            this.cache.additionalPriceObject = this.cache.additionalPriceObject || {};\r\n\r\n            if (newPrices) {\r\n                $.extend(this.cache.additionalPriceObject, newPrices);\r\n            }\r\n\r\n            if (!_.isEmpty(additionalPrice)) {\r\n                pricesCode = _.keys(additionalPrice);\r\n            } else if (!_.isEmpty(prices)) {\r\n                pricesCode = _.keys(prices);\r\n            }\r\n\r\n            _.each(this.cache.additionalPriceObject, function (additional) {\r\n                if (additional && !_.isEmpty(additional)) {\r\n                    pricesCode = _.keys(additional);\r\n                }\r\n                _.each(pricesCode, function (priceCode) {\r\n                    priceValue = additional[priceCode] || {};\r\n                    priceValue.amount = +priceValue.amount || 0;\r\n                    priceValue.adjustments = priceValue.adjustments || {};\r\n\r\n                    additionalPrice[priceCode] = additionalPrice[priceCode] || {\r\n                        'amount': 0,\r\n                        'adjustments': {}\r\n                    };\r\n                    additionalPrice[priceCode].amount =  0 + (additionalPrice[priceCode].amount || 0) +\r\n                        priceValue.amount;\r\n                    _.each(priceValue.adjustments, function (adValue, adCode) {\r\n                        additionalPrice[priceCode].adjustments[adCode] = 0 +\r\n                            (additionalPrice[priceCode].adjustments[adCode] || 0) + adValue;\r\n                    });\r\n                });\r\n            });\r\n\r\n            if (_.isEmpty(additionalPrice)) {\r\n                this.cache.displayPrices = utils.deepClone(this.options.prices);\r\n            } else {\r\n                _.each(additionalPrice, function (option, priceCode) {\r\n                    origin = this.options.prices[priceCode] || {};\r\n                    finalPrice = prices[priceCode] || {};\r\n                    option.amount = option.amount || 0;\r\n                    origin.amount = origin.amount || 0;\r\n                    origin.adjustments = origin.adjustments || {};\r\n                    finalPrice.adjustments = finalPrice.adjustments || {};\r\n\r\n                    finalPrice.amount = 0 + origin.amount + option.amount;\r\n                    _.each(option.adjustments, function (pa, paCode) {\r\n                        finalPrice.adjustments[paCode] = 0 + (origin.adjustments[paCode] || 0) + pa;\r\n                    });\r\n                }, this);\r\n            }\r\n\r\n            this.element.trigger('priceUpdated', this.cache.displayPrices);\r\n            this.element.trigger('reloadPrice');\r\n        },\r\n\r\n        /*eslint-disable no-extra-parens*/\r\n        /**\r\n         * Render price unit block.\r\n         */\r\n        reloadPrice: function reDrawPrices() {\r\n            var priceFormat = (this.options.priceConfig && this.options.priceConfig.priceFormat) || {},\r\n                priceTemplate = mageTemplate(this.options.priceTemplate);\r\n\r\n            _.each(this.cache.displayPrices, function (price, priceCode) {\r\n                price.final = _.reduce(price.adjustments, function (memo, amount) {\r\n                    return memo + amount;\r\n                }, price.amount);\r\n\r\n                price.formatted = utils.formatPriceLocale(price.final, priceFormat);\r\n\r\n                $('[data-price-type=\"' + priceCode + '\"]', this.element).html(priceTemplate({\r\n                    data: price\r\n                }));\r\n            }, this);\r\n        },\r\n\r\n        /*eslint-enable no-extra-parens*/\r\n        /**\r\n         * Overwrites initial (default) prices object.\r\n         * @param {Object} prices\r\n         */\r\n        setDefault: function setDefaultPrices(prices) {\r\n            this.cache.displayPrices = utils.deepClone(prices);\r\n            this.options.prices = utils.deepClone(prices);\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge of accepted configuration.\r\n         * @param  {Object} options\r\n         * @return {mage.priceBox}\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n\r\n            if ('disabled' in options) {\r\n                this._setOption('disabled', options.disabled);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * setDefaultsFromDataSet\r\n         */\r\n        _setDefaultsFromDataSet: function _setDefaultsFromDataSet() {\r\n            var box = this.element,\r\n                priceHolders = $('[data-price-type]', box),\r\n                prices = this.options.prices;\r\n\r\n            this.options.productId = box.data('productId');\r\n\r\n            if (_.isEmpty(prices)) {\r\n                priceHolders.each(function (index, element) {\r\n                    var type = $(element).data('priceType'),\r\n                        amount = parseFloat($(element).data('priceAmount'));\r\n\r\n                    if (type && !_.isNaN(amount)) {\r\n                        prices[type] = {\r\n                            amount: amount\r\n                        };\r\n                    }\r\n                });\r\n            }\r\n        },\r\n\r\n        /**\r\n         * setDefaultsFromPriceConfig\r\n         */\r\n        _setDefaultsFromPriceConfig: function _setDefaultsFromPriceConfig() {\r\n            var config = this.options.priceConfig;\r\n\r\n            if (config && config.prices) {\r\n                this.options.prices = config.prices;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Updates product final and base price according to tier prices\r\n         */\r\n        updateProductTierPrice: function updateProductTierPrice() {\r\n            var originalPrice,\r\n                prices = {'prices': {}};\r\n\r\n            if (this.options.prices.finalPrice) {\r\n                originalPrice = this.options.prices.finalPrice.amount;\r\n                prices.prices.finalPrice = {'amount': this.getPrice('price') - originalPrice};\r\n            }\r\n\r\n            if (this.options.prices.basePrice) {\r\n                originalPrice = this.options.prices.basePrice.amount;\r\n                prices.prices.basePrice = {'amount': this.getPrice('basePrice') - originalPrice};\r\n            }\r\n\r\n            this.updatePrice(prices);\r\n        },\r\n\r\n        /**\r\n         * Returns price.\r\n         *\r\n         * @param {String} priceKey\r\n         * @returns {Number}\r\n         */\r\n        getPrice: function (priceKey) {\r\n            var productQty = $(this.qtyInfo).val(),\r\n                result,\r\n                tierPriceItem,\r\n                i;\r\n\r\n            for (i = 0; i < this.options.priceConfig.tierPrices.length; i++) {\r\n                tierPriceItem = this.options.priceConfig.tierPrices[i];\r\n                if (productQty >= tierPriceItem.qty && tierPriceItem[priceKey]) {\r\n                    result = tierPriceItem[priceKey];\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n\r\n    return $.mage.priceBox;\r\n});\r\n","Magento_Catalog/js/price-option-date.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'priceUtils',\r\n    'priceOptions',\r\n    'jquery-ui-modules/widget'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n            fromSelector: 'form',\r\n            dropdownsSelector: '[data-role=calendar-dropdown]'\r\n        },\r\n        optionHandler = {};\r\n\r\n    optionHandler.optionHandlers = {};\r\n\r\n    /**\r\n     * Custom handler for Date-with-Dropdowns option type.\r\n     * @param  {jQuery} siblings\r\n     * @return {Function} function that return object { optionHash : optionAdditionalPrice }\r\n     */\r\n    function onCalendarDropdownChange(siblings) {\r\n        return function (element, optionConfig) {\r\n            var changes = {},\r\n                optionId = utils.findOptionId(element),\r\n                overhead = optionConfig[optionId].prices,\r\n                isNeedToUpdate = true,\r\n                optionHash = 'price-option-calendar-' + optionId;\r\n\r\n            siblings.each(function (index, el) {\r\n                isNeedToUpdate = isNeedToUpdate && !!$(el).val();\r\n            });\r\n\r\n            overhead = isNeedToUpdate ? overhead : {};\r\n            changes[optionHash] = overhead;\r\n\r\n            return changes;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns number of days for special month and year\r\n     * @param  {Number} month\r\n     * @param  {Number} year\r\n     * @return {Number}\r\n     */\r\n    function getDaysInMonth(month, year) {\r\n        return new Date(year, month, 0).getDate();\r\n    }\r\n\r\n    /**\r\n     * Adjusts the number of days in the day option element based on which month or year\r\n     * is selected (changed). Adjusts the days to 28, 29, 30, or 31 typically.\r\n     * @param {jQuery} dropdowns\r\n     */\r\n    function onDateChange(dropdowns) {\r\n        var daysNodes,\r\n            curMonth, curYear, expectedDays,\r\n            options, needed,\r\n            month = dropdowns.filter('[data-calendar-role=month]'),\r\n            year = dropdowns.filter('[data-calendar-role=year]');\r\n\r\n        if (month.length && year.length) {\r\n            daysNodes = dropdowns.filter('[data-calendar-role=day]').find('option');\r\n\r\n            curMonth = month.val() || '01';\r\n            curYear = year.val() || '2000';\r\n            expectedDays = getDaysInMonth(curMonth, curYear);\r\n\r\n            if (daysNodes.length - 1 > expectedDays) { // remove unnecessary option nodes\r\n                daysNodes.each(function (i, e) {\r\n                    if (e.value > expectedDays) {\r\n                        $(e).remove();\r\n                    }\r\n                });\r\n            } else if (daysNodes.length - 1 < expectedDays) { // add missing option nodes\r\n                options = [];\r\n                needed = expectedDays - daysNodes.length + 1;\r\n\r\n                while (needed--) { //eslint-disable-line max-depth\r\n                    options.push(\r\n                        '<option value=\"' + (expectedDays - needed) + '\">' + (expectedDays - needed) + '</option>'\r\n                    );\r\n                }\r\n                $(options.join('')).insertAfter(daysNodes.last());\r\n            }\r\n        }\r\n    }\r\n\r\n    $.widget('mage.priceOptionDate', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * Function-initializer of priceOptionDate widget\r\n         * @private\r\n         */\r\n        _create: function initOptionDate() {\r\n            var field = this.element,\r\n                form = field.closest(this.options.fromSelector),\r\n                dropdowns = $(this.options.dropdownsSelector, field),\r\n                dateOptionId;\r\n\r\n            if (dropdowns.length) {\r\n                dateOptionId = this.options.dropdownsSelector + dropdowns.attr('name');\r\n\r\n                optionHandler.optionHandlers[dateOptionId] = onCalendarDropdownChange(dropdowns);\r\n\r\n                form.priceOptions(optionHandler);\r\n\r\n                dropdowns.data('role', dateOptionId);\r\n                dropdowns.on('change', onDateChange.bind(this, dropdowns));\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptionDate;\r\n});\r\n","Magento_Catalog/js/price-option-file.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.priceOptionFile', {\r\n        options: {\r\n            fileName: '',\r\n            fileNamed: '',\r\n            fieldNameAction: '',\r\n            changeFileSelector: '',\r\n            deleteFileSelector: ''\r\n        },\r\n\r\n        /**\r\n         * Creates instance of widget\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.fileDeleteFlag = this.fileChangeFlag = false;\r\n            this.inputField = this.element.find('input[name=' + this.options.fileName + ']')[0];\r\n            this.inputFieldAction = this.element.find('input[name=' + this.options.fieldNameAction + ']')[0];\r\n            this.fileNameSpan = this.element.parent('dd').find('.' + this.options.fileNamed);\r\n\r\n            $(this.options.changeFileSelector).on('click', $.proxy(function () {\r\n                this._toggleFileChange();\r\n            }, this));\r\n            $(this.options.deleteFileSelector).on('click', $.proxy(function () {\r\n                this._toggleFileDelete();\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Toggles whether the current file is being changed or not. If the file is being deleted\r\n         * then the option to change the file is disabled.\r\n         * @private\r\n         */\r\n        _toggleFileChange: function () {\r\n            this.element.toggle();\r\n            this.fileChangeFlag = !this.fileChangeFlag;\r\n\r\n            if (!this.fileDeleteFlag) {\r\n                $(this.inputFieldAction).attr('value', this.fileChangeFlag ? 'save_new' : 'save_old');\r\n                this.inputField.disabled = !this.fileChangeFlag;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Toggles whether the file is to be deleted. When the file is being deleted, the name of\r\n         * the file is decorated with strike-through text and the option to change the file is\r\n         * disabled.\r\n         * @private\r\n         */\r\n        _toggleFileDelete: function () {\r\n            this.fileDeleteFlag = $(this.options.deleteFileSelector + ':checked').val();\r\n            $(this.inputFieldAction).attr('value',\r\n                this.fileDeleteFlag ? '' : this.fileChangeFlag ? 'save_new' : 'save_old');\r\n            this.inputField.disabled = this.fileDeleteFlag || !this.fileChangeFlag;\r\n            this.fileNameSpan.css('text-decoration', this.fileDeleteFlag ? 'line-through' : 'none');\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptionFile;\r\n});\r\n","Magento_Catalog/js/price-options.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mage/template',\r\n    'priceUtils',\r\n    'priceBox',\r\n    'jquery-ui-modules/widget'\r\n], function ($, _, mageTemplate, utils) {\r\n    'use strict';\r\n\r\n    var globalOptions = {\r\n        productId: null,\r\n        priceHolderSelector: '.price-box', //data-role=\"priceBox\"\r\n        optionsSelector: '.product-custom-option',\r\n        optionConfig: {},\r\n        optionHandlers: {},\r\n        optionTemplate: '<%= data.label %>' +\r\n        '<% if (data.finalPrice.value > 0) { %>' +\r\n        ' +<%- data.finalPrice.formatted %>' +\r\n        '<% } else if (data.finalPrice.value < 0) { %>' +\r\n        ' <%- data.finalPrice.formatted %>' +\r\n        '<% } %>',\r\n        controlContainer: 'dd'\r\n    };\r\n\r\n    /**\r\n     * Custom option preprocessor\r\n     * @param  {jQuery} element\r\n     * @param  {Object} optionsConfig - part of config\r\n     * @return {Object}\r\n     */\r\n    function defaultGetOptionValue(element, optionsConfig) {\r\n        var changes = {},\r\n            optionValue = element.val(),\r\n            optionId = utils.findOptionId(element[0]),\r\n            optionName = element.prop('name'),\r\n            optionType = element.prop('type'),\r\n            optionConfig = optionsConfig[optionId],\r\n            optionHash = optionName;\r\n\r\n        switch (optionType) {\r\n            case 'text':\r\n            case 'textarea':\r\n                changes[optionHash] = optionValue ? optionConfig.prices : {};\r\n                break;\r\n\r\n            case 'radio':\r\n                if (element.is(':checked')) {\r\n                    changes[optionHash] = optionConfig[optionValue] && optionConfig[optionValue].prices || {};\r\n                }\r\n                break;\r\n\r\n            case 'select-one':\r\n                changes[optionHash] = optionConfig[optionValue] && optionConfig[optionValue].prices || {};\r\n                break;\r\n\r\n            case 'select-multiple':\r\n                _.each(optionConfig, function (row, optionValueCode) {\r\n                    optionHash = optionName + '##' + optionValueCode;\r\n                    changes[optionHash] = _.contains(optionValue, optionValueCode) ? row.prices : {};\r\n                });\r\n                break;\r\n\r\n            case 'checkbox':\r\n                optionHash = optionName + '##' + optionValue;\r\n                changes[optionHash] = element.is(':checked') ? optionConfig[optionValue].prices : {};\r\n                break;\r\n\r\n            case 'file':\r\n                // Checking for 'disable' property equal to checking DOMNode with id*=\"change-\"\r\n                changes[optionHash] = optionValue || element.prop('disabled') ? optionConfig.prices : {};\r\n                break;\r\n        }\r\n\r\n        return changes;\r\n    }\r\n\r\n    $.widget('mage.priceOptions', {\r\n        options: globalOptions,\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _init: function initPriceBundle() {\r\n            $(this.options.optionsSelector, this.element).trigger('change');\r\n        },\r\n\r\n        /**\r\n         * Widget creating method.\r\n         * Triggered once.\r\n         * @private\r\n         */\r\n        _create: function createPriceOptions() {\r\n            var form = this.element,\r\n                options = $(this.options.optionsSelector, form),\r\n                priceBox = $(this.options.priceHolderSelector, $(this.options.optionsSelector).element);\r\n\r\n            if (priceBox.data('magePriceBox') &&\r\n                priceBox.priceBox('option') &&\r\n                priceBox.priceBox('option').priceConfig\r\n            ) {\r\n                if (priceBox.priceBox('option').priceConfig.optionTemplate) {\r\n                    this._setOption('optionTemplate', priceBox.priceBox('option').priceConfig.optionTemplate);\r\n                }\r\n                this._setOption('priceFormat', priceBox.priceBox('option').priceConfig.priceFormat);\r\n            }\r\n\r\n            this._applyOptionNodeFix(options);\r\n\r\n            options.on('change', this._onOptionChanged.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Custom option change-event handler\r\n         * @param {Event} event\r\n         * @private\r\n         */\r\n        _onOptionChanged: function onOptionChanged(event) {\r\n            var changes,\r\n                option = $(event.target),\r\n                handler = this.options.optionHandlers[option.data('role')];\r\n\r\n            option.data('optionContainer', option.closest(this.options.controlContainer));\r\n\r\n            if (handler && handler instanceof Function) {\r\n                changes = handler(option, this.options.optionConfig, this);\r\n            } else {\r\n                changes = defaultGetOptionValue(option, this.options.optionConfig);\r\n            }\r\n            $(this.options.priceHolderSelector).trigger('updatePrice', changes);\r\n        },\r\n\r\n        /**\r\n         * Helper to fix issue with option nodes:\r\n         *  - you can't place any html in option ->\r\n         *    so you can't style it via CSS\r\n         * @param {jQuery} options\r\n         * @private\r\n         */\r\n        _applyOptionNodeFix: function applyOptionNodeFix(options) {\r\n            var config = this.options,\r\n                format = config.priceFormat,\r\n                template = config.optionTemplate;\r\n\r\n            template = mageTemplate(template);\r\n            options.filter('select').each(function (index, element) {\r\n                var $element = $(element),\r\n                    optionId = utils.findOptionId($element),\r\n                    optionConfig = config.optionConfig && config.optionConfig[optionId];\r\n\r\n                $element.find('option').each(function (idx, option) {\r\n                    var $option,\r\n                        optionValue,\r\n                        toTemplate,\r\n                        prices;\r\n\r\n                    $option = $(option);\r\n                    optionValue = $option.val();\r\n\r\n                    if (!optionValue && optionValue !== 0) {\r\n                        return;\r\n                    }\r\n\r\n                    toTemplate = {\r\n                        data: {\r\n                            label: optionConfig[optionValue] && optionConfig[optionValue].name\r\n                        }\r\n                    };\r\n                    prices = optionConfig[optionValue] ? optionConfig[optionValue].prices : null;\r\n\r\n                    if (prices) {\r\n                        _.each(prices, function (price, type) {\r\n                            var value = +price.amount;\r\n\r\n                            value += _.reduce(price.adjustments, function (sum, x) { //eslint-disable-line\r\n                                return sum + x;\r\n                            }, 0);\r\n                            toTemplate.data[type] = {\r\n                                value: value,\r\n                                formatted: utils.formatPriceLocale(value, format)\r\n                            };\r\n                        });\r\n\r\n                        $option.text(template(toTemplate));\r\n                    }\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Custom behavior on getting options:\r\n         * now widget able to deep merge accepted configuration with instance options.\r\n         * @param  {Object}  options\r\n         * @return {$.Widget}\r\n         * @private\r\n         */\r\n        _setOptions: function setOptions(options) {\r\n            $.extend(true, this.options, options);\r\n            this._super(options);\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return $.mage.priceOptions;\r\n});\r\n","Magento_Catalog/js/price-utils.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore'\r\n], function ($, _) {\r\n    'use strict';\r\n\r\n    var globalPriceFormat = {\r\n        requiredPrecision: 2,\r\n        integerRequired: 1,\r\n        decimalSymbol: ',',\r\n        groupSymbol: ',',\r\n        groupLength: ','\r\n    };\r\n\r\n    /**\r\n     * Repeats {string} {times} times\r\n     * @param  {String} string\r\n     * @param  {Number} times\r\n     * @return {String}\r\n     */\r\n    function stringPad(string, times) {\r\n        return new Array(times + 1).join(string);\r\n    }\r\n\r\n    /**\r\n     * Format the price with the compliance to the specified locale\r\n     *\r\n     * @param {Number} amount\r\n     * @param {Object} format\r\n     * @param  {Boolean} isShowSign\r\n     */\r\n    function formatPriceLocale(amount, format, isShowSign)\r\n    {\r\n        var s = '',\r\n            precision, pattern, locale, r;\r\n\r\n        format = _.extend(globalPriceFormat, format);\r\n        precision = isNaN(format.requiredPrecision = Math.abs(format.requiredPrecision)) ? 2 : format.requiredPrecision;\r\n        pattern = format.pattern || '%s';\r\n        locale = window.LOCALE || 'en-US';\r\n        if (isShowSign === undefined || isShowSign === true) {\r\n            s = amount < 0 ? '-' : isShowSign ? '+' : '';\r\n        } else if (isShowSign === false) {\r\n            s = '';\r\n        }\r\n        pattern = pattern.indexOf('{sign}') < 0 ? s + pattern : pattern.replace('{sign}', s);\r\n        amount = Number(Math.round(Math.abs(+amount || 0) + 'e+' + precision) + ('e-' + precision));\r\n        r = amount.toLocaleString(locale, {minimumFractionDigits: precision});\r\n\r\n        return pattern.replace('%s', r).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n\r\n    /**\r\n     * Formatter for price amount\r\n     * @param  {Number}  amount\r\n     * @param  {Object}  format\r\n     * @param  {Boolean} isShowSign\r\n     * @return {String}              Formatted value\r\n     * @deprecated\r\n     */\r\n    function formatPrice(amount, format, isShowSign) {\r\n        var s = '',\r\n            precision, integerRequired, decimalSymbol, groupSymbol, groupLength, pattern, i, pad, j, re, r, am;\r\n\r\n        format = _.extend(globalPriceFormat, format);\r\n\r\n        // copied from price-option.js | Could be refactored with varien/js.js\r\n\r\n        precision = isNaN(format.requiredPrecision = Math.abs(format.requiredPrecision)) ? 2 : format.requiredPrecision;\r\n        integerRequired = isNaN(format.integerRequired = Math.abs(format.integerRequired)) ? 1 : format.integerRequired;\r\n        decimalSymbol = format.decimalSymbol === undefined ? ',' : format.decimalSymbol;\r\n        groupSymbol = format.groupSymbol === undefined ? '.' : format.groupSymbol;\r\n        groupLength = format.groupLength === undefined ? 3 : format.groupLength;\r\n        pattern = format.pattern || '%s';\r\n\r\n        if (isShowSign === undefined || isShowSign === true) {\r\n            s = amount < 0 ? '-' : isShowSign ? '+' : '';\r\n        } else if (isShowSign === false) {\r\n            s = '';\r\n        }\r\n        pattern = pattern.indexOf('{sign}') < 0 ? s + pattern : pattern.replace('{sign}', s);\r\n\r\n        // we're avoiding the usage of to fixed, and using round instead with the e representation to address\r\n        // numbers like 1.005 = 1.01. Using ToFixed to only provide trailing zeroes in case we have a whole number\r\n        i = parseInt(\r\n                amount = Number(Math.round(Math.abs(+amount || 0) + 'e+' + precision) + ('e-' + precision)),\r\n                10\r\n            ) + '';\r\n        pad = i.length < integerRequired ? integerRequired - i.length : 0;\r\n\r\n        i = stringPad('0', pad) + i;\r\n\r\n        j = i.length > groupLength ? i.length % groupLength : 0;\r\n        re = new RegExp('(\\\\d{' + groupLength + '})(?=\\\\d)', 'g');\r\n\r\n        // replace(/-/, 0) is only for fixing Safari bug which appears\r\n        // when Math.abs(0).toFixed() executed on '0' number.\r\n        // Result is '0.-0' :(\r\n\r\n        am = Number(Math.round(Math.abs(amount - i) + 'e+' + precision) + ('e-' + precision));\r\n        r = (j ? i.substr(0, j) + groupSymbol : '') +\r\n            i.substr(j).replace(re, '$1' + groupSymbol) +\r\n            (precision ? decimalSymbol + am.toFixed(precision).replace(/-/, 0).slice(2) : '');\r\n\r\n        return pattern.replace('%s', r).replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\r\n    }\r\n\r\n    /**\r\n     * Deep clone of Object. Doesn't support functions\r\n     * @param {Object} obj\r\n     * @return {Object}\r\n     */\r\n    function objectDeepClone(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n\r\n    /**\r\n     * Helper to find ID in name attribute\r\n     * @param   {jQuery} element\r\n     * @returns {undefined|String}\r\n     */\r\n    function findOptionId(element) {\r\n        var re, id, name;\r\n\r\n        if (!element) {\r\n            return id;\r\n        }\r\n        name = $(element).attr('name');\r\n\r\n        if (name.indexOf('[') !== -1) {\r\n            re = /\\[([^\\]]+)?\\]/;\r\n        } else {\r\n            re = /_([^\\]]+)?_/; // just to support file-type-option\r\n        }\r\n        id = re.exec(name) && re.exec(name)[1];\r\n\r\n        if (id) {\r\n            return id;\r\n        }\r\n    }\r\n\r\n    return {\r\n        formatPriceLocale: formatPriceLocale,\r\n        formatPrice: formatPrice,\r\n        deepClone: objectDeepClone,\r\n        strPad: stringPad,\r\n        findOptionId: findOptionId\r\n    };\r\n});\r\n","Magento_Catalog/js/related-products.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'mage/translate'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.relatedProducts', {\r\n        options: {\r\n            relatedCheckbox: '.related-checkbox', // Class name for a related product's input checkbox.\r\n            relatedProductsCheckFlag: false, // Related products checkboxes are initially unchecked.\r\n            relatedProductsField: '#related-products-field', // Hidden input field that stores related products.\r\n            selectAllMessage: $.mage.__('select all'),\r\n            unselectAllMessage: $.mage.__('unselect all'),\r\n            selectAllLink: '[data-role=\"select-all\"]',\r\n            elementsSelector: '.item.product'\r\n        },\r\n\r\n        /**\r\n         * Bind events to the appropriate handlers.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            $(this.options.selectAllLink, this.element).on('click', $.proxy(this._selectAllRelated, this));\r\n            $(this.options.relatedCheckbox, this.element).on('click', $.proxy(this._addRelatedToProduct, this));\r\n\r\n            if (this.element.data('shuffle')) {\r\n                this._shuffle(this.element.find(this.options.elementsSelector));\r\n            }\r\n            this._showRelatedProducts(\r\n                this.element.find(this.options.elementsSelector),\r\n                this.element.data('limit'),\r\n                this.element.data('shuffle-weighted')\r\n            );\r\n        },\r\n\r\n        /**\r\n         * This method either checks all checkboxes for a product's set of related products (select all)\r\n         * or unchecks them (unselect all).\r\n         * @private\r\n         * @param {jQuery.Event} e - Click event on either the \"select all\" link or the \"unselect all\" link.\r\n         * @return {Boolean} - Prevent default event action and event propagation.\r\n         */\r\n        _selectAllRelated: function (e) {\r\n            var innerHTML = this.options.relatedProductsCheckFlag ?\r\n                this.options.selectAllMessage : this.options.unselectAllMessage;\r\n\r\n            $(e.target).html(innerHTML);\r\n            $(this.options.relatedCheckbox + ':visible').attr(\r\n                'checked',\r\n                this.options.relatedProductsCheckFlag = !this.options.relatedProductsCheckFlag\r\n            );\r\n            this._addRelatedToProduct();\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * This method iterates through each checkbox for all related products and collects only those products\r\n         * whose checkbox has been checked. The selected related products are stored in a hidden input field.\r\n         * @private\r\n         */\r\n        _addRelatedToProduct: function () {\r\n            $(this.options.relatedProductsField).val(\r\n                $(this.options.relatedCheckbox + ':checked').map(function () {\r\n                    return this.value;\r\n                }).get().join(',')\r\n            );\r\n        },\r\n\r\n        /* jscs:disable */\r\n        /* eslint-disable */\r\n        /**\r\n         * Show related products according to limit. Shuffle if needed.\r\n         * @param {*} elements\r\n         * @param {*} limit\r\n         * @param weightedRandom\r\n         * @private\r\n         */\r\n        _showRelatedProducts: function (elements, limit, weightedRandom) {\r\n            var index, weights = [], random = [], weight = 2, shown = 0, $element, currentGroup, prevGroup;\r\n\r\n            if (limit === 0) {\r\n                limit = elements.length;\r\n            }\r\n\r\n            if (weightedRandom && limit > 0 && limit < elements.length) {\r\n                for (index = 0; index < limit; index++) {\r\n                    $element = $(elements[index]);\r\n                    if ($element.data('shuffle-group') !== '') {\r\n                        break;\r\n                    }\r\n                    $element.show();\r\n                    shown++;\r\n                }\r\n                limit -= shown;\r\n                for (index = elements.length - 1; index >= 0; index--) {\r\n                    $element = $(elements[index]);\r\n                    currentGroup = $element.data('shuffle-group');\r\n                    if (currentGroup !== '') {\r\n                        weights.push([index, Math.log(weight)]);\r\n                        if (typeof prevGroup !== 'undefined' && prevGroup !== currentGroup) {\r\n                            weight += 2;\r\n                        }\r\n                        prevGroup = currentGroup;\r\n                    }\r\n                }\r\n\r\n                if (weights.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                for (index = 0; index < weights.length; index++) {\r\n                    random.push([weights[index][0], Math.pow(Math.random(), 1 / weights[index][1])]);\r\n                }\r\n\r\n                random.sort(function(a, b) {\r\n                    a = a[1];\r\n                    b = b[1];\r\n                    return a < b ? 1 : (a > b ? -1 : 0);\r\n                });\r\n                index = 0;\r\n                while (limit) {\r\n                    $(elements[random[index][0]]).show();\r\n                    limit--;\r\n                    index++\r\n                }\r\n                return;\r\n            }\r\n\r\n            for (index = 0; index < limit; index++) {\r\n                $(elements[index]).show();\r\n            }\r\n        },\r\n\r\n        /* jscs:disable */\r\n        /* eslint-disable */\r\n        /**\r\n         * Shuffle an array\r\n         * @param {Array} elements\r\n         * @returns {*}\r\n         */\r\n        _shuffle: function shuffle(elements) {\r\n            var parent, child, lastSibling;\r\n            if (elements.length) {\r\n                parent = $(elements[0]).parent();\r\n            }\r\n            while (elements.length) {\r\n                child = elements.splice(Math.floor(Math.random() *  elements.length), 1)[0];\r\n                lastSibling = parent.find('[data-shuffle-group=\"' + $(child).data('shuffle-group') + '\"]').last();\r\n                lastSibling.after(child);\r\n            }\r\n        }\r\n\r\n        /* jscs:disable */\r\n        /* eslint:disable */\r\n    });\r\n\r\n    return $.mage.relatedProducts;\r\n});\r\n","Magento_Catalog/js/storage-manager.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiElement',\r\n    'mageUtils',\r\n    'Magento_Catalog/js/product/storage/storage-service',\r\n    'Magento_Customer/js/section-config',\r\n    'jquery'\r\n], function (_, Element, utils, storage, sectionConfig, $) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Flush events, that are clones of the same customer data sections\r\n     * Events listener\r\n     */\r\n    $(document).on('submit', function (event) {\r\n        var sections;\r\n\r\n        if (event.target.method.match(/post|put|delete/i)) {\r\n            sections = sectionConfig.getAffectedSections(event.target.action);\r\n\r\n            if (sections && window.localStorage) {\r\n                _.each(sections, function (section) {\r\n                    window.localStorage.removeItem(section);\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            defaultNamespace: {\r\n                lifetime: 1000\r\n            },\r\n            storagesConfiguration: {\r\n                'recently_viewed_product': {\r\n                    namespace: 'recently_viewed_product',\r\n                    className: 'IdsStorage',\r\n                    lifetime: '${ $.defaultNamespace.lifetime }',\r\n                    requestConfig: {\r\n                        typeId: '${ $.storagesConfiguration.recently_viewed_product.namespace }'\r\n                    },\r\n                    savePrevious: {\r\n                        namespace: '${ $.storagesConfiguration.recently_viewed_product.namespace }' + '_previous',\r\n                        className: '${ $.storagesConfiguration.recently_viewed_product.className }'\r\n                    },\r\n                    allowToSendRequest: 0\r\n                },\r\n                'recently_compared_product': {\r\n                    namespace: 'recently_compared_product',\r\n                    className: 'IdsStorageCompare',\r\n                    provider: 'compare-products',\r\n                    lifetime: '${ $.defaultNamespace.lifetime }',\r\n                    requestConfig: {\r\n                        typeId: '${ $.storagesConfiguration.recently_compared_product.namespace }'\r\n                    },\r\n                    savePrevious: {\r\n                        namespace: '${ $.storagesConfiguration.recently_compared_product.namespace }' + '_previous',\r\n                        className: '${ $.storagesConfiguration.recently_compared_product.className }'\r\n                    },\r\n                    allowToSendRequest: 0\r\n                },\r\n                'product_data_storage': {\r\n                    namespace: 'product_data_storage',\r\n                    className: 'DataStorage',\r\n                    allowToSendRequest: 0,\r\n                    updateRequestConfig: {\r\n                        url: '',\r\n                        method: 'GET',\r\n                        dataType: 'json'\r\n                    }\r\n                }\r\n            },\r\n            requestConfig: {\r\n                method: 'POST',\r\n                dataType: 'json',\r\n                ajaxSaveType: 'default',\r\n                ignoreProcessEvents: true\r\n            },\r\n            requestSent: 0\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .prepareStoragesConfig()\r\n                .initStorages()\r\n                .initStartData()\r\n                .initUpdateStorageDataListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes storages.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initStorages: function () {\r\n            _.each(this.storagesNamespace, function (name) {\r\n                this[name] = storage.createStorage(this.storagesConfiguration[name]);\r\n\r\n                if (this.storagesConfiguration[name].savePrevious) {\r\n                    this[name].previous = storage.createStorage(this.storagesConfiguration[name].savePrevious);\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes start data.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initStartData: function () {\r\n            _.each(this.storagesNamespace, function (name) {\r\n                this.updateDataHandler(name, this[name].get());\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Prepare storages congfig.\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        prepareStoragesConfig: function () {\r\n            this.storagesNamespace = _.keys(this.storagesConfiguration);\r\n\r\n            _.each(this.storagesNamespace, function (name) {\r\n                this.storagesConfiguration[name].requestConfig = _.extend(\r\n                    utils.copy(this.requestConfig),\r\n                    this.storagesConfiguration[name].requestConfig\r\n                );\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Prepare date in UTC format (in GMT), and calculate unix timestamp based in seconds\r\n         *\r\n         * @returns {Number}\r\n         * @private\r\n         */\r\n        getUtcTime: function () {\r\n            return new Date().getTime() / 1000;\r\n        },\r\n\r\n        /**\r\n         * Initializes listeners to storages \"data\" property.\r\n         */\r\n        initUpdateStorageDataListener: function () {\r\n            _.each(this.storagesNamespace, function (name) {\r\n                if (this[name].data) {\r\n                    this[name].data.subscribe(this.updateDataHandler.bind(this, name));\r\n                }\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Handlers for storages \"data\" property\r\n         */\r\n        updateDataHandler: function (name, data) {\r\n            var previousData = this[name].previous ? this[name].previous.get() : false;\r\n\r\n            if (!_.isEmpty(previousData) &&\r\n                !_.isEmpty(data) &&\r\n                !utils.compare(data, previousData).equal) {\r\n                this[name].set(data);\r\n                this[name].previous.set(data);\r\n                this.sendRequest(name, data);\r\n            } else if (\r\n                _.isEmpty(previousData) &&\r\n                !_.isEmpty(data)\r\n            ) {\r\n                this[name].set(data);\r\n                this.sendRequest(name, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets last updated time\r\n         *\r\n         * @param {String} name - storage name\r\n         */\r\n        getLastUpdate: function (name) {\r\n            return window.localStorage.getItem(this[name].namespace + '_last_update');\r\n        },\r\n\r\n        /**\r\n         * Sets last updated time\r\n         *\r\n         * @param {String} name - storage name\r\n         */\r\n        setLastUpdate: function (name) {\r\n            window.localStorage.setItem(this[name].namespace + '_last_update', this.getUtcTime());\r\n        },\r\n\r\n        /**\r\n         * Request handler\r\n         *\r\n         * @param {String} name - storage name\r\n         */\r\n        requestHandler: function (name) {\r\n            this.setLastUpdate(name);\r\n            this.requestSent = 1;\r\n        },\r\n\r\n        /**\r\n         * Sends request to server to gets data\r\n         *\r\n         * @param {String} name - storage name\r\n         * @param {Object} data - ids\r\n         */\r\n        sendRequest: function (name, data) {\r\n            var params  = utils.copy(this.storagesConfiguration[name].requestConfig),\r\n                url = params.syncUrl,\r\n                typeId = params.typeId;\r\n\r\n            if (this.requestSent || !~~this.storagesConfiguration[name].allowToSendRequest) {\r\n                return;\r\n            }\r\n\r\n            delete params.typeId;\r\n            delete params.url;\r\n            this.requestSent = 1;\r\n\r\n            return utils.ajaxSubmit({\r\n                url: url,\r\n                data: {\r\n                    ids: data,\r\n                    'type_id': typeId\r\n                }\r\n            }, params).done(this.requestHandler.bind(this, name));\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/upsell-products.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.upsellProducts', {\r\n        options: {\r\n            elementsSelector: '.item.product'\r\n        },\r\n\r\n        /**\r\n         * Bind events to the appropriate handlers.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            if (this.element.data('shuffle')) {\r\n                this._shuffle(this.element.find(this.options.elementsSelector));\r\n            }\r\n            this._showUpsellProducts(\r\n                this.element.find(this.options.elementsSelector),\r\n                this.element.data('limit'),\r\n                this.element.data('shuffle-weighted')\r\n            );\r\n        },\r\n\r\n        /* jscs:disable */\r\n        /* eslint-disable */\r\n        /**\r\n         * Show upsell products according to limit. Shuffle if needed.\r\n         * @param {*} elements\r\n         * @param {Number} limit\r\n         * @param {Boolean} weightedRandom\r\n         * @private\r\n         */\r\n        _showUpsellProducts: function (elements, limit, weightedRandom) {\r\n            var index, weights = [], random = [], weight = 2, shown = 0, $element, currentGroup, prevGroup;\r\n\r\n            if (limit === 0) {\r\n                limit = elements.length;\r\n            }\r\n\r\n            if (weightedRandom && limit > 0 && limit < elements.length) {\r\n                for (index = 0; index < limit; index++) {\r\n                    $element = $(elements[index]);\r\n                    if ($element.data('shuffle-group') !== '') {\r\n                        break;\r\n                    }\r\n                    $element.show();\r\n                    shown++;\r\n                }\r\n                limit -= shown;\r\n                for (index = elements.length - 1; index >= 0; index--) {\r\n                    $element = $(elements[index]);\r\n                    currentGroup = $element.data('shuffle-group');\r\n                    if (currentGroup !== '') {\r\n                        weights.push([index, Math.log(weight)]);\r\n                        if (typeof prevGroup !== 'undefined' && prevGroup !== currentGroup) {\r\n                            weight += 2;\r\n                        }\r\n                        prevGroup = currentGroup;\r\n                    }\r\n                }\r\n\r\n                if (weights.length === 0) {\r\n                    return;\r\n                }\r\n\r\n                for (index = 0; index < weights.length; index++) {\r\n                    random.push([weights[index][0], Math.pow(Math.random(), 1 / weights[index][1])]);\r\n                }\r\n\r\n                random.sort(function(a, b) {\r\n                    a = a[1];\r\n                    b = b[1];\r\n                    return a < b ? 1 : (a > b ? -1 : 0);\r\n                });\r\n                index = 0;\r\n                while (limit) {\r\n                    $(elements[random[index][0]]).show();\r\n                    limit--;\r\n                    index++\r\n                }\r\n                return;\r\n            }\r\n\r\n            for (index = 0; index < limit; index++) {\r\n                $(elements[index]).show();\r\n            }\r\n        },\r\n\r\n        /* jscs:disable */\r\n        /* eslint-disable */\r\n        /**\r\n         * Shuffle an array\r\n         * @param elements\r\n         * @returns {*}\r\n         */\r\n        _shuffle: function shuffle(elements){ //v1.0\r\n            var parent, child, lastSibling;\r\n            if (elements.length) {\r\n                parent = $(elements[0]).parent();\r\n            }\r\n            while (elements.length) {\r\n                child = elements.splice(Math.floor(Math.random() *  elements.length), 1)[0];\r\n                lastSibling = parent.find('[data-shuffle-group=\"' + $(child).data('shuffle-group') + '\"]').last();\r\n                lastSibling.after(child);\r\n            }\r\n        }\r\n\r\n        /* jscs:disable */\r\n        /* eslint:disable */\r\n    });\r\n\r\n    return $.mage.upsellProducts;\r\n});\r\n","Magento_Catalog/js/validate-product.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'mage/mage',\r\n    'Magento_Catalog/product/view/validation',\r\n    'catalogAddToCart'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.productValidate', {\r\n        options: {\r\n            bindSubmit: false,\r\n            radioCheckboxClosest: '.nested',\r\n            addToCartButtonSelector: '.action.tocart'\r\n        },\r\n\r\n        /**\r\n         * Uses Magento's validation widget for the form object.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            var bindSubmit = this.options.bindSubmit;\r\n\r\n            this.element.validation({\r\n                radioCheckboxClosest: this.options.radioCheckboxClosest,\r\n\r\n                /**\r\n                 * Uses catalogAddToCart widget as submit handler.\r\n                 * @param {Object} form\r\n                 * @returns {Boolean}\r\n                 */\r\n                submitHandler: function (form) {\r\n                    var jqForm = $(form).catalogAddToCart({\r\n                        bindSubmit: bindSubmit\r\n                    });\r\n\r\n                    jqForm.catalogAddToCart('submitForm', jqForm);\r\n\r\n                    return false;\r\n                }\r\n            });\r\n            $(this.options.addToCartButtonSelector).attr('disabled', false);\r\n        }\r\n    });\r\n\r\n    return $.mage.productValidate;\r\n});\r\n","Magento_Catalog/js/product/addtocart-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Element, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Prepare data, that will be inserted as data-mage-init attribute into button. With help of this attribute\r\n         * Add To * buttons can understand post data and urls\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getDataMageInit: function (row) {\r\n            return '{\"redirectUrl\": { \"url\" : \"'  + uencProcessor(row['add_to_cart_button'].url) + '\"}}';\r\n        },\r\n\r\n        /**\r\n         * Prepare Data-Post data that will be used in data-mage-init\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['add_to_cart_button']['post_data']);\r\n        },\r\n\r\n        /**\r\n         * Check if product has required options.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        hasRequiredOptions: function (row) {\r\n            return row['add_to_cart_button']['required_options'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to cart\" button can be shown or hide\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isSalable: function (row) {\r\n            return row['is_salable'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, stock status text can be \"In stock\" or \"Out Of Stock\"\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        isAvailable: function (row) {\r\n            return row['is_available'];\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to cart\" button can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_cart', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/addtocompare-button.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/uenc-processor',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, uencProcessor, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            label: ''\r\n        },\r\n\r\n        /**\r\n         * Prepare Data-Post data that will be used in data-mage-init\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Array}\r\n         */\r\n        getDataPost: function (row) {\r\n            return uencProcessor(row['add_to_compare_button'].url ||\r\n                    row['add_to_compare_button']['post_data']);\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, \"Add to compare\" button can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'add_to_compare', 'show_buttons');\r\n        },\r\n\r\n        /**\r\n         * Get button label.\r\n         *\r\n         * @return {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/breadcrumbs.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Theme/js/model/breadcrumb-list'\r\n], function ($, breadcrumbList) {\r\n    'use strict';\r\n\r\n    return function (widget) {\r\n\r\n        $.widget('mage.breadcrumbs', widget, {\r\n            options: {\r\n                categoryUrlSuffix: '',\r\n                useCategoryPathInUrl: false,\r\n                product: '',\r\n                categoryItemSelector: '.category-item',\r\n                menuContainer: '[data-action=\"navigation\"] > ul'\r\n            },\r\n\r\n            /** @inheritdoc */\r\n            _render: function () {\r\n                this._appendCatalogCrumbs();\r\n                this._super();\r\n            },\r\n\r\n            /**\r\n             * Append category and product crumbs.\r\n             *\r\n             * @private\r\n             */\r\n            _appendCatalogCrumbs: function () {\r\n                var categoryCrumbs = this._resolveCategoryCrumbs();\r\n\r\n                categoryCrumbs.forEach(function (crumbInfo) {\r\n                    breadcrumbList.push(crumbInfo);\r\n                });\r\n\r\n                if (this.options.product) {\r\n                    breadcrumbList.push(this._getProductCrumb());\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Resolve categories crumbs.\r\n             *\r\n             * @return Array\r\n             * @private\r\n             */\r\n            _resolveCategoryCrumbs: function () {\r\n                var menuItem = this._resolveCategoryMenuItem(),\r\n                    categoryCrumbs = [];\r\n\r\n                if (menuItem !== null && menuItem.length) {\r\n                    categoryCrumbs.unshift(this._getCategoryCrumb(menuItem));\r\n\r\n                    while ((menuItem = this._getParentMenuItem(menuItem)) !== null) {\r\n                        categoryCrumbs.unshift(this._getCategoryCrumb(menuItem));\r\n                    }\r\n                }\r\n\r\n                return categoryCrumbs;\r\n            },\r\n\r\n            /**\r\n             * Returns crumb data.\r\n             *\r\n             * @param {Object} menuItem\r\n             * @return {Object}\r\n             * @private\r\n             */\r\n            _getCategoryCrumb: function (menuItem) {\r\n                return {\r\n                    'name': 'category',\r\n                    'label': menuItem.text(),\r\n                    'link': menuItem.attr('href'),\r\n                    'title': ''\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Returns product crumb.\r\n             *\r\n             * @return {Object}\r\n             * @private\r\n             */\r\n            _getProductCrumb: function () {\r\n                return {\r\n                    'name': 'product',\r\n                    'label': this.options.product,\r\n                    'link': '',\r\n                    'title': ''\r\n                };\r\n            },\r\n\r\n            /**\r\n             * Find parent menu item for current.\r\n             *\r\n             * @param {Object} menuItem\r\n             * @return {Object|null}\r\n             * @private\r\n             */\r\n            _getParentMenuItem: function (menuItem) {\r\n                var classes,\r\n                    classNav,\r\n                    parentClass,\r\n                    parentMenuItem = null;\r\n\r\n                if (!menuItem) {\r\n                    return null;\r\n                }\r\n\r\n                classes = menuItem.parent().attr('class');\r\n                classNav = classes.match(/(nav\\-)[0-9]+(\\-[0-9]+)+/gi);\r\n\r\n                if (classNav) {\r\n                    classNav = classNav[0];\r\n                    parentClass = classNav.substr(0, classNav.lastIndexOf('-'));\r\n\r\n                    if (parentClass.lastIndexOf('-') !== -1) {\r\n                        parentMenuItem = $(this.options.menuContainer).find('.' + parentClass + ' > a');\r\n                        parentMenuItem = parentMenuItem.length ? parentMenuItem : null;\r\n                    }\r\n                }\r\n\r\n                return parentMenuItem;\r\n            },\r\n\r\n            /**\r\n             * Returns category menu item.\r\n             *\r\n             * Tries to resolve category from url or from referrer as fallback and\r\n             * find menu item from navigation menu by category url.\r\n             *\r\n             * @return {Object|null}\r\n             * @private\r\n             */\r\n            _resolveCategoryMenuItem: function () {\r\n                var categoryUrl = this._resolveCategoryUrl(),\r\n                    menu = $(this.options.menuContainer),\r\n                    categoryMenuItem = null;\r\n\r\n                if (categoryUrl && menu.length) {\r\n                    categoryMenuItem = menu.find(\r\n                        this.options.categoryItemSelector +\r\n                        ' > a[href=\"' + categoryUrl + '\"]'\r\n                    );\r\n                }\r\n\r\n                return categoryMenuItem;\r\n            },\r\n\r\n            /**\r\n             * Returns category url.\r\n             *\r\n             * @return {String}\r\n             * @private\r\n             */\r\n            _resolveCategoryUrl: function () {\r\n                var categoryUrl;\r\n\r\n                if (this.options.useCategoryPathInUrl) {\r\n                    // In case category path is used in product url - resolve category url from current url.\r\n                    categoryUrl = window.location.href.split('?')[0];\r\n                    categoryUrl = categoryUrl.substring(0, categoryUrl.lastIndexOf('/')) +\r\n                        this.options.categoryUrlSuffix;\r\n                } else {\r\n                    // In other case - try to resolve it from referrer (without parameters).\r\n                    categoryUrl = document.referrer;\r\n\r\n                    if (categoryUrl.indexOf('?') > 0) {\r\n                        categoryUrl = categoryUrl.substr(0, categoryUrl.indexOf('?'));\r\n                    }\r\n                }\r\n\r\n                return categoryUrl;\r\n            }\r\n        });\r\n\r\n        return $.mage.breadcrumbs;\r\n    };\r\n});\r\n","Magento_Catalog/js/product/learn-more.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (Column, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        /**\r\n         * Depends on this option, \"Learn More\" link can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'learn_more', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/name.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator',\r\n    'escaper'\r\n], function (Column, columnStatusValidator, escaper) {\r\n    'use strict';\r\n\r\n    return Column.extend({\r\n        defaults: {\r\n            allowedTags: ['div', 'span', 'b', 'strong', 'i', 'em', 'u', 'a']\r\n        },\r\n\r\n        /**\r\n         * Depends on this option, product name can be shown or hide. Depends on  backend configuration\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'name', 'show_attributes');\r\n        },\r\n\r\n        /**\r\n         * Name column.\r\n         *\r\n         * @param {String} label\r\n         * @returns {String}\r\n         */\r\n        getNameUnsanitizedHtml: function (label) {\r\n            return escaper.escapeHtml(label, this.allowedTags);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/provider-compared.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    './provider',\r\n    'Magento_Catalog/js/product/storage/storage-service',\r\n    'Magento_Customer/js/customer-data'\r\n], function (_, Provider, storage, customerData) {\r\n    'use strict';\r\n\r\n    return Provider.extend({\r\n\r\n        /**\r\n         * Ids update handler\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        idsHandler: function (data) {\r\n            this.productStorage.setIds(this.data.currency, this.data.store, this.dataFilter(data));\r\n        },\r\n\r\n        /**\r\n         * Filters data by provider\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        dataFilter: function (data) {\r\n            var providerData = this.idsStorage.prepareData(customerData.get(this.identifiersConfig.provider)().items),\r\n                result = {},\r\n                productCurrentScope,\r\n                scopeId;\r\n\r\n            if (typeof this.data.productCurrentScope !== 'undefined' && window.checkout && window.checkout.baseUrl) {\r\n                productCurrentScope = this.data.productCurrentScope;\r\n                scopeId = productCurrentScope === 'store' ? window.checkout.storeId :\r\n                    productCurrentScope === 'group' ? window.checkout.storeGroupId :\r\n                        window.checkout.websiteId;\r\n                _.each(data, function (value, key) {\r\n                    if (!providerData[productCurrentScope + '-' + scopeId + '-' + key]) {\r\n                        result[key] = value;\r\n                    }\r\n                });\r\n            } else {\r\n                _.each(data, function (value, key) {\r\n                    if (!providerData[key]) {\r\n                        result[key] = value;\r\n                    }\r\n                });\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Filters data from product storage by ids\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        filterData: function (data) {\r\n            var result = {},\r\n                i = 0,\r\n                ids = _.keys(this.dataFilter(this.ids())),\r\n                length = ids.length;\r\n\r\n            for (i; i < length; i++) {\r\n                if (ids[i] && data[ids[i]]) {\r\n                    result[ids[i]] = data[ids[i]];\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'jquery',\r\n    'mageUtils',\r\n    'uiElement',\r\n    'Magento_Catalog/js/product/storage/storage-service',\r\n    'Magento_Customer/js/customer-data',\r\n    'Magento_Catalog/js/product/view/product-ids-resolver'\r\n], function (_, $, utils, Element, storage, customerData, productResolver) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            identifiersConfig: {\r\n                namespace: ''\r\n            },\r\n            productStorageConfig: {\r\n                namespace: 'product_data_storage',\r\n                customerDataProvider: 'product_data_storage',\r\n                updateRequestConfig: {\r\n                    url: '',\r\n                    method: 'GET',\r\n                    dataType: 'json'\r\n                },\r\n                className: 'DataStorage'\r\n            },\r\n            ids: {},\r\n            listens: {\r\n                ids: 'idsHandler'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes provider component.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super()\r\n                .initIdsStorage();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Calls 'initObservable' of parent\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super();\r\n            this.observe('ids');\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes ids storage.\r\n         *\r\n         * @returns {Provider} Chainable.\r\n         */\r\n        initIdsStorage: function () {\r\n            storage.onStorageInit(this.identifiersConfig.namespace, this.idsStorageHandler.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes ids storage handler.\r\n         *\r\n         * @param {Object} idsStorage\r\n         */\r\n        idsStorageHandler: function (idsStorage) {\r\n            this.idsStorage = idsStorage;\r\n            this.productStorage = storage.createStorage(this.productStorageConfig);\r\n            this.productStorage.data.subscribe(this.dataCollectionHandler.bind(this));\r\n\r\n            if (~~this.idsStorage.allowToSendRequest) {\r\n                customerData.reload([idsStorage.namespace]).done(this._resolveDataByIds.bind(this));\r\n            } else {\r\n                this._resolveDataByIds();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Callback, which load by ids from ids-storage product data\r\n         *\r\n         * @private\r\n         */\r\n        _resolveDataByIds: function () {\r\n            if (!window.checkout || !window.checkout.baseUrl) {\r\n                // We need data that the minicart provdes to determine storeId/websiteId\r\n                return;\r\n            }\r\n\r\n            this.initIdsListener();\r\n            this.idsMerger(\r\n                this.idsStorage.get(),\r\n                this.prepareDataFromCustomerData(customerData.get(this.identifiersConfig.namespace)())\r\n            );\r\n\r\n            if (!_.isEmpty(this.productStorage.data())) {\r\n                this.dataCollectionHandler(this.productStorage.data());\r\n            } else {\r\n                this.productStorage.setIds(this.data.currency, this.data.store, this.ids());\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Init ids storage listener.\r\n         */\r\n        initIdsListener: function () {\r\n            customerData.get(this.identifiersConfig.namespace).subscribe(function (data) {\r\n                this.idsMerger(this.prepareDataFromCustomerData(data));\r\n            }.bind(this));\r\n            this.idsStorage.data.subscribe(this.idsMerger.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Prepare data from customerData.\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        prepareDataFromCustomerData: function (data) {\r\n            data = data.items ? data.items : data;\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Filter ids by their lifetime in order to show only hot ids :)\r\n         *\r\n         * @param {Object} ids\r\n         * @returns {Array}\r\n         */\r\n        filterIds: function (ids) {\r\n            var _ids = {},\r\n                currentTime = new Date().getTime() / 1000,\r\n                currentProductIds = productResolver($('#product_addtocart_form')),\r\n                productCurrentScope = this.data.productCurrentScope,\r\n                scopeId = productCurrentScope === 'store' ? window.checkout.storeId :\r\n                productCurrentScope === 'group' ? window.checkout.storeGroupId :\r\n                    window.checkout.websiteId;\r\n\r\n            _.each(ids, function (id, key) {\r\n                if (\r\n                    currentTime - ids[key]['added_at'] < ~~this.idsStorage.lifetime &&\r\n                    !_.contains(currentProductIds, ids[key]['product_id']) &&\r\n                    (!id.hasOwnProperty('scope_id') || ids[key]['scope_id'] === scopeId)\r\n                ) {\r\n                    _ids[id['product_id']] = id;\r\n\r\n                }\r\n            }, this);\r\n\r\n            return _ids;\r\n        },\r\n\r\n        /**\r\n         * Merges id from storage and customer data\r\n         *\r\n         * @param {Object} data\r\n         * @param {Object} optionalData\r\n         */\r\n        idsMerger: function (data, optionalData) {\r\n            if (data && optionalData) {\r\n                data = _.extend(data, optionalData);\r\n            }\r\n\r\n            if (!_.isEmpty(data)) {\r\n                this.ids(\r\n                    this.filterIds(_.extend(this.ids(), data))\r\n                );\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Ids update handler\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        idsHandler: function (data) {\r\n            this.productStorage.setIds(this.data.currency, this.data.store, data);\r\n        },\r\n\r\n        /**\r\n         * Process data\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        processData: function (data) {\r\n            var curData = utils.copy(this.data),\r\n                ids = this.ids();\r\n\r\n            delete data['data_id'];\r\n            data = _.values(data);\r\n\r\n            _.each(data, function (record, index) {\r\n                record._rowIndex = index;\r\n                record['added_at'] = ids[record.id]['added_at'];\r\n            }, this);\r\n\r\n            curData.items = data;\r\n            this.set('data', curData);\r\n        },\r\n\r\n        /**\r\n         * Product storage data handler\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        dataCollectionHandler: function (data) {\r\n            data = this.filterData(data);\r\n            this.processData(data);\r\n        },\r\n\r\n        /**\r\n         * Filters data from product storage by ids\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        filterData: function (data) {\r\n            var result = {},\r\n                i = 0,\r\n                ids = _.keys(this.ids()),\r\n                length = ids.length;\r\n\r\n            for (i; i < length; i++) {\r\n                if (ids[i] && data[ids[i]]) {\r\n                    result[ids[i]] = data[ids[i]];\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/query-builder.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n        'underscore'\r\n    ], function (_) {\r\n        'use strict';\r\n\r\n        return {\r\n\r\n            /**\r\n             * Build query to get id\r\n             *\r\n             * @param {Object} data\r\n             */\r\n            buildQuery: function (data) {\r\n                var filters = [];\r\n\r\n                _.each(data, function (value, key) {\r\n                    filters.push({\r\n                        field: key,\r\n                        value: value,\r\n                        'condition_type': 'in'\r\n                    });\r\n                });\r\n\r\n                return {\r\n                    searchCriteria: {\r\n                        filterGroups: [\r\n                            {\r\n                                filters: filters\r\n                            }\r\n                        ]\r\n                    }\r\n                };\r\n            }\r\n        };\r\n    }\r\n);\r\n","Magento_Catalog/js/product/remaining-characters.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/translate',\r\n    'jquery-ui-modules/widget'\r\n], function ($, $t) {\r\n    'use strict';\r\n\r\n    $.widget('mage.remainingCharacters', {\r\n        options: {\r\n            remainingText: $t('remaining'),\r\n            tooManyText: $t('too many'),\r\n            errorClass: 'mage-error',\r\n            noDisplayClass: 'no-display'\r\n        },\r\n\r\n        /**\r\n         * Initializes custom option component\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this.note = $(this.options.noteSelector);\r\n            this.counter = $(this.options.counterSelector);\r\n\r\n            this.updateCharacterCount();\r\n            this.element.on('change keyup paste', this.updateCharacterCount.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Updates counter message\r\n         */\r\n        updateCharacterCount: function () {\r\n            var length = this.element.val().length,\r\n                diff = this.options.maxLength - length;\r\n\r\n            this.counter.text(this._formatMessage(diff));\r\n            this.counter.toggleClass(this.options.noDisplayClass, length === 0);\r\n            this.note.toggleClass(this.options.errorClass, diff < 0);\r\n        },\r\n\r\n        /**\r\n         * Format remaining characters message\r\n         *\r\n         * @param {int} diff\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        _formatMessage: function (diff) {\r\n            var count = Math.abs(diff),\r\n                qualifier = diff < 0 ? this.options.tooManyText : this.options.remainingText;\r\n\r\n            return '(' + count + ' ' + qualifier + ')';\r\n        }\r\n    });\r\n\r\n    return $.mage.remainingCharacters;\r\n});\r\n","Magento_Catalog/js/product/uenc-processor.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([], function () {\r\n        'use strict';\r\n\r\n        /**\r\n         * Check data to JSON.\r\n         *\r\n         * @returns {Boolean}\r\n         */\r\n        function _isJSON(data) {\r\n            try {\r\n                JSON.parse(data);\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /**\r\n         * Processes data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} placeholder\r\n         * @param {String} uenc\r\n         *\r\n         * @returns {String}\r\n         */\r\n        function _stringProcessor(data, placeholder, uenc) {\r\n            if (data && ~data.indexOf(placeholder)) {\r\n                return data.replace(placeholder, uenc);\r\n            }\r\n\r\n            return data;\r\n        }\r\n\r\n        /**\r\n         * Processes data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} placeholder\r\n         * @param {String} uenc\r\n         *\r\n         * @returns {String}\r\n         */\r\n        function _objectProcessor(data, placeholder, uenc) {\r\n            data = JSON.parse(data);\r\n\r\n            if (data.hasOwnProperty('action')) {\r\n                data.action = _stringProcessor(data.action, placeholder, uenc);\r\n            }\r\n\r\n            if (data.hasOwnProperty('data') && data.data.hasOwnProperty('uenc')) {\r\n                data.data.uenc = uenc;\r\n            }\r\n\r\n            return JSON.stringify(data);\r\n        }\r\n\r\n        /**\r\n         * Processes data.\r\n         *\r\n         * @param {Object} data\r\n         * @param {String} placeholder\r\n         *\r\n         * @returns {String}\r\n         */\r\n        return function (data, placeholder) {\r\n            var uenc = btoa(window.location.href).replace('+/=', '-_,');\r\n\r\n            placeholder = placeholder || encodeURI('%uenc%');\r\n\r\n            return _isJSON(data) ?\r\n                _objectProcessor(data, placeholder, uenc) :\r\n                _stringProcessor(data, placeholder, uenc);\r\n\r\n        };\r\n    }\r\n);\r\n","Magento_Catalog/js/product/list/column-status-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore'\r\n], function (_) {\r\n    'use strict';\r\n\r\n    return _.extend({\r\n        /**\r\n         * Check whether we can show column depends on server settings or not\r\n         *\r\n         * @param {Object} source\r\n         * @param {String} attributeCode\r\n         * @param {String} type\r\n         * @returns {Boolean}\r\n         */\r\n        isValid: function (source, attributeCode, type) {\r\n            var attributes;\r\n\r\n            if (!source[type]) {\r\n                return false;\r\n            }\r\n\r\n            attributes = source[type].split(',');\r\n\r\n            return _.contains(attributes, attributeCode);\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/listing.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'Magento_Ui/js/grid/listing'\r\n], function (ko, _, Listing) {\r\n    'use strict';\r\n\r\n    return Listing.extend({\r\n        defaults: {\r\n            additionalClasses: '',\r\n            filteredRows: {},\r\n            limit: 5,\r\n            listens: {\r\n                elems: 'filterRowsFromCache',\r\n                '${ $.provider }:data.items': 'filterRowsFromServer'\r\n            }\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.filteredRows = ko.observable();\r\n            this.initProductsLimit();\r\n            this.hideLoader();\r\n        },\r\n\r\n        /**\r\n         * Initialize product limit\r\n         * Product limit can be configured through Ui component.\r\n         * Product limit are present in widget form\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        initProductsLimit: function () {\r\n            if (this.source['page_size']) {\r\n                this.limit = this.source['page_size'];\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes observable properties.\r\n         *\r\n         * @returns {Listing} Chainable.\r\n         */\r\n        initObservable: function () {\r\n            this._super()\r\n                .track({\r\n                    rows: []\r\n                });\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Sort and filter rows, that are already in magento storage cache\r\n         *\r\n         * @return void\r\n         */\r\n        filterRowsFromCache: function () {\r\n            this._filterRows(this.rows);\r\n        },\r\n\r\n        /**\r\n         * Sort and filter rows, that are come from backend\r\n         *\r\n         * @param {Object} rows\r\n         */\r\n        filterRowsFromServer: function (rows) {\r\n            this._filterRows(rows);\r\n        },\r\n\r\n        /**\r\n         * Filter rows by limit and sort them\r\n         *\r\n         * @param {Array} rows\r\n         * @private\r\n         */\r\n        _filterRows: function (rows) {\r\n            this.filteredRows(_.sortBy(rows, 'added_at').reverse().slice(0, this.limit));\r\n        },\r\n\r\n        /**\r\n         * Can retrieve product url\r\n         *\r\n         * @param {Object} row\r\n         * @returns {String}\r\n         */\r\n        getUrl: function (row) {\r\n            return row.url;\r\n        },\r\n\r\n        /**\r\n         * Get product attribute by code.\r\n         *\r\n         * @param {String} code\r\n         * @return {Object}\r\n         */\r\n        getComponentByCode: function (code) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                component;\r\n\r\n            component = _.filter(elems, function (elem) {\r\n                return elem.index === code;\r\n            }, this).pop();\r\n\r\n            return component;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/toolbar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    /**\r\n     * ProductListToolbarForm Widget - this widget is setting cookie and submitting form according to toolbar controls\r\n     */\r\n    $.widget('mage.productListToolbarForm', {\r\n\r\n        options: {\r\n            modeControl: '[data-role=\"mode-switcher\"]',\r\n            directionControl: '[data-role=\"direction-switcher\"]',\r\n            orderControl: '[data-role=\"sorter\"]',\r\n            limitControl: '[data-role=\"limiter\"]',\r\n            mode: 'product_list_mode',\r\n            direction: 'product_list_dir',\r\n            order: 'product_list_order',\r\n            limit: 'product_list_limit',\r\n            page: 'p',\r\n            modeDefault: 'grid',\r\n            directionDefault: 'asc',\r\n            orderDefault: 'position',\r\n            limitDefault: '9',\r\n            url: '',\r\n            formKey: '',\r\n            post: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._bind(\r\n                $(this.options.modeControl, this.element),\r\n                this.options.mode,\r\n                this.options.modeDefault\r\n            );\r\n            this._bind(\r\n                $(this.options.directionControl, this.element),\r\n                this.options.direction,\r\n                this.options.directionDefault\r\n            );\r\n            this._bind(\r\n                $(this.options.orderControl, this.element),\r\n                this.options.order,\r\n                this.options.orderDefault\r\n            );\r\n            this._bind(\r\n                $(this.options.limitControl, this.element),\r\n                this.options.limit,\r\n                this.options.limitDefault\r\n            );\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _bind: function (element, paramName, defaultValue) {\r\n            if (element.is('select')) {\r\n                element.on('change', {\r\n                    paramName: paramName,\r\n                    'default': defaultValue\r\n                }, $.proxy(this._processSelect, this));\r\n            } else {\r\n                element.on('click', {\r\n                    paramName: paramName,\r\n                    'default': defaultValue\r\n                }, $.proxy(this._processLink, this));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _processLink: function (event) {\r\n            event.preventDefault();\r\n            this.changeUrl(\r\n                event.data.paramName,\r\n                $(event.currentTarget).data('value'),\r\n                event.data.default\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @param {jQuery.Event} event\r\n         * @private\r\n         */\r\n        _processSelect: function (event) {\r\n            this.changeUrl(\r\n                event.data.paramName,\r\n                event.currentTarget.options[event.currentTarget.selectedIndex].value,\r\n                event.data.default\r\n            );\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        getUrlParams: function () {\r\n            var decode = window.decodeURIComponent,\r\n                urlPaths = this.options.url.split('?'),\r\n                urlParams = urlPaths[1] ? urlPaths[1].split('&') : [],\r\n                params = {},\r\n                parameters, i;\r\n\r\n            for (i = 0; i < urlParams.length; i++) {\r\n                parameters = urlParams[i].split('=');\r\n                params[decode(parameters[0])] = parameters[1] !== undefined ?\r\n                    decode(parameters[1].replace(/\\+/g, '%20')) :\r\n                    '';\r\n            }\r\n\r\n            return params;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        getCurrentLimit: function () {\r\n            return this.getUrlParams()[this.options.limit] || this.options.limitDefault;\r\n        },\r\n\r\n        /**\r\n         * @returns {String}\r\n         * @private\r\n         */\r\n        getCurrentPage: function () {\r\n            return this.getUrlParams()[this.options.page] || 1;\r\n        },\r\n\r\n        /**\r\n         * @param {String} paramName\r\n         * @param {*} paramValue\r\n         * @param {*} defaultValue\r\n         */\r\n        changeUrl: function (paramName, paramValue, defaultValue) {\r\n            var urlPaths = this.options.url.split('?'),\r\n                baseUrl = urlPaths[0],\r\n                paramData = this.getUrlParams(),\r\n                currentPage = this.getCurrentPage(),\r\n                form, params, key, input, formKey, newPage;\r\n\r\n            if (currentPage > 1 && paramName === this.options.mode) {\r\n                delete paramData[this.options.page];\r\n            }\r\n\r\n            if (currentPage > 1 && paramName === this.options.limit) {\r\n                newPage = Math.floor(this.getCurrentLimit() * (currentPage - 1) / paramValue) + 1;\r\n\r\n                if (newPage > 1) {\r\n                    paramData[this.options.page] = newPage;\r\n                } else {\r\n                    delete paramData[this.options.page];\r\n                }\r\n            }\r\n\r\n            paramData[paramName] = paramValue;\r\n\r\n            if (this.options.post) {\r\n                form = document.createElement('form');\r\n                params = [this.options.mode, this.options.direction, this.options.order, this.options.limit];\r\n\r\n                for (key in paramData) {\r\n                    if (params.indexOf(key) !== -1) { //eslint-disable-line max-depth\r\n                        input = document.createElement('input');\r\n                        input.name = key;\r\n                        input.value = paramData[key];\r\n                        form.appendChild(input);\r\n                        delete paramData[key];\r\n                    }\r\n                }\r\n                formKey = document.createElement('input');\r\n                formKey.name = 'form_key';\r\n                formKey.value = this.options.formKey;\r\n                form.appendChild(formKey);\r\n\r\n                paramData = $.param(paramData);\r\n                baseUrl += paramData.length ? '?' + paramData : '';\r\n\r\n                form.action = baseUrl;\r\n                form.method = 'POST';\r\n                document.body.appendChild(form);\r\n                form.submit();\r\n            } else {\r\n                if (paramValue == defaultValue) { //eslint-disable-line eqeqeq\r\n                    delete paramData[paramName];\r\n                }\r\n\r\n                paramData = $.param(paramData);\r\n                location.href = baseUrl + (paramData.length ? '?' + paramData : '');\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.productListToolbarForm;\r\n});\r\n","Magento_Catalog/js/product/list/columns/final-price.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiCollection'\r\n], function (_, registry, utils, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            label: false,\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            showMinimalPrice: false,\r\n            showMaximumPrice: false,\r\n            useLinkForAsLowAs: false,\r\n            bodyTmpl: 'Magento_Catalog/product/final_price',\r\n            priceWrapperCssClasses: '',\r\n            priceWrapperAttr: {}\r\n        },\r\n\r\n        /**\r\n         * Get product final price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} final price html\r\n         */\r\n        getPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} final price html\r\n         */\r\n        getPriceUnsanitizedHtml: function (row) {\r\n            return this.getPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get product regular price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} regular price html\r\n         */\r\n        getRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['regular_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getRegularPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} regular price html\r\n         */\r\n        getRegularPriceUnsanitizedHtml: function (row) {\r\n            return this.getRegularPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Check if product has a price range.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        hasPriceRange: function (row) {\r\n            return row['price_info']['max_regular_price'] !== row['price_info']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} special price html\r\n         */\r\n        hasSpecialPrice: function (row) {\r\n            return row['price_info']['regular_price'] > row['price_info']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if product has minimal price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        isMinimalPrice: function (row) {\r\n            return row['price_info']['minimal_price'] < row['price_info']['final_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product minimal price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        getMinimalPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['minimal_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMinimalPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal price html\r\n         */\r\n        getMinimalPriceUnsanitizedHtml: function (row) {\r\n            return this.getMinimalPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Check if product is salable.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        isSalable: function (row) {\r\n            return row['is_salable'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum price html\r\n         */\r\n        getMaxPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['max_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMaxPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum price html\r\n         */\r\n        getMaxPriceUnsanitizedHtml: function (row) {\r\n            return this.getMaxPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get product maximum regular price in case of price range and special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum regular price html\r\n         */\r\n        getMaxRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['max_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMaxRegularPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} maximum regular price html\r\n         */\r\n        getMaxRegularPriceUnsanitizedHtml: function (row) {\r\n            return this.getMaxRegularPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get product minimal regular price in case of price range and special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal regular price html\r\n         */\r\n        getMinRegularPrice: function (row) {\r\n            return row['price_info']['formatted_prices']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMinRegularPrice.\r\n         *\r\n         * @param {Object} row\r\n         * @return {HTMLElement} minimal regular price html\r\n         */\r\n        getMinRegularPriceUnsanitizedHtml: function (row) {\r\n            return this.getMinRegularPrice(row);\r\n        },\r\n\r\n        /**\r\n         * Get adjustments names and return as string.\r\n         *\r\n         * @return {String} adjustments classes\r\n         */\r\n        getAdjustmentCssClasses: function () {\r\n            return _.pluck(this.getAdjustments(), 'index').join(' ');\r\n        },\r\n\r\n        /**\r\n         * Get product minimal price as number.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal price amount\r\n         */\r\n        getMinimalPriceAmount: function (row) {\r\n            return row['price_info']['minimal_price'];\r\n        },\r\n\r\n        /**\r\n         * UnsanitizedHtml version of getMinimalPriceAmount\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal price amount\r\n         */\r\n        getMinimalPriceAmountUnsanitizedHtml: function (row) {\r\n            return this.getMinimalPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Get product minimal regular price as number in case of special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} minimal regular price amount\r\n         */\r\n        getMinimalRegularPriceAmount: function (row) {\r\n            return row['price_info']['min_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum price as number.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} maximum price amount\r\n         */\r\n        getMaximumPriceAmount: function (row) {\r\n            return row['price_info']['max_price'];\r\n        },\r\n\r\n        /**\r\n         * Get product maximum regular price as number in case of special price.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number} maximum regular price amount\r\n         */\r\n        getMaximumRegularPriceAmount: function (row) {\r\n            return row['price_info']['max_regular_price'];\r\n        },\r\n\r\n        /**\r\n         * Check if minimal regular price exist for product.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        showMinRegularPrice: function (row) {\r\n            return this.getMinimalPriceAmount(row) < this.getMinimalRegularPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Check if maximum regular price exist for product.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        showMaxRegularPrice: function (row) {\r\n            return this.getMaximumPriceAmount(row) < this.getMaximumRegularPriceAmount(row);\r\n        },\r\n\r\n        /**\r\n         * Get path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Get all price adjustments.\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getAdjustments: function () {\r\n            var adjustments = this.elems();\r\n\r\n            _.each(adjustments, function (adjustment) {\r\n                adjustment.setPriceType(this.priceType);\r\n                adjustment.source = this.source;\r\n            }, this);\r\n\r\n            return adjustments;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'underscore',\r\n    'Magento_Ui/js/grid/columns/column',\r\n    'Magento_Catalog/js/product/list/column-status-validator'\r\n], function (_, Element, columnStatusValidator) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            bodyTmpl: 'Magento_Catalog/product/list/columns/image',\r\n            imageCode: 'default',\r\n            image: {}\r\n        },\r\n\r\n        /**\r\n         * Find image by code in scope of images\r\n         *\r\n         * @param {Object} images\r\n         * @returns {*|T}\r\n         */\r\n        getImage: function (images) {\r\n            return _.filter(images, function (image) {\r\n                return this.imageCode === image.code;\r\n            }, this).pop();\r\n        },\r\n\r\n        /**\r\n         * Get image path.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getImageUrl: function (row) {\r\n            return this.getImage(row.images).url;\r\n        },\r\n\r\n        /**\r\n         * Get image box width.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getWidth: function (row) {\r\n            return this.getImage(row.images).width;\r\n        },\r\n\r\n        /**\r\n         * Get image box height.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getHeight: function (row) {\r\n            return this.getImage(row.images).height;\r\n        },\r\n\r\n        /**\r\n         * Get resized image width.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getResizedImageWidth: function (row) {\r\n            return this.getImage(row.images)['resized_width'];\r\n        },\r\n\r\n        /**\r\n         * Get resized image height.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Number}\r\n         */\r\n        getResizedImageHeight: function (row) {\r\n            return this.getImage(row.images)['resized_height'];\r\n        },\r\n\r\n        /**\r\n         * Get image alt text.\r\n         *\r\n         * @param {Object} row\r\n         * @return {String}\r\n         */\r\n        getLabel: function (row) {\r\n            if (!this.imageExists(row)) {\r\n                return this._super();\r\n            }\r\n\r\n            return this.getImage(row.images).label;\r\n        },\r\n\r\n        /**\r\n         * Check if image exist.\r\n         *\r\n         * @param {Object} row\r\n         * @return {Boolean}\r\n         */\r\n        imageExists: function (row) {\r\n            return this.getImage(row.images) !== 'undefined';\r\n        },\r\n\r\n        /**\r\n         * Check if component must be shown.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'image', 'show_attributes');\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/price-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'uiRegistry',\r\n    'mageUtils',\r\n    'uiCollection',\r\n    'Magento_Catalog/js/product/list/column-status-validator',\r\n    'uiLayout'\r\n], function (ko, _, registry, utils, Collection, columnStatusValidator, layout) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        defaults: {\r\n            label: '',\r\n            hasSpecialPrice: false,\r\n            showMinimalPrice: false,\r\n            useLinkForAsLowAs: false,\r\n            visible: true,\r\n            headerTmpl: 'ui/grid/columns/text',\r\n            bodyTmpl: 'Magento_Catalog/product/price/price_box',\r\n            disableAction: false,\r\n            controlVisibility: true,\r\n            sortable: false,\r\n            sorting: false,\r\n            draggable: true,\r\n            fieldClass: {},\r\n            renders: {\r\n                default: {}\r\n            },\r\n            ignoreTmpls: {\r\n                fieldAction: true\r\n            },\r\n            statefull: {\r\n                visible: true,\r\n                sorting: true\r\n            },\r\n            imports: {\r\n                exportSorting: 'sorting'\r\n            },\r\n            listens: {\r\n                elems: ''\r\n            },\r\n            modules: {\r\n                source: '${ $.provider }'\r\n            },\r\n            pricesInit: {}\r\n        },\r\n\r\n        /**\r\n         * Sort prices api\r\n         *\r\n         * @returns {exports}\r\n         */\r\n        sort: function () {\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Check whether is allowed to render price or not\r\n         *\r\n         * @returns {*}\r\n         */\r\n        isAllowed: function () {\r\n            return columnStatusValidator.isValid(this.source(), 'price', 'show_attributes');\r\n        },\r\n\r\n        /**\r\n         * Retrieve array of prices, that should be rendered for specific product\r\n         *\r\n         * @param {Array} row\r\n         * @return {Array}\r\n         */\r\n        getPrices: function (row) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                result;\r\n\r\n            //we cant take type of product from row\r\n            this.initPrices(row);\r\n            result = _.filter(elems, function (elem) {\r\n                return elem.productType === row.type;\r\n            });\r\n\r\n            return result;\r\n        },\r\n\r\n        /**\r\n         * Recursive Merging of objects\r\n         *\r\n         * @param {Array} target\r\n         * @param {Array} source\r\n         * @returns {Array}\r\n         * @private\r\n         */\r\n        _deepObjectExtend: function (target, source) {\r\n            var _target = utils.copy(target);\r\n\r\n            _.each(source, function (value, key) {\r\n                if (_.keys(value).length && typeof _target[key] !== 'undefined') {\r\n                    _target[key] = this._deepObjectExtend(_target[key], value);\r\n                } else {\r\n                    _target[key] = value;\r\n                }\r\n            }, this);\r\n\r\n            return _target;\r\n        },\r\n\r\n        /**\r\n         * Init price type box, in cases when product type has custom component or bodyTmpl\r\n         *\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _initPriceWithCustomMetaData: function (productType) {\r\n            var price = this._deepObjectExtend(\r\n                this.renders.prices['default'],\r\n                this.renders.prices[productType]\r\n            );\r\n\r\n            price.name = productType + '.default';\r\n            price.parent = this.name;\r\n            price.source = this.source;\r\n            price.productType = productType;\r\n            layout([price]);\r\n        },\r\n\r\n        /**\r\n         * Init Prices by product type and add them to layout\r\n         *\r\n         * @param {Array} _priceData\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _initPricesForProductType: function (_priceData, productType) {\r\n            var prices = [];\r\n\r\n            this._setPriceNamesToPrices(_priceData, productType);\r\n            _.sortBy(_priceData, this._comparePrices);\r\n\r\n            _.each(_priceData, function (priceData) {\r\n                if (!priceData.component) {\r\n                    return;\r\n                }\r\n\r\n                priceData.parent = this.name;\r\n                priceData.provider = this.provider;\r\n                priceData.productType = productType;\r\n                priceData = utils.template(priceData, this);\r\n                prices.push(priceData);\r\n            }, this);\r\n\r\n            layout(prices);\r\n        },\r\n\r\n        /**\r\n         * Init dynamic price components\r\n         *\r\n         * @param {Array} row\r\n         * @returns {void}\r\n         */\r\n        initPrices: function (row) {\r\n            var _priceData = [],\r\n                productType = row.type,\r\n                defaultPrice = this.renders.prices['default'];\r\n\r\n            if (this.pricesInit[productType]) {\r\n                return true;\r\n            }\r\n\r\n            this.pricesInit[productType] = true;\r\n\r\n            if (this.renders.prices[productType] && this._needToApplyCustomTemplate(this.renders.prices[productType])) {\r\n                return this._initPriceWithCustomMetaData(productType);\r\n            }\r\n\r\n            if (this.renders.prices[productType] && this.renders.prices[productType].children) {\r\n                _priceData = this._deepObjectExtend(defaultPrice.children, this.renders.prices[productType].children);\r\n            } else {\r\n                _priceData = defaultPrice.children;\r\n            }\r\n\r\n            return this._initPricesForProductType(_priceData, productType);\r\n        },\r\n\r\n        /**\r\n         * Set name to all price components\r\n         *\r\n         * @param {Array} prices\r\n         * @param {String} productType\r\n         * @private\r\n         */\r\n        _setPriceNamesToPrices: function (prices, productType) {\r\n            _.each(prices, function (price, name) {\r\n                price.priceType = name;\r\n                price.name = name + '.' + productType;\r\n            });\r\n\r\n            return prices;\r\n        },\r\n\r\n        /**\r\n         * Sort callback to compare prices by sort order\r\n         *\r\n         * @param {Number} firstPrice\r\n         * @param {Number} secondPrice\r\n         * @returns {Number}\r\n         * @private\r\n         */\r\n        _comparePrices: function (firstPrice, secondPrice) {\r\n            if (firstPrice.sortOrder < secondPrice.sortOrder) {\r\n                return -1;\r\n            }\r\n\r\n            if (firstPrice.sortOrder > secondPrice.sortOrder) {\r\n                return 1;\r\n            }\r\n\r\n            return 0;\r\n        },\r\n\r\n        /**\r\n         * Check whether metadata of product type prices was changed, and we should\r\n         * to apply custom template or custom component\r\n         *\r\n         * @param {Array} productData\r\n         * @returns {*}\r\n         * @private\r\n         */\r\n        _needToApplyCustomTemplate: function (productData) {\r\n            return productData.bodyTmpl || productData.component;\r\n        },\r\n\r\n        /**\r\n         * Returns path to the columns' body template.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Get price label.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getLabel: function () {\r\n            return this.label;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/list/columns/pricetype-box.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'ko',\r\n    'underscore',\r\n    'uiCollection'\r\n], function (ko, _, Collection) {\r\n    'use strict';\r\n\r\n    return Collection.extend({\r\n        /**\r\n         * Find from all price ui components, price with specific code, init source on it and set priceType\r\n         *\r\n         * @param {String} code\r\n         * @returns {*|T}\r\n         */\r\n        getPriceByCode: function (code) {\r\n            var elems = this.elems() ? this.elems() : ko.getObservable(this, 'elems'),\r\n                price;\r\n\r\n            price = _.filter(elems, function (elem) {\r\n                return elem.index.split('.').shift() === code;\r\n            }, this).pop();\r\n\r\n            price.source = this.source();\r\n            price.priceType = code;\r\n\r\n            return price;\r\n        },\r\n\r\n        /**\r\n         * Retrieve body template\r\n         *\r\n         * @returns {String}\r\n         */\r\n        getBody: function () {\r\n            return this.bodyTmpl;\r\n        },\r\n\r\n        /**\r\n         * Check whether price has price range, depends on different options, that can be choose\r\n         *\r\n         * @param {Object} row\r\n         * @returns {Boolean}\r\n         */\r\n        hasPriceRange: function (row) {\r\n            return row['price_info']['max_regular_price'] !== row['price_info']['min_regular_price'];\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/storage/data-storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'ko',\r\n    'mageUtils',\r\n    'Magento_Catalog/js/product/query-builder',\r\n    'Magento_Customer/js/customer-data',\r\n    'jquery/jquery-storageapi'\r\n], function ($, _, ko, utils, queryBuilder, customerData) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Process data from API request\r\n     *\r\n     * @param {Object} data\r\n     * @returns {Object}\r\n     */\r\n    function getParsedDataFromServer(data) {\r\n        var result = {};\r\n\r\n        _.each(data.items, function (item) {\r\n                if (item.id) {\r\n                    result[item.id] = item;\r\n                }\r\n            }\r\n        );\r\n\r\n        return {\r\n            items: result\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Set data to localStorage with support check.\r\n     *\r\n     * @param {String} namespace\r\n     * @param {Object} data\r\n     */\r\n    function setLocalStorageItem(namespace, data) {\r\n        try {\r\n            window.localStorage.setItem(namespace, JSON.stringify(data));\r\n        } catch (e) {\r\n            console.warn('localStorage is unavailable - skipping local caching of product data');\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Class name\r\n         */\r\n        name: 'DataStorage',\r\n        request: {},\r\n        customerDataProvider: 'product_data_storage',\r\n\r\n        /**\r\n         * Initialize class\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initialize: function () {\r\n            if (!this.data) {\r\n                this.data = ko.observable({});\r\n            }\r\n\r\n            this.initLocalStorage()\r\n                .initCustomerDataReloadListener()\r\n                .cachesDataFromLocalStorage()\r\n                .initDataListener()\r\n                .initProvideStorage()\r\n                .initProviderListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize listener to customer data reload\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initCustomerDataReloadListener: function () {\r\n            $(document).on('customer-data-invalidate', this._flushProductStorage.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Flush product storage\r\n         *\r\n         * @private\r\n         * @return void\r\n         */\r\n        _flushProductStorage: function (event, sections) {\r\n            if (_.isEmpty(sections) || _.contains(sections, 'product_data_storage')) {\r\n                this.localStorage.removeAll();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initialize listener to data property\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initDataListener: function () {\r\n            this.data.subscribe(this.dataHandler.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize provider storage\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initProvideStorage: function () {\r\n            this.providerHandler(customerData.get(this.customerDataProvider)());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Handler to update \"data\" property.\r\n         * Sets data to localStorage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        dataHandler: function (data) {\r\n            if (_.isEmpty(data)) {\r\n                this.localStorage.removeAll();\r\n            } else {\r\n                setLocalStorageItem(this.namespace, data);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handler to update data in provider.\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        providerHandler: function (data) {\r\n            var currentData = utils.copy(this.data()),\r\n                ids = _.keys(data.items);\r\n\r\n            if (data.items && ids.length) {\r\n                //we can extend only items\r\n                data = data.items;\r\n                this.data(_.extend(data, currentData));\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sets data ids\r\n         *\r\n         * @param {String} currency\r\n         * @param {String} store\r\n         * @param {Object} ids\r\n         */\r\n        setIds: function (currency, store, ids) {\r\n            if (!this.hasInCache(currency, store, ids)) {\r\n                this.loadDataFromServer(currency, store, ids);\r\n            } else {\r\n                this.data.valueHasMutated();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Gets data from \"data\" property by identifiers\r\n         *\r\n         * @param {String} currency\r\n         * @param {String} store\r\n         * @param {Object} productIdentifiers\r\n         *\r\n         * @return {Object} data.\r\n         */\r\n        getDataByIdentifiers: function (currency, store, productIdentifiers) {\r\n            var data = {},\r\n                dataCollection = this.data(),\r\n                id;\r\n\r\n            for (id in productIdentifiers) {\r\n                if (productIdentifiers.hasOwnProperty(id)) {\r\n                    data[id] = dataCollection[id];\r\n                }\r\n            }\r\n\r\n            return data;\r\n        },\r\n\r\n        /**\r\n         * Checks has cached data or not\r\n         *\r\n         * @param {String} currency\r\n         * @param {String} store\r\n         * @param {Object} ids\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        hasInCache: function (currency, store, ids) {\r\n            var data = this.data(),\r\n                id;\r\n\r\n            for (id in ids) {\r\n                if (!data.hasOwnProperty(id) ||\r\n                    data[id]['currency_code'] !== currency ||\r\n                    ~~data[id]['store_id'] !== ~~store\r\n                ) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        /**\r\n         * Load data from server by ids\r\n         *\r\n         * @param {String} currency\r\n         * @param {String} store\r\n         * @param {Object} ids\r\n         *\r\n         * @return void\r\n         */\r\n        loadDataFromServer: function (currency, store, ids) {\r\n            var idsArray = _.keys(ids),\r\n                prepareAjaxParams = {\r\n                    'entity_id': idsArray.join(',')\r\n                };\r\n\r\n            if (this.request.sent && this.hasIdsInSentRequest(ids)) {\r\n                return;\r\n            }\r\n\r\n            this.request = {\r\n                sent: true,\r\n                data: ids\r\n            };\r\n\r\n            this.updateRequestConfig.data = queryBuilder.buildQuery(prepareAjaxParams);\r\n            this.updateRequestConfig.data['store_id'] = store;\r\n            this.updateRequestConfig.data['currency_code'] = currency;\r\n            $.ajax(this.updateRequestConfig).done(function (data) {\r\n                this.request = {};\r\n                this.providerHandler(getParsedDataFromServer(data));\r\n            }.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Each product page consist product cache data,\r\n         * this function prepare those data to appropriate view, and save it\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        addDataFromPageCache: function (data) {\r\n            this.providerHandler(getParsedDataFromServer(data));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} ids\r\n         * @returns {Boolean}\r\n         */\r\n        hasIdsInSentRequest: function (ids) {\r\n            var sentDataIds,\r\n                currentDataIds;\r\n\r\n            if (this.request.data) {\r\n                sentDataIds = _.keys(this.request.data);\r\n                currentDataIds = _.keys(ids);\r\n\r\n                _.each(currentDataIds, function (id) {\r\n                    if (_.lastIndexOf(sentDataIds, id) === -1) {\r\n                        return false;\r\n                    }\r\n                });\r\n\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Initialize provider listener\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initProviderListener: function () {\r\n            customerData.get(this.customerDataProvider).subscribe(this.providerHandler.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Caches data from local storage to local scope\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        cachesDataFromLocalStorage: function () {\r\n            this.data(this.getDataFromLocalStorage());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets data from local storage by current namespace\r\n         *\r\n         * @return {Object}.\r\n         */\r\n        getDataFromLocalStorage: function () {\r\n            return this.localStorage.get();\r\n        },\r\n\r\n        /**\r\n         * Initialize localStorage\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initLocalStorage: function () {\r\n            this.localStorage = $.initNamespaceStorage(this.namespace).localStorage;\r\n\r\n            return this;\r\n        }\r\n    };\r\n});\r\n","Magento_Catalog/js/product/storage/ids-storage-compare.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'ko',\r\n    'mageUtils',\r\n    'Magento_Customer/js/customer-data',\r\n    'Magento_Catalog/js/product/storage/ids-storage'\r\n], function (_, ko, utils, customerData, idsStorage) {\r\n    'use strict';\r\n\r\n    return _.extend(utils.copy(idsStorage), {\r\n\r\n        /**\r\n         * Class name\r\n         */\r\n        name: 'IdsStorageCompare',\r\n\r\n        /**\r\n         * Initializes class\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initialize: function () {\r\n            if (!this.data) {\r\n                this.data = ko.observable({});\r\n            }\r\n\r\n            if (this.provider && window.checkout && window.checkout.baseUrl) {\r\n                this.providerDataHandler(customerData.get(this.provider)());\r\n                this.initProviderListener();\r\n            }\r\n\r\n            this.initLocalStorage()\r\n                .cachesDataFromLocalStorage()\r\n                .initDataListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes listener for external data provider\r\n         */\r\n        initProviderListener: function () {\r\n            customerData.get(this.provider).subscribe(this.providerDataHandler.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Initializes handler for external data provider update\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        providerDataHandler: function (data) {\r\n            data = data.items || data;\r\n            data = this.prepareData(data);\r\n\r\n            this.add(data);\r\n        },\r\n\r\n        /**\r\n         * Prepares data to correct interface\r\n         *\r\n         * @param {Object} data\r\n         *\r\n         * @returns {Object} data\r\n         */\r\n        prepareData: function (data) {\r\n            var result = {},\r\n                scopeId;\r\n\r\n            _.each(data, function (item) {\r\n                if (typeof item.productScope !== 'undefined') {\r\n                    scopeId = item.productScope === 'store' ? window.checkout.storeId :\r\n                        item.productScope === 'group' ? window.checkout.storeGroupId :\r\n                            window.checkout.websiteId;\r\n\r\n                    result[item.productScope + '-' + scopeId + '-' + item.id] = {\r\n                        'added_at': new Date().getTime() / 1000,\r\n                        'product_id': item.id,\r\n                        'scope_id': scopeId\r\n                    };\r\n                } else {\r\n                    result[item.id] = {\r\n                        'added_at': new Date().getTime() / 1000,\r\n                        'product_id': item.id\r\n                    };\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/product/storage/ids-storage.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'ko',\r\n    'mageUtils',\r\n    'jquery/jquery-storageapi'\r\n], function ($, _, ko, utils) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Set data to localStorage with support check.\r\n     *\r\n     * @param {String} namespace\r\n     * @param {Object} data\r\n     */\r\n    function setLocalStorageItem(namespace, data) {\r\n        try {\r\n            window.localStorage.setItem(namespace, JSON.stringify(data));\r\n        } catch (e) {\r\n            console.warn('localStorage is unavailable - skipping local caching of product data');\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        /**\r\n         * Class name\r\n         */\r\n        name: 'IdsStorage',\r\n\r\n        /**\r\n         * Initializes class\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initialize: function () {\r\n            if (!this.data) {\r\n                this.data = ko.observable({});\r\n            }\r\n\r\n            this.initCustomerDataReloadListener()\r\n                .initLocalStorage()\r\n                .cachesDataFromLocalStorage()\r\n                .initDataListener();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Gets data from local storage by current namespace\r\n         *\r\n         * @return {Object}.\r\n         */\r\n        getDataFromLocalStorage: function () {\r\n            return this.localStorage.get();\r\n        },\r\n\r\n        /**\r\n         * Caches data from local storage to local scope\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        cachesDataFromLocalStorage: function () {\r\n            this.data(this.getDataFromLocalStorage());\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initialize localStorage\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initLocalStorage: function () {\r\n            this.localStorage = $.initNamespaceStorage(this.namespace).localStorage;\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes listener to \"data\" property\r\n         */\r\n        initDataListener: function () {\r\n            this.data.subscribe(this.internalDataHandler.bind(this));\r\n        },\r\n\r\n        /**\r\n         * Initialize listener to customer data reload\r\n         *\r\n         * @return Chainable.\r\n         */\r\n        initCustomerDataReloadListener: function () {\r\n            $(document).on('customer-data-reload', function (event, sections) {\r\n                if ((_.isEmpty(sections) || _.contains(sections, this.namespace)) && ~~this.allowToSendRequest) {\r\n                    this.localStorage.removeAll();\r\n                    this.data();\r\n                }\r\n            }.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Initializes handler to \"data\" property update\r\n         */\r\n        internalDataHandler: function (data) {\r\n            setLocalStorageItem(this.namespace, data);\r\n        },\r\n\r\n        /**\r\n         * Initializes handler to storage update\r\n         */\r\n        externalDataHandler: function (data) {\r\n            data = data.items ? data.items : data;\r\n\r\n            this.set(_.extend(utils.copy(this.data()), data));\r\n        }\r\n    };\r\n});\r\n\r\n","Magento_Catalog/js/product/storage/storage-service.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'jquery',\r\n    'underscore',\r\n    'mageUtils',\r\n    'mage/translate',\r\n    'Magento_Catalog/js/product/storage/ids-storage',\r\n    'Magento_Catalog/js/product/storage/data-storage',\r\n    'Magento_Catalog/js/product/storage/ids-storage-compare'\r\n], function ($, _, utils, $t, IdsStorage, DataStore, IdsStorageCompare) {\r\n    'use strict';\r\n\r\n    return (function () {\r\n\r\n        var /**\r\n             * {Object} storages - list of storages\r\n             */\r\n            storages = {},\r\n\r\n            /**\r\n             * {Object} classes - list of classes\r\n             */\r\n            classes = {},\r\n\r\n            /**\r\n             * {Object} prototype - methods that will be added to all storage classes to prototype property.\r\n             */\r\n            prototype = {\r\n\r\n                /**\r\n                 * Sets data to storage\r\n                 *\r\n                 * @param {*} data\r\n                 */\r\n                set: function (data) {\r\n                    if (!utils.compare(data, this.data()).equal) {\r\n                        this.data(data);\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Adds some data to current storage data\r\n                 *\r\n                 * @param {*} data\r\n                 */\r\n                add: function (data) {\r\n                    if (!_.isEmpty(data)) {\r\n                        this.data(_.extend(utils.copy(this.data()), data));\r\n                    }\r\n                },\r\n\r\n                /**\r\n                 * Gets current storage data\r\n                 *\r\n                 * @returns {*} data\r\n                 */\r\n                get: function () {\r\n                    return this.data();\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Required properties to storage\r\n             */\r\n            storagesInterface =  {\r\n                data: 'function',\r\n                initialize: 'function',\r\n                namespace: 'string'\r\n            },\r\n\r\n            /**\r\n             * Private service methods\r\n             */\r\n            _private = {\r\n\r\n                /**\r\n                 * Overrides class method and add ability use _super to call parent method\r\n                 *\r\n                 * @param {Object} extensionMethods\r\n                 * @param {Object} originInstance\r\n                 */\r\n                overrideClassMethods: function (extensionMethods, originInstance) {\r\n                    var methodsName = _.keys(extensionMethods),\r\n                        i = 0,\r\n                        length = methodsName.length;\r\n\r\n                    for (i; i < length; i++) {\r\n                        if (_.isFunction(originInstance[methodsName[i]])) {\r\n                            originInstance[methodsName[i]] = extensionMethods[methodsName[i]];\r\n                        }\r\n                    }\r\n\r\n                    return originInstance;\r\n                },\r\n\r\n                /**\r\n                 * Checks is storage implement interface\r\n                 *\r\n                 * @param {Object} classInstance\r\n                 *\r\n                 * @returns {Boolean}\r\n                 */\r\n                isImplementInterface: function (classInstance) {\r\n                    _.each(storagesInterface, function (key, value) {\r\n                        if (typeof classInstance[key] !== value) {\r\n                            return false;\r\n                        }\r\n                    });\r\n\r\n                    return true;\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Subscribers list\r\n             */\r\n            subsctibers = {};\r\n\r\n        (function () {\r\n            /**\r\n             * @param {Object} config\r\n             * @return void\r\n             */\r\n            classes[IdsStorage.name] = function (config) {\r\n                _.extend(this, IdsStorage, config);\r\n            };\r\n\r\n            /**\r\n             * @param {Object} config\r\n             * @return void\r\n             */\r\n            classes[IdsStorageCompare.name] = function (config) {\r\n                _.extend(this, IdsStorageCompare, config);\r\n            };\r\n\r\n            /**\r\n             * @param {Object} config\r\n             * @return void\r\n             */\r\n            classes[DataStore.name] = function (config) {\r\n                _.extend(this, DataStore, config);\r\n            };\r\n\r\n            _.each(classes, function (classItem) {\r\n                classItem.prototype = prototype;\r\n            });\r\n        })();\r\n\r\n        return {\r\n\r\n            /**\r\n             * Creates new storage or returns if storage with declared namespace exist\r\n             *\r\n             * @param {Object} config - storage config\r\n             * @throws {Error}\r\n             * @returns {Object} storage instance\r\n             */\r\n            createStorage: function (config) {\r\n                var instance,\r\n                    initialized;\r\n\r\n                if (storages[config.namespace]) {\r\n                    return storages[config.namespace];\r\n                }\r\n\r\n                instance = new classes[config.className](config);\r\n\r\n                if (_private.isImplementInterface(instance)) {\r\n                    initialized = storages[config.namespace] = instance.initialize();\r\n                    this.processSubscribers(initialized, config);\r\n\r\n                    return initialized;\r\n                }\r\n\r\n                throw new Error('Class ' + config.className + $t('does not implement Storage Interface'));\r\n            },\r\n\r\n            /**\r\n             * Process subscribers\r\n             *\r\n             * Differentiate subscribers by their namespaces: recently_viewed or recently_compared\r\n             * and process callbacks. Callbacks can be add through onStorageInit function\r\n             *\r\n             * @param {Object} initialized\r\n             * @param {Object} config\r\n             * @return void\r\n             */\r\n            processSubscribers: function (initialized, config) {\r\n                if (subsctibers[config.namespace]) {\r\n                    _.each(subsctibers[config.namespace], function (callback) {\r\n                        callback(initialized);\r\n                    });\r\n\r\n                    delete subsctibers[config.namespace];\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Listens storage creating by namespace\r\n             *\r\n             * @param {String} namespace\r\n             * @param {Function} callback\r\n             * @return void\r\n             */\r\n            onStorageInit: function (namespace, callback) {\r\n                if (storages[namespace]) {\r\n                    callback(storages[namespace]);\r\n                } else {\r\n                    subsctibers[namespace] ?\r\n                        subsctibers[namespace].push(callback) :\r\n                        subsctibers[namespace] = [callback];\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Gets storage by namespace\r\n             *\r\n             * @param {String} namespace\r\n             *\r\n             * @returns {Object} storage insance\r\n             */\r\n            getStorage: function (namespace) {\r\n                return storages[namespace];\r\n            }\r\n        };\r\n    })();\r\n});\r\n\r\n","Magento_Catalog/js/product/view/product-ids-resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Catalog/js/product/view/product-ids'\r\n], function (_, productIds) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns id's of products in form.\r\n     *\r\n     * @param {jQuery} $form\r\n     * @return {Array}\r\n     */\r\n    return function ($form) {\r\n        var idSet = productIds(),\r\n            product = _.findWhere($form.serializeArray(), {\r\n            name: 'product'\r\n        });\r\n\r\n        if (!_.isUndefined(product)) {\r\n            idSet.push(product.value);\r\n        }\r\n\r\n        return _.uniq(idSet);\r\n    };\r\n});\r\n","Magento_Catalog/js/product/view/product-ids.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko'\r\n], function (ko) {\r\n    'use strict';\r\n\r\n    return ko.observableArray([]);\r\n});\r\n","Magento_Catalog/js/product/view/product-info-resolver.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'Magento_Catalog/js/product/view/product-info'\r\n], function (_, productInfo) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Returns info about products in form.\r\n     *\r\n     * @param {jQuery} $form\r\n     * @return {Array}\r\n     */\r\n    return function ($form) {\r\n        var product = _.findWhere($form.serializeArray(), {\r\n                name: 'product'\r\n            });\r\n\r\n        if (!_.isUndefined(product)) {\r\n            productInfo().push(\r\n                {\r\n                    'id': product.value\r\n                }\r\n            );\r\n        }\r\n\r\n        return _.uniq(productInfo(), function (item) {\r\n            return item.id;\r\n        });\r\n    };\r\n});\r\n\r\n","Magento_Catalog/js/product/view/product-info.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko'\r\n], function (ko) {\r\n    'use strict';\r\n\r\n    return ko.observableArray([]);\r\n});\r\n","Magento_Catalog/js/product/view/provider.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'underscore',\r\n    'uiElement',\r\n    'Magento_Catalog/js/product/storage/storage-service'\r\n], function (_, Element, storage) {\r\n    'use strict';\r\n\r\n    return Element.extend({\r\n        defaults: {\r\n            identifiersConfig: {\r\n                namespace: 'recently_viewed_product'\r\n            },\r\n            productStorageConfig: {\r\n                namespace: 'product_data_storage',\r\n                updateRequestConfig: {\r\n                    method: 'GET',\r\n                    dataType: 'json'\r\n                },\r\n                className: 'DataStorage'\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Initializes\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            if (window.checkout && window.checkout.baseUrl) {\r\n                this.initIdsStorage();\r\n            }\r\n\r\n            this.initDataStorage();\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init ids storage\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initIdsStorage: function () {\r\n            storage.onStorageInit(this.identifiersConfig.namespace, this.idsStorageHandler.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init data storage\r\n         *\r\n         * @returns {Object} Chainable.\r\n         */\r\n        initDataStorage: function () {\r\n            storage.onStorageInit(this.productStorageConfig.namespace, this.dataStorageHandler.bind(this));\r\n\r\n            return this;\r\n        },\r\n\r\n        /**\r\n         * Init data storage handler\r\n         *\r\n         * @param {Object} dataStorage - storage instance\r\n         */\r\n        dataStorageHandler: function (dataStorage) {\r\n            this.productStorage = dataStorage;\r\n            this.productStorage.add(this.data.items);\r\n        },\r\n\r\n        /**\r\n         * Init ids storage handler\r\n         *\r\n         * @param {Object} idsStorage - storage instance\r\n         */\r\n        idsStorageHandler: function (idsStorage) {\r\n            this.idsStorage = idsStorage;\r\n            this.idsStorage.add(this.getIdentifiers());\r\n        },\r\n\r\n        /**\r\n         * Gets ids from items\r\n         *\r\n         * @returns {Object}\r\n         */\r\n        getIdentifiers: function () {\r\n            var result = {},\r\n                productCurrentScope = this.data.productCurrentScope,\r\n                scopeId = productCurrentScope === 'store' ? window.checkout.storeId :\r\n                    productCurrentScope === 'group' ? window.checkout.storeGroupId :\r\n                        window.checkout.websiteId;\r\n\r\n            _.each(this.data.items, function (item, key) {\r\n                result[productCurrentScope + '-' + scopeId + '-' + key] = {\r\n                    'added_at': new Date().getTime() / 1000,\r\n                    'product_id': key,\r\n                    'scope_id': scopeId\r\n                };\r\n            }, this);\r\n\r\n            return result;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/view/compare-products.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent',\r\n    'Magento_Customer/js/customer-data',\r\n    'jquery',\r\n    'underscore',\r\n    'mage/mage',\r\n    'mage/decorate'\r\n], function (Component, customerData, $, _) {\r\n    'use strict';\r\n\r\n    var sidebarInitialized = false,\r\n        compareProductsReloaded = false;\r\n\r\n    /**\r\n     * Initialize sidebar\r\n     */\r\n    function initSidebar() {\r\n        if (sidebarInitialized) {\r\n            return;\r\n        }\r\n\r\n        sidebarInitialized = true;\r\n        $('[data-role=compare-products-sidebar]').decorate('list', true);\r\n    }\r\n\r\n    return Component.extend({\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n            this.compareProducts = customerData.get('compare-products');\r\n            if (!compareProductsReloaded\r\n                && !_.isEmpty(this.compareProducts())\r\n                //Expired section names are reloaded on page load\r\n                && _.indexOf(customerData.getExpiredSectionNames(), 'compare-products') === -1\r\n                && window.checkout\r\n                && window.checkout.websiteId\r\n                && window.checkout.websiteId !== this.compareProducts().websiteId\r\n            ) {\r\n                //set count to 0 to prevent \"compared products\" blocks and count to show with wrong count and items\r\n                this.compareProducts().count = 0;\r\n                customerData.reload(['compare-products'], false);\r\n                compareProductsReloaded = true;\r\n            }\r\n            initSidebar();\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/js/view/image.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'uiComponent'\r\n], function (Component) {\r\n    'use strict';\r\n\r\n    return Component.extend({\r\n        /** @inheritdoc */\r\n        initialize: function () {\r\n            this._super();\r\n\r\n            this.template = window.checkout.imageTemplate || this.template;\r\n        }\r\n    });\r\n});\r\n","Magento_Catalog/product/view/validation.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget',\r\n    'mage/validation/validation'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.validation', $.mage.validation, {\r\n        options: {\r\n            radioCheckboxClosest: 'ul, ol',\r\n\r\n            /**\r\n             * @param {*} error\r\n             * @param {HTMLElement} element\r\n             */\r\n            errorPlacement: function (error, element) {\r\n                var messageBox,\r\n                    dataValidate;\r\n\r\n                if ($(element).hasClass('datetime-picker')) {\r\n                    element = $(element).parent();\r\n\r\n                    if (element.parent().find('.mage-error').length) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                if (element.attr('data-errors-message-box')) {\r\n                    messageBox = $(element.attr('data-errors-message-box'));\r\n                    messageBox.html(error);\r\n\r\n                    return;\r\n                }\r\n\r\n                dataValidate = element.attr('data-validate');\r\n\r\n                if (dataValidate && dataValidate.indexOf('validate-one-checkbox-required-by-name') > 0) {\r\n                    error.appendTo('#links-advice-container');\r\n                } else if (element.is(':radio, :checkbox')) {\r\n                    element.closest(this.radioCheckboxClosest).after(error);\r\n                } else {\r\n                    element.after(error);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @param {HTMLElement} element\r\n             * @param {String} errorClass\r\n             */\r\n            highlight: function (element, errorClass) {\r\n                var dataValidate = $(element).attr('data-validate');\r\n\r\n                if (dataValidate && dataValidate.indexOf('validate-required-datetime') > 0) {\r\n                    $(element).parent().find('.datetime-picker').each(function () {\r\n                        $(this).removeClass(errorClass);\r\n\r\n                        if ($(this).val().length === 0) {\r\n                            $(this).addClass(errorClass);\r\n                        }\r\n                    });\r\n                } else if ($(element).is(':radio, :checkbox')) {\r\n                    $(element).closest(this.radioCheckboxClosest).addClass(errorClass);\r\n                } else {\r\n                    $(element).addClass(errorClass);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * @param {HTMLElement} element\r\n             * @param {String} errorClass\r\n             */\r\n            unhighlight: function (element, errorClass) {\r\n                var dataValidate = $(element).attr('data-validate');\r\n\r\n                if (dataValidate && dataValidate.indexOf('validate-required-datetime') > 0) {\r\n                    $(element).parent().find('.datetime-picker').removeClass(errorClass);\r\n                } else if ($(element).is(':radio, :checkbox')) {\r\n                    $(element).closest(this.radioCheckboxClosest).removeClass(errorClass);\r\n                } else {\r\n                    $(element).removeClass(errorClass);\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.validation;\r\n});\r\n","Magento_CatalogSearch/js/search-terms-log.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mageUtils'\r\n], function ($, utils) {\r\n    'use strict';\r\n\r\n    return function (data) {\r\n        $.ajax({\r\n            method: 'GET',\r\n            url: data.url,\r\n            data: {\r\n                'q': utils.getUrlParameters(window.location.href).q\r\n            }\r\n        });\r\n    };\r\n});\r\n","Magento_Checkout/js/catalog-add-to-cart-mixin.js":"define([\"jquery\"], function($){\r\n  return function(config, element){\r\n    var minicart = $(element);\r\n    minicart.on('contentLoading', function () {\r\n      minicart.on('contentUpdated', function () {\r\n        minicart.find('[data-role=\"dropdownDialog\"]').dropdownDialog(\"open\");\r\n      });\r\n    });\r\n  }\r\n});\r\n","Magento_Checkout/js/checkout-data.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * Checkout adapter for customer data storage\r\n *\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Customer/js/customer-data',\r\n    'mageUtils',\r\n    'jquery/jquery-storageapi'\r\n], function ($, storage, utils) {\r\n    'use strict';\r\n\r\n    var cacheKey = 'checkout-data',\r\n\r\n        /**\r\n         * @param {Object} data\r\n         */\r\n        saveData = function (data) {\r\n            storage.set(cacheKey, data);\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        initData = function () {\r\n            return {\r\n                'selectedShippingAddress': null, //Selected shipping address pulled from persistence storage\r\n                'shippingAddressFromData': null, //Shipping address pulled from persistence storage\r\n                'newCustomerShippingAddress': null, //Shipping address pulled from persistence storage for customer\r\n                'selectedShippingRate': null, //Shipping rate pulled from persistence storage\r\n                'selectedPaymentMethod': null, //Payment method pulled from persistence storage\r\n                'selectedBillingAddress': null, //Selected billing address pulled from persistence storage\r\n                'billingAddressFromData': null, //Billing address pulled from persistence storage\r\n                'newCustomerBillingAddress': null //Billing address pulled from persistence storage for new customer\r\n            };\r\n        },\r\n\r\n        /**\r\n         * @return {*}\r\n         */\r\n        getData = function () {\r\n            var data = storage.get(cacheKey)();\r\n\r\n            if ($.isEmptyObject(data)) {\r\n                data = $.initNamespaceStorage('mage-cache-storage').localStorage.get(cacheKey);\r\n\r\n                if ($.isEmptyObject(data)) {\r\n                    data = initData();\r\n                    saveData(data);\r\n                }\r\n            }\r\n\r\n            return data;\r\n        };\r\n\r\n    return {\r\n        /**\r\n         * Setting the selected shipping address pulled from persistence storage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setSelectedShippingAddress: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.selectedShippingAddress = data;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the selected shipping address from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getSelectedShippingAddress: function () {\r\n            return getData().selectedShippingAddress;\r\n        },\r\n\r\n        /**\r\n         * Setting the shipping address pulled from persistence storage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setShippingAddressFromData: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.shippingAddressFromData = utils.filterFormData(data);\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the shipping address from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getShippingAddressFromData: function () {\r\n            return getData().shippingAddressFromData;\r\n        },\r\n\r\n        /**\r\n         * Setting the shipping address pulled from persistence storage for new customer\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setNewCustomerShippingAddress: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.newCustomerShippingAddress = data;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the shipping address from persistence storage for new customer\r\n         *\r\n         * @return {*}\r\n         */\r\n        getNewCustomerShippingAddress: function () {\r\n            return getData().newCustomerShippingAddress;\r\n        },\r\n\r\n        /**\r\n         * Setting the selected shipping rate pulled from persistence storage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setSelectedShippingRate: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.selectedShippingRate = data;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the selected shipping rate from local storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getSelectedShippingRate: function () {\r\n            return getData().selectedShippingRate;\r\n        },\r\n\r\n        /**\r\n         * Setting the selected payment method pulled from persistence storage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setSelectedPaymentMethod: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.selectedPaymentMethod = data;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the payment method from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getSelectedPaymentMethod: function () {\r\n            return getData().selectedPaymentMethod;\r\n        },\r\n\r\n        /**\r\n         * Setting the selected billing address pulled from persistence storage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setSelectedBillingAddress: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.selectedBillingAddress = data;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the selected billing address from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getSelectedBillingAddress: function () {\r\n            return getData().selectedBillingAddress;\r\n        },\r\n\r\n        /**\r\n         * Setting the billing address pulled from persistence storage\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setBillingAddressFromData: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.billingAddressFromData = utils.filterFormData(data);\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the billing address from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getBillingAddressFromData: function () {\r\n            return getData().billingAddressFromData;\r\n        },\r\n\r\n        /**\r\n         * Setting the billing address pulled from persistence storage for new customer\r\n         *\r\n         * @param {Object} data\r\n         */\r\n        setNewCustomerBillingAddress: function (data) {\r\n            var obj = getData();\r\n\r\n            obj.newCustomerBillingAddress = data;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the billing address from persistence storage for new customer\r\n         *\r\n         * @return {*}\r\n         */\r\n        getNewCustomerBillingAddress: function () {\r\n            return getData().newCustomerBillingAddress;\r\n        },\r\n\r\n        /**\r\n         * Pulling the email address from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getValidatedEmailValue: function () {\r\n            var obj = getData();\r\n\r\n            return obj.validatedEmailValue ? obj.validatedEmailValue : '';\r\n        },\r\n\r\n        /**\r\n         * Setting the email address pulled from persistence storage\r\n         *\r\n         * @param {String} email\r\n         */\r\n        setValidatedEmailValue: function (email) {\r\n            var obj = getData();\r\n\r\n            obj.validatedEmailValue = email;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the email input field value from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getInputFieldEmailValue: function () {\r\n            var obj = getData();\r\n\r\n            return obj.inputFieldEmailValue ? obj.inputFieldEmailValue : '';\r\n        },\r\n\r\n        /**\r\n         * Setting the email input field value pulled from persistence storage\r\n         *\r\n         * @param {String} email\r\n         */\r\n        setInputFieldEmailValue: function (email) {\r\n            var obj = getData();\r\n\r\n            obj.inputFieldEmailValue = email;\r\n            saveData(obj);\r\n        },\r\n\r\n        /**\r\n         * Pulling the checked email value from persistence storage\r\n         *\r\n         * @return {*}\r\n         */\r\n        getCheckedEmailValue: function () {\r\n            var obj = getData();\r\n\r\n            return obj.checkedEmailValue ? obj.checkedEmailValue : '';\r\n        },\r\n\r\n        /**\r\n         * Setting the checked email value pulled from persistence storage\r\n         *\r\n         * @param {String} email\r\n         */\r\n        setCheckedEmailValue: function (email) {\r\n            var obj = getData();\r\n\r\n            obj.checkedEmailValue = email;\r\n            saveData(obj);\r\n        }\r\n    };\r\n});\r\n","Magento_Checkout/js/checkout-loader.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\ndefine([\r\n    'rjsResolver'\r\n], function (resolver) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Removes provided loader element from DOM.\r\n     *\r\n     * @param {HTMLElement} $loader - Loader DOM element.\r\n     */\r\n    function hideLoader($loader) {\r\n        $loader.parentNode.removeChild($loader);\r\n    }\r\n\r\n    /**\r\n     * Initializes assets loading process listener.\r\n     *\r\n     * @param {Object} config - Optional configuration\r\n     * @param {HTMLElement} $loader - Loader DOM element.\r\n     */\r\n    function init(config, $loader) {\r\n        resolver(hideLoader.bind(null, $loader));\r\n    }\r\n\r\n    return init;\r\n});\r\n","Magento_Checkout/js/discount-codes.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'jquery-ui-modules/widget'\r\n], function ($) {\r\n    'use strict';\r\n\r\n    $.widget('mage.discountCode', {\r\n        options: {\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this.couponCode = $(this.options.couponCodeSelector);\r\n            this.removeCoupon = $(this.options.removeCouponSelector);\r\n\r\n            $(this.options.applyButton).on('click', $.proxy(function () {\r\n                this.couponCode.attr('data-validate', '{required:true}');\r\n                this.removeCoupon.attr('value', '0');\r\n                $(this.element).validation().trigger('submit');\r\n            }, this));\r\n\r\n            $(this.options.cancelButton).on('click', $.proxy(function () {\r\n                this.couponCode.removeAttr('data-validate');\r\n                this.removeCoupon.attr('value', '1');\r\n                this.element.trigger('submit');\r\n            }, this));\r\n        }\r\n    });\r\n\r\n    return $.mage.discountCode;\r\n});\r\n","Magento_Checkout/js/empty-cart.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine(['Magento_Customer/js/customer-data'], function (customerData) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        var cartData = customerData.get('cart');\r\n\r\n        customerData.getInitCustomerData().done(function () {\r\n            if (cartData().items && cartData().items.length !== 0) {\r\n                customerData.reload(['cart'], false);\r\n            }\r\n        });\r\n    };\r\n});\r\n","Magento_Checkout/js/proceed-to-checkout.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Customer/js/model/authentication-popup',\r\n    'Magento_Customer/js/customer-data'\r\n], function ($, authenticationPopup, customerData) {\r\n    'use strict';\r\n\r\n    return function (config, element) {\r\n        $(element).on('click', function (event) {\r\n            var cart = customerData.get('cart'),\r\n                customer = customerData.get('customer');\r\n\r\n            event.preventDefault();\r\n\r\n            if (!customer().firstname && cart().isGuestCheckoutAllowed === false) {\r\n                authenticationPopup.showModal();\r\n\r\n                return false;\r\n            }\r\n            $(element).attr('disabled', true);\r\n            location.href = config.checkoutUrl;\r\n        });\r\n\r\n    };\r\n});\r\n","Magento_Checkout/js/region-updater.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'mage/template',\r\n    'underscore',\r\n    'jquery-ui-modules/widget',\r\n    'mage/validation'\r\n], function ($, mageTemplate, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.regionUpdater', {\r\n        options: {\r\n            regionTemplate:\r\n                '<option value=\"<%- data.value %>\" <% if (data.isSelected) { %>selected=\"selected\"<% } %>>' +\r\n                    '<%- data.title %>' +\r\n                '</option>',\r\n            isRegionRequired: true,\r\n            isZipRequired: true,\r\n            isCountryRequired: true,\r\n            currentRegion: null,\r\n            isMultipleCountriesAllowed: true\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._initCountryElement();\r\n\r\n            this.currentRegionOption = this.options.currentRegion;\r\n            this.regionTmpl = mageTemplate(this.options.regionTemplate);\r\n\r\n            this._updateRegion(this.element.find('option:selected').val());\r\n\r\n            $(this.options.regionListId).on('change', $.proxy(function (e) {\r\n                this.setOption = false;\r\n                this.currentRegionOption = $(e.target).val();\r\n            }, this));\r\n\r\n            $(this.options.regionInputId).on('focusout', $.proxy(function () {\r\n                this.setOption = true;\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         *\r\n         * @private\r\n         */\r\n        _initCountryElement: function () {\r\n\r\n            if (this.options.isMultipleCountriesAllowed) {\r\n                this.element.parents('div.field').show();\r\n                this.element.on('change', $.proxy(function (e) {\r\n                    // clear region inputs on country change\r\n                    $(this.options.regionListId).val('');\r\n                    $(this.options.regionInputId).val('');\r\n                    this._updateRegion($(e.target).val());\r\n                }, this));\r\n\r\n                if (this.options.isCountryRequired) {\r\n                    this.element.addClass('required-entry');\r\n                    this.element.parents('div.field').addClass('required');\r\n                }\r\n            } else {\r\n                this.element.parents('div.field').hide();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Remove options from dropdown list\r\n         *\r\n         * @param {Object} selectElement - jQuery object for dropdown list\r\n         * @private\r\n         */\r\n        _removeSelectOptions: function (selectElement) {\r\n            selectElement.find('option').each(function (index) {\r\n                if (index) {\r\n                    $(this).remove();\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Render dropdown list\r\n         * @param {Object} selectElement - jQuery object for dropdown list\r\n         * @param {String} key - region code\r\n         * @param {Object} value - region object\r\n         * @private\r\n         */\r\n        _renderSelectOption: function (selectElement, key, value) {\r\n            selectElement.append($.proxy(function () {\r\n                var name = value.name.replace(/[!\"#$%&'()*+,.\\/:;<=>?@[\\\\\\]^`{|}~]/g, '\\\\$&'),\r\n                    tmplData,\r\n                    tmpl;\r\n\r\n                if (value.code && $(name).is('span')) {\r\n                    key = value.code;\r\n                    value.name = $(name).text();\r\n                }\r\n\r\n                tmplData = {\r\n                    value: key,\r\n                    title: value.name,\r\n                    isSelected: false\r\n                };\r\n\r\n                if (this.options.defaultRegion === key) {\r\n                    tmplData.isSelected = true;\r\n                }\r\n\r\n                tmpl = this.regionTmpl({\r\n                    data: tmplData\r\n                });\r\n\r\n                return $(tmpl);\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Takes clearError callback function as first option\r\n         * If no form is passed as option, look up the closest form and call clearError method.\r\n         * @private\r\n         */\r\n        _clearError: function () {\r\n            var args = ['clearError', this.options.regionListId, this.options.regionInputId, this.options.postcodeId];\r\n\r\n            if (this.options.clearError && typeof this.options.clearError === 'function') {\r\n                this.options.clearError.call(this);\r\n            } else {\r\n                if (!this.options.form) {\r\n                    this.options.form = this.element.closest('form').length ? $(this.element.closest('form')[0]) : null;\r\n                }\r\n\r\n                this.options.form = $(this.options.form);\r\n\r\n                this.options.form && this.options.form.data('validator') &&\r\n                    this.options.form.validation.apply(this.options.form, _.compact(args));\r\n\r\n                // Clean up errors on region & zip fix\r\n                $(this.options.regionInputId).removeClass('mage-error').parent().find('.mage-error').remove();\r\n                $(this.options.regionListId).removeClass('mage-error').parent().find('.mage-error').remove();\r\n                $(this.options.postcodeId).removeClass('mage-error').parent().find('.mage-error').remove();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Update dropdown list based on the country selected\r\n         *\r\n         * @param {String} country - 2 uppercase letter for country code\r\n         * @private\r\n         */\r\n        _updateRegion: function (country) {\r\n            // Clear validation error messages\r\n            var regionList = $(this.options.regionListId),\r\n                regionInput = $(this.options.regionInputId),\r\n                postcode = $(this.options.postcodeId),\r\n                label = regionList.parent().siblings('label'),\r\n                container = regionList.parents('div.field'),\r\n                regionsEntries,\r\n                regionId,\r\n                regionData;\r\n\r\n            this._clearError();\r\n            this._checkRegionRequired(country);\r\n\r\n            // Populate state/province dropdown list if available or use input box\r\n            if (this.options.regionJson[country]) {\r\n                this._removeSelectOptions(regionList);\r\n                regionsEntries = _.pairs(this.options.regionJson[country]);\r\n                regionsEntries.sort(function (a, b) {\r\n                    return a[1].name > b[1].name ? 1 : -1;\r\n                });\r\n                $.each(regionsEntries, $.proxy(function (key, value) {\r\n                    regionId = value[0];\r\n                    regionData = value[1];\r\n                    this._renderSelectOption(regionList, regionId, regionData);\r\n                }, this));\r\n\r\n                if (this.currentRegionOption) {\r\n                    regionList.val(this.currentRegionOption);\r\n                }\r\n\r\n                if (this.setOption) {\r\n                    regionList.find('option').filter(function () {\r\n                        return this.text === regionInput.val();\r\n                    }).attr('selected', true);\r\n                }\r\n\r\n                if (this.options.isRegionRequired) {\r\n                    regionList.addClass('required-entry').prop('disabled', false);\r\n                    container.addClass('required').show();\r\n                } else {\r\n                    regionList.removeClass('required-entry validate-select').removeAttr('data-validate');\r\n                    container.removeClass('required');\r\n\r\n                    if (!this.options.optionalRegionAllowed) { //eslint-disable-line max-depth\r\n                        regionList.hide();\r\n                        container.hide();\r\n                    } else {\r\n                        regionList.prop('disabled', false).show();\r\n                    }\r\n                }\r\n\r\n                regionList.show();\r\n                regionInput.hide();\r\n                label.attr('for', regionList.attr('id'));\r\n            } else {\r\n                this._removeSelectOptions(regionList);\r\n\r\n                if (this.options.isRegionRequired) {\r\n                    regionInput.addClass('required-entry').prop('disabled', false);\r\n                    container.addClass('required').show();\r\n                } else {\r\n                    if (!this.options.optionalRegionAllowed) { //eslint-disable-line max-depth\r\n                        regionInput.attr('disabled', 'disabled');\r\n                        container.hide();\r\n                    }\r\n                    container.removeClass('required');\r\n                    regionInput.removeClass('required-entry');\r\n                }\r\n\r\n                regionList.removeClass('required-entry').prop('disabled', 'disabled').hide();\r\n                regionInput.show();\r\n                label.attr('for', regionInput.attr('id'));\r\n            }\r\n\r\n            // If country is in optionalzip list, make postcode input not required\r\n            if (this.options.isZipRequired) {\r\n                $.inArray(country, this.options.countriesWithOptionalZip) >= 0 ?\r\n                    postcode.removeClass('required-entry').closest('.field').removeClass('required') :\r\n                    postcode.addClass('required-entry').closest('.field').addClass('required');\r\n            }\r\n\r\n            // Add defaultvalue attribute to state/province select element\r\n            regionList.attr('defaultvalue', this.options.defaultRegion);\r\n            this.options.form.find('[type=\"submit\"]').prop('disabled', false).show();\r\n        },\r\n\r\n        /**\r\n         * Check if the selected country has a mandatory region selection\r\n         *\r\n         * @param {String} country - Code of the country - 2 uppercase letter for country code\r\n         * @private\r\n         */\r\n        _checkRegionRequired: function (country) {\r\n            var self = this;\r\n\r\n            this.options.isRegionRequired = false;\r\n            $.each(this.options.regionJson.config['regions_required'], function (index, elem) {\r\n                if (elem === country) {\r\n                    self.options.isRegionRequired = true;\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    return $.mage.regionUpdater;\r\n});\r\n","Magento_Checkout/js/shopping-cart.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery-ui-modules/widget',\r\n    'mage/translate'\r\n], function ($, confirm) {\r\n    'use strict';\r\n\r\n    $.widget('mage.shoppingCart', {\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            var items, i, reload;\r\n\r\n            $(this.options.emptyCartButton).on('click', $.proxy(function () {\r\n                this._confirmClearCart();\r\n            }, this));\r\n            items = $.find('[data-role=\"cart-item-qty\"]');\r\n\r\n            for (i = 0; i < items.length; i++) {\r\n                $(items[i]).on('keypress', $.proxy(function (event) { //eslint-disable-line no-loop-func\r\n                    var keyCode = event.keyCode ? event.keyCode : event.which;\r\n\r\n                    if (keyCode == 13) { //eslint-disable-line eqeqeq\r\n                        $(this.options.emptyCartButton).attr('name', 'update_cart_action_temp');\r\n                        $(this.options.updateCartActionContainer)\r\n                            .attr('name', 'update_cart_action').attr('value', 'update_qty');\r\n\r\n                    }\r\n                }, this));\r\n            }\r\n            $(this.options.continueShoppingButton).on('click', $.proxy(function () {\r\n                location.href = this.options.continueShoppingUrl;\r\n            }, this));\r\n\r\n            $(document).on('ajax:removeFromCart', $.proxy(function () {\r\n                reload = true;\r\n                $('div.block.block-minicart').on('dropdowndialogclose', $.proxy(function () {\r\n                    if (reload === true) {\r\n                        location.reload();\r\n                        reload = false;\r\n                    }\r\n                    $('div.block.block-minicart').off('dropdowndialogclose');\r\n                }));\r\n            }, this));\r\n            $(document).on('ajax:updateItemQty', $.proxy(function () {\r\n                reload = true;\r\n                $('div.block.block-minicart').on('dropdowndialogclose', $.proxy(function () {\r\n                    if (reload === true) {\r\n                        location.reload();\r\n                        reload = false;\r\n                    }\r\n                    $('div.block.block-minicart').off('dropdowndialogclose');\r\n                }));\r\n            }, this));\r\n        },\r\n\r\n        /**\r\n         * Display confirmation modal for clearing the cart\r\n         * @private\r\n         */\r\n        _confirmClearCart: function () {\r\n            var self = this;\r\n\r\n            confirm({\r\n                content: $.mage.__('Are you sure you want to remove all items from your shopping cart?'),\r\n                actions: {\r\n                    /**\r\n                     * Confirmation modal handler to execute clear cart action\r\n                     */\r\n                    confirm: function () {\r\n                        self.clearCart();\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prepares the form and submit to clear the cart\r\n         * @public\r\n         */\r\n        clearCart: function () {\r\n            $(this.options.emptyCartButton).attr('name', 'update_cart_action_temp');\r\n            $(this.options.updateCartActionContainer)\r\n                .attr('name', 'update_cart_action').attr('value', 'empty_cart');\r\n\r\n            if ($(this.options.emptyCartButton).parents('form').length > 0) {\r\n                $(this.options.emptyCartButton).parents('form').trigger('submit');\r\n            }\r\n        }\r\n    });\r\n\r\n    return $.mage.shoppingCart;\r\n});\r\n","Magento_Checkout/js/sidebar.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'jquery',\r\n    'Magento_Customer/js/model/authentication-popup',\r\n    'Magento_Customer/js/customer-data',\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'underscore',\r\n    'jquery-ui-modules/widget',\r\n    'mage/decorate',\r\n    'mage/collapsible',\r\n    'mage/cookies',\r\n    'jquery-ui-modules/effect-fade'\r\n], function ($, authenticationPopup, customerData, alert, confirm, _) {\r\n    'use strict';\r\n\r\n    $.widget('mage.sidebar', {\r\n        options: {\r\n            isRecursive: true,\r\n            minicart: {\r\n                maxItemsVisible: 3\r\n            }\r\n        },\r\n        scrollHeight: 0,\r\n        shoppingCartUrl: window.checkout.shoppingCartUrl,\r\n\r\n        /**\r\n         * Create sidebar.\r\n         * @private\r\n         */\r\n        _create: function () {\r\n            this._initContent();\r\n        },\r\n\r\n        /**\r\n         * Update sidebar block.\r\n         */\r\n        update: function () {\r\n            $(this.options.targetElement).trigger('contentUpdated');\r\n            this._calcHeight();\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         */\r\n        _initContent: function () {\r\n            var self = this,\r\n                events = {};\r\n\r\n            this.element.decorate('list', this.options.isRecursive);\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['click ' + this.options.button.close] = function (event) {\r\n                event.stopPropagation();\r\n                $(self.options.targetElement).dropdownDialog('close');\r\n            };\r\n            events['click ' + this.options.button.checkout] = $.proxy(function () {\r\n                var cart = customerData.get('cart'),\r\n                    customer = customerData.get('customer'),\r\n                    element = $(this.options.button.checkout);\r\n\r\n                if (!customer().firstname && cart().isGuestCheckoutAllowed === false) {\r\n                    // set URL for redirect on successful login/registration. It's postprocessed on backend.\r\n                    $.cookie('login_redirect', this.options.url.checkout);\r\n\r\n                    if (this.options.url.isRedirectRequired) {\r\n                        element.prop('disabled', true);\r\n                        location.href = this.options.url.loginUrl;\r\n                    } else {\r\n                        authenticationPopup.showModal();\r\n                    }\r\n\r\n                    return false;\r\n                }\r\n                element.prop('disabled', true);\r\n                location.href = this.options.url.checkout;\r\n            }, this);\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['click ' + this.options.button.remove] =  function (event) {\r\n                event.stopPropagation();\r\n                confirm({\r\n                    content: self.options.confirmMessage,\r\n                    actions: {\r\n                        /** @inheritdoc */\r\n                        confirm: function () {\r\n                            self._removeItem($(event.currentTarget));\r\n                        },\r\n\r\n                        /** @inheritdoc */\r\n                        always: function (e) {\r\n                            e.stopImmediatePropagation();\r\n                        }\r\n                    }\r\n                });\r\n            };\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['keyup ' + this.options.item.qty] = function (event) {\r\n                self._showItemButton($(event.target));\r\n            };\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['change ' + this.options.item.qty] = function (event) {\r\n                self._showItemButton($(event.target));\r\n            };\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['click ' + this.options.item.button] = function (event) {\r\n                event.stopPropagation();\r\n                self._updateItemQty($(event.currentTarget));\r\n            };\r\n\r\n            /**\r\n             * @param {jQuery.Event} event\r\n             */\r\n            events['focusout ' + this.options.item.qty] = function (event) {\r\n                self._validateQty($(event.currentTarget));\r\n            };\r\n\r\n            this._on(this.element, events);\r\n            this._calcHeight();\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         * @private\r\n         */\r\n        _showItemButton: function (elem) {\r\n            var itemId = elem.data('cart-item'),\r\n                itemQty = elem.data('item-qty');\r\n\r\n            if (this._isValidQty(itemQty, elem.val())) {\r\n                $('#update-cart-item-' + itemId).show('fade', 300);\r\n            } else if (elem.val() == 0) { //eslint-disable-line eqeqeq\r\n                this._hideItemButton(elem);\r\n            } else {\r\n                this._hideItemButton(elem);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {*} origin - origin qty. 'data-item-qty' attribute.\r\n         * @param {*} changed - new qty.\r\n         * @returns {Boolean}\r\n         * @private\r\n         */\r\n        _isValidQty: function (origin, changed) {\r\n            return origin != changed && //eslint-disable-line eqeqeq\r\n                changed.length > 0 &&\r\n                changed - 0 == changed && //eslint-disable-line eqeqeq\r\n                changed - 0 > 0;\r\n        },\r\n\r\n        /**\r\n         * @param {Object} elem\r\n         * @private\r\n         */\r\n        _validateQty: function (elem) {\r\n            var itemQty = elem.data('item-qty');\r\n\r\n            if (!this._isValidQty(itemQty, elem.val())) {\r\n                elem.val(itemQty);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         * @private\r\n         */\r\n        _hideItemButton: function (elem) {\r\n            var itemId = elem.data('cart-item');\r\n\r\n            $('#update-cart-item-' + itemId).hide('fade', 300);\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         * @private\r\n         */\r\n        _updateItemQty: function (elem) {\r\n            var itemId = elem.data('cart-item');\r\n\r\n            this._ajax(this.options.url.update, {\r\n                'item_id': itemId,\r\n                'item_qty': $('#cart-item-' + itemId + '-qty').val()\r\n            }, elem, this._updateItemQtyAfter);\r\n        },\r\n\r\n        /**\r\n         * Update content after update qty\r\n         *\r\n         * @param {HTMLElement} elem\r\n         */\r\n        _updateItemQtyAfter: function (elem) {\r\n            var productData = this._getProductById(Number(elem.data('cart-item')));\r\n\r\n            if (!_.isUndefined(productData)) {\r\n                $(document).trigger('ajax:updateCartItemQty');\r\n\r\n                if (window.location.href === this.shoppingCartUrl) {\r\n                    window.location.reload(false);\r\n                }\r\n            }\r\n            this._hideItemButton(elem);\r\n        },\r\n\r\n        /**\r\n         * @param {HTMLElement} elem\r\n         * @private\r\n         */\r\n        _removeItem: function (elem) {\r\n            var itemId = elem.data('cart-item');\r\n\r\n            this._ajax(this.options.url.remove, {\r\n                'item_id': itemId\r\n            }, elem, this._removeItemAfter);\r\n        },\r\n\r\n        /**\r\n         * Update content after item remove\r\n         *\r\n         * @param {Object} elem\r\n         * @private\r\n         */\r\n        _removeItemAfter: function (elem) {\r\n            var productData = this._getProductById(Number(elem.data('cart-item')));\r\n\r\n            if (!_.isUndefined(productData)) {\r\n                $(document).trigger('ajax:removeFromCart', {\r\n                    productIds: [productData['product_id']],\r\n                    productInfo: [\r\n                        {\r\n                            'id': productData['product_id']\r\n                        }\r\n                    ]\r\n                });\r\n\r\n                if (window.location.href.indexOf(this.shoppingCartUrl) === 0) {\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Retrieves product data by Id.\r\n         *\r\n         * @param {Number} productId - product Id\r\n         * @returns {Object|undefined}\r\n         * @private\r\n         */\r\n        _getProductById: function (productId) {\r\n            return _.find(customerData.get('cart')().items, function (item) {\r\n                return productId === Number(item['item_id']);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {String} url - ajax url\r\n         * @param {Object} data - post data for ajax call\r\n         * @param {Object} elem - element that initiated the event\r\n         * @param {Function} callback - callback method to execute after AJAX success\r\n         */\r\n        _ajax: function (url, data, elem, callback) {\r\n            $.extend(data, {\r\n                'form_key': $.mage.cookies.get('form_key')\r\n            });\r\n\r\n            $.ajax({\r\n                url: url,\r\n                data: data,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    elem.attr('disabled', 'disabled');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    elem.attr('disabled', null);\r\n                }\r\n            })\r\n                .done(function (response) {\r\n                    var msg;\r\n\r\n                    if (response.success) {\r\n                        callback.call(this, elem, response);\r\n                    } else {\r\n                        msg = response['error_message'];\r\n\r\n                        if (msg) {\r\n                            alert({\r\n                                content: msg\r\n                            });\r\n                        }\r\n                    }\r\n                })\r\n                .fail(function (error) {\r\n                    console.log(JSON.stringify(error));\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Calculate height of minicart list\r\n         *\r\n         * @private\r\n         */\r\n        _calcHeight: function () {\r\n            var self = this,\r\n                height = 0,\r\n                counter = this.options.minicart.maxItemsVisible,\r\n                target = $(this.options.minicart.list),\r\n                outerHeight;\r\n\r\n            self.scrollHeight = 0;\r\n            target.children().each(function () {\r\n\r\n                if ($(this).find('.options').length > 0) {\r\n                    $(this).collapsible();\r\n                }\r\n                outerHeight = $(this).outerHeight(true);\r\n\r\n                if (counter-- > 0) {\r\n                    height += outerHeight;\r\n                }\r\n                self.scrollHeight += outerHeight;\r\n            });\r\n\r\n            target.parent().height(height);\r\n        }\r\n    });\r\n\r\n    return $.mage.sidebar;\r\n});\r\n","Magento_Checkout/js/action/create-billing-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/model/address-converter'\r\n], function (addressConverter) {\r\n    'use strict';\r\n\r\n    return function (addressData) {\r\n        var address = addressConverter.formAddressDataToQuoteAddress(addressData);\r\n\r\n        /**\r\n         * Returns new customer billing address type.\r\n         *\r\n         * @returns {String}\r\n         */\r\n        address.getType = function () {\r\n            return 'new-customer-billing-address';\r\n        };\r\n\r\n        return address;\r\n    };\r\n});\r\n","Magento_Checkout/js/action/create-shipping-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Customer/js/model/address-list',\r\n    'Magento_Checkout/js/model/address-converter'\r\n], function (addressList, addressConverter) {\r\n    'use strict';\r\n\r\n    return function (addressData) {\r\n        var address = addressConverter.formAddressDataToQuoteAddress(addressData),\r\n            isAddressUpdated = addressList().some(function (currentAddress, index, addresses) {\r\n                if (currentAddress.getKey() == address.getKey()) { //eslint-disable-line eqeqeq\r\n                    addresses[index] = address;\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n\r\n        if (!isAddressUpdated) {\r\n            addressList.push(address);\r\n        } else {\r\n            addressList.valueHasMutated();\r\n        }\r\n\r\n        return address;\r\n    };\r\n});\r\n","Magento_Checkout/js/action/get-payment-information.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/url-builder',\r\n    'mage/storage',\r\n    'Magento_Checkout/js/model/error-processor',\r\n    'Magento_Customer/js/model/customer',\r\n    'Magento_Checkout/js/model/payment/method-converter',\r\n    'Magento_Checkout/js/model/payment-service'\r\n], function ($, quote, urlBuilder, storage, errorProcessor, customer, methodConverter, paymentService) {\r\n    'use strict';\r\n\r\n    return function (deferred, messageContainer) {\r\n        var serviceUrl;\r\n\r\n        deferred = deferred || $.Deferred();\r\n\r\n        /**\r\n         * Checkout for guest and registered customer.\r\n         */\r\n        if (!customer.isLoggedIn()) {\r\n            serviceUrl = urlBuilder.createUrl('/guest-carts/:cartId/payment-information', {\r\n                cartId: quote.getQuoteId()\r\n            });\r\n        } else {\r\n            serviceUrl = urlBuilder.createUrl('/carts/mine/payment-information', {});\r\n        }\r\n\r\n        return storage.get(\r\n            serviceUrl, false\r\n        ).done(function (response) {\r\n            quote.setTotals(response.totals);\r\n            paymentService.setPaymentMethods(methodConverter(response['payment_methods']));\r\n            deferred.resolve();\r\n        }).fail(function (response) {\r\n            errorProcessor.process(response, messageContainer);\r\n            deferred.reject();\r\n        });\r\n    };\r\n});\r\n","Magento_Checkout/js/action/get-totals.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    '../model/quote',\r\n    'Magento_Checkout/js/model/resource-url-manager',\r\n    'Magento_Checkout/js/model/error-processor',\r\n    'mage/storage',\r\n    'Magento_Checkout/js/model/totals'\r\n], function ($, quote, resourceUrlManager, errorProcessor, storage, totals) {\r\n    'use strict';\r\n\r\n    return function (callbacks, deferred) {\r\n        deferred = deferred || $.Deferred();\r\n        totals.isLoading(true);\r\n\r\n        return storage.get(\r\n            resourceUrlManager.getUrlForCartTotals(quote),\r\n            false\r\n        ).done(function (response) {\r\n            var proceed = true;\r\n\r\n            totals.isLoading(false);\r\n\r\n            if (callbacks.length > 0) {\r\n                $.each(callbacks, function (index, callback) {\r\n                    proceed = proceed && callback();\r\n                });\r\n            }\r\n\r\n            if (proceed) {\r\n                quote.setTotals(response);\r\n                deferred.resolve();\r\n            }\r\n        }).fail(function (response) {\r\n            totals.isLoading(false);\r\n            deferred.reject();\r\n            errorProcessor.process(response);\r\n        }).always(function () {\r\n            totals.isLoading(false);\r\n        });\r\n    };\r\n});\r\n","Magento_Checkout/js/action/place-order.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/url-builder',\r\n    'Magento_Customer/js/model/customer',\r\n    'Magento_Checkout/js/model/place-order'\r\n], function (quote, urlBuilder, customer, placeOrderService) {\r\n    'use strict';\r\n\r\n    return function (paymentData, messageContainer) {\r\n        var serviceUrl, payload;\r\n\r\n        payload = {\r\n            cartId: quote.getQuoteId(),\r\n            billingAddress: quote.billingAddress(),\r\n            paymentMethod: paymentData\r\n        };\r\n\r\n        if (customer.isLoggedIn()) {\r\n            serviceUrl = urlBuilder.createUrl('/carts/mine/payment-information', {});\r\n        } else {\r\n            serviceUrl = urlBuilder.createUrl('/guest-carts/:quoteId/payment-information', {\r\n                quoteId: quote.getQuoteId()\r\n            });\r\n            payload.email = quote.guestEmail;\r\n        }\r\n\r\n        return placeOrderService(serviceUrl, payload, messageContainer);\r\n    };\r\n});\r\n","Magento_Checkout/js/action/recollect-shipping-rates.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/action/select-shipping-address',\r\n    'Magento_Checkout/js/model/shipping-rate-registry'\r\n], function (quote, selectShippingAddress, rateRegistry) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        var shippingAddress = null;\r\n\r\n        if (!quote.isVirtual()) {\r\n            shippingAddress = quote.shippingAddress();\r\n\r\n            rateRegistry.set(shippingAddress.getCacheKey(), null);\r\n            selectShippingAddress(shippingAddress);\r\n        }\r\n    };\r\n});\r\n","Magento_Checkout/js/action/redirect-on-success.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(\r\n    [\r\n        'mage/url',\r\n        'Magento_Checkout/js/model/full-screen-loader'\r\n    ],\r\n    function (url, fullScreenLoader) {\r\n        'use strict';\r\n\r\n        return {\r\n            redirectUrl: window.checkoutConfig.defaultSuccessPageUrl,\r\n\r\n            /**\r\n             * Provide redirect to page\r\n             */\r\n            execute: function () {\r\n                fullScreenLoader.startLoader();\r\n                this.redirectToSuccessPage();\r\n            },\r\n\r\n            /**\r\n             * Redirect to success page.\r\n             */\r\n            redirectToSuccessPage: function () {\r\n                window.location.replace(url.build(this.redirectUrl));\r\n            }\r\n        };\r\n    }\r\n);\r\n","Magento_Checkout/js/action/select-billing-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    '../model/quote'\r\n], function ($, quote) {\r\n    'use strict';\r\n\r\n    return function (billingAddress) {\r\n        var address = null;\r\n\r\n        if (quote.shippingAddress() && billingAddress.getCacheKey() == //eslint-disable-line eqeqeq\r\n            quote.shippingAddress().getCacheKey()\r\n        ) {\r\n            address = $.extend(true, {}, billingAddress);\r\n            address.saveInAddressBook = null;\r\n        } else {\r\n            address = billingAddress;\r\n        }\r\n        quote.billingAddress(address);\r\n    };\r\n});\r\n","Magento_Checkout/js/action/select-payment-method.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/model/quote'\r\n], function (quote) {\r\n    'use strict';\r\n\r\n    return function (paymentMethod) {\r\n        if (paymentMethod) {\r\n            paymentMethod.__disableTmpl = {\r\n                title: true\r\n            };\r\n        }\r\n        quote.paymentMethod(paymentMethod);\r\n    };\r\n});\r\n","Magento_Checkout/js/action/select-shipping-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/model/quote'\r\n], function (quote) {\r\n    'use strict';\r\n\r\n    return function (shippingAddress) {\r\n        quote.shippingAddress(shippingAddress);\r\n    };\r\n});\r\n","Magento_Checkout/js/action/select-shipping-method.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    '../model/quote'\r\n], function (quote) {\r\n    'use strict';\r\n\r\n    return function (shippingMethod) {\r\n        quote.shippingMethod(shippingMethod);\r\n    };\r\n});\r\n","Magento_Checkout/js/action/set-billing-address.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'Magento_Checkout/js/model/quote',\r\n        'Magento_Checkout/js/model/url-builder',\r\n        'mage/storage',\r\n        'Magento_Checkout/js/model/error-processor',\r\n        'Magento_Customer/js/model/customer',\r\n        'Magento_Checkout/js/model/full-screen-loader',\r\n        'Magento_Checkout/js/action/get-payment-information'\r\n    ],\r\n    function ($,\r\n              quote,\r\n              urlBuilder,\r\n              storage,\r\n              errorProcessor,\r\n              customer,\r\n              fullScreenLoader,\r\n              getPaymentInformationAction\r\n    ) {\r\n        'use strict';\r\n\r\n        return function (messageContainer) {\r\n            var serviceUrl,\r\n                payload;\r\n\r\n            /**\r\n             * Checkout for guest and registered customer.\r\n             */\r\n            if (!customer.isLoggedIn()) {\r\n                serviceUrl = urlBuilder.createUrl('/guest-carts/:cartId/billing-address', {\r\n                    cartId: quote.getQuoteId()\r\n                });\r\n                payload = {\r\n                    cartId: quote.getQuoteId(),\r\n                    address: quote.billingAddress()\r\n                };\r\n            } else {\r\n                serviceUrl = urlBuilder.createUrl('/carts/mine/billing-address', {});\r\n                payload = {\r\n                    cartId: quote.getQuoteId(),\r\n                    address: quote.billingAddress()\r\n                };\r\n            }\r\n\r\n            fullScreenLoader.startLoader();\r\n\r\n            return storage.post(\r\n                serviceUrl, JSON.stringify(payload)\r\n            ).done(\r\n                function () {\r\n                    var deferred = $.Deferred();\r\n\r\n                    getPaymentInformationAction(deferred);\r\n                    $.when(deferred).done(function () {\r\n                        fullScreenLoader.stopLoader();\r\n                    });\r\n                }\r\n            ).fail(\r\n                function (response) {\r\n                    errorProcessor.process(response, messageContainer);\r\n                    fullScreenLoader.stopLoader();\r\n                }\r\n            );\r\n        };\r\n    }\r\n);\r\n","Magento_Checkout/js/action/set-payment-information-extended.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/model/quote',\r\n    'Magento_Checkout/js/model/url-builder',\r\n    'mage/storage',\r\n    'Magento_Checkout/js/model/error-processor',\r\n    'Magento_Customer/js/model/customer',\r\n    'Magento_Checkout/js/action/get-totals',\r\n    'Magento_Checkout/js/model/full-screen-loader',\r\n    'underscore',\r\n    'Magento_Checkout/js/model/payment/place-order-hooks'\r\n], function (quote, urlBuilder, storage, errorProcessor, customer, getTotalsAction, fullScreenLoader, _, hooks) {\r\n    'use strict';\r\n\r\n    /**\r\n     * Filter template data.\r\n     *\r\n     * @param {Object|Array} data\r\n     */\r\n    var filterTemplateData = function (data) {\r\n        return _.each(data, function (value, key, list) {\r\n            if (_.isArray(value) || _.isObject(value)) {\r\n                list[key] = filterTemplateData(value);\r\n            }\r\n\r\n            if (key === '__disableTmpl' || key === 'title') {\r\n                delete list[key];\r\n            }\r\n        });\r\n    };\r\n\r\n    return function (messageContainer, paymentData, skipBilling) {\r\n        var serviceUrl,\r\n            payload,\r\n            headers = {};\r\n\r\n        paymentData = filterTemplateData(paymentData);\r\n        skipBilling = skipBilling || false;\r\n        payload = {\r\n            cartId: quote.getQuoteId(),\r\n            paymentMethod: paymentData\r\n        };\r\n\r\n        /**\r\n         * Checkout for guest and registered customer.\r\n         */\r\n        if (!customer.isLoggedIn()) {\r\n            serviceUrl = urlBuilder.createUrl('/guest-carts/:cartId/set-payment-information', {\r\n                cartId: quote.getQuoteId()\r\n            });\r\n            payload.email = quote.guestEmail;\r\n        } else {\r\n            serviceUrl = urlBuilder.createUrl('/carts/mine/set-payment-information', {});\r\n        }\r\n\r\n        if (skipBilling === false) {\r\n            payload.billingAddress = quote.billingAddress();\r\n        }\r\n\r\n        fullScreenLoader.startLoader();\r\n\r\n        _.each(hooks.requestModifiers, function (modifier) {\r\n            modifier(headers, payload);\r\n        });\r\n\r\n        return storage.post(\r\n            serviceUrl, JSON.stringify(payload), true, 'application/json', headers\r\n        ).fail(\r\n            function (response) {\r\n                errorProcessor.process(response, messageContainer);\r\n            }\r\n        ).always(\r\n            function () {\r\n                fullScreenLoader.stopLoader();\r\n                _.each(hooks.afterRequestListeners, function (listener) {\r\n                    listener();\r\n                });\r\n            }\r\n        );\r\n    };\r\n});\r\n","Magento_Checkout/js/action/set-payment-information.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'Magento_Checkout/js/action/set-payment-information-extended'\r\n\r\n], function (setPaymentInformationExtended) {\r\n    'use strict';\r\n\r\n    return function (messageContainer, paymentData) {\r\n\r\n        return setPaymentInformationExtended(messageContainer, paymentData, false);\r\n    };\r\n});\r\n","Magento_Checkout/js/action/set-shipping-information.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    '../model/quote',\r\n    'Magento_Checkout/js/model/shipping-save-processor'\r\n], function (quote, shippingSaveProcessor) {\r\n    'use strict';\r\n\r\n    return function () {\r\n        return shippingSaveProcessor.saveShippingInformation(quote.shippingAddress().getType());\r\n    };\r\n});\r\n","Magento_Checkout/js/action/update-shopping-cart.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'Magento_Ui/js/modal/alert',\r\n    'Magento_Ui/js/modal/confirm',\r\n    'jquery',\r\n    'mage/translate',\r\n    'jquery-ui-modules/widget',\r\n    'mage/validation'\r\n], function (alert, confirm, $, $t) {\r\n    'use strict';\r\n\r\n    $.widget('mage.updateShoppingCart', {\r\n        options: {\r\n            validationURL: '',\r\n            eventName: 'updateCartItemQty',\r\n            updateCartActionContainer: '',\r\n            isCartHasUpdatedContent: false\r\n        },\r\n\r\n        /** @inheritdoc */\r\n        _create: function () {\r\n            this._on(this.element, {\r\n                'submit': this.onSubmit\r\n            });\r\n            this._on('[data-role=cart-item-qty]', {\r\n                'change': function () {\r\n                    this.isCartHasUpdatedContent = true;\r\n                }\r\n            });\r\n            this._on('ul.pages-items', {\r\n                'click a': function (event) {\r\n                    if (this.isCartHasUpdatedContent) {\r\n                        event.preventDefault();\r\n                        this.changePageConfirm($(event.currentTarget).attr('href'));\r\n                    }\r\n                }\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Show the confirmation popup\r\n         * @param nextPageUrl\r\n         */\r\n        changePageConfirm: function (nextPageUrl) {\r\n            confirm({\r\n                title: $t('Are you sure you want to leave the page?'),\r\n                content: $t('Changes you made to the cart will not be saved.'),\r\n                actions: {\r\n                    confirm: function () {\r\n                        window.location.href = nextPageUrl;\r\n                    }\r\n                },\r\n                buttons: [{\r\n                    text: $t('Cancel'),\r\n                    class: 'action-secondary action-dismiss',\r\n                    click: function (event) {\r\n                        this.closeModal(event);\r\n                    }\r\n                }, {\r\n                    text: $t('Leave'),\r\n                    class: 'action-primary action-accept',\r\n                    click: function (event) {\r\n                        this.closeModal(event, true);\r\n                    }\r\n                }]\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Prevents default submit action and calls form validator.\r\n         *\r\n         * @param {Event} event\r\n         * @return {Boolean}\r\n         */\r\n        onSubmit: function (event) {\r\n            var action = this.element.find(this.options.updateCartActionContainer).val();\r\n\r\n            if (!this.options.validationURL || action === 'empty_cart') {\r\n                return true;\r\n            }\r\n\r\n            if (this.isValid()) {\r\n                event.preventDefault();\r\n                this.validateItems(this.options.validationURL, this.element.serialize());\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        /**\r\n         * Validates requested form.\r\n         *\r\n         * @return {Boolean}\r\n         */\r\n        isValid: function () {\r\n            return this.element.validation() && this.element.validation('isValid');\r\n        },\r\n\r\n        /**\r\n         * Validates updated shopping cart data.\r\n         *\r\n         * @param {String} url - request url\r\n         * @param {Object} data - post data for ajax call\r\n         */\r\n        validateItems: function (url, data) {\r\n            $.extend(data, {\r\n                'form_key': $.mage.cookies.get('form_key')\r\n            });\r\n\r\n            $.ajax({\r\n                url: url,\r\n                data: data,\r\n                type: 'post',\r\n                dataType: 'json',\r\n                context: this,\r\n\r\n                /** @inheritdoc */\r\n                beforeSend: function () {\r\n                    $(document.body).trigger('processStart');\r\n                },\r\n\r\n                /** @inheritdoc */\r\n                complete: function () {\r\n                    $(document.body).trigger('processStop');\r\n                }\r\n            })\r\n                .done(function (response) {\r\n                    if (response.success) {\r\n                        this.onSuccess();\r\n                    } else {\r\n                        this.onError(response);\r\n                    }\r\n                })\r\n                .fail(function () {\r\n                    this.submitForm();\r\n                });\r\n        },\r\n\r\n        /**\r\n         * Form validation succeed.\r\n         */\r\n        onSuccess: function () {\r\n            $(document).trigger('ajax:' + this.options.eventName);\r\n            this.submitForm();\r\n        },\r\n\r\n        /**\r\n         * Form validation failed.\r\n         */\r\n        onError: function (response) {\r\n            var that = this,\r\n                elm,\r\n                responseData = [];\r\n\r\n            try {\r\n                responseData = JSON.parse(response['error_message']);\r\n            } catch (error) {\r\n            }\r\n\r\n            if (response['error_message']) {\r\n                try {\r\n                    $.each(responseData, function (index, data) {\r\n\r\n                        if (data.itemId !== undefined) {\r\n                            elm = $('#cart-' + data.itemId + '-qty');\r\n                            elm.val(elm.attr('data-item-qty'));\r\n                        }\r\n                        response['error_message'] = data.error;\r\n                    });\r\n                } catch (e) {}\r\n                alert({\r\n                    content: response['error_message'],\r\n                    actions: {\r\n                        /** @inheritdoc */\r\n                        always: function () {\r\n                            that.submitForm();\r\n                        }\r\n                    }\r\n                });\r\n            } else {\r\n                this.submitForm();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Real submit of validated form.\r\n         */\r\n        submitForm: function () {\r\n            this.element\r\n                .off('submit', this.onSubmit)\r\n                .on('submit', function () {\r\n                    $(document.body).trigger('processStart');\r\n                })\r\n                .trigger('submit');\r\n        }\r\n    });\r\n\r\n    return $.mage.updateShoppingCart;\r\n});\r\n","Magento_Checkout/js/model/address-converter.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n/**\r\n * @api\r\n */\r\ndefine([\r\n    'jquery',\r\n    'Magento_Checkout/js/model/new-customer-address',\r\n    'Magento_Customer/js/customer-data',\r\n    'mage/utils/objects',\r\n    'underscore'\r\n], function ($, address, customerData, mageUtils, _) {\r\n    'use strict';\r\n\r\n    var countryData = customerData.get('directory-data');\r\n\r\n    return {\r\n        /**\r\n         * Convert address form data to Address object\r\n         *\r\n         * @param {Object} formData\r\n         * @returns {Object}\r\n         */\r\n        formAddressDataToQuoteAddress: function (formData) {\r\n            // clone address form data to new object\r\n            var addressData = $.extend(true, {}, formData),\r\n                region,\r\n                regionName = addressData.region,\r\n                customAttributes;\r\n\r\n            if (mageUtils.isObject(addressData.street)) {\r\n                addressData.street = this.objectToArray(addressData.street);\r\n            }\r\n\r\n            addressData.region = {\r\n                'region_id': addressData['region_id'],\r\n                'region_code': addressData['region_code'],\r\n                region: regionName\r\n            };\r\n\r\n            if (addressData['region_id'] &&\r\n                countryData()[addressData['country_id']] &&\r\n                countryData()[addressData['country_id']].regions\r\n            ) {\r\n                region = countryData()[addressData['country_id']].regions[addressData['region_id']];\r\n\r\n                if (region) {\r\n                    addressData.region['region_id'] = addressData['region_id'];\r\n                    addressData.region['region_code'] = region.code;\r\n                    addressData.region.region = region.name;\r\n                }\r\n            } else if (\r\n                !addressData['region_id'] &&\r\n                countryData()[addressData['country_id']] &&\r\n                countryData()[addressData['country_id']].regions\r\n            ) {\r\n                addressData.region['region_code'] = '';\r\n                addressData.region.region = '';\r\n            }\r\n            delete addressData['region_id'];\r\n\r\n            if (addressData['custom_attributes']) {\r\n                addressData['custom_attributes'] = _.map(\r\n                    addressData['custom_attributes'],\r\n                    function (value, key) {\r\n                        customAttributes = {\r\n                            'attribute_code': key,\r\n                            'value': value\r\n                        };\r\n\r\n                        if (typeof value === 'boolean') {\r\n                            customAttributes = {\r\n                                'attribute_code': key,\r\n                                'value': value,\r\n                                'label': value === true ? 'Yes' : 'No'\r\n                            };\r\n                        }\r\n\r\n                        return customAttributes;\r\n                    }\r\n                );\r\n            }\r\n\r\n            return address(addressData);\r\n        },\r\n\r\n        /**\r\n         * Convert Address object to address form data.\r\n         *\r\n         * @param {Object} addrs\r\n         * @returns {Object}\r\n         */\r\n        quoteAddressToFormAddressData: function (addrs) {\r\n            var self = this,\r\n                output = {},\r\n                streetObject,\r\n                customAttributesObject;\r\n\r\n            $.each(addrs, function (key) {\r\n                if (addrs.hasOwnProperty(key) && typeof addrs[key] !== 'function') {\r\n                    output[self.toUnderscore(key)] = addrs[key];\r\n                }\r\n            });\r\n\r\n            if (Array.isArray(addrs.street)) {\r\n                streetObject = {};\r\n                addrs.street.forEach(function (value, index) {\r\n                    streetObject[index] = value;\r\n                });\r\n                output.street = streetObject;\r\n            }\r\n\r\n            //jscs:disable requireCamelCaseOrUpperCaseIdentifiers\r\n            if (Array.isArray(addrs.customAttributes)) {\r\n                customAttributesObject = {};\r\n                addrs.customAttributes.forEach(function (value) {\r\n                    customAttributesObject[value.attribute_code] = value.value;\r\n                });\r\n                output.custom_attributes = customAttributesObject;\r\n            }\r\n            //jscs:enable requireCamelCaseOrUpperCaseIdentifiers\r\n\r\n            return output;\r\n        },\r\n\r\n        /**\r\n         * @param {String} string\r\n         */\r\n        toUnderscore: function (string) {\r\n            return string.replace(/([A-Z])/g, function ($1) {\r\n                return '_' + $1.toLowerCase();\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} formProviderData\r\n         * @param {String} formIndex\r\n         * @return {Object}\r\n         */\r\n        formDataProviderToFlatData: function (formProviderData, formIndex) {\r\n            var addressData = {};\r\n\r\n            $.each(formProviderData, function (path, value) {\r\n                var pathComponents = path.split('.'),\r\n                    dataObject = {};\r\n\r\n                pathComponents.splice(pathComponents.indexOf(formIndex), 1);\r\n                pathComponents.reverse();\r\n                $.each(pathComponents, function (index, pathPart) {\r\n                    var parent = {};\r\n\r\n                    if (index == 0) { //eslint-disable-line eqeqeq\r\n                        dataObject[pathPart] = value;\r\n                    } else {\r\n                        parent[pathPart] = dataObject;\r\n                        dataObject = parent;\r\n                    }\r\n                });\r\n                $.extend(true, addressData, dataObject);\r\n            });\r\n\r\n            return addressData;\r\n        },\r\n\r\n        /**\r\n         * Convert object to array\r\n         * @param {Object} object\r\n         * @returns {Array}\r\n         */\r\n        objectToArray: function (object) {\r\n            var convertedArray = [];\r\n\r\n            $.each(object, function (key) {\r\n                return typeof object[key] === 'string' ? convertedArray.push(object[key]) : false;\r\n            });\r\n\r\n            return convertedArray.slice(0);\r\n        },\r\n\r\n        /**\r\n         * @param {Object} addrs\r\n         * @return {*|Object}\r\n         */\r\n        addressToEstimationAddress: function (addrs) {\r\n            var self = this,\r\n                estimatedAddressData = {};\r\n\r\n            $.each(addrs, function (key) {\r\n                estimatedAddressData[self.toUnderscore(key)] = addrs[key];\r\n            });\r\n\r\n            return this.formAddressDataToQuoteAddress(estimatedAddressData);\r\n        }\r\n    };\r\n});\r\n","Magento_Checkout/js/model/authentication-messages.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n    'ko',\r\n    'Magento_Ui/js/model/messages'\r\n], function (ko, Messages) {\r\n    'use strict';\r\n\r\n    return new Messages();\r\n});\r\n","Magento_Checkout/js/model/billing-address-postcode-validator.js":"/**\r\n * Copyright \u00a9 Magento, Inc. All rights reserved.\r\n * See COPYING.txt for license details.\r\n */\r\n\r\ndefine([\r\n           'jquery',\r\n           'Magento_Checkout/js/model/postcode-validator',\r\n           'mage/translate',\r\n           'uiRegistry'\r\n       ], function (\r\n    $,\r\n    postcodeValidator,\r\n    $t,\r\n    uiRegistry\r\n) {\r\n    'use strict';\r\n\r\n    var postcodeElementName = 'postcode';\r\n\r\n    return {\r\n        validateZipCodeTimeout: 0,\r\n        validateDelay: 2000,\r\n\r\n        /**\r\n         * Perform postponed binding for fieldset elements\r\n         *\r\n         * @param {String} formPath\r\n         */\r\n        initFields: function (formPath) {\r\n            var self = this;\r\n\r\n            uiRegistry.async(formPath + '.' + postcodeElementName)(self.bindHandler.bind(self));\r\n        },\r\n\r\n        /**\r\n         * @param {Object} element\r\n         * @param {Number} delay\r\n         */\r\n        bindHandler: function (element, delay) {\r\n            var self = this;\r\n\r\n            delay = typeof delay === 'undefined' ? self.validateDelay : delay;\r\n\r\n            element.on('value', function () {\r\n                clearTimeout(self.validateZipCodeTimeout);\r\n                self.validateZipCodeTimeout = setTimeout(function () {\r\n                    self.postcodeValidation(element);\r\n                }, delay);\r\n            });\r\n        },\r\n\r\n        /**\r\n         * @param {Object} postcodeElement\r\n         * @return {*}\r\n         */\r\n        postcodeValidation: function (postcodeElement) {\r\n            var countryId = $('select[name=\"country_id\"]:visible').val(),\r\n                validationResult,\r\n                warnMessage;\r\n\r\n            if (postcodeElement == null || postcodeElement.value() == null) {\r\n                return true;\r\n            }\r\n\r\n            postcodeElement.warn(null);\r\n            validationResult = postcodeValidator.validate(postcodeElement.value(), countryId);\r\n\r\n            if (!validationResult) {\r\n                warnMessage = $t('Provided Zip/Postal Code seems to be invalid.');\r\n\r\n                if (postcodeValidator.validatedPostCodeExample.length) {\r\n                    warnMessage += $t(' Example: ') + postcodeValidator.validatedPostCodeExample.join('; ') + '. ';\r\n                }\r\n                warnMessage += $t('If you believe it is the right one you can ignore this notice.');\r\n                postcodeElement.warn(warnMessage);\r\n            }\r\n\r\n            return validationResult;\r\n        }\r\n    };\r\n});\r\n"}
}});
